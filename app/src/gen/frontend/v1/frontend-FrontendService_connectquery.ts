// @generated by protoc-gen-connect-query v1.4.2 with parameter "target=ts"
// @generated from file frontend/v1/frontend.proto (package frontend.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { MethodKind } from "@bufbuild/protobuf";
import { CreateUserRequest, CreateUserResponse, GetUserResponse, ListUsersRequest, ListUsersResponse, UpdateUserRequest, UpdateUserResponse, WhoAmIRequest, WhoAmIResponse } from "./frontend_pb.js";
import { ResourceIdRequest } from "../../openauth/v1/openauth_pb.js";

/**
 * Creates a user.
 *
 * @generated from rpc frontend.v1.FrontendService.CreateUser
 */
export const createUser = {
  localName: "createUser",
  name: "CreateUser",
  kind: MethodKind.Unary,
  I: CreateUserRequest,
  O: CreateUserResponse,
  service: {
    typeName: "frontend.v1.FrontendService"
  }
} as const;

/**
 * Gets a user.
 *
 * @generated from rpc frontend.v1.FrontendService.GetUser
 */
export const getUser = {
  localName: "getUser",
  name: "GetUser",
  kind: MethodKind.Unary,
  I: ResourceIdRequest,
  O: GetUserResponse,
  service: {
    typeName: "frontend.v1.FrontendService"
  }
} as const;

/**
 * Gets a list of users.
 *
 * @generated from rpc frontend.v1.FrontendService.ListUsers
 */
export const listUsers = {
  localName: "listUsers",
  name: "ListUsers",
  kind: MethodKind.Unary,
  I: ListUsersRequest,
  O: ListUsersResponse,
  service: {
    typeName: "frontend.v1.FrontendService"
  }
} as const;

/**
 * Updates a user.
 *
 * @generated from rpc frontend.v1.FrontendService.UpdateUser
 */
export const updateUser = {
  localName: "updateUser",
  name: "UpdateUser",
  kind: MethodKind.Unary,
  I: UpdateUserRequest,
  O: UpdateUserResponse,
  service: {
    typeName: "frontend.v1.FrontendService"
  }
} as const;

/**
 * Who am I?
 *
 * @generated from rpc frontend.v1.FrontendService.WhoAmI
 */
export const whoAmI = {
  localName: "whoAmI",
  name: "WhoAmI",
  kind: MethodKind.Unary,
  I: WhoAmIRequest,
  O: WhoAmIResponse,
  service: {
    typeName: "frontend.v1.FrontendService"
  }
} as const;
