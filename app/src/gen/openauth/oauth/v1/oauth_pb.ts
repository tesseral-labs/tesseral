// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file openauth/oauth/v1/oauth.proto (package openauth.oauth.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, Struct } from "@bufbuild/protobuf";

/**
 * @generated from message openauth.oauth.v1.SessionSigningKey
 */
export class SessionSigningKey extends Message<SessionSigningKey> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string project_id = 2;
   */
  projectId = "";

  /**
   * @generated from field: google.protobuf.Struct public_key_jwk = 3;
   */
  publicKeyJwk?: Struct;

  constructor(data?: PartialMessage<SessionSigningKey>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "openauth.oauth.v1.SessionSigningKey";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "project_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "public_key_jwk", kind: "message", T: Struct },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SessionSigningKey {
    return new SessionSigningKey().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SessionSigningKey {
    return new SessionSigningKey().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SessionSigningKey {
    return new SessionSigningKey().fromJsonString(jsonString, options);
  }

  static equals(a: SessionSigningKey | PlainMessage<SessionSigningKey> | undefined, b: SessionSigningKey | PlainMessage<SessionSigningKey> | undefined): boolean {
    return proto3.util.equals(SessionSigningKey, a, b);
  }
}

