// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file openauth/v1/openauth.proto (package openauth.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64, Struct } from "@bufbuild/protobuf";

/**
 * @generated from message openauth.v1.Organization
 */
export class Organization extends Message<Organization> {
  /**
   * Unique identifier for this organization.
   *
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * The project this organization belongs to.
   *
   * @generated from field: string project_id = 2;
   */
  projectId = "";

  /**
   * An optional human-friendly name for this organization.
   *
   * @generated from field: string display_name = 3;
   */
  displayName = "";

  /**
   * Override setting for whether login with password is enabled.
   *
   * @generated from field: bool override_log_in_with_password_enabled = 4;
   */
  overrideLogInWithPasswordEnabled = false;

  /**
   * Override setting for whether login with Google is enabled.
   *
   * @generated from field: bool override_log_in_with_google_enabled = 5;
   */
  overrideLogInWithGoogleEnabled = false;

  /**
   * Override setting for whether login with Microsoft is enabled.
   *
   * @generated from field: bool override_log_in_with_microsoft_enabled = 6;
   */
  overrideLogInWithMicrosoftEnabled = false;

  /**
   * Google hosted domain.
   *
   * @generated from field: string google_hosted_domain = 7;
   */
  googleHostedDomain = "";

  /**
   * The tenant ID for Microsoft auth.
   *
   * @generated from field: string microsoft_tenant_id = 8;
   */
  microsoftTenantId = "";

  constructor(data?: PartialMessage<Organization>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "openauth.v1.Organization";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "project_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "display_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "override_log_in_with_password_enabled", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 5, name: "override_log_in_with_google_enabled", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 6, name: "override_log_in_with_microsoft_enabled", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 7, name: "google_hosted_domain", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "microsoft_tenant_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Organization {
    return new Organization().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Organization {
    return new Organization().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Organization {
    return new Organization().fromJsonString(jsonString, options);
  }

  static equals(a: Organization | PlainMessage<Organization> | undefined, b: Organization | PlainMessage<Organization> | undefined): boolean {
    return proto3.util.equals(Organization, a, b);
  }
}

/**
 * @generated from message openauth.v1.Project
 */
export class Project extends Message<Project> {
  /**
   * Unique identifier for this project.
   *
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * The organization this project belongs to.
   *
   * @generated from field: string organization_id = 2;
   */
  organizationId = "";

  /**
   * Top-level setting for whether login with password is enabled (inherited by organizations by default).
   *
   * @generated from field: bool log_in_with_password_enabled = 3;
   */
  logInWithPasswordEnabled = false;

  /**
   * Top-level setting for whether login with Google is enabled (inherited by organizations by default).
   *
   * @generated from field: bool log_in_with_google_enabled = 4;
   */
  logInWithGoogleEnabled = false;

  /**
   * Top-level setting for whether login with Microsoft is enabled (inherited by organizations by default).
   *
   * @generated from field: bool log_in_with_microsoft_enabled = 5;
   */
  logInWithMicrosoftEnabled = false;

  /**
   * The oAuth Client ID to be used for Google Auth.
   *
   * @generated from field: string google_oauth_client_id = 6;
   */
  googleOauthClientId = "";

  /**
   * The oAuth Client secret to be used for Google Auth.
   *
   * @generated from field: string google_oauth_client_secret = 7;
   */
  googleOauthClientSecret = "";

  /**
   * The oAuth Client ID to be used for Microsoft Auth.
   *
   * @generated from field: string microsoft_oauth_client_id = 8;
   */
  microsoftOauthClientId = "";

  /**
   * The oAuth Client secret to be used for Microsoft Auth.
   *
   * @generated from field: string microsoft_oauth_client_secret = 9;
   */
  microsoftOauthClientSecret = "";

  constructor(data?: PartialMessage<Project>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "openauth.v1.Project";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "organization_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "log_in_with_password_enabled", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "log_in_with_google_enabled", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 5, name: "log_in_with_microsoft_enabled", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 6, name: "google_oauth_client_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "google_oauth_client_secret", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "microsoft_oauth_client_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 9, name: "microsoft_oauth_client_secret", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Project {
    return new Project().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Project {
    return new Project().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Project {
    return new Project().fromJsonString(jsonString, options);
  }

  static equals(a: Project | PlainMessage<Project> | undefined, b: Project | PlainMessage<Project> | undefined): boolean {
    return proto3.util.equals(Project, a, b);
  }
}

/**
 * @generated from message openauth.v1.SessionSigningKey
 */
export class SessionSigningKey extends Message<SessionSigningKey> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string project_id = 2;
   */
  projectId = "";

  /**
   * @generated from field: google.protobuf.Struct public_key_jwk = 3;
   */
  publicKeyJwk?: Struct;

  constructor(data?: PartialMessage<SessionSigningKey>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "openauth.v1.SessionSigningKey";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "project_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "public_key_jwk", kind: "message", T: Struct },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SessionSigningKey {
    return new SessionSigningKey().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SessionSigningKey {
    return new SessionSigningKey().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SessionSigningKey {
    return new SessionSigningKey().fromJsonString(jsonString, options);
  }

  static equals(a: SessionSigningKey | PlainMessage<SessionSigningKey> | undefined, b: SessionSigningKey | PlainMessage<SessionSigningKey> | undefined): boolean {
    return proto3.util.equals(SessionSigningKey, a, b);
  }
}

/**
 * @generated from message openauth.v1.SessionClaims
 */
export class SessionClaims extends Message<SessionClaims> {
  /**
   * The organization ID the session is scoped to.
   *
   * @generated from field: string organization_id = 1;
   */
  organizationId = "";

  /**
   * The user_id associated with the session.
   *
   * @generated from field: string user_id = 2;
   */
  userId = "";

  /**
   * The time the session expires.
   *
   * @generated from field: int64 expires_at = 3;
   */
  expiresAt = protoInt64.zero;

  /**
   * The time the session was issued.
   *
   * @generated from field: int64 issued_at = 4;
   */
  issuedAt = protoInt64.zero;

  /**
   * The subject of the session.
   *
   * @generated from field: string subject = 5;
   */
  subject = "";

  constructor(data?: PartialMessage<SessionClaims>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "openauth.v1.SessionClaims";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "organization_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "user_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "expires_at", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "issued_at", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 5, name: "subject", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SessionClaims {
    return new SessionClaims().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SessionClaims {
    return new SessionClaims().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SessionClaims {
    return new SessionClaims().fromJsonString(jsonString, options);
  }

  static equals(a: SessionClaims | PlainMessage<SessionClaims> | undefined, b: SessionClaims | PlainMessage<SessionClaims> | undefined): boolean {
    return proto3.util.equals(SessionClaims, a, b);
  }
}

/**
 * @generated from message openauth.v1.User
 */
export class User extends Message<User> {
  /**
   * Unique identifier for this user.
   *
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * The organization this user belongs to.
   *
   * @generated from field: string organization_id = 2;
   */
  organizationId = "";

  /**
   * The user's email (pending verification).
   *
   * @generated from field: string unverified_email = 3;
   */
  unverifiedEmail = "";

  /**
   * The user's email (after verification).
   *
   * @generated from field: string verified_email = 4;
   */
  verifiedEmail = "";

  /**
   * The hash of the user's password.
   *
   * @generated from field: string password_bcrypt = 5;
   */
  passwordBcrypt = "";

  /**
   * The user's Google User ID.
   *
   * @generated from field: string google_user_id = 6;
   */
  googleUserId = "";

  /**
   * The user's Microsoft User ID.
   *
   * @generated from field: string microsoft_user_id = 7;
   */
  microsoftUserId = "";

  constructor(data?: PartialMessage<User>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "openauth.v1.User";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "organization_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "unverified_email", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "verified_email", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "password_bcrypt", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "google_user_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "microsoft_user_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): User {
    return new User().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): User {
    return new User().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): User {
    return new User().fromJsonString(jsonString, options);
  }

  static equals(a: User | PlainMessage<User> | undefined, b: User | PlainMessage<User> | undefined): boolean {
    return proto3.util.equals(User, a, b);
  }
}

