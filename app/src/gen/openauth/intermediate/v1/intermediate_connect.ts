// @generated by protoc-gen-connect-es v1.6.1 with parameter "target=ts"
// @generated from file openauth/intermediate/v1/intermediate.proto (package openauth.intermediate.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { CreateOrganizationRequest, CreateOrganizationResponse, GetGoogleOAuthRedirectURLRequest, GetGoogleOAuthRedirectURLResponse, GetMicrosoftOAuthRedirectURLRequest, GetMicrosoftOAuthRedirectURLResponse, IssueEmailVerificationChallengeRequest, IssueEmailVerificationChallengeResponse, ListOrganizationsRequest, ListOrganizationsResponse, RedeemGoogleOAuthCodeRequest, RedeemGoogleOAuthCodeResponse, RedeemMicrosoftOAuthCodeRequest, RedeemMicrosoftOAuthCodeResponse, SignInWithEmailRequest, SignInWithEmailResponse, VerifyEmailChallengeRequest, VerifyEmailChallengeResponse, WhoamiRequest, WhoamiResponse } from "./intermediate_pb.js";
import { MethodKind } from "@bufbuild/protobuf";

/**
 * @generated from service openauth.intermediate.v1.IntermediateService
 */
export const IntermediateService = {
  typeName: "openauth.intermediate.v1.IntermediateService",
  methods: {
    /**
     * @generated from rpc openauth.intermediate.v1.IntermediateService.Whoami
     */
    whoami: {
      name: "Whoami",
      I: WhoamiRequest,
      O: WhoamiResponse,
      kind: MethodKind.Unary,
    },
    /**
     * @generated from rpc openauth.intermediate.v1.IntermediateService.GetGoogleOAuthRedirectURL
     */
    getGoogleOAuthRedirectURL: {
      name: "GetGoogleOAuthRedirectURL",
      I: GetGoogleOAuthRedirectURLRequest,
      O: GetGoogleOAuthRedirectURLResponse,
      kind: MethodKind.Unary,
    },
    /**
     * @generated from rpc openauth.intermediate.v1.IntermediateService.RedeemGoogleOAuthCode
     */
    redeemGoogleOAuthCode: {
      name: "RedeemGoogleOAuthCode",
      I: RedeemGoogleOAuthCodeRequest,
      O: RedeemGoogleOAuthCodeResponse,
      kind: MethodKind.Unary,
    },
    /**
     * @generated from rpc openauth.intermediate.v1.IntermediateService.GetMicrosoftOAuthRedirectURL
     */
    getMicrosoftOAuthRedirectURL: {
      name: "GetMicrosoftOAuthRedirectURL",
      I: GetMicrosoftOAuthRedirectURLRequest,
      O: GetMicrosoftOAuthRedirectURLResponse,
      kind: MethodKind.Unary,
    },
    /**
     * @generated from rpc openauth.intermediate.v1.IntermediateService.RedeemMicrosoftOAuthCode
     */
    redeemMicrosoftOAuthCode: {
      name: "RedeemMicrosoftOAuthCode",
      I: RedeemMicrosoftOAuthCodeRequest,
      O: RedeemMicrosoftOAuthCodeResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Creates a new organization.
     *
     * @generated from rpc openauth.intermediate.v1.IntermediateService.CreateOrganization
     */
    createOrganization: {
      name: "CreateOrganization",
      I: CreateOrganizationRequest,
      O: CreateOrganizationResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Issues a new email verification challenge.
     *
     * @generated from rpc openauth.intermediate.v1.IntermediateService.IssueEmailVerificationChallenge
     */
    issueEmailVerificationChallenge: {
      name: "IssueEmailVerificationChallenge",
      I: IssueEmailVerificationChallengeRequest,
      O: IssueEmailVerificationChallengeResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Gets a list of organizations.
     *
     * @generated from rpc openauth.intermediate.v1.IntermediateService.ListOrganizations
     */
    listOrganizations: {
      name: "ListOrganizations",
      I: ListOrganizationsRequest,
      O: ListOrganizationsResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Creates a new intermediate session or session and cookies the requester.
     *
     * @generated from rpc openauth.intermediate.v1.IntermediateService.SignInWithEmail
     */
    signInWithEmail: {
      name: "SignInWithEmail",
      I: SignInWithEmailRequest,
      O: SignInWithEmailResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Submits a challenge for verification of email address.
     *
     * @generated from rpc openauth.intermediate.v1.IntermediateService.VerifyEmailChallenge
     */
    verifyEmailChallenge: {
      name: "VerifyEmailChallenge",
      I: VerifyEmailChallengeRequest,
      O: VerifyEmailChallengeResponse,
      kind: MethodKind.Unary,
    },
  }
} as const;

