// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file openauth/intermediate/v1/intermediate.proto (package openauth.intermediate.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64, Struct, Timestamp } from "@bufbuild/protobuf";

/**
 * @generated from message openauth.intermediate.v1.IntermediateSession
 */
export class IntermediateSession extends Message<IntermediateSession> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string project_id = 2;
   */
  projectId = "";

  /**
   * @generated from field: string email = 3;
   */
  email = "";

  /**
   * @generated from field: optional string google_user_id = 4;
   */
  googleUserId?: string;

  /**
   * TODO more things here
   *
   * @generated from field: optional string microsoft_user_id = 5;
   */
  microsoftUserId?: string;

  constructor(data?: PartialMessage<IntermediateSession>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "openauth.intermediate.v1.IntermediateSession";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "project_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "email", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "google_user_id", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 5, name: "microsoft_user_id", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): IntermediateSession {
    return new IntermediateSession().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): IntermediateSession {
    return new IntermediateSession().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): IntermediateSession {
    return new IntermediateSession().fromJsonString(jsonString, options);
  }

  static equals(a: IntermediateSession | PlainMessage<IntermediateSession> | undefined, b: IntermediateSession | PlainMessage<IntermediateSession> | undefined): boolean {
    return proto3.util.equals(IntermediateSession, a, b);
  }
}

/**
 * @generated from message openauth.intermediate.v1.WhoamiRequest
 */
export class WhoamiRequest extends Message<WhoamiRequest> {
  constructor(data?: PartialMessage<WhoamiRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "openauth.intermediate.v1.WhoamiRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): WhoamiRequest {
    return new WhoamiRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): WhoamiRequest {
    return new WhoamiRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): WhoamiRequest {
    return new WhoamiRequest().fromJsonString(jsonString, options);
  }

  static equals(a: WhoamiRequest | PlainMessage<WhoamiRequest> | undefined, b: WhoamiRequest | PlainMessage<WhoamiRequest> | undefined): boolean {
    return proto3.util.equals(WhoamiRequest, a, b);
  }
}

/**
 * @generated from message openauth.intermediate.v1.WhoamiResponse
 */
export class WhoamiResponse extends Message<WhoamiResponse> {
  /**
   * @generated from field: openauth.intermediate.v1.IntermediateSession intermediate_session = 1;
   */
  intermediateSession?: IntermediateSession;

  constructor(data?: PartialMessage<WhoamiResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "openauth.intermediate.v1.WhoamiResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "intermediate_session", kind: "message", T: IntermediateSession },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): WhoamiResponse {
    return new WhoamiResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): WhoamiResponse {
    return new WhoamiResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): WhoamiResponse {
    return new WhoamiResponse().fromJsonString(jsonString, options);
  }

  static equals(a: WhoamiResponse | PlainMessage<WhoamiResponse> | undefined, b: WhoamiResponse | PlainMessage<WhoamiResponse> | undefined): boolean {
    return proto3.util.equals(WhoamiResponse, a, b);
  }
}

/**
 * @generated from message openauth.intermediate.v1.GetGoogleOAuthRedirectURLRequest
 */
export class GetGoogleOAuthRedirectURLRequest extends Message<GetGoogleOAuthRedirectURLRequest> {
  constructor(data?: PartialMessage<GetGoogleOAuthRedirectURLRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "openauth.intermediate.v1.GetGoogleOAuthRedirectURLRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetGoogleOAuthRedirectURLRequest {
    return new GetGoogleOAuthRedirectURLRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetGoogleOAuthRedirectURLRequest {
    return new GetGoogleOAuthRedirectURLRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetGoogleOAuthRedirectURLRequest {
    return new GetGoogleOAuthRedirectURLRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetGoogleOAuthRedirectURLRequest | PlainMessage<GetGoogleOAuthRedirectURLRequest> | undefined, b: GetGoogleOAuthRedirectURLRequest | PlainMessage<GetGoogleOAuthRedirectURLRequest> | undefined): boolean {
    return proto3.util.equals(GetGoogleOAuthRedirectURLRequest, a, b);
  }
}

/**
 * @generated from message openauth.intermediate.v1.GetGoogleOAuthRedirectURLResponse
 */
export class GetGoogleOAuthRedirectURLResponse extends Message<GetGoogleOAuthRedirectURLResponse> {
  /**
   * @generated from field: string url = 1;
   */
  url = "";

  constructor(data?: PartialMessage<GetGoogleOAuthRedirectURLResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "openauth.intermediate.v1.GetGoogleOAuthRedirectURLResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetGoogleOAuthRedirectURLResponse {
    return new GetGoogleOAuthRedirectURLResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetGoogleOAuthRedirectURLResponse {
    return new GetGoogleOAuthRedirectURLResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetGoogleOAuthRedirectURLResponse {
    return new GetGoogleOAuthRedirectURLResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetGoogleOAuthRedirectURLResponse | PlainMessage<GetGoogleOAuthRedirectURLResponse> | undefined, b: GetGoogleOAuthRedirectURLResponse | PlainMessage<GetGoogleOAuthRedirectURLResponse> | undefined): boolean {
    return proto3.util.equals(GetGoogleOAuthRedirectURLResponse, a, b);
  }
}

/**
 * @generated from message openauth.intermediate.v1.RedeemGoogleOAuthCodeRequest
 */
export class RedeemGoogleOAuthCodeRequest extends Message<RedeemGoogleOAuthCodeRequest> {
  /**
   * @generated from field: string code = 1;
   */
  code = "";

  /**
   * @generated from field: string state = 2;
   */
  state = "";

  constructor(data?: PartialMessage<RedeemGoogleOAuthCodeRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "openauth.intermediate.v1.RedeemGoogleOAuthCodeRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "code", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "state", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RedeemGoogleOAuthCodeRequest {
    return new RedeemGoogleOAuthCodeRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RedeemGoogleOAuthCodeRequest {
    return new RedeemGoogleOAuthCodeRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RedeemGoogleOAuthCodeRequest {
    return new RedeemGoogleOAuthCodeRequest().fromJsonString(jsonString, options);
  }

  static equals(a: RedeemGoogleOAuthCodeRequest | PlainMessage<RedeemGoogleOAuthCodeRequest> | undefined, b: RedeemGoogleOAuthCodeRequest | PlainMessage<RedeemGoogleOAuthCodeRequest> | undefined): boolean {
    return proto3.util.equals(RedeemGoogleOAuthCodeRequest, a, b);
  }
}

/**
 * @generated from message openauth.intermediate.v1.RedeemGoogleOAuthCodeResponse
 */
export class RedeemGoogleOAuthCodeResponse extends Message<RedeemGoogleOAuthCodeResponse> {
  constructor(data?: PartialMessage<RedeemGoogleOAuthCodeResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "openauth.intermediate.v1.RedeemGoogleOAuthCodeResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RedeemGoogleOAuthCodeResponse {
    return new RedeemGoogleOAuthCodeResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RedeemGoogleOAuthCodeResponse {
    return new RedeemGoogleOAuthCodeResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RedeemGoogleOAuthCodeResponse {
    return new RedeemGoogleOAuthCodeResponse().fromJsonString(jsonString, options);
  }

  static equals(a: RedeemGoogleOAuthCodeResponse | PlainMessage<RedeemGoogleOAuthCodeResponse> | undefined, b: RedeemGoogleOAuthCodeResponse | PlainMessage<RedeemGoogleOAuthCodeResponse> | undefined): boolean {
    return proto3.util.equals(RedeemGoogleOAuthCodeResponse, a, b);
  }
}

/**
 * @generated from message openauth.intermediate.v1.GetMicrosoftOAuthRedirectURLRequest
 */
export class GetMicrosoftOAuthRedirectURLRequest extends Message<GetMicrosoftOAuthRedirectURLRequest> {
  constructor(data?: PartialMessage<GetMicrosoftOAuthRedirectURLRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "openauth.intermediate.v1.GetMicrosoftOAuthRedirectURLRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetMicrosoftOAuthRedirectURLRequest {
    return new GetMicrosoftOAuthRedirectURLRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetMicrosoftOAuthRedirectURLRequest {
    return new GetMicrosoftOAuthRedirectURLRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetMicrosoftOAuthRedirectURLRequest {
    return new GetMicrosoftOAuthRedirectURLRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetMicrosoftOAuthRedirectURLRequest | PlainMessage<GetMicrosoftOAuthRedirectURLRequest> | undefined, b: GetMicrosoftOAuthRedirectURLRequest | PlainMessage<GetMicrosoftOAuthRedirectURLRequest> | undefined): boolean {
    return proto3.util.equals(GetMicrosoftOAuthRedirectURLRequest, a, b);
  }
}

/**
 * @generated from message openauth.intermediate.v1.GetMicrosoftOAuthRedirectURLResponse
 */
export class GetMicrosoftOAuthRedirectURLResponse extends Message<GetMicrosoftOAuthRedirectURLResponse> {
  /**
   * @generated from field: string url = 1;
   */
  url = "";

  constructor(data?: PartialMessage<GetMicrosoftOAuthRedirectURLResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "openauth.intermediate.v1.GetMicrosoftOAuthRedirectURLResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetMicrosoftOAuthRedirectURLResponse {
    return new GetMicrosoftOAuthRedirectURLResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetMicrosoftOAuthRedirectURLResponse {
    return new GetMicrosoftOAuthRedirectURLResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetMicrosoftOAuthRedirectURLResponse {
    return new GetMicrosoftOAuthRedirectURLResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetMicrosoftOAuthRedirectURLResponse | PlainMessage<GetMicrosoftOAuthRedirectURLResponse> | undefined, b: GetMicrosoftOAuthRedirectURLResponse | PlainMessage<GetMicrosoftOAuthRedirectURLResponse> | undefined): boolean {
    return proto3.util.equals(GetMicrosoftOAuthRedirectURLResponse, a, b);
  }
}

/**
 * @generated from message openauth.intermediate.v1.RedeemMicrosoftOAuthCodeRequest
 */
export class RedeemMicrosoftOAuthCodeRequest extends Message<RedeemMicrosoftOAuthCodeRequest> {
  /**
   * @generated from field: string code = 1;
   */
  code = "";

  /**
   * @generated from field: string state = 2;
   */
  state = "";

  constructor(data?: PartialMessage<RedeemMicrosoftOAuthCodeRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "openauth.intermediate.v1.RedeemMicrosoftOAuthCodeRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "code", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "state", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RedeemMicrosoftOAuthCodeRequest {
    return new RedeemMicrosoftOAuthCodeRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RedeemMicrosoftOAuthCodeRequest {
    return new RedeemMicrosoftOAuthCodeRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RedeemMicrosoftOAuthCodeRequest {
    return new RedeemMicrosoftOAuthCodeRequest().fromJsonString(jsonString, options);
  }

  static equals(a: RedeemMicrosoftOAuthCodeRequest | PlainMessage<RedeemMicrosoftOAuthCodeRequest> | undefined, b: RedeemMicrosoftOAuthCodeRequest | PlainMessage<RedeemMicrosoftOAuthCodeRequest> | undefined): boolean {
    return proto3.util.equals(RedeemMicrosoftOAuthCodeRequest, a, b);
  }
}

/**
 * @generated from message openauth.intermediate.v1.RedeemMicrosoftOAuthCodeResponse
 */
export class RedeemMicrosoftOAuthCodeResponse extends Message<RedeemMicrosoftOAuthCodeResponse> {
  constructor(data?: PartialMessage<RedeemMicrosoftOAuthCodeResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "openauth.intermediate.v1.RedeemMicrosoftOAuthCodeResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RedeemMicrosoftOAuthCodeResponse {
    return new RedeemMicrosoftOAuthCodeResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RedeemMicrosoftOAuthCodeResponse {
    return new RedeemMicrosoftOAuthCodeResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RedeemMicrosoftOAuthCodeResponse {
    return new RedeemMicrosoftOAuthCodeResponse().fromJsonString(jsonString, options);
  }

  static equals(a: RedeemMicrosoftOAuthCodeResponse | PlainMessage<RedeemMicrosoftOAuthCodeResponse> | undefined, b: RedeemMicrosoftOAuthCodeResponse | PlainMessage<RedeemMicrosoftOAuthCodeResponse> | undefined): boolean {
    return proto3.util.equals(RedeemMicrosoftOAuthCodeResponse, a, b);
  }
}

/**
 * @generated from message openauth.intermediate.v1.IntermediateSessionClaims
 */
export class IntermediateSessionClaims extends Message<IntermediateSessionClaims> {
  /**
   * The project ID the intermediate session is scoped to.
   *
   * @generated from field: string project_id = 1;
   */
  projectId = "";

  /**
   * The email associated with the intermediate session.
   *
   * @generated from field: string email = 2;
   */
  email = "";

  /**
   * The time the intermediate session expires.
   *
   * @generated from field: int64 expires_at = 3;
   */
  expiresAt = protoInt64.zero;

  /**
   * The time the intermediate session was issued.
   *
   * @generated from field: int64 issued_at = 4;
   */
  issuedAt = protoInt64.zero;

  /**
   * The subject of the intermediate session.
   *
   * @generated from field: string subject = 5;
   */
  subject = "";

  constructor(data?: PartialMessage<IntermediateSessionClaims>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "openauth.intermediate.v1.IntermediateSessionClaims";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "project_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "email", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "expires_at", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "issued_at", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 5, name: "subject", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): IntermediateSessionClaims {
    return new IntermediateSessionClaims().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): IntermediateSessionClaims {
    return new IntermediateSessionClaims().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): IntermediateSessionClaims {
    return new IntermediateSessionClaims().fromJsonString(jsonString, options);
  }

  static equals(a: IntermediateSessionClaims | PlainMessage<IntermediateSessionClaims> | undefined, b: IntermediateSessionClaims | PlainMessage<IntermediateSessionClaims> | undefined): boolean {
    return proto3.util.equals(IntermediateSessionClaims, a, b);
  }
}

/**
 * @generated from message openauth.intermediate.v1.Organization
 */
export class Organization extends Message<Organization> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string project_id = 2;
   */
  projectId = "";

  /**
   * @generated from field: string display_name = 3;
   */
  displayName = "";

  /**
   * @generated from field: bool log_in_with_google_enabled = 4;
   */
  logInWithGoogleEnabled = false;

  /**
   * @generated from field: bool log_in_with_microsoft_enabled = 5;
   */
  logInWithMicrosoftEnabled = false;

  /**
   * @generated from field: bool log_in_with_password_enabled = 6;
   */
  logInWithPasswordEnabled = false;

  constructor(data?: PartialMessage<Organization>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "openauth.intermediate.v1.Organization";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "project_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "display_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "log_in_with_google_enabled", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 5, name: "log_in_with_microsoft_enabled", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 6, name: "log_in_with_password_enabled", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Organization {
    return new Organization().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Organization {
    return new Organization().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Organization {
    return new Organization().fromJsonString(jsonString, options);
  }

  static equals(a: Organization | PlainMessage<Organization> | undefined, b: Organization | PlainMessage<Organization> | undefined): boolean {
    return proto3.util.equals(Organization, a, b);
  }
}

/**
 * @generated from message openauth.intermediate.v1.CreateOrganizationRequest
 */
export class CreateOrganizationRequest extends Message<CreateOrganizationRequest> {
  /**
   * The project ID to create the organization for.
   *
   * @generated from field: string project_id = 1;
   */
  projectId = "";

  /**
   * The display name of the organization.
   *
   * @generated from field: string display_name = 2;
   */
  displayName = "";

  constructor(data?: PartialMessage<CreateOrganizationRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "openauth.intermediate.v1.CreateOrganizationRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "project_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "display_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateOrganizationRequest {
    return new CreateOrganizationRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateOrganizationRequest {
    return new CreateOrganizationRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateOrganizationRequest {
    return new CreateOrganizationRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreateOrganizationRequest | PlainMessage<CreateOrganizationRequest> | undefined, b: CreateOrganizationRequest | PlainMessage<CreateOrganizationRequest> | undefined): boolean {
    return proto3.util.equals(CreateOrganizationRequest, a, b);
  }
}

/**
 * @generated from message openauth.intermediate.v1.CreateOrganizationResponse
 */
export class CreateOrganizationResponse extends Message<CreateOrganizationResponse> {
  /**
   * @generated from field: openauth.intermediate.v1.Organization organization = 1;
   */
  organization?: Organization;

  constructor(data?: PartialMessage<CreateOrganizationResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "openauth.intermediate.v1.CreateOrganizationResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "organization", kind: "message", T: Organization },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateOrganizationResponse {
    return new CreateOrganizationResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateOrganizationResponse {
    return new CreateOrganizationResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateOrganizationResponse {
    return new CreateOrganizationResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CreateOrganizationResponse | PlainMessage<CreateOrganizationResponse> | undefined, b: CreateOrganizationResponse | PlainMessage<CreateOrganizationResponse> | undefined): boolean {
    return proto3.util.equals(CreateOrganizationResponse, a, b);
  }
}

/**
 * @generated from message openauth.intermediate.v1.ListOrganizationsRequest
 */
export class ListOrganizationsRequest extends Message<ListOrganizationsRequest> {
  /**
   * The project ID to list intermediate organizations for.
   *
   * @generated from field: string project_id = 1;
   */
  projectId = "";

  /**
   * The email associated with the intermediate session.
   *
   * @generated from field: string email = 2;
   */
  email = "";

  constructor(data?: PartialMessage<ListOrganizationsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "openauth.intermediate.v1.ListOrganizationsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "project_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "email", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListOrganizationsRequest {
    return new ListOrganizationsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListOrganizationsRequest {
    return new ListOrganizationsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListOrganizationsRequest {
    return new ListOrganizationsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListOrganizationsRequest | PlainMessage<ListOrganizationsRequest> | undefined, b: ListOrganizationsRequest | PlainMessage<ListOrganizationsRequest> | undefined): boolean {
    return proto3.util.equals(ListOrganizationsRequest, a, b);
  }
}

/**
 * @generated from message openauth.intermediate.v1.ListOrganizationsResponse
 */
export class ListOrganizationsResponse extends Message<ListOrganizationsResponse> {
  /**
   * @generated from field: repeated openauth.intermediate.v1.Organization organizations = 1;
   */
  organizations: Organization[] = [];

  /**
   * @generated from field: string next_page_token = 2;
   */
  nextPageToken = "";

  constructor(data?: PartialMessage<ListOrganizationsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "openauth.intermediate.v1.ListOrganizationsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "organizations", kind: "message", T: Organization, repeated: true },
    { no: 2, name: "next_page_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListOrganizationsResponse {
    return new ListOrganizationsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListOrganizationsResponse {
    return new ListOrganizationsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListOrganizationsResponse {
    return new ListOrganizationsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListOrganizationsResponse | PlainMessage<ListOrganizationsResponse> | undefined, b: ListOrganizationsResponse | PlainMessage<ListOrganizationsResponse> | undefined): boolean {
    return proto3.util.equals(ListOrganizationsResponse, a, b);
  }
}

/**
 * @generated from message openauth.intermediate.v1.SignInWithEmailRequest
 */
export class SignInWithEmailRequest extends Message<SignInWithEmailRequest> {
  /**
   * The email address to sign in with.
   *
   * @generated from field: string email = 1;
   */
  email = "";

  constructor(data?: PartialMessage<SignInWithEmailRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "openauth.intermediate.v1.SignInWithEmailRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "email", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SignInWithEmailRequest {
    return new SignInWithEmailRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SignInWithEmailRequest {
    return new SignInWithEmailRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SignInWithEmailRequest {
    return new SignInWithEmailRequest().fromJsonString(jsonString, options);
  }

  static equals(a: SignInWithEmailRequest | PlainMessage<SignInWithEmailRequest> | undefined, b: SignInWithEmailRequest | PlainMessage<SignInWithEmailRequest> | undefined): boolean {
    return proto3.util.equals(SignInWithEmailRequest, a, b);
  }
}

/**
 * @generated from message openauth.intermediate.v1.SignInWithEmailResponse
 */
export class SignInWithEmailResponse extends Message<SignInWithEmailResponse> {
  /**
   * The token for the intermediate session or session created by the SignInWithEmail request.
   *
   * @generated from field: string SessionToken = 1;
   */
  SessionToken = "";

  constructor(data?: PartialMessage<SignInWithEmailResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "openauth.intermediate.v1.SignInWithEmailResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "SessionToken", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SignInWithEmailResponse {
    return new SignInWithEmailResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SignInWithEmailResponse {
    return new SignInWithEmailResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SignInWithEmailResponse {
    return new SignInWithEmailResponse().fromJsonString(jsonString, options);
  }

  static equals(a: SignInWithEmailResponse | PlainMessage<SignInWithEmailResponse> | undefined, b: SignInWithEmailResponse | PlainMessage<SignInWithEmailResponse> | undefined): boolean {
    return proto3.util.equals(SignInWithEmailResponse, a, b);
  }
}

/**
 * @generated from message openauth.intermediate.v1.Project
 */
export class Project extends Message<Project> {
  /**
   * Unique identifier for this project.
   *
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * The organization this project belongs to.
   *
   * @generated from field: string organization_id = 2;
   */
  organizationId = "";

  /**
   * Top-level setting for whether login with password is enabled (inherited by organizations by default).
   *
   * @generated from field: bool log_in_with_password_enabled = 3;
   */
  logInWithPasswordEnabled = false;

  /**
   * Top-level setting for whether login with Google is enabled (inherited by organizations by default).
   *
   * @generated from field: bool log_in_with_google_enabled = 4;
   */
  logInWithGoogleEnabled = false;

  /**
   * Top-level setting for whether login with Microsoft is enabled (inherited by organizations by default).
   *
   * @generated from field: bool log_in_with_microsoft_enabled = 5;
   */
  logInWithMicrosoftEnabled = false;

  /**
   * The oAuth Client ID to be used for Google Auth.
   *
   * @generated from field: string google_oauth_client_id = 6;
   */
  googleOauthClientId = "";

  /**
   * The oAuth Client secret to be used for Google Auth.
   *
   * @generated from field: string google_oauth_client_secret = 7;
   */
  googleOauthClientSecret = "";

  /**
   * The oAuth Client ID to be used for Microsoft Auth.
   *
   * @generated from field: string microsoft_oauth_client_id = 8;
   */
  microsoftOauthClientId = "";

  /**
   * The oAuth Client secret to be used for Microsoft Auth.
   *
   * @generated from field: string microsoft_oauth_client_secret = 9;
   */
  microsoftOauthClientSecret = "";

  constructor(data?: PartialMessage<Project>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "openauth.intermediate.v1.Project";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "organization_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "log_in_with_password_enabled", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "log_in_with_google_enabled", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 5, name: "log_in_with_microsoft_enabled", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 6, name: "google_oauth_client_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "google_oauth_client_secret", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "microsoft_oauth_client_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 9, name: "microsoft_oauth_client_secret", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Project {
    return new Project().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Project {
    return new Project().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Project {
    return new Project().fromJsonString(jsonString, options);
  }

  static equals(a: Project | PlainMessage<Project> | undefined, b: Project | PlainMessage<Project> | undefined): boolean {
    return proto3.util.equals(Project, a, b);
  }
}

/**
 * @generated from message openauth.intermediate.v1.SessionSigningKey
 */
export class SessionSigningKey extends Message<SessionSigningKey> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string project_id = 2;
   */
  projectId = "";

  /**
   * @generated from field: google.protobuf.Struct public_key_jwk = 3;
   */
  publicKeyJwk?: Struct;

  constructor(data?: PartialMessage<SessionSigningKey>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "openauth.intermediate.v1.SessionSigningKey";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "project_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "public_key_jwk", kind: "message", T: Struct },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SessionSigningKey {
    return new SessionSigningKey().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SessionSigningKey {
    return new SessionSigningKey().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SessionSigningKey {
    return new SessionSigningKey().fromJsonString(jsonString, options);
  }

  static equals(a: SessionSigningKey | PlainMessage<SessionSigningKey> | undefined, b: SessionSigningKey | PlainMessage<SessionSigningKey> | undefined): boolean {
    return proto3.util.equals(SessionSigningKey, a, b);
  }
}

/**
 * @generated from message openauth.intermediate.v1.User
 */
export class User extends Message<User> {
  /**
   * Unique identifier for this user.
   *
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * The organization this user belongs to.
   *
   * @generated from field: string organization_id = 2;
   */
  organizationId = "";

  /**
   * The user's email (pending verification).
   *
   * @generated from field: string unverified_email = 3;
   */
  unverifiedEmail = "";

  /**
   * The user's email (after verification).
   *
   * @generated from field: string verified_email = 4;
   */
  verifiedEmail = "";

  /**
   * The hash of the user's password.
   *
   * @generated from field: string password_bcrypt = 5;
   */
  passwordBcrypt = "";

  /**
   * The user's Google User ID.
   *
   * @generated from field: string google_user_id = 6;
   */
  googleUserId = "";

  /**
   * The user's Microsoft User ID.
   *
   * @generated from field: string microsoft_user_id = 7;
   */
  microsoftUserId = "";

  constructor(data?: PartialMessage<User>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "openauth.intermediate.v1.User";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "organization_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "unverified_email", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "verified_email", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "password_bcrypt", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "google_user_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "microsoft_user_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): User {
    return new User().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): User {
    return new User().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): User {
    return new User().fromJsonString(jsonString, options);
  }

  static equals(a: User | PlainMessage<User> | undefined, b: User | PlainMessage<User> | undefined): boolean {
    return proto3.util.equals(User, a, b);
  }
}

/**
 * @generated from message openauth.intermediate.v1.Session
 */
export class Session extends Message<Session> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string user_id = 2;
   */
  userId = "";

  /**
   * @generated from field: google.protobuf.Timestamp create_time = 3;
   */
  createTime?: Timestamp;

  /**
   * @generated from field: google.protobuf.Timestamp expire_time = 4;
   */
  expireTime?: Timestamp;

  /**
   * @generated from field: bool revoked = 5;
   */
  revoked = false;

  constructor(data?: PartialMessage<Session>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "openauth.intermediate.v1.Session";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "user_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "create_time", kind: "message", T: Timestamp },
    { no: 4, name: "expire_time", kind: "message", T: Timestamp },
    { no: 5, name: "revoked", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Session {
    return new Session().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Session {
    return new Session().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Session {
    return new Session().fromJsonString(jsonString, options);
  }

  static equals(a: Session | PlainMessage<Session> | undefined, b: Session | PlainMessage<Session> | undefined): boolean {
    return proto3.util.equals(Session, a, b);
  }
}

/**
 * @generated from message openauth.intermediate.v1.VerifyEmailChallengeRequest
 */
export class VerifyEmailChallengeRequest extends Message<VerifyEmailChallengeRequest> {
  /**
   * The challenge to verify.
   *
   * @generated from field: string challenge = 1;
   */
  challenge = "";

  constructor(data?: PartialMessage<VerifyEmailChallengeRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "openauth.intermediate.v1.VerifyEmailChallengeRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "challenge", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): VerifyEmailChallengeRequest {
    return new VerifyEmailChallengeRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): VerifyEmailChallengeRequest {
    return new VerifyEmailChallengeRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): VerifyEmailChallengeRequest {
    return new VerifyEmailChallengeRequest().fromJsonString(jsonString, options);
  }

  static equals(a: VerifyEmailChallengeRequest | PlainMessage<VerifyEmailChallengeRequest> | undefined, b: VerifyEmailChallengeRequest | PlainMessage<VerifyEmailChallengeRequest> | undefined): boolean {
    return proto3.util.equals(VerifyEmailChallengeRequest, a, b);
  }
}

/**
 * @generated from message openauth.intermediate.v1.VerifyEmailChallengeResponse
 */
export class VerifyEmailChallengeResponse extends Message<VerifyEmailChallengeResponse> {
  constructor(data?: PartialMessage<VerifyEmailChallengeResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "openauth.intermediate.v1.VerifyEmailChallengeResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): VerifyEmailChallengeResponse {
    return new VerifyEmailChallengeResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): VerifyEmailChallengeResponse {
    return new VerifyEmailChallengeResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): VerifyEmailChallengeResponse {
    return new VerifyEmailChallengeResponse().fromJsonString(jsonString, options);
  }

  static equals(a: VerifyEmailChallengeResponse | PlainMessage<VerifyEmailChallengeResponse> | undefined, b: VerifyEmailChallengeResponse | PlainMessage<VerifyEmailChallengeResponse> | undefined): boolean {
    return proto3.util.equals(VerifyEmailChallengeResponse, a, b);
  }
}

