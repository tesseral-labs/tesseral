// @generated by protoc-gen-connect-query v1.4.2 with parameter "target=ts"
// @generated from file openauth/intermediate/v1/intermediate.proto (package openauth.intermediate.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { MethodKind } from "@bufbuild/protobuf";
import { CreateOrganizationRequest, CreateOrganizationResponse, ListOrganizationsRequest, ListOrganizationsResponse, SignInWithEmailRequest, SignInWithEmailResponse } from "./intermediate_pb.js";

/**
 * Creates a new organization.
 *
 * @generated from rpc openauth.intermediate.v1.IntermediateService.CreateOrganization
 */
export const createOrganization = {
  localName: "createOrganization",
  name: "CreateOrganization",
  kind: MethodKind.Unary,
  I: CreateOrganizationRequest,
  O: CreateOrganizationResponse,
  service: {
    typeName: "openauth.intermediate.v1.IntermediateService"
  }
} as const;

/**
 * Gets a list of organizations.
 *
 * @generated from rpc openauth.intermediate.v1.IntermediateService.ListOrganizations
 */
export const listOrganizations = {
  localName: "listOrganizations",
  name: "ListOrganizations",
  kind: MethodKind.Unary,
  I: ListOrganizationsRequest,
  O: ListOrganizationsResponse,
  service: {
    typeName: "openauth.intermediate.v1.IntermediateService"
  }
} as const;

/**
 * Creates a new intermediate session or session and cookies the requester.
 *
 * @generated from rpc openauth.intermediate.v1.IntermediateService.SignInWithEmail
 */
export const signInWithEmail = {
  localName: "signInWithEmail",
  name: "SignInWithEmail",
  kind: MethodKind.Unary,
  I: SignInWithEmailRequest,
  O: SignInWithEmailResponse,
  service: {
    typeName: "openauth.intermediate.v1.IntermediateService"
  }
} as const;
