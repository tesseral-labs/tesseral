// @generated by protoc-gen-connect-query v1.4.2 with parameter "target=ts"
// @generated from file openauth/intermediate/v1/intermediate.proto (package openauth.intermediate.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { MethodKind } from "@bufbuild/protobuf";
import { CreateOrganizationRequest, CreateOrganizationResponse, ExchangeIntermediateSessionForNewOrganizationSessionRequest, ExchangeIntermediateSessionForNewOrganizationSessionResponse, ExchangeIntermediateSessionForSessionRequest, ExchangeIntermediateSessionForSessionResponse, GetGoogleOAuthRedirectURLRequest, GetGoogleOAuthRedirectURLResponse, GetMicrosoftOAuthRedirectURLRequest, GetMicrosoftOAuthRedirectURLResponse, IssueEmailVerificationChallengeRequest, IssueEmailVerificationChallengeResponse, ListOrganizationsRequest, ListOrganizationsResponse, RedeemGoogleOAuthCodeRequest, RedeemGoogleOAuthCodeResponse, RedeemMicrosoftOAuthCodeRequest, RedeemMicrosoftOAuthCodeResponse, SignInWithEmailRequest, SignInWithEmailResponse, VerifyEmailChallengeRequest, VerifyEmailChallengeResponse, WhoamiRequest, WhoamiResponse } from "./intermediate_pb.js";

/**
 * @generated from rpc openauth.intermediate.v1.IntermediateService.Whoami
 */
export const whoami = {
  localName: "whoami",
  name: "Whoami",
  kind: MethodKind.Unary,
  I: WhoamiRequest,
  O: WhoamiResponse,
  service: {
    typeName: "openauth.intermediate.v1.IntermediateService"
  }
} as const;

/**
 * @generated from rpc openauth.intermediate.v1.IntermediateService.ExchangeIntermediateSessionForSession
 */
export const exchangeIntermediateSessionForSession = {
  localName: "exchangeIntermediateSessionForSession",
  name: "ExchangeIntermediateSessionForSession",
  kind: MethodKind.Unary,
  I: ExchangeIntermediateSessionForSessionRequest,
  O: ExchangeIntermediateSessionForSessionResponse,
  service: {
    typeName: "openauth.intermediate.v1.IntermediateService"
  }
} as const;

/**
 * @generated from rpc openauth.intermediate.v1.IntermediateService.ExchangeIntermediateSessionForNewOrganizationSession
 */
export const exchangeIntermediateSessionForNewOrganizationSession = {
  localName: "exchangeIntermediateSessionForNewOrganizationSession",
  name: "ExchangeIntermediateSessionForNewOrganizationSession",
  kind: MethodKind.Unary,
  I: ExchangeIntermediateSessionForNewOrganizationSessionRequest,
  O: ExchangeIntermediateSessionForNewOrganizationSessionResponse,
  service: {
    typeName: "openauth.intermediate.v1.IntermediateService"
  }
} as const;

/**
 * @generated from rpc openauth.intermediate.v1.IntermediateService.GetGoogleOAuthRedirectURL
 */
export const getGoogleOAuthRedirectURL = {
  localName: "getGoogleOAuthRedirectURL",
  name: "GetGoogleOAuthRedirectURL",
  kind: MethodKind.Unary,
  I: GetGoogleOAuthRedirectURLRequest,
  O: GetGoogleOAuthRedirectURLResponse,
  service: {
    typeName: "openauth.intermediate.v1.IntermediateService"
  }
} as const;

/**
 * @generated from rpc openauth.intermediate.v1.IntermediateService.RedeemGoogleOAuthCode
 */
export const redeemGoogleOAuthCode = {
  localName: "redeemGoogleOAuthCode",
  name: "RedeemGoogleOAuthCode",
  kind: MethodKind.Unary,
  I: RedeemGoogleOAuthCodeRequest,
  O: RedeemGoogleOAuthCodeResponse,
  service: {
    typeName: "openauth.intermediate.v1.IntermediateService"
  }
} as const;

/**
 * @generated from rpc openauth.intermediate.v1.IntermediateService.GetMicrosoftOAuthRedirectURL
 */
export const getMicrosoftOAuthRedirectURL = {
  localName: "getMicrosoftOAuthRedirectURL",
  name: "GetMicrosoftOAuthRedirectURL",
  kind: MethodKind.Unary,
  I: GetMicrosoftOAuthRedirectURLRequest,
  O: GetMicrosoftOAuthRedirectURLResponse,
  service: {
    typeName: "openauth.intermediate.v1.IntermediateService"
  }
} as const;

/**
 * @generated from rpc openauth.intermediate.v1.IntermediateService.RedeemMicrosoftOAuthCode
 */
export const redeemMicrosoftOAuthCode = {
  localName: "redeemMicrosoftOAuthCode",
  name: "RedeemMicrosoftOAuthCode",
  kind: MethodKind.Unary,
  I: RedeemMicrosoftOAuthCodeRequest,
  O: RedeemMicrosoftOAuthCodeResponse,
  service: {
    typeName: "openauth.intermediate.v1.IntermediateService"
  }
} as const;

/**
 * Creates a new organization.
 *
 * @generated from rpc openauth.intermediate.v1.IntermediateService.CreateOrganization
 */
export const createOrganization = {
  localName: "createOrganization",
  name: "CreateOrganization",
  kind: MethodKind.Unary,
  I: CreateOrganizationRequest,
  O: CreateOrganizationResponse,
  service: {
    typeName: "openauth.intermediate.v1.IntermediateService"
  }
} as const;

/**
 * Issues a new email verification challenge.
 *
 * @generated from rpc openauth.intermediate.v1.IntermediateService.IssueEmailVerificationChallenge
 */
export const issueEmailVerificationChallenge = {
  localName: "issueEmailVerificationChallenge",
  name: "IssueEmailVerificationChallenge",
  kind: MethodKind.Unary,
  I: IssueEmailVerificationChallengeRequest,
  O: IssueEmailVerificationChallengeResponse,
  service: {
    typeName: "openauth.intermediate.v1.IntermediateService"
  }
} as const;

/**
 * Gets a list of organizations.
 *
 * @generated from rpc openauth.intermediate.v1.IntermediateService.ListOrganizations
 */
export const listOrganizations = {
  localName: "listOrganizations",
  name: "ListOrganizations",
  kind: MethodKind.Unary,
  I: ListOrganizationsRequest,
  O: ListOrganizationsResponse,
  service: {
    typeName: "openauth.intermediate.v1.IntermediateService"
  }
} as const;

/**
 * Creates a new intermediate session or session and cookies the requester.
 *
 * @generated from rpc openauth.intermediate.v1.IntermediateService.SignInWithEmail
 */
export const signInWithEmail = {
  localName: "signInWithEmail",
  name: "SignInWithEmail",
  kind: MethodKind.Unary,
  I: SignInWithEmailRequest,
  O: SignInWithEmailResponse,
  service: {
    typeName: "openauth.intermediate.v1.IntermediateService"
  }
} as const;

/**
 * Submits a challenge for verification of email address.
 *
 * @generated from rpc openauth.intermediate.v1.IntermediateService.VerifyEmailChallenge
 */
export const verifyEmailChallenge = {
  localName: "verifyEmailChallenge",
  name: "VerifyEmailChallenge",
  kind: MethodKind.Unary,
  I: VerifyEmailChallengeRequest,
  O: VerifyEmailChallengeResponse,
  service: {
    typeName: "openauth.intermediate.v1.IntermediateService"
  }
} as const;
