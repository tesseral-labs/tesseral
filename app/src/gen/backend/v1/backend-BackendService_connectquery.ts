// @generated by protoc-gen-connect-query v1.4.2 with parameter "target=ts"
// @generated from file backend/v1/backend.proto (package backend.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { MethodKind } from "@bufbuild/protobuf";
import { CreateGoogleUserRequest, CreateMicrosoftUserRequest, CreateProjectRequest, CreateUnverifiedUserRequest, ListOrganizationsRequest, ListOrganizationsResponse, Organization, Project, ResourceIdRequest, User } from "../../openauth/v1/openauth_pb.js";
import { ListProjectsRequest, ListProjectsResponse, ListUsersRequest, ListUsersResponse, UpdateUserPasswordRequest } from "./backend_pb.js";

/**
 * Creates an organization.
 *
 * @generated from rpc backend.v1.BackendService.CreateOrganization
 */
export const createOrganization = {
  localName: "createOrganization",
  name: "CreateOrganization",
  kind: MethodKind.Unary,
  I: Organization,
  O: Organization,
  service: {
    typeName: "backend.v1.BackendService"
  }
} as const;

/**
 * Gets an organization.
 *
 * @generated from rpc backend.v1.BackendService.GetOrganization
 */
export const getOrganization = {
  localName: "getOrganization",
  name: "GetOrganization",
  kind: MethodKind.Unary,
  I: ResourceIdRequest,
  O: Organization,
  service: {
    typeName: "backend.v1.BackendService"
  }
} as const;

/**
 * Gets a list of organizations.
 *
 * @generated from rpc backend.v1.BackendService.ListOrganizations
 */
export const listOrganizations = {
  localName: "listOrganizations",
  name: "ListOrganizations",
  kind: MethodKind.Unary,
  I: ListOrganizationsRequest,
  O: ListOrganizationsResponse,
  service: {
    typeName: "backend.v1.BackendService"
  }
} as const;

/**
 * Updates an organization.
 *
 * @generated from rpc backend.v1.BackendService.UpdateOrganization
 */
export const updateOrganization = {
  localName: "updateOrganization",
  name: "UpdateOrganization",
  kind: MethodKind.Unary,
  I: Organization,
  O: Organization,
  service: {
    typeName: "backend.v1.BackendService"
  }
} as const;

/**
 * Creates a project.
 *
 * @generated from rpc backend.v1.BackendService.CreateProject
 */
export const createProject = {
  localName: "createProject",
  name: "CreateProject",
  kind: MethodKind.Unary,
  I: CreateProjectRequest,
  O: Project,
  service: {
    typeName: "backend.v1.BackendService"
  }
} as const;

/**
 * Gets a project.
 *
 * @generated from rpc backend.v1.BackendService.GetProject
 */
export const getProject = {
  localName: "getProject",
  name: "GetProject",
  kind: MethodKind.Unary,
  I: ResourceIdRequest,
  O: Project,
  service: {
    typeName: "backend.v1.BackendService"
  }
} as const;

/**
 * Gets a list of projects.
 *
 * @generated from rpc backend.v1.BackendService.ListProjects
 */
export const listProjects = {
  localName: "listProjects",
  name: "ListProjects",
  kind: MethodKind.Unary,
  I: ListProjectsRequest,
  O: ListProjectsResponse,
  service: {
    typeName: "backend.v1.BackendService"
  }
} as const;

/**
 * Updates a project.
 *
 * @generated from rpc backend.v1.BackendService.UpdateProject
 */
export const updateProject = {
  localName: "updateProject",
  name: "UpdateProject",
  kind: MethodKind.Unary,
  I: Project,
  O: Project,
  service: {
    typeName: "backend.v1.BackendService"
  }
} as const;

/**
 * Creates a user.
 *
 * @generated from rpc backend.v1.BackendService.CreateUser
 */
export const createUser = {
  localName: "createUser",
  name: "CreateUser",
  kind: MethodKind.Unary,
  I: User,
  O: User,
  service: {
    typeName: "backend.v1.BackendService"
  }
} as const;

/**
 * Creates a Google user.
 *
 * @generated from rpc backend.v1.BackendService.CreateGoogleUser
 */
export const createGoogleUser = {
  localName: "createGoogleUser",
  name: "CreateGoogleUser",
  kind: MethodKind.Unary,
  I: CreateGoogleUserRequest,
  O: User,
  service: {
    typeName: "backend.v1.BackendService"
  }
} as const;

/**
 * Creates a Microsoft user.
 *
 * @generated from rpc backend.v1.BackendService.CreateMicrosoftUser
 */
export const createMicrosoftUser = {
  localName: "createMicrosoftUser",
  name: "CreateMicrosoftUser",
  kind: MethodKind.Unary,
  I: CreateMicrosoftUserRequest,
  O: User,
  service: {
    typeName: "backend.v1.BackendService"
  }
} as const;

/**
 * Creates an unverified user.
 *
 * @generated from rpc backend.v1.BackendService.CreateUnverifiedUser
 */
export const createUnverifiedUser = {
  localName: "createUnverifiedUser",
  name: "CreateUnverifiedUser",
  kind: MethodKind.Unary,
  I: CreateUnverifiedUserRequest,
  O: User,
  service: {
    typeName: "backend.v1.BackendService"
  }
} as const;

/**
 * Gets a user.
 *
 * @generated from rpc backend.v1.BackendService.GetUser
 */
export const getUser = {
  localName: "getUser",
  name: "GetUser",
  kind: MethodKind.Unary,
  I: ResourceIdRequest,
  O: User,
  service: {
    typeName: "backend.v1.BackendService"
  }
} as const;

/**
 * Gets a list of users.
 *
 * @generated from rpc backend.v1.BackendService.ListUsers
 */
export const listUsers = {
  localName: "listUsers",
  name: "ListUsers",
  kind: MethodKind.Unary,
  I: ListUsersRequest,
  O: ListUsersResponse,
  service: {
    typeName: "backend.v1.BackendService"
  }
} as const;

/**
 * Updates a user.
 *
 * @generated from rpc backend.v1.BackendService.UpdateUser
 */
export const updateUser = {
  localName: "updateUser",
  name: "UpdateUser",
  kind: MethodKind.Unary,
  I: User,
  O: User,
  service: {
    typeName: "backend.v1.BackendService"
  }
} as const;

/**
 * Updates a user's password.
 *
 * @generated from rpc backend.v1.BackendService.UpdateUserPassword
 */
export const updateUserPassword = {
  localName: "updateUserPassword",
  name: "UpdateUserPassword",
  kind: MethodKind.Unary,
  I: UpdateUserPasswordRequest,
  O: User,
  service: {
    typeName: "backend.v1.BackendService"
  }
} as const;
