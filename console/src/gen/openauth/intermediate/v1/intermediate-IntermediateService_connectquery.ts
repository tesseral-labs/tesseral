// @generated by protoc-gen-connect-query v2.0.0 with parameter "target=ts"
// @generated from file openauth/intermediate/v1/intermediate.proto (package openauth.intermediate.v1, syntax proto3)
/* eslint-disable */

import { IntermediateService } from "./intermediate_pb";

/**
 * @generated from rpc openauth.intermediate.v1.IntermediateService.ListSAMLOrganizations
 */
export const listSAMLOrganizations = IntermediateService.method.listSAMLOrganizations;

/**
 * @generated from rpc openauth.intermediate.v1.IntermediateService.GetSettings
 */
export const getSettings = IntermediateService.method.getSettings;

/**
 * @generated from rpc openauth.intermediate.v1.IntermediateService.RedeemUserImpersonationToken
 */
export const redeemUserImpersonationToken = IntermediateService.method.redeemUserImpersonationToken;

/**
 * @generated from rpc openauth.intermediate.v1.IntermediateService.CreateIntermediateSession
 */
export const createIntermediateSession = IntermediateService.method.createIntermediateSession;

/**
 * @generated from rpc openauth.intermediate.v1.IntermediateService.Whoami
 */
export const whoami = IntermediateService.method.whoami;

/**
 * @generated from rpc openauth.intermediate.v1.IntermediateService.CreateOrganization
 */
export const createOrganization = IntermediateService.method.createOrganization;

/**
 * @generated from rpc openauth.intermediate.v1.IntermediateService.ListOrganizations
 */
export const listOrganizations = IntermediateService.method.listOrganizations;

/**
 * @generated from rpc openauth.intermediate.v1.IntermediateService.SetOrganization
 */
export const setOrganization = IntermediateService.method.setOrganization;

/**
 * @generated from rpc openauth.intermediate.v1.IntermediateService.ExchangeIntermediateSessionForSession
 */
export const exchangeIntermediateSessionForSession = IntermediateService.method.exchangeIntermediateSessionForSession;

/**
 * @generated from rpc openauth.intermediate.v1.IntermediateService.GetGoogleOAuthRedirectURL
 */
export const getGoogleOAuthRedirectURL = IntermediateService.method.getGoogleOAuthRedirectURL;

/**
 * @generated from rpc openauth.intermediate.v1.IntermediateService.RedeemGoogleOAuthCode
 */
export const redeemGoogleOAuthCode = IntermediateService.method.redeemGoogleOAuthCode;

/**
 * @generated from rpc openauth.intermediate.v1.IntermediateService.GetMicrosoftOAuthRedirectURL
 */
export const getMicrosoftOAuthRedirectURL = IntermediateService.method.getMicrosoftOAuthRedirectURL;

/**
 * @generated from rpc openauth.intermediate.v1.IntermediateService.RedeemMicrosoftOAuthCode
 */
export const redeemMicrosoftOAuthCode = IntermediateService.method.redeemMicrosoftOAuthCode;

/**
 * @generated from rpc openauth.intermediate.v1.IntermediateService.IssueEmailVerificationChallenge
 */
export const issueEmailVerificationChallenge = IntermediateService.method.issueEmailVerificationChallenge;

/**
 * @generated from rpc openauth.intermediate.v1.IntermediateService.VerifyEmailChallenge
 */
export const verifyEmailChallenge = IntermediateService.method.verifyEmailChallenge;

/**
 * @generated from rpc openauth.intermediate.v1.IntermediateService.RegisterPassword
 */
export const registerPassword = IntermediateService.method.registerPassword;

/**
 * @generated from rpc openauth.intermediate.v1.IntermediateService.VerifyPassword
 */
export const verifyPassword = IntermediateService.method.verifyPassword;

/**
 * @generated from rpc openauth.intermediate.v1.IntermediateService.GetPasskeyOptions
 */
export const getPasskeyOptions = IntermediateService.method.getPasskeyOptions;

/**
 * @generated from rpc openauth.intermediate.v1.IntermediateService.RegisterPasskey
 */
export const registerPasskey = IntermediateService.method.registerPasskey;

/**
 * @generated from rpc openauth.intermediate.v1.IntermediateService.GetAuthenticatorAppOptions
 */
export const getAuthenticatorAppOptions = IntermediateService.method.getAuthenticatorAppOptions;

/**
 * @generated from rpc openauth.intermediate.v1.IntermediateService.RegisterAuthenticatorApp
 */
export const registerAuthenticatorApp = IntermediateService.method.registerAuthenticatorApp;
