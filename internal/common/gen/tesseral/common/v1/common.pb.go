// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        (unknown)
// source: tesseral/common/v1/common.proto

package commonv1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	structpb "google.golang.org/protobuf/types/known/structpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type AccessTokenData struct {
	state         protoimpl.MessageState   `protogen:"open.v1"`
	Iss           string                   `protobuf:"bytes,1,opt,name=iss,proto3" json:"iss,omitempty"`
	Sub           string                   `protobuf:"bytes,2,opt,name=sub,proto3" json:"sub,omitempty"`
	Aud           string                   `protobuf:"bytes,3,opt,name=aud,proto3" json:"aud,omitempty"`
	Exp           float64                  `protobuf:"fixed64,4,opt,name=exp,proto3" json:"exp,omitempty"`
	Nbf           float64                  `protobuf:"fixed64,5,opt,name=nbf,proto3" json:"nbf,omitempty"`
	Iat           float64                  `protobuf:"fixed64,6,opt,name=iat,proto3" json:"iat,omitempty"`
	Session       *AccessTokenSession      `protobuf:"bytes,8,opt,name=session,proto3" json:"session,omitempty"`
	User          *AccessTokenUser         `protobuf:"bytes,9,opt,name=user,proto3" json:"user,omitempty"`
	Organization  *AccessTokenOrganization `protobuf:"bytes,10,opt,name=organization,proto3" json:"organization,omitempty"`
	Actions       []string                 `protobuf:"bytes,12,rep,name=actions,proto3" json:"actions,omitempty"`
	Impersonator  *AccessTokenImpersonator `protobuf:"bytes,11,opt,name=impersonator,proto3" json:"impersonator,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AccessTokenData) Reset() {
	*x = AccessTokenData{}
	mi := &file_tesseral_common_v1_common_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AccessTokenData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessTokenData) ProtoMessage() {}

func (x *AccessTokenData) ProtoReflect() protoreflect.Message {
	mi := &file_tesseral_common_v1_common_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessTokenData.ProtoReflect.Descriptor instead.
func (*AccessTokenData) Descriptor() ([]byte, []int) {
	return file_tesseral_common_v1_common_proto_rawDescGZIP(), []int{0}
}

func (x *AccessTokenData) GetIss() string {
	if x != nil {
		return x.Iss
	}
	return ""
}

func (x *AccessTokenData) GetSub() string {
	if x != nil {
		return x.Sub
	}
	return ""
}

func (x *AccessTokenData) GetAud() string {
	if x != nil {
		return x.Aud
	}
	return ""
}

func (x *AccessTokenData) GetExp() float64 {
	if x != nil {
		return x.Exp
	}
	return 0
}

func (x *AccessTokenData) GetNbf() float64 {
	if x != nil {
		return x.Nbf
	}
	return 0
}

func (x *AccessTokenData) GetIat() float64 {
	if x != nil {
		return x.Iat
	}
	return 0
}

func (x *AccessTokenData) GetSession() *AccessTokenSession {
	if x != nil {
		return x.Session
	}
	return nil
}

func (x *AccessTokenData) GetUser() *AccessTokenUser {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *AccessTokenData) GetOrganization() *AccessTokenOrganization {
	if x != nil {
		return x.Organization
	}
	return nil
}

func (x *AccessTokenData) GetActions() []string {
	if x != nil {
		return x.Actions
	}
	return nil
}

func (x *AccessTokenData) GetImpersonator() *AccessTokenImpersonator {
	if x != nil {
		return x.Impersonator
	}
	return nil
}

type AccessTokenSession struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AccessTokenSession) Reset() {
	*x = AccessTokenSession{}
	mi := &file_tesseral_common_v1_common_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AccessTokenSession) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessTokenSession) ProtoMessage() {}

func (x *AccessTokenSession) ProtoReflect() protoreflect.Message {
	mi := &file_tesseral_common_v1_common_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessTokenSession.ProtoReflect.Descriptor instead.
func (*AccessTokenSession) Descriptor() ([]byte, []int) {
	return file_tesseral_common_v1_common_proto_rawDescGZIP(), []int{1}
}

func (x *AccessTokenSession) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type AccessTokenUser struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	Id                string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Email             string                 `protobuf:"bytes,2,opt,name=email,proto3" json:"email,omitempty"`
	DisplayName       string                 `protobuf:"bytes,3,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	ProfilePictureUrl string                 `protobuf:"bytes,4,opt,name=profile_picture_url,json=profilePictureUrl,proto3" json:"profile_picture_url,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *AccessTokenUser) Reset() {
	*x = AccessTokenUser{}
	mi := &file_tesseral_common_v1_common_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AccessTokenUser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessTokenUser) ProtoMessage() {}

func (x *AccessTokenUser) ProtoReflect() protoreflect.Message {
	mi := &file_tesseral_common_v1_common_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessTokenUser.ProtoReflect.Descriptor instead.
func (*AccessTokenUser) Descriptor() ([]byte, []int) {
	return file_tesseral_common_v1_common_proto_rawDescGZIP(), []int{2}
}

func (x *AccessTokenUser) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *AccessTokenUser) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *AccessTokenUser) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *AccessTokenUser) GetProfilePictureUrl() string {
	if x != nil {
		return x.ProfilePictureUrl
	}
	return ""
}

type AccessTokenOrganization struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	DisplayName   string                 `protobuf:"bytes,2,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AccessTokenOrganization) Reset() {
	*x = AccessTokenOrganization{}
	mi := &file_tesseral_common_v1_common_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AccessTokenOrganization) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessTokenOrganization) ProtoMessage() {}

func (x *AccessTokenOrganization) ProtoReflect() protoreflect.Message {
	mi := &file_tesseral_common_v1_common_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessTokenOrganization.ProtoReflect.Descriptor instead.
func (*AccessTokenOrganization) Descriptor() ([]byte, []int) {
	return file_tesseral_common_v1_common_proto_rawDescGZIP(), []int{3}
}

func (x *AccessTokenOrganization) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *AccessTokenOrganization) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

type AccessTokenImpersonator struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Email         string                 `protobuf:"bytes,1,opt,name=email,proto3" json:"email,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AccessTokenImpersonator) Reset() {
	*x = AccessTokenImpersonator{}
	mi := &file_tesseral_common_v1_common_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AccessTokenImpersonator) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessTokenImpersonator) ProtoMessage() {}

func (x *AccessTokenImpersonator) ProtoReflect() protoreflect.Message {
	mi := &file_tesseral_common_v1_common_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessTokenImpersonator.ProtoReflect.Descriptor instead.
func (*AccessTokenImpersonator) Descriptor() ([]byte, []int) {
	return file_tesseral_common_v1_common_proto_rawDescGZIP(), []int{4}
}

func (x *AccessTokenImpersonator) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

type ErrorDetail struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Description   string                 `protobuf:"bytes,1,opt,name=description,proto3" json:"description,omitempty"`
	DocsLink      string                 `protobuf:"bytes,2,opt,name=docs_link,json=docsLink,proto3" json:"docs_link,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ErrorDetail) Reset() {
	*x = ErrorDetail{}
	mi := &file_tesseral_common_v1_common_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ErrorDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ErrorDetail) ProtoMessage() {}

func (x *ErrorDetail) ProtoReflect() protoreflect.Message {
	mi := &file_tesseral_common_v1_common_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ErrorDetail.ProtoReflect.Descriptor instead.
func (*ErrorDetail) Descriptor() ([]byte, []int) {
	return file_tesseral_common_v1_common_proto_rawDescGZIP(), []int{5}
}

func (x *ErrorDetail) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ErrorDetail) GetDocsLink() string {
	if x != nil {
		return x.DocsLink
	}
	return ""
}

// Audit log events may be generated by Tesseral or projects and are distributed to
// endpoints configured at the organization level.
type AuditLogEvent struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The unique ID of the event.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The ID of the organization associated with the event, if any.
	OrganizationId *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
	// The ID of the user associated with the event, if any.
	UserId *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// The ID of the session associated with the event, if any.
	SessionId *wrapperspb.StringValue `protobuf:"bytes,4,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	// The ID of the API Key associated with the event, if any.
	ApiKeyId *wrapperspb.StringValue `protobuf:"bytes,5,opt,name=api_key_id,json=apiKeyId,proto3" json:"api_key_id,omitempty"`
	// The time the event occurred.
	//
	// This can optionally be provided on input when the event occurred at some point in the past.
	// Otherwise, this will be returned on output and defaults to the time the event is published.
	EventTime *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=event_time,json=eventTime,proto3" json:"event_time,omitempty"`
	// The name of the event.
	EventName string `protobuf:"bytes,7,opt,name=event_name,json=eventName,proto3" json:"event_name,omitempty"`
	// The event payload JSON.
	EventDetails  *structpb.Struct `protobuf:"bytes,8,opt,name=event_details,json=eventDetails,proto3" json:"event_details,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AuditLogEvent) Reset() {
	*x = AuditLogEvent{}
	mi := &file_tesseral_common_v1_common_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AuditLogEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuditLogEvent) ProtoMessage() {}

func (x *AuditLogEvent) ProtoReflect() protoreflect.Message {
	mi := &file_tesseral_common_v1_common_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuditLogEvent.ProtoReflect.Descriptor instead.
func (*AuditLogEvent) Descriptor() ([]byte, []int) {
	return file_tesseral_common_v1_common_proto_rawDescGZIP(), []int{6}
}

func (x *AuditLogEvent) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *AuditLogEvent) GetOrganizationId() *wrapperspb.StringValue {
	if x != nil {
		return x.OrganizationId
	}
	return nil
}

func (x *AuditLogEvent) GetUserId() *wrapperspb.StringValue {
	if x != nil {
		return x.UserId
	}
	return nil
}

func (x *AuditLogEvent) GetSessionId() *wrapperspb.StringValue {
	if x != nil {
		return x.SessionId
	}
	return nil
}

func (x *AuditLogEvent) GetApiKeyId() *wrapperspb.StringValue {
	if x != nil {
		return x.ApiKeyId
	}
	return nil
}

func (x *AuditLogEvent) GetEventTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EventTime
	}
	return nil
}

func (x *AuditLogEvent) GetEventName() string {
	if x != nil {
		return x.EventName
	}
	return ""
}

func (x *AuditLogEvent) GetEventDetails() *structpb.Struct {
	if x != nil {
		return x.EventDetails
	}
	return nil
}

var File_tesseral_common_v1_common_proto protoreflect.FileDescriptor

var file_tesseral_common_v1_common_proto_rawDesc = string([]byte{
	0x0a, 0x1f, 0x74, 0x65, 0x73, 0x73, 0x65, 0x72, 0x61, 0x6c, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x12, 0x74, 0x65, 0x73, 0x73, 0x65, 0x72, 0x61, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0xb4, 0x03, 0x0a, 0x0f, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x73, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x69, 0x73, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x75,
	0x62, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x73, 0x75, 0x62, 0x12, 0x10, 0x0a, 0x03,
	0x61, 0x75, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x61, 0x75, 0x64, 0x12, 0x10,
	0x0a, 0x03, 0x65, 0x78, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x65, 0x78, 0x70,
	0x12, 0x10, 0x0a, 0x03, 0x6e, 0x62, 0x66, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x6e,
	0x62, 0x66, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x61, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x03, 0x69, 0x61, 0x74, 0x12, 0x40, 0x0a, 0x07, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x74, 0x65, 0x73, 0x73, 0x65, 0x72, 0x61, 0x6c,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x37, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x74, 0x65, 0x73, 0x73, 0x65, 0x72, 0x61, 0x6c, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12,
	0x4f, 0x0a, 0x0c, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x74, 0x65, 0x73, 0x73, 0x65, 0x72, 0x61, 0x6c,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x0c, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x18, 0x0a, 0x07, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x07, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x4f, 0x0a, 0x0c, 0x69, 0x6d,
	0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2b, 0x2e, 0x74, 0x65, 0x73, 0x73, 0x65, 0x72, 0x61, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x49, 0x6d, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x0c, 0x69,
	0x6d, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x22, 0x24, 0x0a, 0x12, 0x41,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x22, 0x8a, 0x01, 0x0a, 0x0f, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x55, 0x73, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x21, 0x0a, 0x0c, 0x64,
	0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2e,
	0x0a, 0x13, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x70, 0x69, 0x63, 0x74, 0x75, 0x72,
	0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x70, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x50, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x55, 0x72, 0x6c, 0x22, 0x4c,
	0x0a, 0x17, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x4f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x69, 0x73,
	0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x2f, 0x0a, 0x17,
	0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x6d, 0x70, 0x65, 0x72,
	0x73, 0x6f, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x22, 0x4c, 0x0a,
	0x0b, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x20, 0x0a, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1b,
	0x0a, 0x09, 0x64, 0x6f, 0x63, 0x73, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x64, 0x6f, 0x63, 0x73, 0x4c, 0x69, 0x6e, 0x6b, 0x22, 0xae, 0x03, 0x0a, 0x0d,
	0x41, 0x75, 0x64, 0x69, 0x74, 0x4c, 0x6f, 0x67, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x45, 0x0a,
	0x0f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x0e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x12, 0x35, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x3b, 0x0a, 0x0a, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x3a, 0x0a, 0x0a, 0x61, 0x70, 0x69, 0x5f,
	0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x61, 0x70, 0x69, 0x4b,
	0x65, 0x79, 0x49, 0x64, 0x12, 0x39, 0x0a, 0x0a, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x1d, 0x0a, 0x0a, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3c,
	0x0a, 0x0d, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x0c,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x42, 0xe2, 0x01, 0x0a,
	0x16, 0x63, 0x6f, 0x6d, 0x2e, 0x74, 0x65, 0x73, 0x73, 0x65, 0x72, 0x61, 0x6c, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x42, 0x0b, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x51, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x74, 0x65, 0x73, 0x73, 0x65, 0x72, 0x61, 0x6c, 0x2d, 0x6c, 0x61, 0x62, 0x73,
	0x2f, 0x74, 0x65, 0x73, 0x73, 0x65, 0x72, 0x61, 0x6c, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x74, 0x65,
	0x73, 0x73, 0x65, 0x72, 0x61, 0x6c, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x76, 0x31,
	0x3b, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x76, 0x31, 0xa2, 0x02, 0x03, 0x54, 0x43, 0x58, 0xaa,
	0x02, 0x12, 0x54, 0x65, 0x73, 0x73, 0x65, 0x72, 0x61, 0x6c, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x12, 0x54, 0x65, 0x73, 0x73, 0x65, 0x72, 0x61, 0x6c, 0x5c,
	0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5c, 0x56, 0x31, 0xe2, 0x02, 0x1e, 0x54, 0x65, 0x73, 0x73,
	0x65, 0x72, 0x61, 0x6c, 0x5c, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5c, 0x56, 0x31, 0x5c, 0x47,
	0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x14, 0x54, 0x65, 0x73,
	0x73, 0x65, 0x72, 0x61, 0x6c, 0x3a, 0x3a, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x3a, 0x3a, 0x56,
	0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_tesseral_common_v1_common_proto_rawDescOnce sync.Once
	file_tesseral_common_v1_common_proto_rawDescData []byte
)

func file_tesseral_common_v1_common_proto_rawDescGZIP() []byte {
	file_tesseral_common_v1_common_proto_rawDescOnce.Do(func() {
		file_tesseral_common_v1_common_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_tesseral_common_v1_common_proto_rawDesc), len(file_tesseral_common_v1_common_proto_rawDesc)))
	})
	return file_tesseral_common_v1_common_proto_rawDescData
}

var file_tesseral_common_v1_common_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_tesseral_common_v1_common_proto_goTypes = []any{
	(*AccessTokenData)(nil),         // 0: tesseral.common.v1.AccessTokenData
	(*AccessTokenSession)(nil),      // 1: tesseral.common.v1.AccessTokenSession
	(*AccessTokenUser)(nil),         // 2: tesseral.common.v1.AccessTokenUser
	(*AccessTokenOrganization)(nil), // 3: tesseral.common.v1.AccessTokenOrganization
	(*AccessTokenImpersonator)(nil), // 4: tesseral.common.v1.AccessTokenImpersonator
	(*ErrorDetail)(nil),             // 5: tesseral.common.v1.ErrorDetail
	(*AuditLogEvent)(nil),           // 6: tesseral.common.v1.AuditLogEvent
	(*wrapperspb.StringValue)(nil),  // 7: google.protobuf.StringValue
	(*timestamppb.Timestamp)(nil),   // 8: google.protobuf.Timestamp
	(*structpb.Struct)(nil),         // 9: google.protobuf.Struct
}
var file_tesseral_common_v1_common_proto_depIdxs = []int32{
	1,  // 0: tesseral.common.v1.AccessTokenData.session:type_name -> tesseral.common.v1.AccessTokenSession
	2,  // 1: tesseral.common.v1.AccessTokenData.user:type_name -> tesseral.common.v1.AccessTokenUser
	3,  // 2: tesseral.common.v1.AccessTokenData.organization:type_name -> tesseral.common.v1.AccessTokenOrganization
	4,  // 3: tesseral.common.v1.AccessTokenData.impersonator:type_name -> tesseral.common.v1.AccessTokenImpersonator
	7,  // 4: tesseral.common.v1.AuditLogEvent.organization_id:type_name -> google.protobuf.StringValue
	7,  // 5: tesseral.common.v1.AuditLogEvent.user_id:type_name -> google.protobuf.StringValue
	7,  // 6: tesseral.common.v1.AuditLogEvent.session_id:type_name -> google.protobuf.StringValue
	7,  // 7: tesseral.common.v1.AuditLogEvent.api_key_id:type_name -> google.protobuf.StringValue
	8,  // 8: tesseral.common.v1.AuditLogEvent.event_time:type_name -> google.protobuf.Timestamp
	9,  // 9: tesseral.common.v1.AuditLogEvent.event_details:type_name -> google.protobuf.Struct
	10, // [10:10] is the sub-list for method output_type
	10, // [10:10] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_tesseral_common_v1_common_proto_init() }
func file_tesseral_common_v1_common_proto_init() {
	if File_tesseral_common_v1_common_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_tesseral_common_v1_common_proto_rawDesc), len(file_tesseral_common_v1_common_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_tesseral_common_v1_common_proto_goTypes,
		DependencyIndexes: file_tesseral_common_v1_common_proto_depIdxs,
		MessageInfos:      file_tesseral_common_v1_common_proto_msgTypes,
	}.Build()
	File_tesseral_common_v1_common_proto = out.File
	file_tesseral_common_v1_common_proto_goTypes = nil
	file_tesseral_common_v1_common_proto_depIdxs = nil
}
