// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        (unknown)
// source: tesseral/backend/v1/models.proto

package backendv1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	structpb "google.golang.org/protobuf/types/known/structpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Represents a primary authentication factor.
type PrimaryAuthFactor int32

const (
	PrimaryAuthFactor_PRIMARY_AUTH_FACTOR_UNSPECIFIED PrimaryAuthFactor = 0
	// Log in with Email ("Magic Link").
	PrimaryAuthFactor_PRIMARY_AUTH_FACTOR_EMAIL PrimaryAuthFactor = 1
	// Log in with Google.
	PrimaryAuthFactor_PRIMARY_AUTH_FACTOR_GOOGLE PrimaryAuthFactor = 2
	// Log in with Microsoft.
	PrimaryAuthFactor_PRIMARY_AUTH_FACTOR_MICROSOFT PrimaryAuthFactor = 3
	// Log in with GitHub.
	PrimaryAuthFactor_PRIMARY_AUTH_FACTOR_GITHUB PrimaryAuthFactor = 6
	// Log in with SAML.
	PrimaryAuthFactor_PRIMARY_AUTH_FACTOR_SAML PrimaryAuthFactor = 4
	// Log in with OIDC.
	PrimaryAuthFactor_PRIMARY_AUTH_FACTOR_OIDC PrimaryAuthFactor = 7
	// Impersonated sessions use this special primary authentication factor.
	PrimaryAuthFactor_PRIMARY_AUTH_FACTOR_IMPERSONATION PrimaryAuthFactor = 5
)

// Enum value maps for PrimaryAuthFactor.
var (
	PrimaryAuthFactor_name = map[int32]string{
		0: "PRIMARY_AUTH_FACTOR_UNSPECIFIED",
		1: "PRIMARY_AUTH_FACTOR_EMAIL",
		2: "PRIMARY_AUTH_FACTOR_GOOGLE",
		3: "PRIMARY_AUTH_FACTOR_MICROSOFT",
		6: "PRIMARY_AUTH_FACTOR_GITHUB",
		4: "PRIMARY_AUTH_FACTOR_SAML",
		7: "PRIMARY_AUTH_FACTOR_OIDC",
		5: "PRIMARY_AUTH_FACTOR_IMPERSONATION",
	}
	PrimaryAuthFactor_value = map[string]int32{
		"PRIMARY_AUTH_FACTOR_UNSPECIFIED":   0,
		"PRIMARY_AUTH_FACTOR_EMAIL":         1,
		"PRIMARY_AUTH_FACTOR_GOOGLE":        2,
		"PRIMARY_AUTH_FACTOR_MICROSOFT":     3,
		"PRIMARY_AUTH_FACTOR_GITHUB":        6,
		"PRIMARY_AUTH_FACTOR_SAML":          4,
		"PRIMARY_AUTH_FACTOR_OIDC":          7,
		"PRIMARY_AUTH_FACTOR_IMPERSONATION": 5,
	}
)

func (x PrimaryAuthFactor) Enum() *PrimaryAuthFactor {
	p := new(PrimaryAuthFactor)
	*p = x
	return p
}

func (x PrimaryAuthFactor) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PrimaryAuthFactor) Descriptor() protoreflect.EnumDescriptor {
	return file_tesseral_backend_v1_models_proto_enumTypes[0].Descriptor()
}

func (PrimaryAuthFactor) Type() protoreflect.EnumType {
	return &file_tesseral_backend_v1_models_proto_enumTypes[0]
}

func (x PrimaryAuthFactor) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PrimaryAuthFactor.Descriptor instead.
func (PrimaryAuthFactor) EnumDescriptor() ([]byte, []int) {
	return file_tesseral_backend_v1_models_proto_rawDescGZIP(), []int{0}
}

type AuditLogEventResourceType int32

const (
	AuditLogEventResourceType_AUDIT_LOG_EVENT_RESOURCE_TYPE_UNSPECIFIED     AuditLogEventResourceType = 0
	AuditLogEventResourceType_AUDIT_LOG_EVENT_RESOURCE_TYPE_API_KEY         AuditLogEventResourceType = 1
	AuditLogEventResourceType_AUDIT_LOG_EVENT_RESOURCE_TYPE_ORGANIZATION    AuditLogEventResourceType = 2
	AuditLogEventResourceType_AUDIT_LOG_EVENT_RESOURCE_TYPE_PASSKEY         AuditLogEventResourceType = 3
	AuditLogEventResourceType_AUDIT_LOG_EVENT_RESOURCE_TYPE_ROLE            AuditLogEventResourceType = 4
	AuditLogEventResourceType_AUDIT_LOG_EVENT_RESOURCE_TYPE_SAML_CONNECTION AuditLogEventResourceType = 5
	AuditLogEventResourceType_AUDIT_LOG_EVENT_RESOURCE_TYPE_OIDC_CONNECTION AuditLogEventResourceType = 10
	AuditLogEventResourceType_AUDIT_LOG_EVENT_RESOURCE_TYPE_SCIM_API_KEY    AuditLogEventResourceType = 6
	AuditLogEventResourceType_AUDIT_LOG_EVENT_RESOURCE_TYPE_SESSION         AuditLogEventResourceType = 7
	AuditLogEventResourceType_AUDIT_LOG_EVENT_RESOURCE_TYPE_USER_INVITE     AuditLogEventResourceType = 8
	AuditLogEventResourceType_AUDIT_LOG_EVENT_RESOURCE_TYPE_USER            AuditLogEventResourceType = 9
)

// Enum value maps for AuditLogEventResourceType.
var (
	AuditLogEventResourceType_name = map[int32]string{
		0:  "AUDIT_LOG_EVENT_RESOURCE_TYPE_UNSPECIFIED",
		1:  "AUDIT_LOG_EVENT_RESOURCE_TYPE_API_KEY",
		2:  "AUDIT_LOG_EVENT_RESOURCE_TYPE_ORGANIZATION",
		3:  "AUDIT_LOG_EVENT_RESOURCE_TYPE_PASSKEY",
		4:  "AUDIT_LOG_EVENT_RESOURCE_TYPE_ROLE",
		5:  "AUDIT_LOG_EVENT_RESOURCE_TYPE_SAML_CONNECTION",
		10: "AUDIT_LOG_EVENT_RESOURCE_TYPE_OIDC_CONNECTION",
		6:  "AUDIT_LOG_EVENT_RESOURCE_TYPE_SCIM_API_KEY",
		7:  "AUDIT_LOG_EVENT_RESOURCE_TYPE_SESSION",
		8:  "AUDIT_LOG_EVENT_RESOURCE_TYPE_USER_INVITE",
		9:  "AUDIT_LOG_EVENT_RESOURCE_TYPE_USER",
	}
	AuditLogEventResourceType_value = map[string]int32{
		"AUDIT_LOG_EVENT_RESOURCE_TYPE_UNSPECIFIED":     0,
		"AUDIT_LOG_EVENT_RESOURCE_TYPE_API_KEY":         1,
		"AUDIT_LOG_EVENT_RESOURCE_TYPE_ORGANIZATION":    2,
		"AUDIT_LOG_EVENT_RESOURCE_TYPE_PASSKEY":         3,
		"AUDIT_LOG_EVENT_RESOURCE_TYPE_ROLE":            4,
		"AUDIT_LOG_EVENT_RESOURCE_TYPE_SAML_CONNECTION": 5,
		"AUDIT_LOG_EVENT_RESOURCE_TYPE_OIDC_CONNECTION": 10,
		"AUDIT_LOG_EVENT_RESOURCE_TYPE_SCIM_API_KEY":    6,
		"AUDIT_LOG_EVENT_RESOURCE_TYPE_SESSION":         7,
		"AUDIT_LOG_EVENT_RESOURCE_TYPE_USER_INVITE":     8,
		"AUDIT_LOG_EVENT_RESOURCE_TYPE_USER":            9,
	}
)

func (x AuditLogEventResourceType) Enum() *AuditLogEventResourceType {
	p := new(AuditLogEventResourceType)
	*p = x
	return p
}

func (x AuditLogEventResourceType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AuditLogEventResourceType) Descriptor() protoreflect.EnumDescriptor {
	return file_tesseral_backend_v1_models_proto_enumTypes[1].Descriptor()
}

func (AuditLogEventResourceType) Type() protoreflect.EnumType {
	return &file_tesseral_backend_v1_models_proto_enumTypes[1]
}

func (x AuditLogEventResourceType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AuditLogEventResourceType.Descriptor instead.
func (AuditLogEventResourceType) EnumDescriptor() ([]byte, []int) {
	return file_tesseral_backend_v1_models_proto_rawDescGZIP(), []int{1}
}

// Projects are the top-level object in Tesseral.
//
// Everything in Tesseral happens within the context of a Project.
type Project struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The Project ID. Starts with `project_...`.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// A human-friendly name for the Project.
	DisplayName string `protobuf:"bytes,2,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	// When the Project was created.
	CreateTime *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	// When the Project was last modified.
	UpdateTime *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	// Whether the Project supports "Log in with Google".
	LogInWithGoogle *bool `protobuf:"varint,6,opt,name=log_in_with_google,json=logInWithGoogle,proto3,oneof" json:"log_in_with_google,omitempty"`
	// Whether the Project supports "Log in with Microsoft".
	LogInWithMicrosoft *bool `protobuf:"varint,7,opt,name=log_in_with_microsoft,json=logInWithMicrosoft,proto3,oneof" json:"log_in_with_microsoft,omitempty"`
	// Whether the Project supports "Log in with GitHub".
	LogInWithGithub *bool `protobuf:"varint,24,opt,name=log_in_with_github,json=logInWithGithub,proto3,oneof" json:"log_in_with_github,omitempty"`
	// Whether the Project supports "Log in with email".
	LogInWithEmail *bool `protobuf:"varint,15,opt,name=log_in_with_email,json=logInWithEmail,proto3,oneof" json:"log_in_with_email,omitempty"`
	// Whether the Project supports "Log in with password".
	LogInWithPassword *bool `protobuf:"varint,5,opt,name=log_in_with_password,json=logInWithPassword,proto3,oneof" json:"log_in_with_password,omitempty"`
	// Whether the Project supports "Log in with SAML".
	LogInWithSaml *bool `protobuf:"varint,16,opt,name=log_in_with_saml,json=logInWithSaml,proto3,oneof" json:"log_in_with_saml,omitempty"`
	// Whether the Project supports "Log in with OIDC".
	LogInWithOidc *bool `protobuf:"varint,30,opt,name=log_in_with_oidc,json=logInWithOidc,proto3,oneof" json:"log_in_with_oidc,omitempty"`
	// Whether the Project supports authenticator apps as a secondary auth factor.
	LogInWithAuthenticatorApp *bool `protobuf:"varint,13,opt,name=log_in_with_authenticator_app,json=logInWithAuthenticatorApp,proto3,oneof" json:"log_in_with_authenticator_app,omitempty"`
	// Whether the Project supports passkeys as a secondary auth factor.
	LogInWithPasskey *bool `protobuf:"varint,14,opt,name=log_in_with_passkey,json=logInWithPasskey,proto3,oneof" json:"log_in_with_passkey,omitempty"`
	// The OAuth Client ID to use for "Log in with Google".
	GoogleOauthClientId string `protobuf:"bytes,8,opt,name=google_oauth_client_id,json=googleOauthClientId,proto3" json:"google_oauth_client_id,omitempty"`
	// The OAuth Client Secret to use for "Log in with Google".
	//
	// This field is write-only.
	GoogleOauthClientSecret string `protobuf:"bytes,9,opt,name=google_oauth_client_secret,json=googleOauthClientSecret,proto3" json:"google_oauth_client_secret,omitempty"`
	// The OAuth Client ID to use for "Log in with Microsoft".
	MicrosoftOauthClientId string `protobuf:"bytes,10,opt,name=microsoft_oauth_client_id,json=microsoftOauthClientId,proto3" json:"microsoft_oauth_client_id,omitempty"`
	// The OAuth Client Secret to use for "Log in with Microsoft".
	//
	// This field is write-only.
	MicrosoftOauthClientSecret string `protobuf:"bytes,11,opt,name=microsoft_oauth_client_secret,json=microsoftOauthClientSecret,proto3" json:"microsoft_oauth_client_secret,omitempty"`
	// The OAuth Client ID to use for "Log in with GitHub".
	GithubOauthClientId string `protobuf:"bytes,26,opt,name=github_oauth_client_id,json=githubOauthClientId,proto3" json:"github_oauth_client_id,omitempty"`
	// The OAuth Client ID to use for "Log in with GitHub"
	//
	// This field is write only.
	GithubOauthClientSecret string `protobuf:"bytes,25,opt,name=github_oauth_client_secret,json=githubOauthClientSecret,proto3" json:"github_oauth_client_secret,omitempty"`
	// The domain where the Project's Vault lives.
	VaultDomain string `protobuf:"bytes,12,opt,name=vault_domain,json=vaultDomain,proto3" json:"vault_domain,omitempty"`
	// Whether vault_domain is different from the automatically-assigned one.
	VaultDomainCustom bool `protobuf:"varint,23,opt,name=vault_domain_custom,json=vaultDomainCustom,proto3" json:"vault_domain_custom,omitempty"`
	// The set of domains the Project trusts.
	//
	// Client-side JavaScript on these domains can take actions on behalf of
	// logged-in Users.
	TrustedDomains []string `protobuf:"bytes,17,rep,name=trusted_domains,json=trustedDomains,proto3" json:"trusted_domains,omitempty"`
	// The domain that authentication cookies are stored on.
	CookieDomain string `protobuf:"bytes,22,opt,name=cookie_domain,json=cookieDomain,proto3" json:"cookie_domain,omitempty"`
	// Where Users are redirected after returning from the Vault.
	RedirectUri string `protobuf:"bytes,18,opt,name=redirect_uri,json=redirectUri,proto3" json:"redirect_uri,omitempty"`
	// Where Users are redirected after logging in.
	AfterLoginRedirectUri *string `protobuf:"bytes,19,opt,name=after_login_redirect_uri,json=afterLoginRedirectUri,proto3,oneof" json:"after_login_redirect_uri,omitempty"`
	// Where Users are redirected after signing up.
	AfterSignupRedirectUri *string `protobuf:"bytes,20,opt,name=after_signup_redirect_uri,json=afterSignupRedirectUri,proto3,oneof" json:"after_signup_redirect_uri,omitempty"`
	// Emails sent to Users come from this domain.
	EmailSendFromDomain string `protobuf:"bytes,21,opt,name=email_send_from_domain,json=emailSendFromDomain,proto3" json:"email_send_from_domain,omitempty"`
	// Whether the Project supports API Keys.
	ApiKeysEnabled *bool `protobuf:"varint,27,opt,name=api_keys_enabled,json=apiKeysEnabled,proto3,oneof" json:"api_keys_enabled,omitempty"`
	// The prefix used for API Key secret tokens.
	ApiKeySecretTokenPrefix *string `protobuf:"bytes,28,opt,name=api_key_secret_token_prefix,json=apiKeySecretTokenPrefix,proto3,oneof" json:"api_key_secret_token_prefix,omitempty"`
	// Whether the Project has audit logging enabled.
	AuditLogsEnabled *bool `protobuf:"varint,29,opt,name=audit_logs_enabled,json=auditLogsEnabled,proto3,oneof" json:"audit_logs_enabled,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *Project) Reset() {
	*x = Project{}
	mi := &file_tesseral_backend_v1_models_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Project) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Project) ProtoMessage() {}

func (x *Project) ProtoReflect() protoreflect.Message {
	mi := &file_tesseral_backend_v1_models_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Project.ProtoReflect.Descriptor instead.
func (*Project) Descriptor() ([]byte, []int) {
	return file_tesseral_backend_v1_models_proto_rawDescGZIP(), []int{0}
}

func (x *Project) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Project) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *Project) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *Project) GetUpdateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdateTime
	}
	return nil
}

func (x *Project) GetLogInWithGoogle() bool {
	if x != nil && x.LogInWithGoogle != nil {
		return *x.LogInWithGoogle
	}
	return false
}

func (x *Project) GetLogInWithMicrosoft() bool {
	if x != nil && x.LogInWithMicrosoft != nil {
		return *x.LogInWithMicrosoft
	}
	return false
}

func (x *Project) GetLogInWithGithub() bool {
	if x != nil && x.LogInWithGithub != nil {
		return *x.LogInWithGithub
	}
	return false
}

func (x *Project) GetLogInWithEmail() bool {
	if x != nil && x.LogInWithEmail != nil {
		return *x.LogInWithEmail
	}
	return false
}

func (x *Project) GetLogInWithPassword() bool {
	if x != nil && x.LogInWithPassword != nil {
		return *x.LogInWithPassword
	}
	return false
}

func (x *Project) GetLogInWithSaml() bool {
	if x != nil && x.LogInWithSaml != nil {
		return *x.LogInWithSaml
	}
	return false
}

func (x *Project) GetLogInWithOidc() bool {
	if x != nil && x.LogInWithOidc != nil {
		return *x.LogInWithOidc
	}
	return false
}

func (x *Project) GetLogInWithAuthenticatorApp() bool {
	if x != nil && x.LogInWithAuthenticatorApp != nil {
		return *x.LogInWithAuthenticatorApp
	}
	return false
}

func (x *Project) GetLogInWithPasskey() bool {
	if x != nil && x.LogInWithPasskey != nil {
		return *x.LogInWithPasskey
	}
	return false
}

func (x *Project) GetGoogleOauthClientId() string {
	if x != nil {
		return x.GoogleOauthClientId
	}
	return ""
}

func (x *Project) GetGoogleOauthClientSecret() string {
	if x != nil {
		return x.GoogleOauthClientSecret
	}
	return ""
}

func (x *Project) GetMicrosoftOauthClientId() string {
	if x != nil {
		return x.MicrosoftOauthClientId
	}
	return ""
}

func (x *Project) GetMicrosoftOauthClientSecret() string {
	if x != nil {
		return x.MicrosoftOauthClientSecret
	}
	return ""
}

func (x *Project) GetGithubOauthClientId() string {
	if x != nil {
		return x.GithubOauthClientId
	}
	return ""
}

func (x *Project) GetGithubOauthClientSecret() string {
	if x != nil {
		return x.GithubOauthClientSecret
	}
	return ""
}

func (x *Project) GetVaultDomain() string {
	if x != nil {
		return x.VaultDomain
	}
	return ""
}

func (x *Project) GetVaultDomainCustom() bool {
	if x != nil {
		return x.VaultDomainCustom
	}
	return false
}

func (x *Project) GetTrustedDomains() []string {
	if x != nil {
		return x.TrustedDomains
	}
	return nil
}

func (x *Project) GetCookieDomain() string {
	if x != nil {
		return x.CookieDomain
	}
	return ""
}

func (x *Project) GetRedirectUri() string {
	if x != nil {
		return x.RedirectUri
	}
	return ""
}

func (x *Project) GetAfterLoginRedirectUri() string {
	if x != nil && x.AfterLoginRedirectUri != nil {
		return *x.AfterLoginRedirectUri
	}
	return ""
}

func (x *Project) GetAfterSignupRedirectUri() string {
	if x != nil && x.AfterSignupRedirectUri != nil {
		return *x.AfterSignupRedirectUri
	}
	return ""
}

func (x *Project) GetEmailSendFromDomain() string {
	if x != nil {
		return x.EmailSendFromDomain
	}
	return ""
}

func (x *Project) GetApiKeysEnabled() bool {
	if x != nil && x.ApiKeysEnabled != nil {
		return *x.ApiKeysEnabled
	}
	return false
}

func (x *Project) GetApiKeySecretTokenPrefix() string {
	if x != nil && x.ApiKeySecretTokenPrefix != nil {
		return *x.ApiKeySecretTokenPrefix
	}
	return ""
}

func (x *Project) GetAuditLogsEnabled() bool {
	if x != nil && x.AuditLogsEnabled != nil {
		return *x.AuditLogsEnabled
	}
	return false
}

type VaultDomainSettings struct {
	state                      protoimpl.MessageState          `protogen:"open.v1"`
	PendingDomain              string                          `protobuf:"bytes,1,opt,name=pending_domain,json=pendingDomain,proto3" json:"pending_domain,omitempty"`
	PendingVaultDomainReady    bool                            `protobuf:"varint,2,opt,name=pending_vault_domain_ready,json=pendingVaultDomainReady,proto3" json:"pending_vault_domain_ready,omitempty"`
	PendingSendFromDomainReady bool                            `protobuf:"varint,3,opt,name=pending_send_from_domain_ready,json=pendingSendFromDomainReady,proto3" json:"pending_send_from_domain_ready,omitempty"`
	VaultDomainRecords         []*VaultDomainSettingsDNSRecord `protobuf:"bytes,4,rep,name=vault_domain_records,json=vaultDomainRecords,proto3" json:"vault_domain_records,omitempty"`
	EmailSendFromRecords       []*VaultDomainSettingsDNSRecord `protobuf:"bytes,5,rep,name=email_send_from_records,json=emailSendFromRecords,proto3" json:"email_send_from_records,omitempty"`
	unknownFields              protoimpl.UnknownFields
	sizeCache                  protoimpl.SizeCache
}

func (x *VaultDomainSettings) Reset() {
	*x = VaultDomainSettings{}
	mi := &file_tesseral_backend_v1_models_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VaultDomainSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VaultDomainSettings) ProtoMessage() {}

func (x *VaultDomainSettings) ProtoReflect() protoreflect.Message {
	mi := &file_tesseral_backend_v1_models_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VaultDomainSettings.ProtoReflect.Descriptor instead.
func (*VaultDomainSettings) Descriptor() ([]byte, []int) {
	return file_tesseral_backend_v1_models_proto_rawDescGZIP(), []int{1}
}

func (x *VaultDomainSettings) GetPendingDomain() string {
	if x != nil {
		return x.PendingDomain
	}
	return ""
}

func (x *VaultDomainSettings) GetPendingVaultDomainReady() bool {
	if x != nil {
		return x.PendingVaultDomainReady
	}
	return false
}

func (x *VaultDomainSettings) GetPendingSendFromDomainReady() bool {
	if x != nil {
		return x.PendingSendFromDomainReady
	}
	return false
}

func (x *VaultDomainSettings) GetVaultDomainRecords() []*VaultDomainSettingsDNSRecord {
	if x != nil {
		return x.VaultDomainRecords
	}
	return nil
}

func (x *VaultDomainSettings) GetEmailSendFromRecords() []*VaultDomainSettingsDNSRecord {
	if x != nil {
		return x.EmailSendFromRecords
	}
	return nil
}

type VaultDomainSettingsDNSRecord struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	Type             string                 `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Name             string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	WantValue        string                 `protobuf:"bytes,3,opt,name=want_value,json=wantValue,proto3" json:"want_value,omitempty"`
	ActualValues     []string               `protobuf:"bytes,4,rep,name=actual_values,json=actualValues,proto3" json:"actual_values,omitempty"`
	ActualTtlSeconds uint32                 `protobuf:"varint,5,opt,name=actual_ttl_seconds,json=actualTtlSeconds,proto3" json:"actual_ttl_seconds,omitempty"`
	Correct          bool                   `protobuf:"varint,6,opt,name=correct,proto3" json:"correct,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *VaultDomainSettingsDNSRecord) Reset() {
	*x = VaultDomainSettingsDNSRecord{}
	mi := &file_tesseral_backend_v1_models_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VaultDomainSettingsDNSRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VaultDomainSettingsDNSRecord) ProtoMessage() {}

func (x *VaultDomainSettingsDNSRecord) ProtoReflect() protoreflect.Message {
	mi := &file_tesseral_backend_v1_models_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VaultDomainSettingsDNSRecord.ProtoReflect.Descriptor instead.
func (*VaultDomainSettingsDNSRecord) Descriptor() ([]byte, []int) {
	return file_tesseral_backend_v1_models_proto_rawDescGZIP(), []int{2}
}

func (x *VaultDomainSettingsDNSRecord) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *VaultDomainSettingsDNSRecord) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *VaultDomainSettingsDNSRecord) GetWantValue() string {
	if x != nil {
		return x.WantValue
	}
	return ""
}

func (x *VaultDomainSettingsDNSRecord) GetActualValues() []string {
	if x != nil {
		return x.ActualValues
	}
	return nil
}

func (x *VaultDomainSettingsDNSRecord) GetActualTtlSeconds() uint32 {
	if x != nil {
		return x.ActualTtlSeconds
	}
	return 0
}

func (x *VaultDomainSettingsDNSRecord) GetCorrect() bool {
	if x != nil {
		return x.Correct
	}
	return false
}

type ProjectUISettings struct {
	state                   protoimpl.MessageState `protogen:"open.v1"`
	Id                      string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	ProjectId               string                 `protobuf:"bytes,2,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	CreateTime              *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	UpdateTime              *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	LogoUrl                 string                 `protobuf:"bytes,5,opt,name=logo_url,json=logoUrl,proto3" json:"logo_url,omitempty"`
	PrimaryColor            string                 `protobuf:"bytes,7,opt,name=primary_color,json=primaryColor,proto3" json:"primary_color,omitempty"`
	DetectDarkModeEnabled   bool                   `protobuf:"varint,8,opt,name=detect_dark_mode_enabled,json=detectDarkModeEnabled,proto3" json:"detect_dark_mode_enabled,omitempty"`
	DarkModeLogoUrl         string                 `protobuf:"bytes,9,opt,name=dark_mode_logo_url,json=darkModeLogoUrl,proto3" json:"dark_mode_logo_url,omitempty"`
	DarkModePrimaryColor    string                 `protobuf:"bytes,10,opt,name=dark_mode_primary_color,json=darkModePrimaryColor,proto3" json:"dark_mode_primary_color,omitempty"`
	LogInLayout             string                 `protobuf:"bytes,11,opt,name=log_in_layout,json=logInLayout,proto3" json:"log_in_layout,omitempty"`
	AutoCreateOrganizations bool                   `protobuf:"varint,12,opt,name=auto_create_organizations,json=autoCreateOrganizations,proto3" json:"auto_create_organizations,omitempty"`
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
}

func (x *ProjectUISettings) Reset() {
	*x = ProjectUISettings{}
	mi := &file_tesseral_backend_v1_models_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProjectUISettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProjectUISettings) ProtoMessage() {}

func (x *ProjectUISettings) ProtoReflect() protoreflect.Message {
	mi := &file_tesseral_backend_v1_models_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProjectUISettings.ProtoReflect.Descriptor instead.
func (*ProjectUISettings) Descriptor() ([]byte, []int) {
	return file_tesseral_backend_v1_models_proto_rawDescGZIP(), []int{3}
}

func (x *ProjectUISettings) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ProjectUISettings) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *ProjectUISettings) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *ProjectUISettings) GetUpdateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdateTime
	}
	return nil
}

func (x *ProjectUISettings) GetLogoUrl() string {
	if x != nil {
		return x.LogoUrl
	}
	return ""
}

func (x *ProjectUISettings) GetPrimaryColor() string {
	if x != nil {
		return x.PrimaryColor
	}
	return ""
}

func (x *ProjectUISettings) GetDetectDarkModeEnabled() bool {
	if x != nil {
		return x.DetectDarkModeEnabled
	}
	return false
}

func (x *ProjectUISettings) GetDarkModeLogoUrl() string {
	if x != nil {
		return x.DarkModeLogoUrl
	}
	return ""
}

func (x *ProjectUISettings) GetDarkModePrimaryColor() string {
	if x != nil {
		return x.DarkModePrimaryColor
	}
	return ""
}

func (x *ProjectUISettings) GetLogInLayout() string {
	if x != nil {
		return x.LogInLayout
	}
	return ""
}

func (x *ProjectUISettings) GetAutoCreateOrganizations() bool {
	if x != nil {
		return x.AutoCreateOrganizations
	}
	return false
}

// An Organization represents one of your corporate customers.
type Organization struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The Organization ID. Starts with `org_...`.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// A human-friendly name for the Organization.
	DisplayName string `protobuf:"bytes,2,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	// When the Organization was created.
	CreateTime *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	// When the Organization was last updated.
	UpdateTime *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	// Whether the Organization supports "Log in with Google".
	LogInWithGoogle *bool `protobuf:"varint,7,opt,name=log_in_with_google,json=logInWithGoogle,proto3,oneof" json:"log_in_with_google,omitempty"`
	// Whether the Organization supports "Log in with Microsoft".
	LogInWithMicrosoft *bool `protobuf:"varint,8,opt,name=log_in_with_microsoft,json=logInWithMicrosoft,proto3,oneof" json:"log_in_with_microsoft,omitempty"`
	// Whether the Organization supports Log in with GitHub.
	LogInWithGithub *bool `protobuf:"varint,17,opt,name=log_in_with_github,json=logInWithGithub,proto3,oneof" json:"log_in_with_github,omitempty"`
	// Whether the Organization supports "Log in with email".
	LogInWithEmail *bool `protobuf:"varint,14,opt,name=log_in_with_email,json=logInWithEmail,proto3,oneof" json:"log_in_with_email,omitempty"`
	// Whether the Organization supports "Log in with password".
	LogInWithPassword *bool `protobuf:"varint,6,opt,name=log_in_with_password,json=logInWithPassword,proto3,oneof" json:"log_in_with_password,omitempty"`
	// Whether the Organization supports "Log in with SAML".
	LogInWithSaml *bool `protobuf:"varint,9,opt,name=log_in_with_saml,json=logInWithSaml,proto3,oneof" json:"log_in_with_saml,omitempty"`
	// Whether the Organization supports "Log in with OIDC".
	LogInWithOidc *bool `protobuf:"varint,18,opt,name=log_in_with_oidc,json=logInWithOidc,proto3,oneof" json:"log_in_with_oidc,omitempty"`
	// Whether the Organization supports authenticator apps as a secondary auth factor.
	LogInWithAuthenticatorApp *bool `protobuf:"varint,11,opt,name=log_in_with_authenticator_app,json=logInWithAuthenticatorApp,proto3,oneof" json:"log_in_with_authenticator_app,omitempty"`
	// Whether the Organization supports passkeys as a secondary auth factor.
	LogInWithPasskey *bool `protobuf:"varint,12,opt,name=log_in_with_passkey,json=logInWithPasskey,proto3,oneof" json:"log_in_with_passkey,omitempty"`
	// Whether the Organization requires a secondary auth factor.
	RequireMfa *bool `protobuf:"varint,13,opt,name=require_mfa,json=requireMfa,proto3,oneof" json:"require_mfa,omitempty"`
	// Whether the Organization has SCIM enabled.
	ScimEnabled *bool `protobuf:"varint,10,opt,name=scim_enabled,json=scimEnabled,proto3,oneof" json:"scim_enabled,omitempty"`
	// Whether the Organization's Users can create Organization-specific Roles.
	CustomRolesEnabled *bool `protobuf:"varint,15,opt,name=custom_roles_enabled,json=customRolesEnabled,proto3,oneof" json:"custom_roles_enabled,omitempty"`
	// Whether API Keys are enabled for the Organization.
	ApiKeysEnabled *bool `protobuf:"varint,16,opt,name=api_keys_enabled,json=apiKeysEnabled,proto3,oneof" json:"api_keys_enabled,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *Organization) Reset() {
	*x = Organization{}
	mi := &file_tesseral_backend_v1_models_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Organization) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Organization) ProtoMessage() {}

func (x *Organization) ProtoReflect() protoreflect.Message {
	mi := &file_tesseral_backend_v1_models_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Organization.ProtoReflect.Descriptor instead.
func (*Organization) Descriptor() ([]byte, []int) {
	return file_tesseral_backend_v1_models_proto_rawDescGZIP(), []int{4}
}

func (x *Organization) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Organization) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *Organization) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *Organization) GetUpdateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdateTime
	}
	return nil
}

func (x *Organization) GetLogInWithGoogle() bool {
	if x != nil && x.LogInWithGoogle != nil {
		return *x.LogInWithGoogle
	}
	return false
}

func (x *Organization) GetLogInWithMicrosoft() bool {
	if x != nil && x.LogInWithMicrosoft != nil {
		return *x.LogInWithMicrosoft
	}
	return false
}

func (x *Organization) GetLogInWithGithub() bool {
	if x != nil && x.LogInWithGithub != nil {
		return *x.LogInWithGithub
	}
	return false
}

func (x *Organization) GetLogInWithEmail() bool {
	if x != nil && x.LogInWithEmail != nil {
		return *x.LogInWithEmail
	}
	return false
}

func (x *Organization) GetLogInWithPassword() bool {
	if x != nil && x.LogInWithPassword != nil {
		return *x.LogInWithPassword
	}
	return false
}

func (x *Organization) GetLogInWithSaml() bool {
	if x != nil && x.LogInWithSaml != nil {
		return *x.LogInWithSaml
	}
	return false
}

func (x *Organization) GetLogInWithOidc() bool {
	if x != nil && x.LogInWithOidc != nil {
		return *x.LogInWithOidc
	}
	return false
}

func (x *Organization) GetLogInWithAuthenticatorApp() bool {
	if x != nil && x.LogInWithAuthenticatorApp != nil {
		return *x.LogInWithAuthenticatorApp
	}
	return false
}

func (x *Organization) GetLogInWithPasskey() bool {
	if x != nil && x.LogInWithPasskey != nil {
		return *x.LogInWithPasskey
	}
	return false
}

func (x *Organization) GetRequireMfa() bool {
	if x != nil && x.RequireMfa != nil {
		return *x.RequireMfa
	}
	return false
}

func (x *Organization) GetScimEnabled() bool {
	if x != nil && x.ScimEnabled != nil {
		return *x.ScimEnabled
	}
	return false
}

func (x *Organization) GetCustomRolesEnabled() bool {
	if x != nil && x.CustomRolesEnabled != nil {
		return *x.CustomRolesEnabled
	}
	return false
}

func (x *Organization) GetApiKeysEnabled() bool {
	if x != nil && x.ApiKeysEnabled != nil {
		return *x.ApiKeysEnabled
	}
	return false
}

// OrganizationDomains defines the domains associated with an Organization.
type OrganizationDomains struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The ID of the Organization.
	OrganizationId string `protobuf:"bytes,1,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
	// A list of domains associated with the organization.
	//
	// When an Organization uses SAML or SCIM, only emails from this list are
	// permitted.
	Domains       []string `protobuf:"bytes,2,rep,name=domains,proto3" json:"domains,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *OrganizationDomains) Reset() {
	*x = OrganizationDomains{}
	mi := &file_tesseral_backend_v1_models_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OrganizationDomains) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrganizationDomains) ProtoMessage() {}

func (x *OrganizationDomains) ProtoReflect() protoreflect.Message {
	mi := &file_tesseral_backend_v1_models_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrganizationDomains.ProtoReflect.Descriptor instead.
func (*OrganizationDomains) Descriptor() ([]byte, []int) {
	return file_tesseral_backend_v1_models_proto_rawDescGZIP(), []int{5}
}

func (x *OrganizationDomains) GetOrganizationId() string {
	if x != nil {
		return x.OrganizationId
	}
	return ""
}

func (x *OrganizationDomains) GetDomains() []string {
	if x != nil {
		return x.Domains
	}
	return nil
}

// OrganizationGoogleHostedDomains represents the Google Hosted Domains ("HDs")
// associated with an Organization.
type OrganizationGoogleHostedDomains struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The ID of the Organization.
	OrganizationId string `protobuf:"bytes,1,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
	// A list of Google-hosted domains associated with the organization.
	//
	// These values correspond to Google OAuth `hd` claims:
	//
	// https://developers.google.com/identity/openid-connect/openid-connect#obtainuserinfo
	GoogleHostedDomains []string `protobuf:"bytes,2,rep,name=google_hosted_domains,json=googleHostedDomains,proto3" json:"google_hosted_domains,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *OrganizationGoogleHostedDomains) Reset() {
	*x = OrganizationGoogleHostedDomains{}
	mi := &file_tesseral_backend_v1_models_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OrganizationGoogleHostedDomains) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrganizationGoogleHostedDomains) ProtoMessage() {}

func (x *OrganizationGoogleHostedDomains) ProtoReflect() protoreflect.Message {
	mi := &file_tesseral_backend_v1_models_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrganizationGoogleHostedDomains.ProtoReflect.Descriptor instead.
func (*OrganizationGoogleHostedDomains) Descriptor() ([]byte, []int) {
	return file_tesseral_backend_v1_models_proto_rawDescGZIP(), []int{6}
}

func (x *OrganizationGoogleHostedDomains) GetOrganizationId() string {
	if x != nil {
		return x.OrganizationId
	}
	return ""
}

func (x *OrganizationGoogleHostedDomains) GetGoogleHostedDomains() []string {
	if x != nil {
		return x.GoogleHostedDomains
	}
	return nil
}

// OrganizationMicrosoftTenantIDs represents the Microsoft Tenant IDs ("TIDs")
// associated with an Organization.
type OrganizationMicrosoftTenantIDs struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The ID of the Organization.
	OrganizationId string `protobuf:"bytes,1,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
	// A list of Microsoft Tenant IDs associated with the organization.
	//
	// These values correspond to Microsoft OAuth `tid` claims:
	//
	// https://learn.microsoft.com/en-us/entra/identity-platform/id-token-claims-reference
	MicrosoftTenantIds []string `protobuf:"bytes,2,rep,name=microsoft_tenant_ids,json=microsoftTenantIds,proto3" json:"microsoft_tenant_ids,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *OrganizationMicrosoftTenantIDs) Reset() {
	*x = OrganizationMicrosoftTenantIDs{}
	mi := &file_tesseral_backend_v1_models_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OrganizationMicrosoftTenantIDs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrganizationMicrosoftTenantIDs) ProtoMessage() {}

func (x *OrganizationMicrosoftTenantIDs) ProtoReflect() protoreflect.Message {
	mi := &file_tesseral_backend_v1_models_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrganizationMicrosoftTenantIDs.ProtoReflect.Descriptor instead.
func (*OrganizationMicrosoftTenantIDs) Descriptor() ([]byte, []int) {
	return file_tesseral_backend_v1_models_proto_rawDescGZIP(), []int{7}
}

func (x *OrganizationMicrosoftTenantIDs) GetOrganizationId() string {
	if x != nil {
		return x.OrganizationId
	}
	return ""
}

func (x *OrganizationMicrosoftTenantIDs) GetMicrosoftTenantIds() []string {
	if x != nil {
		return x.MicrosoftTenantIds
	}
	return nil
}

type BackendAPIKey struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	DisplayName   string                 `protobuf:"bytes,2,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	CreateTime    *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	UpdateTime    *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	SecretToken   string                 `protobuf:"bytes,5,opt,name=secret_token,json=secretToken,proto3" json:"secret_token,omitempty"`
	Revoked       bool                   `protobuf:"varint,6,opt,name=revoked,proto3" json:"revoked,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BackendAPIKey) Reset() {
	*x = BackendAPIKey{}
	mi := &file_tesseral_backend_v1_models_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BackendAPIKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BackendAPIKey) ProtoMessage() {}

func (x *BackendAPIKey) ProtoReflect() protoreflect.Message {
	mi := &file_tesseral_backend_v1_models_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BackendAPIKey.ProtoReflect.Descriptor instead.
func (*BackendAPIKey) Descriptor() ([]byte, []int) {
	return file_tesseral_backend_v1_models_proto_rawDescGZIP(), []int{8}
}

func (x *BackendAPIKey) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *BackendAPIKey) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *BackendAPIKey) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *BackendAPIKey) GetUpdateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdateTime
	}
	return nil
}

func (x *BackendAPIKey) GetSecretToken() string {
	if x != nil {
		return x.SecretToken
	}
	return ""
}

func (x *BackendAPIKey) GetRevoked() bool {
	if x != nil {
		return x.Revoked
	}
	return false
}

type PublishableKey struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	DisplayName   string                 `protobuf:"bytes,2,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	CreateTime    *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	UpdateTime    *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	DevMode       *bool                  `protobuf:"varint,5,opt,name=dev_mode,json=devMode,proto3,oneof" json:"dev_mode,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PublishableKey) Reset() {
	*x = PublishableKey{}
	mi := &file_tesseral_backend_v1_models_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PublishableKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublishableKey) ProtoMessage() {}

func (x *PublishableKey) ProtoReflect() protoreflect.Message {
	mi := &file_tesseral_backend_v1_models_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublishableKey.ProtoReflect.Descriptor instead.
func (*PublishableKey) Descriptor() ([]byte, []int) {
	return file_tesseral_backend_v1_models_proto_rawDescGZIP(), []int{9}
}

func (x *PublishableKey) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *PublishableKey) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *PublishableKey) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *PublishableKey) GetUpdateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdateTime
	}
	return nil
}

func (x *PublishableKey) GetDevMode() bool {
	if x != nil && x.DevMode != nil {
		return *x.DevMode
	}
	return false
}

// A User represents an individual working for one of your corporate customers.
type User struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The User ID. Starts with `user_...`.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The Organization this User belongs to.
	OrganizationId string `protobuf:"bytes,2,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
	// The User's email address.
	//
	// This email is verified and unique within the Organization. Two Users in
	// different Organizations may have the same email.
	Email string `protobuf:"bytes,3,opt,name=email,proto3" json:"email,omitempty"`
	// When the User was created.
	CreateTime *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	// When the User was last updated.
	UpdateTime *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	// Whether the User is an owner of their Organization.
	Owner *bool `protobuf:"varint,6,opt,name=owner,proto3,oneof" json:"owner,omitempty"`
	// The Google User ID, if the User has ever logged in with Google.
	GoogleUserId *string `protobuf:"bytes,7,opt,name=google_user_id,json=googleUserId,proto3,oneof" json:"google_user_id,omitempty"`
	// The Microsoft User ID, if the User has ever logged in with Microsoft.
	MicrosoftUserId *string `protobuf:"bytes,8,opt,name=microsoft_user_id,json=microsoftUserId,proto3,oneof" json:"microsoft_user_id,omitempty"`
	// The Github User ID, if the User has ever logged in with GitHub.
	GithubUserId *string `protobuf:"bytes,12,opt,name=github_user_id,json=githubUserId,proto3,oneof" json:"github_user_id,omitempty"`
	// Whether the User has an authenticator app set up.
	HasAuthenticatorApp bool `protobuf:"varint,9,opt,name=has_authenticator_app,json=hasAuthenticatorApp,proto3" json:"has_authenticator_app,omitempty"`
	// The User's human-friendly name.
	DisplayName *string `protobuf:"bytes,10,opt,name=display_name,json=displayName,proto3,oneof" json:"display_name,omitempty"`
	// The URL of the User's profile picture.
	ProfilePictureUrl *string `protobuf:"bytes,11,opt,name=profile_picture_url,json=profilePictureUrl,proto3,oneof" json:"profile_picture_url,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *User) Reset() {
	*x = User{}
	mi := &file_tesseral_backend_v1_models_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *User) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*User) ProtoMessage() {}

func (x *User) ProtoReflect() protoreflect.Message {
	mi := &file_tesseral_backend_v1_models_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use User.ProtoReflect.Descriptor instead.
func (*User) Descriptor() ([]byte, []int) {
	return file_tesseral_backend_v1_models_proto_rawDescGZIP(), []int{10}
}

func (x *User) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *User) GetOrganizationId() string {
	if x != nil {
		return x.OrganizationId
	}
	return ""
}

func (x *User) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *User) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *User) GetUpdateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdateTime
	}
	return nil
}

func (x *User) GetOwner() bool {
	if x != nil && x.Owner != nil {
		return *x.Owner
	}
	return false
}

func (x *User) GetGoogleUserId() string {
	if x != nil && x.GoogleUserId != nil {
		return *x.GoogleUserId
	}
	return ""
}

func (x *User) GetMicrosoftUserId() string {
	if x != nil && x.MicrosoftUserId != nil {
		return *x.MicrosoftUserId
	}
	return ""
}

func (x *User) GetGithubUserId() string {
	if x != nil && x.GithubUserId != nil {
		return *x.GithubUserId
	}
	return ""
}

func (x *User) GetHasAuthenticatorApp() bool {
	if x != nil {
		return x.HasAuthenticatorApp
	}
	return false
}

func (x *User) GetDisplayName() string {
	if x != nil && x.DisplayName != nil {
		return *x.DisplayName
	}
	return ""
}

func (x *User) GetProfilePictureUrl() string {
	if x != nil && x.ProfilePictureUrl != nil {
		return *x.ProfilePictureUrl
	}
	return ""
}

// Represents a Session for a logged-in User.
type Session struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The Session ID. Starts with `session_...`.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The User this Session belongs to.
	UserId string `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// Whether the Session is revoked.
	Revoked bool `protobuf:"varint,3,opt,name=revoked,proto3" json:"revoked,omitempty"`
	// When the Session was created.
	CreateTime *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	// When the Session was last active.
	LastActiveTime *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=last_active_time,json=lastActiveTime,proto3" json:"last_active_time,omitempty"`
	// When the Session expires.
	ExpireTime *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=expire_time,json=expireTime,proto3" json:"expire_time,omitempty"`
	// The primary authentication factor the end user used to log in.
	PrimaryAuthFactor PrimaryAuthFactor `protobuf:"varint,7,opt,name=primary_auth_factor,json=primaryAuthFactor,proto3,enum=tesseral.backend.v1.PrimaryAuthFactor" json:"primary_auth_factor,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *Session) Reset() {
	*x = Session{}
	mi := &file_tesseral_backend_v1_models_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Session) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Session) ProtoMessage() {}

func (x *Session) ProtoReflect() protoreflect.Message {
	mi := &file_tesseral_backend_v1_models_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Session.ProtoReflect.Descriptor instead.
func (*Session) Descriptor() ([]byte, []int) {
	return file_tesseral_backend_v1_models_proto_rawDescGZIP(), []int{11}
}

func (x *Session) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Session) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *Session) GetRevoked() bool {
	if x != nil {
		return x.Revoked
	}
	return false
}

func (x *Session) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *Session) GetLastActiveTime() *timestamppb.Timestamp {
	if x != nil {
		return x.LastActiveTime
	}
	return nil
}

func (x *Session) GetExpireTime() *timestamppb.Timestamp {
	if x != nil {
		return x.ExpireTime
	}
	return nil
}

func (x *Session) GetPrimaryAuthFactor() PrimaryAuthFactor {
	if x != nil {
		return x.PrimaryAuthFactor
	}
	return PrimaryAuthFactor_PRIMARY_AUTH_FACTOR_UNSPECIFIED
}

// Passkey represents a WebAuthn public key credential registered by a User.
type Passkey struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The Passkey ID. Starts with `passkey_...`.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The User this Passkey belongs to.
	UserId string `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// The timestamp of when the Passkey was created.
	CreateTime *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	// The timestamp of when the Passkey was last updated.
	UpdateTime *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	// Indicates whether the Passkey is disabled.
	Disabled *bool `protobuf:"varint,8,opt,name=disabled,proto3,oneof" json:"disabled,omitempty"`
	// The unique credential ID for the Passkey, as a binary value.
	CredentialId []byte `protobuf:"bytes,5,opt,name=credential_id,json=credentialId,proto3" json:"credential_id,omitempty"`
	// The public key associated with the Passkey, in PEM-encoded PKIX format.
	//
	// Starts with `-----BEGIN PUBLIC KEY-----`.
	PublicKeyPkix string `protobuf:"bytes,6,opt,name=public_key_pkix,json=publicKeyPkix,proto3" json:"public_key_pkix,omitempty"`
	// The Authenticator Attestation GUID (AAGUID) for the Passkey.
	Aaguid string `protobuf:"bytes,7,opt,name=aaguid,proto3" json:"aaguid,omitempty"`
	// The relying party ID associated with the Passkey.
	RpId          string `protobuf:"bytes,9,opt,name=rp_id,json=rpId,proto3" json:"rp_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Passkey) Reset() {
	*x = Passkey{}
	mi := &file_tesseral_backend_v1_models_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Passkey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Passkey) ProtoMessage() {}

func (x *Passkey) ProtoReflect() protoreflect.Message {
	mi := &file_tesseral_backend_v1_models_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Passkey.ProtoReflect.Descriptor instead.
func (*Passkey) Descriptor() ([]byte, []int) {
	return file_tesseral_backend_v1_models_proto_rawDescGZIP(), []int{12}
}

func (x *Passkey) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Passkey) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *Passkey) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *Passkey) GetUpdateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdateTime
	}
	return nil
}

func (x *Passkey) GetDisabled() bool {
	if x != nil && x.Disabled != nil {
		return *x.Disabled
	}
	return false
}

func (x *Passkey) GetCredentialId() []byte {
	if x != nil {
		return x.CredentialId
	}
	return nil
}

func (x *Passkey) GetPublicKeyPkix() string {
	if x != nil {
		return x.PublicKeyPkix
	}
	return ""
}

func (x *Passkey) GetAaguid() string {
	if x != nil {
		return x.Aaguid
	}
	return ""
}

func (x *Passkey) GetRpId() string {
	if x != nil {
		return x.RpId
	}
	return ""
}

// SAMLConnection represents a SAML configuration for an Organization.
type SAMLConnection struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The SAML Connection ID. Starts with `saml_connection_...`.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The Organization this SAML Connection belongs to.
	OrganizationId string `protobuf:"bytes,2,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
	// When the SAML Connection was created.
	CreateTime *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	// When the SAML Connection was last updated.
	UpdateTime *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	// Whether this is the primary SAML Connection for the Organization.
	Primary *bool `protobuf:"varint,5,opt,name=primary,proto3,oneof" json:"primary,omitempty"`
	// The Service Provider Assertion Consumer Service (ACS) URL.
	SpAcsUrl string `protobuf:"bytes,6,opt,name=sp_acs_url,json=spAcsUrl,proto3" json:"sp_acs_url,omitempty"`
	// The Service Provider Entity ID.
	SpEntityId string `protobuf:"bytes,7,opt,name=sp_entity_id,json=spEntityId,proto3" json:"sp_entity_id,omitempty"`
	// The Identity Provider Redirect URL.
	IdpRedirectUrl string `protobuf:"bytes,8,opt,name=idp_redirect_url,json=idpRedirectUrl,proto3" json:"idp_redirect_url,omitempty"`
	// The Identity Provider certificate, in PEM-encoded X.509 format.
	//
	// Starts with `----BEGIN CERTIFICATE----`.
	IdpX509Certificate string `protobuf:"bytes,9,opt,name=idp_x509_certificate,json=idpX509Certificate,proto3" json:"idp_x509_certificate,omitempty"`
	// The Identity Provider Entity ID.
	IdpEntityId   string `protobuf:"bytes,10,opt,name=idp_entity_id,json=idpEntityId,proto3" json:"idp_entity_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SAMLConnection) Reset() {
	*x = SAMLConnection{}
	mi := &file_tesseral_backend_v1_models_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SAMLConnection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SAMLConnection) ProtoMessage() {}

func (x *SAMLConnection) ProtoReflect() protoreflect.Message {
	mi := &file_tesseral_backend_v1_models_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SAMLConnection.ProtoReflect.Descriptor instead.
func (*SAMLConnection) Descriptor() ([]byte, []int) {
	return file_tesseral_backend_v1_models_proto_rawDescGZIP(), []int{13}
}

func (x *SAMLConnection) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *SAMLConnection) GetOrganizationId() string {
	if x != nil {
		return x.OrganizationId
	}
	return ""
}

func (x *SAMLConnection) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *SAMLConnection) GetUpdateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdateTime
	}
	return nil
}

func (x *SAMLConnection) GetPrimary() bool {
	if x != nil && x.Primary != nil {
		return *x.Primary
	}
	return false
}

func (x *SAMLConnection) GetSpAcsUrl() string {
	if x != nil {
		return x.SpAcsUrl
	}
	return ""
}

func (x *SAMLConnection) GetSpEntityId() string {
	if x != nil {
		return x.SpEntityId
	}
	return ""
}

func (x *SAMLConnection) GetIdpRedirectUrl() string {
	if x != nil {
		return x.IdpRedirectUrl
	}
	return ""
}

func (x *SAMLConnection) GetIdpX509Certificate() string {
	if x != nil {
		return x.IdpX509Certificate
	}
	return ""
}

func (x *SAMLConnection) GetIdpEntityId() string {
	if x != nil {
		return x.IdpEntityId
	}
	return ""
}

// OIDCConnection represents an OpenID Connect configuration for an Organization.
type OIDCConnection struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The OIDC Connection ID. Starts with `oidc_connection_...`.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The Organization this OIDC Connection belongs to.
	OrganizationId string `protobuf:"bytes,2,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
	// When the OIDC Connection was created.
	CreateTime *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	// When the OIDC Connection was last updated.
	UpdateTime *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	// Whether this is the primary OIDC Connection for the Organization.
	Primary *bool `protobuf:"varint,5,opt,name=primary,proto3,oneof" json:"primary,omitempty"`
	// The OIDC Provider's configuration URL.
	ConfigurationUrl string `protobuf:"bytes,6,opt,name=configuration_url,json=configurationUrl,proto3" json:"configuration_url,omitempty"`
	// The OIDC Provider's Client ID.
	ClientId string `protobuf:"bytes,7,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	// The OIDC Provider's Client Secret.
	// This field is write-only.
	ClientSecret string `protobuf:"bytes,8,opt,name=client_secret,json=clientSecret,proto3" json:"client_secret,omitempty"`
	// The OIDC Provider's redirect URI.
	RedirectUri   string `protobuf:"bytes,9,opt,name=redirect_uri,json=redirectUri,proto3" json:"redirect_uri,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *OIDCConnection) Reset() {
	*x = OIDCConnection{}
	mi := &file_tesseral_backend_v1_models_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OIDCConnection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OIDCConnection) ProtoMessage() {}

func (x *OIDCConnection) ProtoReflect() protoreflect.Message {
	mi := &file_tesseral_backend_v1_models_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OIDCConnection.ProtoReflect.Descriptor instead.
func (*OIDCConnection) Descriptor() ([]byte, []int) {
	return file_tesseral_backend_v1_models_proto_rawDescGZIP(), []int{14}
}

func (x *OIDCConnection) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *OIDCConnection) GetOrganizationId() string {
	if x != nil {
		return x.OrganizationId
	}
	return ""
}

func (x *OIDCConnection) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *OIDCConnection) GetUpdateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdateTime
	}
	return nil
}

func (x *OIDCConnection) GetPrimary() bool {
	if x != nil && x.Primary != nil {
		return *x.Primary
	}
	return false
}

func (x *OIDCConnection) GetConfigurationUrl() string {
	if x != nil {
		return x.ConfigurationUrl
	}
	return ""
}

func (x *OIDCConnection) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *OIDCConnection) GetClientSecret() string {
	if x != nil {
		return x.ClientSecret
	}
	return ""
}

func (x *OIDCConnection) GetRedirectUri() string {
	if x != nil {
		return x.RedirectUri
	}
	return ""
}

// SCIMAPIKey represents an API key for SCIM operations.
type SCIMAPIKey struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The SCIM API Key ID. Starts with `scim_api_key_...`.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The Organization this SCIM API Key belongs to.
	OrganizationId string `protobuf:"bytes,2,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
	// When the SCIM API Key was created.
	CreateTime *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	// When the SCIM API Key was last updated.
	UpdateTime *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	// A human-readable display name for this SCIM API Key.
	DisplayName string `protobuf:"bytes,5,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	// The secret token for this SCIM API Key.
	SecretToken string `protobuf:"bytes,6,opt,name=secret_token,json=secretToken,proto3" json:"secret_token,omitempty"`
	// Whether this SCIM API Key is revoked.
	Revoked       bool `protobuf:"varint,7,opt,name=revoked,proto3" json:"revoked,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SCIMAPIKey) Reset() {
	*x = SCIMAPIKey{}
	mi := &file_tesseral_backend_v1_models_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SCIMAPIKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SCIMAPIKey) ProtoMessage() {}

func (x *SCIMAPIKey) ProtoReflect() protoreflect.Message {
	mi := &file_tesseral_backend_v1_models_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SCIMAPIKey.ProtoReflect.Descriptor instead.
func (*SCIMAPIKey) Descriptor() ([]byte, []int) {
	return file_tesseral_backend_v1_models_proto_rawDescGZIP(), []int{15}
}

func (x *SCIMAPIKey) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *SCIMAPIKey) GetOrganizationId() string {
	if x != nil {
		return x.OrganizationId
	}
	return ""
}

func (x *SCIMAPIKey) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *SCIMAPIKey) GetUpdateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdateTime
	}
	return nil
}

func (x *SCIMAPIKey) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *SCIMAPIKey) GetSecretToken() string {
	if x != nil {
		return x.SecretToken
	}
	return ""
}

func (x *SCIMAPIKey) GetRevoked() bool {
	if x != nil {
		return x.Revoked
	}
	return false
}

type UserImpersonationToken struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Id             string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	ImpersonatorId string                 `protobuf:"bytes,2,opt,name=impersonator_id,json=impersonatorId,proto3" json:"impersonator_id,omitempty"`
	CreateTime     *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	ExpireTime     *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=expire_time,json=expireTime,proto3" json:"expire_time,omitempty"`
	SecretToken    string                 `protobuf:"bytes,5,opt,name=secret_token,json=secretToken,proto3" json:"secret_token,omitempty"`
	ImpersonatedId string                 `protobuf:"bytes,6,opt,name=impersonated_id,json=impersonatedId,proto3" json:"impersonated_id,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *UserImpersonationToken) Reset() {
	*x = UserImpersonationToken{}
	mi := &file_tesseral_backend_v1_models_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserImpersonationToken) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserImpersonationToken) ProtoMessage() {}

func (x *UserImpersonationToken) ProtoReflect() protoreflect.Message {
	mi := &file_tesseral_backend_v1_models_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserImpersonationToken.ProtoReflect.Descriptor instead.
func (*UserImpersonationToken) Descriptor() ([]byte, []int) {
	return file_tesseral_backend_v1_models_proto_rawDescGZIP(), []int{16}
}

func (x *UserImpersonationToken) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UserImpersonationToken) GetImpersonatorId() string {
	if x != nil {
		return x.ImpersonatorId
	}
	return ""
}

func (x *UserImpersonationToken) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *UserImpersonationToken) GetExpireTime() *timestamppb.Timestamp {
	if x != nil {
		return x.ExpireTime
	}
	return nil
}

func (x *UserImpersonationToken) GetSecretToken() string {
	if x != nil {
		return x.SecretToken
	}
	return ""
}

func (x *UserImpersonationToken) GetImpersonatedId() string {
	if x != nil {
		return x.ImpersonatedId
	}
	return ""
}

// UserInvite represents an invitation for a User to join an Organization.
type UserInvite struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The User Invite ID. Starts with `user_invite_...`.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The Organization this User Invite belongs to.
	OrganizationId string `protobuf:"bytes,2,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
	// When the User Invite was created.
	CreateTime *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	// When the User Invite was last updated.
	UpdateTime *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	// The invitee's email address.
	Email string `protobuf:"bytes,5,opt,name=email,proto3" json:"email,omitempty"`
	// Indicates whether the invited User will have owner privileges in the
	// Organization.
	Owner         bool `protobuf:"varint,6,opt,name=owner,proto3" json:"owner,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UserInvite) Reset() {
	*x = UserInvite{}
	mi := &file_tesseral_backend_v1_models_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserInvite) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserInvite) ProtoMessage() {}

func (x *UserInvite) ProtoReflect() protoreflect.Message {
	mi := &file_tesseral_backend_v1_models_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserInvite.ProtoReflect.Descriptor instead.
func (*UserInvite) Descriptor() ([]byte, []int) {
	return file_tesseral_backend_v1_models_proto_rawDescGZIP(), []int{17}
}

func (x *UserInvite) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UserInvite) GetOrganizationId() string {
	if x != nil {
		return x.OrganizationId
	}
	return ""
}

func (x *UserInvite) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *UserInvite) GetUpdateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdateTime
	}
	return nil
}

func (x *UserInvite) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *UserInvite) GetOwner() bool {
	if x != nil {
		return x.Owner
	}
	return false
}

// RBACPolicy represents a Project's configuration for Role-Based Access Control
// (RBAC).
type RBACPolicy struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The set of valid Actions for this Project.
	Actions       []*Action `protobuf:"bytes,1,rep,name=actions,proto3" json:"actions,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RBACPolicy) Reset() {
	*x = RBACPolicy{}
	mi := &file_tesseral_backend_v1_models_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RBACPolicy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RBACPolicy) ProtoMessage() {}

func (x *RBACPolicy) ProtoReflect() protoreflect.Message {
	mi := &file_tesseral_backend_v1_models_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RBACPolicy.ProtoReflect.Descriptor instead.
func (*RBACPolicy) Descriptor() ([]byte, []int) {
	return file_tesseral_backend_v1_models_proto_rawDescGZIP(), []int{18}
}

func (x *RBACPolicy) GetActions() []*Action {
	if x != nil {
		return x.Actions
	}
	return nil
}

// Action represents a permission within a Project.
type Action struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The unique name of the Action.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// A human-readable description of the Action.
	Description   string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Action) Reset() {
	*x = Action{}
	mi := &file_tesseral_backend_v1_models_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Action) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Action) ProtoMessage() {}

func (x *Action) ProtoReflect() protoreflect.Message {
	mi := &file_tesseral_backend_v1_models_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Action.ProtoReflect.Descriptor instead.
func (*Action) Descriptor() ([]byte, []int) {
	return file_tesseral_backend_v1_models_proto_rawDescGZIP(), []int{19}
}

func (x *Action) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Action) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

// Role represents a logical grouping of permissions that Users may have.
type Role struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The Role ID. Starts with `role_...`.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The Organization this Role belongs to, if any.
	OrganizationId string `protobuf:"bytes,2,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
	// When the Role was created.
	CreateTime *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	// When the Role was last updated.
	UpdateTime *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	// A human-readable display name for this Role.
	DisplayName string `protobuf:"bytes,5,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	// A human-readable description of the Role.
	Description string `protobuf:"bytes,6,opt,name=description,proto3" json:"description,omitempty"`
	// The names of the Actions associated with this Role.
	Actions       []string `protobuf:"bytes,7,rep,name=actions,proto3" json:"actions,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Role) Reset() {
	*x = Role{}
	mi := &file_tesseral_backend_v1_models_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Role) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Role) ProtoMessage() {}

func (x *Role) ProtoReflect() protoreflect.Message {
	mi := &file_tesseral_backend_v1_models_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Role.ProtoReflect.Descriptor instead.
func (*Role) Descriptor() ([]byte, []int) {
	return file_tesseral_backend_v1_models_proto_rawDescGZIP(), []int{20}
}

func (x *Role) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Role) GetOrganizationId() string {
	if x != nil {
		return x.OrganizationId
	}
	return ""
}

func (x *Role) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *Role) GetUpdateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdateTime
	}
	return nil
}

func (x *Role) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *Role) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Role) GetActions() []string {
	if x != nil {
		return x.Actions
	}
	return nil
}

// UserRoleAssignment represents a User being assigned to a Role.
type UserRoleAssignment struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The User Role Assignment ID. Starts with `user_role_assignment_...`.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The User ID.
	UserId string `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// The Role ID.
	RoleId        string `protobuf:"bytes,3,opt,name=role_id,json=roleId,proto3" json:"role_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UserRoleAssignment) Reset() {
	*x = UserRoleAssignment{}
	mi := &file_tesseral_backend_v1_models_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserRoleAssignment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserRoleAssignment) ProtoMessage() {}

func (x *UserRoleAssignment) ProtoReflect() protoreflect.Message {
	mi := &file_tesseral_backend_v1_models_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserRoleAssignment.ProtoReflect.Descriptor instead.
func (*UserRoleAssignment) Descriptor() ([]byte, []int) {
	return file_tesseral_backend_v1_models_proto_rawDescGZIP(), []int{21}
}

func (x *UserRoleAssignment) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UserRoleAssignment) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *UserRoleAssignment) GetRoleId() string {
	if x != nil {
		return x.RoleId
	}
	return ""
}

type APIKey struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The API Key ID. Starts with `api_key_...`.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The Organization this API Key belongs to.
	OrganizationId string `protobuf:"bytes,2,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
	// When the API Key was created.
	CreateTime *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	// When the API Key was last updated.
	UpdateTime *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	// The expire time of the API Key.
	ExpireTime *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=expire_time,json=expireTime,proto3,oneof" json:"expire_time,omitempty"`
	// A human-readable display name for this API Key.
	DisplayName string `protobuf:"bytes,6,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	// The secret token for this API Key.
	SecretToken string `protobuf:"bytes,7,opt,name=secret_token,json=secretToken,proto3" json:"secret_token,omitempty"`
	// The secret token suffix for this API Key.
	SecretTokenSuffix string `protobuf:"bytes,8,opt,name=secret_token_suffix,json=secretTokenSuffix,proto3" json:"secret_token_suffix,omitempty"`
	// Whether this API Key is revoked.
	Revoked       bool `protobuf:"varint,9,opt,name=revoked,proto3" json:"revoked,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *APIKey) Reset() {
	*x = APIKey{}
	mi := &file_tesseral_backend_v1_models_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *APIKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*APIKey) ProtoMessage() {}

func (x *APIKey) ProtoReflect() protoreflect.Message {
	mi := &file_tesseral_backend_v1_models_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use APIKey.ProtoReflect.Descriptor instead.
func (*APIKey) Descriptor() ([]byte, []int) {
	return file_tesseral_backend_v1_models_proto_rawDescGZIP(), []int{22}
}

func (x *APIKey) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *APIKey) GetOrganizationId() string {
	if x != nil {
		return x.OrganizationId
	}
	return ""
}

func (x *APIKey) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *APIKey) GetUpdateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdateTime
	}
	return nil
}

func (x *APIKey) GetExpireTime() *timestamppb.Timestamp {
	if x != nil {
		return x.ExpireTime
	}
	return nil
}

func (x *APIKey) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *APIKey) GetSecretToken() string {
	if x != nil {
		return x.SecretToken
	}
	return ""
}

func (x *APIKey) GetSecretTokenSuffix() string {
	if x != nil {
		return x.SecretTokenSuffix
	}
	return ""
}

func (x *APIKey) GetRevoked() bool {
	if x != nil {
		return x.Revoked
	}
	return false
}

type APIKeyRoleAssignment struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The API Key Role Assignment ID. Starts with `api_key_role_assignment_...`.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The API Key ID.
	ApiKeyId string `protobuf:"bytes,2,opt,name=api_key_id,json=apiKeyId,proto3" json:"api_key_id,omitempty"`
	// The Role ID.
	RoleId        string `protobuf:"bytes,3,opt,name=role_id,json=roleId,proto3" json:"role_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *APIKeyRoleAssignment) Reset() {
	*x = APIKeyRoleAssignment{}
	mi := &file_tesseral_backend_v1_models_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *APIKeyRoleAssignment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*APIKeyRoleAssignment) ProtoMessage() {}

func (x *APIKeyRoleAssignment) ProtoReflect() protoreflect.Message {
	mi := &file_tesseral_backend_v1_models_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use APIKeyRoleAssignment.ProtoReflect.Descriptor instead.
func (*APIKeyRoleAssignment) Descriptor() ([]byte, []int) {
	return file_tesseral_backend_v1_models_proto_rawDescGZIP(), []int{23}
}

func (x *APIKeyRoleAssignment) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *APIKeyRoleAssignment) GetApiKeyId() string {
	if x != nil {
		return x.ApiKeyId
	}
	return ""
}

func (x *APIKeyRoleAssignment) GetRoleId() string {
	if x != nil {
		return x.RoleId
	}
	return ""
}

// AuditLogEvent represents a record in the Project's audit log.
type AuditLogEvent struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The Audit Log Event ID. Starts with `audit_log_event_...`.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The Organization the event occurred within, if any.
	OrganizationId string `protobuf:"bytes,2,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
	// The User that performed the event, if any.
	ActorUserId string `protobuf:"bytes,3,opt,name=actor_user_id,json=actorUserId,proto3" json:"actor_user_id,omitempty"`
	// The Session that performed the event, if any.
	ActorSessionId string `protobuf:"bytes,4,opt,name=actor_session_id,json=actorSessionId,proto3" json:"actor_session_id,omitempty"`
	// The API Key that performed the event, if any.
	ActorApiKeyId string `protobuf:"bytes,5,opt,name=actor_api_key_id,json=actorApiKeyId,proto3" json:"actor_api_key_id,omitempty"`
	// The Backend API key that performed the event, if any.
	ActorBackendApiKeyId string `protobuf:"bytes,8,opt,name=actor_backend_api_key_id,json=actorBackendApiKeyId,proto3" json:"actor_backend_api_key_id,omitempty"`
	// The Intermediate Session that performed the action, if any.
	ActorIntermediateSessionId string `protobuf:"bytes,9,opt,name=actor_intermediate_session_id,json=actorIntermediateSessionId,proto3" json:"actor_intermediate_session_id,omitempty"`
	// When the event occurred.
	EventTime *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=event_time,json=eventTime,proto3" json:"event_time,omitempty"`
	// The name of the event.
	EventName string `protobuf:"bytes,11,opt,name=event_name,json=eventName,proto3" json:"event_name,omitempty"`
	// The event payload JSON.
	EventDetails *structpb.Struct `protobuf:"bytes,12,opt,name=event_details,json=eventDetails,proto3" json:"event_details,omitempty"`
	// Credentials for the actor performing the action. Input-only.
	//
	// Can be used as a shorthand for actor information when calling CreateAuditLogEvent.
	ActorCredentials string `protobuf:"bytes,13,opt,name=actor_credentials,json=actorCredentials,proto3" json:"actor_credentials,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *AuditLogEvent) Reset() {
	*x = AuditLogEvent{}
	mi := &file_tesseral_backend_v1_models_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AuditLogEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuditLogEvent) ProtoMessage() {}

func (x *AuditLogEvent) ProtoReflect() protoreflect.Message {
	mi := &file_tesseral_backend_v1_models_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuditLogEvent.ProtoReflect.Descriptor instead.
func (*AuditLogEvent) Descriptor() ([]byte, []int) {
	return file_tesseral_backend_v1_models_proto_rawDescGZIP(), []int{24}
}

func (x *AuditLogEvent) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *AuditLogEvent) GetOrganizationId() string {
	if x != nil {
		return x.OrganizationId
	}
	return ""
}

func (x *AuditLogEvent) GetActorUserId() string {
	if x != nil {
		return x.ActorUserId
	}
	return ""
}

func (x *AuditLogEvent) GetActorSessionId() string {
	if x != nil {
		return x.ActorSessionId
	}
	return ""
}

func (x *AuditLogEvent) GetActorApiKeyId() string {
	if x != nil {
		return x.ActorApiKeyId
	}
	return ""
}

func (x *AuditLogEvent) GetActorBackendApiKeyId() string {
	if x != nil {
		return x.ActorBackendApiKeyId
	}
	return ""
}

func (x *AuditLogEvent) GetActorIntermediateSessionId() string {
	if x != nil {
		return x.ActorIntermediateSessionId
	}
	return ""
}

func (x *AuditLogEvent) GetEventTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EventTime
	}
	return nil
}

func (x *AuditLogEvent) GetEventName() string {
	if x != nil {
		return x.EventName
	}
	return ""
}

func (x *AuditLogEvent) GetEventDetails() *structpb.Struct {
	if x != nil {
		return x.EventDetails
	}
	return nil
}

func (x *AuditLogEvent) GetActorCredentials() string {
	if x != nil {
		return x.ActorCredentials
	}
	return ""
}

// ConsoleAuditLogEvent represents a record in the Project's
// console audit log as delivered to the console via RPC-only list methods.
type ConsoleAuditLogEvent struct {
	state                      protoimpl.MessageState `protogen:"open.v1"`
	Id                         string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	OrganizationId             string                 `protobuf:"bytes,2,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
	ActorUserId                string                 `protobuf:"bytes,3,opt,name=actor_user_id,json=actorUserId,proto3" json:"actor_user_id,omitempty"`
	ActorSessionId             string                 `protobuf:"bytes,4,opt,name=actor_session_id,json=actorSessionId,proto3" json:"actor_session_id,omitempty"`
	ActorApiKeyId              string                 `protobuf:"bytes,5,opt,name=actor_api_key_id,json=actorApiKeyId,proto3" json:"actor_api_key_id,omitempty"`
	ActorBackendApiKeyId       string                 `protobuf:"bytes,8,opt,name=actor_backend_api_key_id,json=actorBackendApiKeyId,proto3" json:"actor_backend_api_key_id,omitempty"`
	ActorIntermediateSessionId string                 `protobuf:"bytes,9,opt,name=actor_intermediate_session_id,json=actorIntermediateSessionId,proto3" json:"actor_intermediate_session_id,omitempty"`
	ActorConsoleUserId         string                 `protobuf:"bytes,10,opt,name=actor_console_user_id,json=actorConsoleUserId,proto3" json:"actor_console_user_id,omitempty"`
	ActorConsoleSessionId      string                 `protobuf:"bytes,11,opt,name=actor_console_session_id,json=actorConsoleSessionId,proto3" json:"actor_console_session_id,omitempty"`
	// When the event occurred.
	EventTime     *timestamppb.Timestamp `protobuf:"bytes,12,opt,name=event_time,json=eventTime,proto3" json:"event_time,omitempty"`
	EventName     string                 `protobuf:"bytes,13,opt,name=event_name,json=eventName,proto3" json:"event_name,omitempty"`
	EventDetails  *structpb.Struct       `protobuf:"bytes,14,opt,name=event_details,json=eventDetails,proto3" json:"event_details,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ConsoleAuditLogEvent) Reset() {
	*x = ConsoleAuditLogEvent{}
	mi := &file_tesseral_backend_v1_models_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConsoleAuditLogEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConsoleAuditLogEvent) ProtoMessage() {}

func (x *ConsoleAuditLogEvent) ProtoReflect() protoreflect.Message {
	mi := &file_tesseral_backend_v1_models_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConsoleAuditLogEvent.ProtoReflect.Descriptor instead.
func (*ConsoleAuditLogEvent) Descriptor() ([]byte, []int) {
	return file_tesseral_backend_v1_models_proto_rawDescGZIP(), []int{25}
}

func (x *ConsoleAuditLogEvent) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ConsoleAuditLogEvent) GetOrganizationId() string {
	if x != nil {
		return x.OrganizationId
	}
	return ""
}

func (x *ConsoleAuditLogEvent) GetActorUserId() string {
	if x != nil {
		return x.ActorUserId
	}
	return ""
}

func (x *ConsoleAuditLogEvent) GetActorSessionId() string {
	if x != nil {
		return x.ActorSessionId
	}
	return ""
}

func (x *ConsoleAuditLogEvent) GetActorApiKeyId() string {
	if x != nil {
		return x.ActorApiKeyId
	}
	return ""
}

func (x *ConsoleAuditLogEvent) GetActorBackendApiKeyId() string {
	if x != nil {
		return x.ActorBackendApiKeyId
	}
	return ""
}

func (x *ConsoleAuditLogEvent) GetActorIntermediateSessionId() string {
	if x != nil {
		return x.ActorIntermediateSessionId
	}
	return ""
}

func (x *ConsoleAuditLogEvent) GetActorConsoleUserId() string {
	if x != nil {
		return x.ActorConsoleUserId
	}
	return ""
}

func (x *ConsoleAuditLogEvent) GetActorConsoleSessionId() string {
	if x != nil {
		return x.ActorConsoleSessionId
	}
	return ""
}

func (x *ConsoleAuditLogEvent) GetEventTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EventTime
	}
	return nil
}

func (x *ConsoleAuditLogEvent) GetEventName() string {
	if x != nil {
		return x.EventName
	}
	return ""
}

func (x *ConsoleAuditLogEvent) GetEventDetails() *structpb.Struct {
	if x != nil {
		return x.EventDetails
	}
	return nil
}

var File_tesseral_backend_v1_models_proto protoreflect.FileDescriptor

var file_tesseral_backend_v1_models_proto_rawDesc = string([]byte{
	0x0a, 0x20, 0x74, 0x65, 0x73, 0x73, 0x65, 0x72, 0x61, 0x6c, 0x2f, 0x62, 0x61, 0x63, 0x6b, 0x65,
	0x6e, 0x64, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x13, 0x74, 0x65, 0x73, 0x73, 0x65, 0x72, 0x61, 0x6c, 0x2e, 0x62, 0x61, 0x63,
	0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xef, 0x0e, 0x0a, 0x07, 0x50, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61,
	0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x30, 0x0a, 0x12, 0x6c, 0x6f, 0x67, 0x5f, 0x69, 0x6e, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x0f, 0x6c,
	0x6f, 0x67, 0x49, 0x6e, 0x57, 0x69, 0x74, 0x68, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x36, 0x0a, 0x15, 0x6c, 0x6f, 0x67, 0x5f, 0x69, 0x6e, 0x5f, 0x77, 0x69, 0x74, 0x68,
	0x5f, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x6f, 0x66, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08,
	0x48, 0x01, 0x52, 0x12, 0x6c, 0x6f, 0x67, 0x49, 0x6e, 0x57, 0x69, 0x74, 0x68, 0x4d, 0x69, 0x63,
	0x72, 0x6f, 0x73, 0x6f, 0x66, 0x74, 0x88, 0x01, 0x01, 0x12, 0x30, 0x0a, 0x12, 0x6c, 0x6f, 0x67,
	0x5f, 0x69, 0x6e, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x18,
	0x18, 0x20, 0x01, 0x28, 0x08, 0x48, 0x02, 0x52, 0x0f, 0x6c, 0x6f, 0x67, 0x49, 0x6e, 0x57, 0x69,
	0x74, 0x68, 0x47, 0x69, 0x74, 0x68, 0x75, 0x62, 0x88, 0x01, 0x01, 0x12, 0x2e, 0x0a, 0x11, 0x6c,
	0x6f, 0x67, 0x5f, 0x69, 0x6e, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x48, 0x03, 0x52, 0x0e, 0x6c, 0x6f, 0x67, 0x49, 0x6e, 0x57,
	0x69, 0x74, 0x68, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x34, 0x0a, 0x14, 0x6c,
	0x6f, 0x67, 0x5f, 0x69, 0x6e, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x77,
	0x6f, 0x72, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x48, 0x04, 0x52, 0x11, 0x6c, 0x6f, 0x67,
	0x49, 0x6e, 0x57, 0x69, 0x74, 0x68, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x88, 0x01,
	0x01, 0x12, 0x2c, 0x0a, 0x10, 0x6c, 0x6f, 0x67, 0x5f, 0x69, 0x6e, 0x5f, 0x77, 0x69, 0x74, 0x68,
	0x5f, 0x73, 0x61, 0x6d, 0x6c, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x48, 0x05, 0x52, 0x0d, 0x6c,
	0x6f, 0x67, 0x49, 0x6e, 0x57, 0x69, 0x74, 0x68, 0x53, 0x61, 0x6d, 0x6c, 0x88, 0x01, 0x01, 0x12,
	0x2c, 0x0a, 0x10, 0x6c, 0x6f, 0x67, 0x5f, 0x69, 0x6e, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x6f,
	0x69, 0x64, 0x63, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x08, 0x48, 0x06, 0x52, 0x0d, 0x6c, 0x6f, 0x67,
	0x49, 0x6e, 0x57, 0x69, 0x74, 0x68, 0x4f, 0x69, 0x64, 0x63, 0x88, 0x01, 0x01, 0x12, 0x45, 0x0a,
	0x1d, 0x6c, 0x6f, 0x67, 0x5f, 0x69, 0x6e, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x61, 0x75, 0x74,
	0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x08, 0x48, 0x07, 0x52, 0x19, 0x6c, 0x6f, 0x67, 0x49, 0x6e, 0x57, 0x69, 0x74,
	0x68, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x41, 0x70,
	0x70, 0x88, 0x01, 0x01, 0x12, 0x32, 0x0a, 0x13, 0x6c, 0x6f, 0x67, 0x5f, 0x69, 0x6e, 0x5f, 0x77,
	0x69, 0x74, 0x68, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x6b, 0x65, 0x79, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x08, 0x48, 0x08, 0x52, 0x10, 0x6c, 0x6f, 0x67, 0x49, 0x6e, 0x57, 0x69, 0x74, 0x68, 0x50, 0x61,
	0x73, 0x73, 0x6b, 0x65, 0x79, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x16, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x5f, 0x6f, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x4f, 0x61, 0x75, 0x74, 0x68, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x3b, 0x0a,
	0x1a, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x5f, 0x6f, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x17, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x4f, 0x61, 0x75, 0x74, 0x68, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0x39, 0x0a, 0x19, 0x6d, 0x69,
	0x63, 0x72, 0x6f, 0x73, 0x6f, 0x66, 0x74, 0x5f, 0x6f, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x6d,
	0x69, 0x63, 0x72, 0x6f, 0x73, 0x6f, 0x66, 0x74, 0x4f, 0x61, 0x75, 0x74, 0x68, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x41, 0x0a, 0x1d, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x6f,
	0x66, 0x74, 0x5f, 0x6f, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f,
	0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1a, 0x6d, 0x69,
	0x63, 0x72, 0x6f, 0x73, 0x6f, 0x66, 0x74, 0x4f, 0x61, 0x75, 0x74, 0x68, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0x33, 0x0a, 0x16, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x5f, 0x6f, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x4f, 0x61, 0x75, 0x74, 0x68, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x3b, 0x0a,
	0x1a, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x5f, 0x6f, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x19, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x17, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x4f, 0x61, 0x75, 0x74, 0x68, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x76, 0x61,
	0x75, 0x6c, 0x74, 0x5f, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x2e, 0x0a,
	0x13, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x63, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x18, 0x17, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x76, 0x61, 0x75, 0x6c,
	0x74, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x12, 0x27, 0x0a,
	0x0f, 0x74, 0x72, 0x75, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73,
	0x18, 0x11, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x74, 0x72, 0x75, 0x73, 0x74, 0x65, 0x64, 0x44,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6f, 0x6b, 0x69, 0x65,
	0x5f, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63,
	0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x72,
	0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x5f, 0x75, 0x72, 0x69, 0x18, 0x12, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x72, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x55, 0x72, 0x69, 0x12, 0x3c,
	0x0a, 0x18, 0x61, 0x66, 0x74, 0x65, 0x72, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x5f, 0x72, 0x65,
	0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x5f, 0x75, 0x72, 0x69, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x09, 0x52, 0x15, 0x61, 0x66, 0x74, 0x65, 0x72, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65,
	0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x55, 0x72, 0x69, 0x88, 0x01, 0x01, 0x12, 0x3e, 0x0a, 0x19,
	0x61, 0x66, 0x74, 0x65, 0x72, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x75, 0x70, 0x5f, 0x72, 0x65, 0x64,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x5f, 0x75, 0x72, 0x69, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x0a, 0x52, 0x16, 0x61, 0x66, 0x74, 0x65, 0x72, 0x53, 0x69, 0x67, 0x6e, 0x75, 0x70, 0x52, 0x65,
	0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x55, 0x72, 0x69, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x16,
	0x65, 0x6d, 0x61, 0x69, 0x6c, 0x5f, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f,
	0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x65, 0x6d,
	0x61, 0x69, 0x6c, 0x53, 0x65, 0x6e, 0x64, 0x46, 0x72, 0x6f, 0x6d, 0x44, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x12, 0x2d, 0x0a, 0x10, 0x61, 0x70, 0x69, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x5f, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x08, 0x48, 0x0b, 0x52, 0x0e, 0x61,
	0x70, 0x69, 0x4b, 0x65, 0x79, 0x73, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x88, 0x01, 0x01,
	0x12, 0x41, 0x0a, 0x1b, 0x61, 0x70, 0x69, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x73, 0x65, 0x63, 0x72,
	0x65, 0x74, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18,
	0x1c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0c, 0x52, 0x17, 0x61, 0x70, 0x69, 0x4b, 0x65, 0x79, 0x53,
	0x65, 0x63, 0x72, 0x65, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78,
	0x88, 0x01, 0x01, 0x12, 0x31, 0x0a, 0x12, 0x61, 0x75, 0x64, 0x69, 0x74, 0x5f, 0x6c, 0x6f, 0x67,
	0x73, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x08, 0x48,
	0x0d, 0x52, 0x10, 0x61, 0x75, 0x64, 0x69, 0x74, 0x4c, 0x6f, 0x67, 0x73, 0x45, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x88, 0x01, 0x01, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x6c, 0x6f, 0x67, 0x5f, 0x69,
	0x6e, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x42, 0x18, 0x0a,
	0x16, 0x5f, 0x6c, 0x6f, 0x67, 0x5f, 0x69, 0x6e, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x6d, 0x69,
	0x63, 0x72, 0x6f, 0x73, 0x6f, 0x66, 0x74, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x6c, 0x6f, 0x67, 0x5f,
	0x69, 0x6e, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x42, 0x14,
	0x0a, 0x12, 0x5f, 0x6c, 0x6f, 0x67, 0x5f, 0x69, 0x6e, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x65,
	0x6d, 0x61, 0x69, 0x6c, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x6c, 0x6f, 0x67, 0x5f, 0x69, 0x6e, 0x5f,
	0x77, 0x69, 0x74, 0x68, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x42, 0x13, 0x0a,
	0x11, 0x5f, 0x6c, 0x6f, 0x67, 0x5f, 0x69, 0x6e, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x73, 0x61,
	0x6d, 0x6c, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x6c, 0x6f, 0x67, 0x5f, 0x69, 0x6e, 0x5f, 0x77, 0x69,
	0x74, 0x68, 0x5f, 0x6f, 0x69, 0x64, 0x63, 0x42, 0x20, 0x0a, 0x1e, 0x5f, 0x6c, 0x6f, 0x67, 0x5f,
	0x69, 0x6e, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69,
	0x63, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x6c, 0x6f,
	0x67, 0x5f, 0x69, 0x6e, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x6b, 0x65,
	0x79, 0x42, 0x1b, 0x0a, 0x19, 0x5f, 0x61, 0x66, 0x74, 0x65, 0x72, 0x5f, 0x6c, 0x6f, 0x67, 0x69,
	0x6e, 0x5f, 0x72, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x5f, 0x75, 0x72, 0x69, 0x42, 0x1c,
	0x0a, 0x1a, 0x5f, 0x61, 0x66, 0x74, 0x65, 0x72, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x75, 0x70, 0x5f,
	0x72, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x5f, 0x75, 0x72, 0x69, 0x42, 0x13, 0x0a, 0x11,
	0x5f, 0x61, 0x70, 0x69, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x42, 0x1e, 0x0a, 0x1c, 0x5f, 0x61, 0x70, 0x69, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x73, 0x65,
	0x63, 0x72, 0x65, 0x74, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69,
	0x78, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x61, 0x75, 0x64, 0x69, 0x74, 0x5f, 0x6c, 0x6f, 0x67, 0x73,
	0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x22, 0x8c, 0x03, 0x0a, 0x13, 0x56, 0x61, 0x75,
	0x6c, 0x74, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x12, 0x25, 0x0a, 0x0e, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e,
	0x67, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x3b, 0x0a, 0x1a, 0x70, 0x65, 0x6e, 0x64, 0x69,
	0x6e, 0x67, 0x5f, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x5f,
	0x72, 0x65, 0x61, 0x64, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x17, 0x70, 0x65, 0x6e,
	0x64, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x75, 0x6c, 0x74, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x52,
	0x65, 0x61, 0x64, 0x79, 0x12, 0x42, 0x0a, 0x1e, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f,
	0x73, 0x65, 0x6e, 0x64, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x5f, 0x72, 0x65, 0x61, 0x64, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1a, 0x70, 0x65,
	0x6e, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x6e, 0x64, 0x46, 0x72, 0x6f, 0x6d, 0x44, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x52, 0x65, 0x61, 0x64, 0x79, 0x12, 0x63, 0x0a, 0x14, 0x76, 0x61, 0x75, 0x6c,
	0x74, 0x5f, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x74, 0x65, 0x73, 0x73, 0x65, 0x72, 0x61,
	0x6c, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x61, 0x75,
	0x6c, 0x74, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x44, 0x4e, 0x53, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x12, 0x76, 0x61, 0x75, 0x6c, 0x74,
	0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x68, 0x0a,
	0x17, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x5f, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x66, 0x72, 0x6f, 0x6d,
	0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31,
	0x2e, 0x74, 0x65, 0x73, 0x73, 0x65, 0x72, 0x61, 0x6c, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e,
	0x64, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x61, 0x75, 0x6c, 0x74, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x44, 0x4e, 0x53, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x52, 0x14, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x53, 0x65, 0x6e, 0x64, 0x46, 0x72, 0x6f, 0x6d,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x22, 0xd2, 0x01, 0x0a, 0x1c, 0x56, 0x61, 0x75, 0x6c,
	0x74, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x44,
	0x4e, 0x53, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x1d, 0x0a, 0x0a, 0x77, 0x61, 0x6e, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x77, 0x61, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x23, 0x0a, 0x0d, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x74,
	0x74, 0x6c, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x10, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x54, 0x74, 0x6c, 0x53, 0x65, 0x63, 0x6f, 0x6e,
	0x64, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x07, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x22, 0xf9, 0x03, 0x0a,
	0x11, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x55, 0x49, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49,
	0x64, 0x12, 0x3b, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3b,
	0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x6c,
	0x6f, 0x67, 0x6f, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6c,
	0x6f, 0x67, 0x6f, 0x55, 0x72, 0x6c, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72,
	0x79, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70,
	0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x37, 0x0a, 0x18, 0x64,
	0x65, 0x74, 0x65, 0x63, 0x74, 0x5f, 0x64, 0x61, 0x72, 0x6b, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x5f,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x64,
	0x65, 0x74, 0x65, 0x63, 0x74, 0x44, 0x61, 0x72, 0x6b, 0x4d, 0x6f, 0x64, 0x65, 0x45, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x12, 0x2b, 0x0a, 0x12, 0x64, 0x61, 0x72, 0x6b, 0x5f, 0x6d, 0x6f, 0x64,
	0x65, 0x5f, 0x6c, 0x6f, 0x67, 0x6f, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0f, 0x64, 0x61, 0x72, 0x6b, 0x4d, 0x6f, 0x64, 0x65, 0x4c, 0x6f, 0x67, 0x6f, 0x55, 0x72,
	0x6c, 0x12, 0x35, 0x0a, 0x17, 0x64, 0x61, 0x72, 0x6b, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x5f, 0x70,
	0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x14, 0x64, 0x61, 0x72, 0x6b, 0x4d, 0x6f, 0x64, 0x65, 0x50, 0x72, 0x69, 0x6d,
	0x61, 0x72, 0x79, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x22, 0x0a, 0x0d, 0x6c, 0x6f, 0x67, 0x5f,
	0x69, 0x6e, 0x5f, 0x6c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x6c, 0x6f, 0x67, 0x49, 0x6e, 0x4c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x12, 0x3a, 0x0a, 0x19,
	0x61, 0x75, 0x74, 0x6f, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x6f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x17, 0x61, 0x75, 0x74, 0x6f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xf2, 0x08, 0x0a, 0x0c, 0x4f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x69, 0x73,
	0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x0b,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x12, 0x6c, 0x6f, 0x67, 0x5f, 0x69, 0x6e,
	0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x08, 0x48, 0x00, 0x52, 0x0f, 0x6c, 0x6f, 0x67, 0x49, 0x6e, 0x57, 0x69, 0x74, 0x68, 0x47,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x36, 0x0a, 0x15, 0x6c, 0x6f, 0x67, 0x5f,
	0x69, 0x6e, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x6f, 0x66,
	0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x48, 0x01, 0x52, 0x12, 0x6c, 0x6f, 0x67, 0x49, 0x6e,
	0x57, 0x69, 0x74, 0x68, 0x4d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x6f, 0x66, 0x74, 0x88, 0x01, 0x01,
	0x12, 0x30, 0x0a, 0x12, 0x6c, 0x6f, 0x67, 0x5f, 0x69, 0x6e, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x18, 0x11, 0x20, 0x01, 0x28, 0x08, 0x48, 0x02, 0x52, 0x0f,
	0x6c, 0x6f, 0x67, 0x49, 0x6e, 0x57, 0x69, 0x74, 0x68, 0x47, 0x69, 0x74, 0x68, 0x75, 0x62, 0x88,
	0x01, 0x01, 0x12, 0x2e, 0x0a, 0x11, 0x6c, 0x6f, 0x67, 0x5f, 0x69, 0x6e, 0x5f, 0x77, 0x69, 0x74,
	0x68, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x48, 0x03, 0x52,
	0x0e, 0x6c, 0x6f, 0x67, 0x49, 0x6e, 0x57, 0x69, 0x74, 0x68, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x88,
	0x01, 0x01, 0x12, 0x34, 0x0a, 0x14, 0x6c, 0x6f, 0x67, 0x5f, 0x69, 0x6e, 0x5f, 0x77, 0x69, 0x74,
	0x68, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08,
	0x48, 0x04, 0x52, 0x11, 0x6c, 0x6f, 0x67, 0x49, 0x6e, 0x57, 0x69, 0x74, 0x68, 0x50, 0x61, 0x73,
	0x73, 0x77, 0x6f, 0x72, 0x64, 0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a, 0x10, 0x6c, 0x6f, 0x67, 0x5f,
	0x69, 0x6e, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x73, 0x61, 0x6d, 0x6c, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x08, 0x48, 0x05, 0x52, 0x0d, 0x6c, 0x6f, 0x67, 0x49, 0x6e, 0x57, 0x69, 0x74, 0x68, 0x53,
	0x61, 0x6d, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a, 0x10, 0x6c, 0x6f, 0x67, 0x5f, 0x69, 0x6e,
	0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x6f, 0x69, 0x64, 0x63, 0x18, 0x12, 0x20, 0x01, 0x28, 0x08,
	0x48, 0x06, 0x52, 0x0d, 0x6c, 0x6f, 0x67, 0x49, 0x6e, 0x57, 0x69, 0x74, 0x68, 0x4f, 0x69, 0x64,
	0x63, 0x88, 0x01, 0x01, 0x12, 0x45, 0x0a, 0x1d, 0x6c, 0x6f, 0x67, 0x5f, 0x69, 0x6e, 0x5f, 0x77,
	0x69, 0x74, 0x68, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x6f,
	0x72, 0x5f, 0x61, 0x70, 0x70, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x48, 0x07, 0x52, 0x19, 0x6c,
	0x6f, 0x67, 0x49, 0x6e, 0x57, 0x69, 0x74, 0x68, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69,
	0x63, 0x61, 0x74, 0x6f, 0x72, 0x41, 0x70, 0x70, 0x88, 0x01, 0x01, 0x12, 0x32, 0x0a, 0x13, 0x6c,
	0x6f, 0x67, 0x5f, 0x69, 0x6e, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x6b,
	0x65, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x48, 0x08, 0x52, 0x10, 0x6c, 0x6f, 0x67, 0x49,
	0x6e, 0x57, 0x69, 0x74, 0x68, 0x50, 0x61, 0x73, 0x73, 0x6b, 0x65, 0x79, 0x88, 0x01, 0x01, 0x12,
	0x24, 0x0a, 0x0b, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x5f, 0x6d, 0x66, 0x61, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x08, 0x48, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x4d,
	0x66, 0x61, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x73, 0x63, 0x69, 0x6d, 0x5f, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x48, 0x0a, 0x52, 0x0b, 0x73,
	0x63, 0x69, 0x6d, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x35, 0x0a,
	0x14, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x5f, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x48, 0x0b, 0x52, 0x12, 0x63,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x52, 0x6f, 0x6c, 0x65, 0x73, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x10, 0x61, 0x70, 0x69, 0x5f, 0x6b, 0x65, 0x79, 0x73,
	0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x48, 0x0c,
	0x52, 0x0e, 0x61, 0x70, 0x69, 0x4b, 0x65, 0x79, 0x73, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x88, 0x01, 0x01, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x6c, 0x6f, 0x67, 0x5f, 0x69, 0x6e, 0x5f, 0x77,
	0x69, 0x74, 0x68, 0x5f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x42, 0x18, 0x0a, 0x16, 0x5f, 0x6c,
	0x6f, 0x67, 0x5f, 0x69, 0x6e, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x6d, 0x69, 0x63, 0x72, 0x6f,
	0x73, 0x6f, 0x66, 0x74, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x6c, 0x6f, 0x67, 0x5f, 0x69, 0x6e, 0x5f,
	0x77, 0x69, 0x74, 0x68, 0x5f, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x42, 0x14, 0x0a, 0x12, 0x5f,
	0x6c, 0x6f, 0x67, 0x5f, 0x69, 0x6e, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x65, 0x6d, 0x61, 0x69,
	0x6c, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x6c, 0x6f, 0x67, 0x5f, 0x69, 0x6e, 0x5f, 0x77, 0x69, 0x74,
	0x68, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x6c,
	0x6f, 0x67, 0x5f, 0x69, 0x6e, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x73, 0x61, 0x6d, 0x6c, 0x42,
	0x13, 0x0a, 0x11, 0x5f, 0x6c, 0x6f, 0x67, 0x5f, 0x69, 0x6e, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f,
	0x6f, 0x69, 0x64, 0x63, 0x42, 0x20, 0x0a, 0x1e, 0x5f, 0x6c, 0x6f, 0x67, 0x5f, 0x69, 0x6e, 0x5f,
	0x77, 0x69, 0x74, 0x68, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74,
	0x6f, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x6c, 0x6f, 0x67, 0x5f, 0x69,
	0x6e, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x6b, 0x65, 0x79, 0x42, 0x0e,
	0x0a, 0x0c, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x5f, 0x6d, 0x66, 0x61, 0x42, 0x0f,
	0x0a, 0x0d, 0x5f, 0x73, 0x63, 0x69, 0x6d, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x42,
	0x17, 0x0a, 0x15, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x73,
	0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x61, 0x70, 0x69,
	0x5f, 0x6b, 0x65, 0x79, 0x73, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x22, 0x58, 0x0a,
	0x13, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x18, 0x0a,
	0x07, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07,
	0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x22, 0x7e, 0x0a, 0x1f, 0x4f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x48, 0x6f, 0x73,
	0x74, 0x65, 0x64, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x6f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x15, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x5f, 0x68, 0x6f,
	0x73, 0x74, 0x65, 0x64, 0x5f, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x13, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x48, 0x6f, 0x73, 0x74, 0x65, 0x64,
	0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x22, 0x7b, 0x0a, 0x1e, 0x4f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x6f, 0x66, 0x74,
	0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x44, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x6f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x12, 0x30, 0x0a, 0x14, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x6f, 0x66, 0x74, 0x5f,
	0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x12, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x6f, 0x66, 0x74, 0x54, 0x65, 0x6e, 0x61, 0x6e,
	0x74, 0x49, 0x64, 0x73, 0x22, 0xf9, 0x01, 0x0a, 0x0d, 0x42, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64,
	0x41, 0x50, 0x49, 0x4b, 0x65, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61,
	0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x69,
	0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x5f, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x65, 0x63, 0x72, 0x65,
	0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x76, 0x6f, 0x6b, 0x65,
	0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x72, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x64,
	0x22, 0xea, 0x01, 0x0a, 0x0e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x61, 0x62, 0x6c, 0x65,
	0x4b, 0x65, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c,
	0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x1e, 0x0a, 0x08, 0x64, 0x65, 0x76, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x08, 0x48, 0x00, 0x52, 0x07, 0x64, 0x65, 0x76, 0x4d, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01,
	0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x64, 0x65, 0x76, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x22, 0xf1, 0x04,
	0x0a, 0x04, 0x55, 0x73, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12,
	0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x3b, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x19, 0x0a, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00,
	0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x0e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x01, 0x52, 0x0c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x11, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x6f,
	0x66, 0x74, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x02, 0x52, 0x0f, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x6f, 0x66, 0x74, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x0e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03,
	0x52, 0x0c, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x88, 0x01,
	0x01, 0x12, 0x32, 0x0a, 0x15, 0x68, 0x61, 0x73, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74,
	0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x13, 0x68, 0x61, 0x73, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74,
	0x6f, 0x72, 0x41, 0x70, 0x70, 0x12, 0x26, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x0b, 0x64,
	0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a,
	0x13, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x70, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65,
	0x5f, 0x75, 0x72, 0x6c, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x11, 0x70, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x55, 0x72, 0x6c, 0x88,
	0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x42, 0x11, 0x0a, 0x0f,
	0x5f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x42,
	0x14, 0x0a, 0x12, 0x5f, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x6f, 0x66, 0x74, 0x5f, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x64, 0x69, 0x73,
	0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x70, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x70, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x75, 0x72,
	0x6c, 0x22, 0xe4, 0x02, 0x0a, 0x07, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x17, 0x0a,
	0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x76, 0x6f, 0x6b, 0x65,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x72, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x64,
	0x12, 0x3b, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x44, 0x0a,
	0x10, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x0e, 0x6c, 0x61, 0x73, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x56, 0x0a, 0x13, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x61, 0x75, 0x74, 0x68,
	0x5f, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e,
	0x74, 0x65, 0x73, 0x73, 0x65, 0x72, 0x61, 0x6c, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64,
	0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x41, 0x75, 0x74, 0x68, 0x46,
	0x61, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x11, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x41, 0x75,
	0x74, 0x68, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x22, 0xd4, 0x02, 0x0a, 0x07, 0x50, 0x61, 0x73,
	0x73, 0x6b, 0x65, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x3b, 0x0a,
	0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x08, 0x64, 0x69, 0x73, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x08, 0x64, 0x69, 0x73,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x72, 0x65, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x0c, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x49, 0x64, 0x12, 0x26, 0x0a,
	0x0f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x70, 0x6b, 0x69, 0x78,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65,
	0x79, 0x50, 0x6b, 0x69, 0x78, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x61, 0x67, 0x75, 0x69, 0x64, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x61, 0x67, 0x75, 0x69, 0x64, 0x12, 0x13, 0x0a,
	0x05, 0x72, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x72, 0x70,
	0x49, 0x64, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x22,
	0xae, 0x03, 0x0a, 0x0e, 0x53, 0x41, 0x4d, 0x4c, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x3b, 0x0a, 0x0b, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x07, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x07, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72,
	0x79, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x0a, 0x73, 0x70, 0x5f, 0x61, 0x63, 0x73, 0x5f, 0x75,
	0x72, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x70, 0x41, 0x63, 0x73, 0x55,
	0x72, 0x6c, 0x12, 0x20, 0x0a, 0x0c, 0x73, 0x70, 0x5f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f,
	0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x70, 0x45, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x69, 0x64, 0x70, 0x5f, 0x72, 0x65, 0x64, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x69, 0x64, 0x70, 0x52, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x55, 0x72, 0x6c, 0x12, 0x30,
	0x0a, 0x14, 0x69, 0x64, 0x70, 0x5f, 0x78, 0x35, 0x30, 0x39, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x69, 0x64,
	0x70, 0x58, 0x35, 0x30, 0x39, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65,
	0x12, 0x22, 0x0a, 0x0d, 0x69, 0x64, 0x70, 0x5f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x69,
	0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x69, 0x64, 0x70, 0x45, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x49, 0x64, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79,
	0x22, 0x80, 0x03, 0x0a, 0x0e, 0x4f, 0x49, 0x44, 0x43, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x3b, 0x0a, 0x0b,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x07, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72,
	0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x07, 0x70, 0x72, 0x69, 0x6d, 0x61,
	0x72, 0x79, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x10, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55,
	0x72, 0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12,
	0x23, 0x0a, 0x0d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x65,
	0x63, 0x72, 0x65, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x5f, 0x75, 0x72, 0x69, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65, 0x64, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x55, 0x72, 0x69, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x70, 0x72, 0x69, 0x6d,
	0x61, 0x72, 0x79, 0x22, 0x9f, 0x02, 0x0a, 0x0a, 0x53, 0x43, 0x49, 0x4d, 0x41, 0x50, 0x49, 0x4b,
	0x65, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x3b, 0x0a, 0x0b, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x69, 0x73,
	0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x65, 0x63, 0x72,
	0x65, 0x74, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x72,
	0x65, 0x76, 0x6f, 0x6b, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x72, 0x65,
	0x76, 0x6f, 0x6b, 0x65, 0x64, 0x22, 0x97, 0x02, 0x0a, 0x16, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6d,
	0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x27, 0x0a, 0x0f, 0x69, 0x6d, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x74, 0x6f, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x69, 0x6d, 0x70, 0x65, 0x72,
	0x73, 0x6f, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x3b, 0x0a, 0x0b, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x5f, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x65, 0x63, 0x72, 0x65,
	0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x27, 0x0a, 0x0f, 0x69, 0x6d, 0x70, 0x65, 0x72, 0x73,
	0x6f, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x69, 0x6d, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x49, 0x64, 0x22,
	0xeb, 0x01, 0x0a, 0x0a, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x27,
	0x0a, 0x0f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x3b, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x22, 0x43, 0x0a,
	0x0a, 0x52, 0x42, 0x41, 0x43, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x35, 0x0a, 0x07, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x74,
	0x65, 0x73, 0x73, 0x65, 0x72, 0x61, 0x6c, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e,
	0x76, 0x31, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x22, 0x3e, 0x0a, 0x06, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x22, 0x98, 0x02, 0x0a, 0x04, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x6f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x12, 0x3b, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x21,
	0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x07,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x56, 0x0a,
	0x12, 0x55, 0x73, 0x65, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d,
	0x65, 0x6e, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07,
	0x72, 0x6f, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72,
	0x6f, 0x6c, 0x65, 0x49, 0x64, 0x22, 0x9d, 0x03, 0x0a, 0x06, 0x41, 0x50, 0x49, 0x4b, 0x65, 0x79,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x27, 0x0a, 0x0f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x3b, 0x0a, 0x0b, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x40, 0x0a, 0x0b, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x48, 0x00, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x69, 0x73,
	0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x65, 0x63, 0x72,
	0x65, 0x74, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x2e, 0x0a, 0x13, 0x73,
	0x65, 0x63, 0x72, 0x65, 0x74, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x73, 0x75, 0x66, 0x66,
	0x69, 0x78, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x53, 0x75, 0x66, 0x66, 0x69, 0x78, 0x12, 0x18, 0x0a, 0x07, 0x72,
	0x65, 0x76, 0x6f, 0x6b, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x72, 0x65,
	0x76, 0x6f, 0x6b, 0x65, 0x64, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x22, 0x5d, 0x0a, 0x14, 0x41, 0x50, 0x49, 0x4b, 0x65, 0x79, 0x52,
	0x6f, 0x6c, 0x65, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1c, 0x0a,
	0x0a, 0x61, 0x70, 0x69, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x61, 0x70, 0x69, 0x4b, 0x65, 0x79, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x72,
	0x6f, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x6f,
	0x6c, 0x65, 0x49, 0x64, 0x22, 0xff, 0x03, 0x0a, 0x0d, 0x41, 0x75, 0x64, 0x69, 0x74, 0x4c, 0x6f,
	0x67, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12,
	0x22, 0x0a, 0x0d, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x61,
	0x63, 0x74, 0x6f, 0x72, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x27, 0x0a,
	0x10, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x61, 0x70, 0x69, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x69,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x41, 0x70,
	0x69, 0x4b, 0x65, 0x79, 0x49, 0x64, 0x12, 0x36, 0x0a, 0x18, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x5f,
	0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x5f, 0x61, 0x70, 0x69, 0x5f, 0x6b, 0x65, 0x79, 0x5f,
	0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x42,
	0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x41, 0x70, 0x69, 0x4b, 0x65, 0x79, 0x49, 0x64, 0x12, 0x41,
	0x0a, 0x1d, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6d, 0x65, 0x64,
	0x69, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1a, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x12, 0x39, 0x0a, 0x0a, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3c, 0x0a, 0x0d, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x0c, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x2b, 0x0a, 0x11, 0x61, 0x63, 0x74,
	0x6f, 0x72, 0x5f, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x43, 0x72, 0x65, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x22, 0xc5, 0x04, 0x0a, 0x14, 0x43, 0x6f, 0x6e, 0x73, 0x6f,
	0x6c, 0x65, 0x41, 0x75, 0x64, 0x69, 0x74, 0x4c, 0x6f, 0x67, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x27, 0x0a, 0x0f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x61, 0x63, 0x74, 0x6f,
	0x72, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10,
	0x61, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x53, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x10, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x5f,
	0x61, 0x70, 0x69, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x41, 0x70, 0x69, 0x4b, 0x65, 0x79, 0x49, 0x64, 0x12,
	0x36, 0x0a, 0x18, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64,
	0x5f, 0x61, 0x70, 0x69, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x14, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x42, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x41,
	0x70, 0x69, 0x4b, 0x65, 0x79, 0x49, 0x64, 0x12, 0x41, 0x0a, 0x1d, 0x61, 0x63, 0x74, 0x6f, 0x72,
	0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1a,
	0x61, 0x63, 0x74, 0x6f, 0x72, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74,
	0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x31, 0x0a, 0x15, 0x61, 0x63,
	0x74, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x5f, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x61, 0x63, 0x74, 0x6f, 0x72,
	0x43, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x37, 0x0a,
	0x18, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x5f, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x15, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x53, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x39, 0x0a, 0x0a, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x3c, 0x0a, 0x0d, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x52, 0x0c, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x2a, 0x9d,
	0x02, 0x0a, 0x11, 0x50, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x41, 0x75, 0x74, 0x68, 0x46, 0x61,
	0x63, 0x74, 0x6f, 0x72, 0x12, 0x23, 0x0a, 0x1f, 0x50, 0x52, 0x49, 0x4d, 0x41, 0x52, 0x59, 0x5f,
	0x41, 0x55, 0x54, 0x48, 0x5f, 0x46, 0x41, 0x43, 0x54, 0x4f, 0x52, 0x5f, 0x55, 0x4e, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1d, 0x0a, 0x19, 0x50, 0x52, 0x49,
	0x4d, 0x41, 0x52, 0x59, 0x5f, 0x41, 0x55, 0x54, 0x48, 0x5f, 0x46, 0x41, 0x43, 0x54, 0x4f, 0x52,
	0x5f, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x10, 0x01, 0x12, 0x1e, 0x0a, 0x1a, 0x50, 0x52, 0x49, 0x4d,
	0x41, 0x52, 0x59, 0x5f, 0x41, 0x55, 0x54, 0x48, 0x5f, 0x46, 0x41, 0x43, 0x54, 0x4f, 0x52, 0x5f,
	0x47, 0x4f, 0x4f, 0x47, 0x4c, 0x45, 0x10, 0x02, 0x12, 0x21, 0x0a, 0x1d, 0x50, 0x52, 0x49, 0x4d,
	0x41, 0x52, 0x59, 0x5f, 0x41, 0x55, 0x54, 0x48, 0x5f, 0x46, 0x41, 0x43, 0x54, 0x4f, 0x52, 0x5f,
	0x4d, 0x49, 0x43, 0x52, 0x4f, 0x53, 0x4f, 0x46, 0x54, 0x10, 0x03, 0x12, 0x1e, 0x0a, 0x1a, 0x50,
	0x52, 0x49, 0x4d, 0x41, 0x52, 0x59, 0x5f, 0x41, 0x55, 0x54, 0x48, 0x5f, 0x46, 0x41, 0x43, 0x54,
	0x4f, 0x52, 0x5f, 0x47, 0x49, 0x54, 0x48, 0x55, 0x42, 0x10, 0x06, 0x12, 0x1c, 0x0a, 0x18, 0x50,
	0x52, 0x49, 0x4d, 0x41, 0x52, 0x59, 0x5f, 0x41, 0x55, 0x54, 0x48, 0x5f, 0x46, 0x41, 0x43, 0x54,
	0x4f, 0x52, 0x5f, 0x53, 0x41, 0x4d, 0x4c, 0x10, 0x04, 0x12, 0x1c, 0x0a, 0x18, 0x50, 0x52, 0x49,
	0x4d, 0x41, 0x52, 0x59, 0x5f, 0x41, 0x55, 0x54, 0x48, 0x5f, 0x46, 0x41, 0x43, 0x54, 0x4f, 0x52,
	0x5f, 0x4f, 0x49, 0x44, 0x43, 0x10, 0x07, 0x12, 0x25, 0x0a, 0x21, 0x50, 0x52, 0x49, 0x4d, 0x41,
	0x52, 0x59, 0x5f, 0x41, 0x55, 0x54, 0x48, 0x5f, 0x46, 0x41, 0x43, 0x54, 0x4f, 0x52, 0x5f, 0x49,
	0x4d, 0x50, 0x45, 0x52, 0x53, 0x4f, 0x4e, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x05, 0x2a, 0x90,
	0x04, 0x0a, 0x19, 0x41, 0x75, 0x64, 0x69, 0x74, 0x4c, 0x6f, 0x67, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2d, 0x0a, 0x29,
	0x41, 0x55, 0x44, 0x49, 0x54, 0x5f, 0x4c, 0x4f, 0x47, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f,
	0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e,
	0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x29, 0x0a, 0x25, 0x41,
	0x55, 0x44, 0x49, 0x54, 0x5f, 0x4c, 0x4f, 0x47, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x52,
	0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x50, 0x49,
	0x5f, 0x4b, 0x45, 0x59, 0x10, 0x01, 0x12, 0x2e, 0x0a, 0x2a, 0x41, 0x55, 0x44, 0x49, 0x54, 0x5f,
	0x4c, 0x4f, 0x47, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52,
	0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4f, 0x52, 0x47, 0x41, 0x4e, 0x49, 0x5a, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x10, 0x02, 0x12, 0x29, 0x0a, 0x25, 0x41, 0x55, 0x44, 0x49, 0x54, 0x5f,
	0x4c, 0x4f, 0x47, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52,
	0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x41, 0x53, 0x53, 0x4b, 0x45, 0x59, 0x10,
	0x03, 0x12, 0x26, 0x0a, 0x22, 0x41, 0x55, 0x44, 0x49, 0x54, 0x5f, 0x4c, 0x4f, 0x47, 0x5f, 0x45,
	0x56, 0x45, 0x4e, 0x54, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x52, 0x4f, 0x4c, 0x45, 0x10, 0x04, 0x12, 0x31, 0x0a, 0x2d, 0x41, 0x55, 0x44,
	0x49, 0x54, 0x5f, 0x4c, 0x4f, 0x47, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x52, 0x45, 0x53,
	0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x41, 0x4d, 0x4c, 0x5f,
	0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x05, 0x12, 0x31, 0x0a, 0x2d,
	0x41, 0x55, 0x44, 0x49, 0x54, 0x5f, 0x4c, 0x4f, 0x47, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f,
	0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4f, 0x49,
	0x44, 0x43, 0x5f, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x0a, 0x12,
	0x2e, 0x0a, 0x2a, 0x41, 0x55, 0x44, 0x49, 0x54, 0x5f, 0x4c, 0x4f, 0x47, 0x5f, 0x45, 0x56, 0x45,
	0x4e, 0x54, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x53, 0x43, 0x49, 0x4d, 0x5f, 0x41, 0x50, 0x49, 0x5f, 0x4b, 0x45, 0x59, 0x10, 0x06, 0x12,
	0x29, 0x0a, 0x25, 0x41, 0x55, 0x44, 0x49, 0x54, 0x5f, 0x4c, 0x4f, 0x47, 0x5f, 0x45, 0x56, 0x45,
	0x4e, 0x54, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x10, 0x07, 0x12, 0x2d, 0x0a, 0x29, 0x41, 0x55,
	0x44, 0x49, 0x54, 0x5f, 0x4c, 0x4f, 0x47, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x52, 0x45,
	0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52,
	0x5f, 0x49, 0x4e, 0x56, 0x49, 0x54, 0x45, 0x10, 0x08, 0x12, 0x26, 0x0a, 0x22, 0x41, 0x55, 0x44,
	0x49, 0x54, 0x5f, 0x4c, 0x4f, 0x47, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x52, 0x45, 0x53,
	0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x10,
	0x09, 0x42, 0xea, 0x01, 0x0a, 0x17, 0x63, 0x6f, 0x6d, 0x2e, 0x74, 0x65, 0x73, 0x73, 0x65, 0x72,
	0x61, 0x6c, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x42, 0x0b, 0x4d,
	0x6f, 0x64, 0x65, 0x6c, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x54, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x74, 0x65, 0x73, 0x73, 0x65, 0x72, 0x61,
	0x6c, 0x2d, 0x6c, 0x61, 0x62, 0x73, 0x2f, 0x74, 0x65, 0x73, 0x73, 0x65, 0x72, 0x61, 0x6c, 0x2f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64,
	0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x74, 0x65, 0x73, 0x73, 0x65, 0x72, 0x61, 0x6c, 0x2f, 0x62, 0x61,
	0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2f, 0x76, 0x31, 0x3b, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64,
	0x76, 0x31, 0xa2, 0x02, 0x03, 0x54, 0x42, 0x58, 0xaa, 0x02, 0x13, 0x54, 0x65, 0x73, 0x73, 0x65,
	0x72, 0x61, 0x6c, 0x2e, 0x42, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x56, 0x31, 0xca, 0x02,
	0x13, 0x54, 0x65, 0x73, 0x73, 0x65, 0x72, 0x61, 0x6c, 0x5c, 0x42, 0x61, 0x63, 0x6b, 0x65, 0x6e,
	0x64, 0x5c, 0x56, 0x31, 0xe2, 0x02, 0x1f, 0x54, 0x65, 0x73, 0x73, 0x65, 0x72, 0x61, 0x6c, 0x5c,
	0x42, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x5c, 0x56, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x15, 0x54, 0x65, 0x73, 0x73, 0x65, 0x72, 0x61,
	0x6c, 0x3a, 0x3a, 0x42, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_tesseral_backend_v1_models_proto_rawDescOnce sync.Once
	file_tesseral_backend_v1_models_proto_rawDescData []byte
)

func file_tesseral_backend_v1_models_proto_rawDescGZIP() []byte {
	file_tesseral_backend_v1_models_proto_rawDescOnce.Do(func() {
		file_tesseral_backend_v1_models_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_tesseral_backend_v1_models_proto_rawDesc), len(file_tesseral_backend_v1_models_proto_rawDesc)))
	})
	return file_tesseral_backend_v1_models_proto_rawDescData
}

var file_tesseral_backend_v1_models_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_tesseral_backend_v1_models_proto_msgTypes = make([]protoimpl.MessageInfo, 26)
var file_tesseral_backend_v1_models_proto_goTypes = []any{
	(PrimaryAuthFactor)(0),                  // 0: tesseral.backend.v1.PrimaryAuthFactor
	(AuditLogEventResourceType)(0),          // 1: tesseral.backend.v1.AuditLogEventResourceType
	(*Project)(nil),                         // 2: tesseral.backend.v1.Project
	(*VaultDomainSettings)(nil),             // 3: tesseral.backend.v1.VaultDomainSettings
	(*VaultDomainSettingsDNSRecord)(nil),    // 4: tesseral.backend.v1.VaultDomainSettingsDNSRecord
	(*ProjectUISettings)(nil),               // 5: tesseral.backend.v1.ProjectUISettings
	(*Organization)(nil),                    // 6: tesseral.backend.v1.Organization
	(*OrganizationDomains)(nil),             // 7: tesseral.backend.v1.OrganizationDomains
	(*OrganizationGoogleHostedDomains)(nil), // 8: tesseral.backend.v1.OrganizationGoogleHostedDomains
	(*OrganizationMicrosoftTenantIDs)(nil),  // 9: tesseral.backend.v1.OrganizationMicrosoftTenantIDs
	(*BackendAPIKey)(nil),                   // 10: tesseral.backend.v1.BackendAPIKey
	(*PublishableKey)(nil),                  // 11: tesseral.backend.v1.PublishableKey
	(*User)(nil),                            // 12: tesseral.backend.v1.User
	(*Session)(nil),                         // 13: tesseral.backend.v1.Session
	(*Passkey)(nil),                         // 14: tesseral.backend.v1.Passkey
	(*SAMLConnection)(nil),                  // 15: tesseral.backend.v1.SAMLConnection
	(*OIDCConnection)(nil),                  // 16: tesseral.backend.v1.OIDCConnection
	(*SCIMAPIKey)(nil),                      // 17: tesseral.backend.v1.SCIMAPIKey
	(*UserImpersonationToken)(nil),          // 18: tesseral.backend.v1.UserImpersonationToken
	(*UserInvite)(nil),                      // 19: tesseral.backend.v1.UserInvite
	(*RBACPolicy)(nil),                      // 20: tesseral.backend.v1.RBACPolicy
	(*Action)(nil),                          // 21: tesseral.backend.v1.Action
	(*Role)(nil),                            // 22: tesseral.backend.v1.Role
	(*UserRoleAssignment)(nil),              // 23: tesseral.backend.v1.UserRoleAssignment
	(*APIKey)(nil),                          // 24: tesseral.backend.v1.APIKey
	(*APIKeyRoleAssignment)(nil),            // 25: tesseral.backend.v1.APIKeyRoleAssignment
	(*AuditLogEvent)(nil),                   // 26: tesseral.backend.v1.AuditLogEvent
	(*ConsoleAuditLogEvent)(nil),            // 27: tesseral.backend.v1.ConsoleAuditLogEvent
	(*timestamppb.Timestamp)(nil),           // 28: google.protobuf.Timestamp
	(*structpb.Struct)(nil),                 // 29: google.protobuf.Struct
}
var file_tesseral_backend_v1_models_proto_depIdxs = []int32{
	28, // 0: tesseral.backend.v1.Project.create_time:type_name -> google.protobuf.Timestamp
	28, // 1: tesseral.backend.v1.Project.update_time:type_name -> google.protobuf.Timestamp
	4,  // 2: tesseral.backend.v1.VaultDomainSettings.vault_domain_records:type_name -> tesseral.backend.v1.VaultDomainSettingsDNSRecord
	4,  // 3: tesseral.backend.v1.VaultDomainSettings.email_send_from_records:type_name -> tesseral.backend.v1.VaultDomainSettingsDNSRecord
	28, // 4: tesseral.backend.v1.ProjectUISettings.create_time:type_name -> google.protobuf.Timestamp
	28, // 5: tesseral.backend.v1.ProjectUISettings.update_time:type_name -> google.protobuf.Timestamp
	28, // 6: tesseral.backend.v1.Organization.create_time:type_name -> google.protobuf.Timestamp
	28, // 7: tesseral.backend.v1.Organization.update_time:type_name -> google.protobuf.Timestamp
	28, // 8: tesseral.backend.v1.BackendAPIKey.create_time:type_name -> google.protobuf.Timestamp
	28, // 9: tesseral.backend.v1.BackendAPIKey.update_time:type_name -> google.protobuf.Timestamp
	28, // 10: tesseral.backend.v1.PublishableKey.create_time:type_name -> google.protobuf.Timestamp
	28, // 11: tesseral.backend.v1.PublishableKey.update_time:type_name -> google.protobuf.Timestamp
	28, // 12: tesseral.backend.v1.User.create_time:type_name -> google.protobuf.Timestamp
	28, // 13: tesseral.backend.v1.User.update_time:type_name -> google.protobuf.Timestamp
	28, // 14: tesseral.backend.v1.Session.create_time:type_name -> google.protobuf.Timestamp
	28, // 15: tesseral.backend.v1.Session.last_active_time:type_name -> google.protobuf.Timestamp
	28, // 16: tesseral.backend.v1.Session.expire_time:type_name -> google.protobuf.Timestamp
	0,  // 17: tesseral.backend.v1.Session.primary_auth_factor:type_name -> tesseral.backend.v1.PrimaryAuthFactor
	28, // 18: tesseral.backend.v1.Passkey.create_time:type_name -> google.protobuf.Timestamp
	28, // 19: tesseral.backend.v1.Passkey.update_time:type_name -> google.protobuf.Timestamp
	28, // 20: tesseral.backend.v1.SAMLConnection.create_time:type_name -> google.protobuf.Timestamp
	28, // 21: tesseral.backend.v1.SAMLConnection.update_time:type_name -> google.protobuf.Timestamp
	28, // 22: tesseral.backend.v1.OIDCConnection.create_time:type_name -> google.protobuf.Timestamp
	28, // 23: tesseral.backend.v1.OIDCConnection.update_time:type_name -> google.protobuf.Timestamp
	28, // 24: tesseral.backend.v1.SCIMAPIKey.create_time:type_name -> google.protobuf.Timestamp
	28, // 25: tesseral.backend.v1.SCIMAPIKey.update_time:type_name -> google.protobuf.Timestamp
	28, // 26: tesseral.backend.v1.UserImpersonationToken.create_time:type_name -> google.protobuf.Timestamp
	28, // 27: tesseral.backend.v1.UserImpersonationToken.expire_time:type_name -> google.protobuf.Timestamp
	28, // 28: tesseral.backend.v1.UserInvite.create_time:type_name -> google.protobuf.Timestamp
	28, // 29: tesseral.backend.v1.UserInvite.update_time:type_name -> google.protobuf.Timestamp
	21, // 30: tesseral.backend.v1.RBACPolicy.actions:type_name -> tesseral.backend.v1.Action
	28, // 31: tesseral.backend.v1.Role.create_time:type_name -> google.protobuf.Timestamp
	28, // 32: tesseral.backend.v1.Role.update_time:type_name -> google.protobuf.Timestamp
	28, // 33: tesseral.backend.v1.APIKey.create_time:type_name -> google.protobuf.Timestamp
	28, // 34: tesseral.backend.v1.APIKey.update_time:type_name -> google.protobuf.Timestamp
	28, // 35: tesseral.backend.v1.APIKey.expire_time:type_name -> google.protobuf.Timestamp
	28, // 36: tesseral.backend.v1.AuditLogEvent.event_time:type_name -> google.protobuf.Timestamp
	29, // 37: tesseral.backend.v1.AuditLogEvent.event_details:type_name -> google.protobuf.Struct
	28, // 38: tesseral.backend.v1.ConsoleAuditLogEvent.event_time:type_name -> google.protobuf.Timestamp
	29, // 39: tesseral.backend.v1.ConsoleAuditLogEvent.event_details:type_name -> google.protobuf.Struct
	40, // [40:40] is the sub-list for method output_type
	40, // [40:40] is the sub-list for method input_type
	40, // [40:40] is the sub-list for extension type_name
	40, // [40:40] is the sub-list for extension extendee
	0,  // [0:40] is the sub-list for field type_name
}

func init() { file_tesseral_backend_v1_models_proto_init() }
func file_tesseral_backend_v1_models_proto_init() {
	if File_tesseral_backend_v1_models_proto != nil {
		return
	}
	file_tesseral_backend_v1_models_proto_msgTypes[0].OneofWrappers = []any{}
	file_tesseral_backend_v1_models_proto_msgTypes[4].OneofWrappers = []any{}
	file_tesseral_backend_v1_models_proto_msgTypes[9].OneofWrappers = []any{}
	file_tesseral_backend_v1_models_proto_msgTypes[10].OneofWrappers = []any{}
	file_tesseral_backend_v1_models_proto_msgTypes[12].OneofWrappers = []any{}
	file_tesseral_backend_v1_models_proto_msgTypes[13].OneofWrappers = []any{}
	file_tesseral_backend_v1_models_proto_msgTypes[14].OneofWrappers = []any{}
	file_tesseral_backend_v1_models_proto_msgTypes[22].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_tesseral_backend_v1_models_proto_rawDesc), len(file_tesseral_backend_v1_models_proto_rawDesc)),
			NumEnums:      2,
			NumMessages:   26,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_tesseral_backend_v1_models_proto_goTypes,
		DependencyIndexes: file_tesseral_backend_v1_models_proto_depIdxs,
		EnumInfos:         file_tesseral_backend_v1_models_proto_enumTypes,
		MessageInfos:      file_tesseral_backend_v1_models_proto_msgTypes,
	}.Build()
	File_tesseral_backend_v1_models_proto = out.File
	file_tesseral_backend_v1_models_proto_goTypes = nil
	file_tesseral_backend_v1_models_proto_depIdxs = nil
}
