// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: tesseral/backend/v1/backend.proto

package backendv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	BackendService_GetProject_FullMethodName                            = "/tesseral.backend.v1.BackendService/GetProject"
	BackendService_ListOrganizations_FullMethodName                     = "/tesseral.backend.v1.BackendService/ListOrganizations"
	BackendService_GetOrganization_FullMethodName                       = "/tesseral.backend.v1.BackendService/GetOrganization"
	BackendService_CreateOrganization_FullMethodName                    = "/tesseral.backend.v1.BackendService/CreateOrganization"
	BackendService_UpdateOrganization_FullMethodName                    = "/tesseral.backend.v1.BackendService/UpdateOrganization"
	BackendService_DeleteOrganization_FullMethodName                    = "/tesseral.backend.v1.BackendService/DeleteOrganization"
	BackendService_GetOrganizationDomains_FullMethodName                = "/tesseral.backend.v1.BackendService/GetOrganizationDomains"
	BackendService_UpdateOrganizationDomains_FullMethodName             = "/tesseral.backend.v1.BackendService/UpdateOrganizationDomains"
	BackendService_GetOrganizationGoogleHostedDomains_FullMethodName    = "/tesseral.backend.v1.BackendService/GetOrganizationGoogleHostedDomains"
	BackendService_UpdateOrganizationGoogleHostedDomains_FullMethodName = "/tesseral.backend.v1.BackendService/UpdateOrganizationGoogleHostedDomains"
	BackendService_GetOrganizationMicrosoftTenantIDs_FullMethodName     = "/tesseral.backend.v1.BackendService/GetOrganizationMicrosoftTenantIDs"
	BackendService_UpdateOrganizationMicrosoftTenantIDs_FullMethodName  = "/tesseral.backend.v1.BackendService/UpdateOrganizationMicrosoftTenantIDs"
	BackendService_ListSAMLConnections_FullMethodName                   = "/tesseral.backend.v1.BackendService/ListSAMLConnections"
	BackendService_GetSAMLConnection_FullMethodName                     = "/tesseral.backend.v1.BackendService/GetSAMLConnection"
	BackendService_CreateSAMLConnection_FullMethodName                  = "/tesseral.backend.v1.BackendService/CreateSAMLConnection"
	BackendService_UpdateSAMLConnection_FullMethodName                  = "/tesseral.backend.v1.BackendService/UpdateSAMLConnection"
	BackendService_DeleteSAMLConnection_FullMethodName                  = "/tesseral.backend.v1.BackendService/DeleteSAMLConnection"
	BackendService_ListSCIMAPIKeys_FullMethodName                       = "/tesseral.backend.v1.BackendService/ListSCIMAPIKeys"
	BackendService_GetSCIMAPIKey_FullMethodName                         = "/tesseral.backend.v1.BackendService/GetSCIMAPIKey"
	BackendService_CreateSCIMAPIKey_FullMethodName                      = "/tesseral.backend.v1.BackendService/CreateSCIMAPIKey"
	BackendService_UpdateSCIMAPIKey_FullMethodName                      = "/tesseral.backend.v1.BackendService/UpdateSCIMAPIKey"
	BackendService_DeleteSCIMAPIKey_FullMethodName                      = "/tesseral.backend.v1.BackendService/DeleteSCIMAPIKey"
	BackendService_RevokeSCIMAPIKey_FullMethodName                      = "/tesseral.backend.v1.BackendService/RevokeSCIMAPIKey"
	BackendService_ListUsers_FullMethodName                             = "/tesseral.backend.v1.BackendService/ListUsers"
	BackendService_GetUser_FullMethodName                               = "/tesseral.backend.v1.BackendService/GetUser"
	BackendService_CreateUser_FullMethodName                            = "/tesseral.backend.v1.BackendService/CreateUser"
	BackendService_UpdateUser_FullMethodName                            = "/tesseral.backend.v1.BackendService/UpdateUser"
	BackendService_DeleteUser_FullMethodName                            = "/tesseral.backend.v1.BackendService/DeleteUser"
	BackendService_ListPasskeys_FullMethodName                          = "/tesseral.backend.v1.BackendService/ListPasskeys"
	BackendService_GetPasskey_FullMethodName                            = "/tesseral.backend.v1.BackendService/GetPasskey"
	BackendService_UpdatePasskey_FullMethodName                         = "/tesseral.backend.v1.BackendService/UpdatePasskey"
	BackendService_DeletePasskey_FullMethodName                         = "/tesseral.backend.v1.BackendService/DeletePasskey"
	BackendService_ListSessions_FullMethodName                          = "/tesseral.backend.v1.BackendService/ListSessions"
	BackendService_GetSession_FullMethodName                            = "/tesseral.backend.v1.BackendService/GetSession"
	BackendService_ListUserInvites_FullMethodName                       = "/tesseral.backend.v1.BackendService/ListUserInvites"
	BackendService_GetUserInvite_FullMethodName                         = "/tesseral.backend.v1.BackendService/GetUserInvite"
	BackendService_CreateUserInvite_FullMethodName                      = "/tesseral.backend.v1.BackendService/CreateUserInvite"
	BackendService_DeleteUserInvite_FullMethodName                      = "/tesseral.backend.v1.BackendService/DeleteUserInvite"
	BackendService_GetRBACPolicy_FullMethodName                         = "/tesseral.backend.v1.BackendService/GetRBACPolicy"
	BackendService_UpdateRBACPolicy_FullMethodName                      = "/tesseral.backend.v1.BackendService/UpdateRBACPolicy"
	BackendService_ListRoles_FullMethodName                             = "/tesseral.backend.v1.BackendService/ListRoles"
	BackendService_GetRole_FullMethodName                               = "/tesseral.backend.v1.BackendService/GetRole"
	BackendService_CreateRole_FullMethodName                            = "/tesseral.backend.v1.BackendService/CreateRole"
	BackendService_UpdateRole_FullMethodName                            = "/tesseral.backend.v1.BackendService/UpdateRole"
	BackendService_DeleteRole_FullMethodName                            = "/tesseral.backend.v1.BackendService/DeleteRole"
	BackendService_ListUserRoleAssignments_FullMethodName               = "/tesseral.backend.v1.BackendService/ListUserRoleAssignments"
	BackendService_GetUserRoleAssignment_FullMethodName                 = "/tesseral.backend.v1.BackendService/GetUserRoleAssignment"
	BackendService_CreateUserRoleAssignment_FullMethodName              = "/tesseral.backend.v1.BackendService/CreateUserRoleAssignment"
	BackendService_DeleteUserRoleAssignment_FullMethodName              = "/tesseral.backend.v1.BackendService/DeleteUserRoleAssignment"
	BackendService_CreateAPIKey_FullMethodName                          = "/tesseral.backend.v1.BackendService/CreateAPIKey"
	BackendService_DeleteAPIKey_FullMethodName                          = "/tesseral.backend.v1.BackendService/DeleteAPIKey"
	BackendService_GetAPIKey_FullMethodName                             = "/tesseral.backend.v1.BackendService/GetAPIKey"
	BackendService_ListAPIKeys_FullMethodName                           = "/tesseral.backend.v1.BackendService/ListAPIKeys"
	BackendService_RevokeAPIKey_FullMethodName                          = "/tesseral.backend.v1.BackendService/RevokeAPIKey"
	BackendService_UpdateAPIKey_FullMethodName                          = "/tesseral.backend.v1.BackendService/UpdateAPIKey"
	BackendService_CreateAPIKeyRoleAssignment_FullMethodName            = "/tesseral.backend.v1.BackendService/CreateAPIKeyRoleAssignment"
	BackendService_DeleteAPIKeyRoleAssignment_FullMethodName            = "/tesseral.backend.v1.BackendService/DeleteAPIKeyRoleAssignment"
	BackendService_ListAPIKeyRoleAssignments_FullMethodName             = "/tesseral.backend.v1.BackendService/ListAPIKeyRoleAssignments"
	BackendService_AuthenticateAPIKey_FullMethodName                    = "/tesseral.backend.v1.BackendService/AuthenticateAPIKey"
	BackendService_CreateAuditLogEvent_FullMethodName                   = "/tesseral.backend.v1.BackendService/CreateAuditLogEvent"
	BackendService_DisableOrganizationLogins_FullMethodName             = "/tesseral.backend.v1.BackendService/DisableOrganizationLogins"
	BackendService_DisableProjectLogins_FullMethodName                  = "/tesseral.backend.v1.BackendService/DisableProjectLogins"
	BackendService_EnableOrganizationLogins_FullMethodName              = "/tesseral.backend.v1.BackendService/EnableOrganizationLogins"
	BackendService_EnableProjectLogins_FullMethodName                   = "/tesseral.backend.v1.BackendService/EnableProjectLogins"
	BackendService_UpdateProject_FullMethodName                         = "/tesseral.backend.v1.BackendService/UpdateProject"
	BackendService_GetVaultDomainSettings_FullMethodName                = "/tesseral.backend.v1.BackendService/GetVaultDomainSettings"
	BackendService_UpdateVaultDomainSettings_FullMethodName             = "/tesseral.backend.v1.BackendService/UpdateVaultDomainSettings"
	BackendService_EnableCustomVaultDomain_FullMethodName               = "/tesseral.backend.v1.BackendService/EnableCustomVaultDomain"
	BackendService_EnableEmailSendFromDomain_FullMethodName             = "/tesseral.backend.v1.BackendService/EnableEmailSendFromDomain"
	BackendService_GetProjectUISettings_FullMethodName                  = "/tesseral.backend.v1.BackendService/GetProjectUISettings"
	BackendService_UpdateProjectUISettings_FullMethodName               = "/tesseral.backend.v1.BackendService/UpdateProjectUISettings"
	BackendService_ListBackendAPIKeys_FullMethodName                    = "/tesseral.backend.v1.BackendService/ListBackendAPIKeys"
	BackendService_GetBackendAPIKey_FullMethodName                      = "/tesseral.backend.v1.BackendService/GetBackendAPIKey"
	BackendService_CreateBackendAPIKey_FullMethodName                   = "/tesseral.backend.v1.BackendService/CreateBackendAPIKey"
	BackendService_UpdateBackendAPIKey_FullMethodName                   = "/tesseral.backend.v1.BackendService/UpdateBackendAPIKey"
	BackendService_DeleteBackendAPIKey_FullMethodName                   = "/tesseral.backend.v1.BackendService/DeleteBackendAPIKey"
	BackendService_RevokeBackendAPIKey_FullMethodName                   = "/tesseral.backend.v1.BackendService/RevokeBackendAPIKey"
	BackendService_ListPublishableKeys_FullMethodName                   = "/tesseral.backend.v1.BackendService/ListPublishableKeys"
	BackendService_GetPublishableKey_FullMethodName                     = "/tesseral.backend.v1.BackendService/GetPublishableKey"
	BackendService_CreatePublishableKey_FullMethodName                  = "/tesseral.backend.v1.BackendService/CreatePublishableKey"
	BackendService_UpdatePublishableKey_FullMethodName                  = "/tesseral.backend.v1.BackendService/UpdatePublishableKey"
	BackendService_DeletePublishableKey_FullMethodName                  = "/tesseral.backend.v1.BackendService/DeletePublishableKey"
	BackendService_CreateUserImpersonationToken_FullMethodName          = "/tesseral.backend.v1.BackendService/CreateUserImpersonationToken"
	BackendService_GetProjectEntitlements_FullMethodName                = "/tesseral.backend.v1.BackendService/GetProjectEntitlements"
	BackendService_CreateStripeCheckoutLink_FullMethodName              = "/tesseral.backend.v1.BackendService/CreateStripeCheckoutLink"
	BackendService_GetProjectWebhookManagementURL_FullMethodName        = "/tesseral.backend.v1.BackendService/GetProjectWebhookManagementURL"
	BackendService_ConsoleListAuditLogEvents_FullMethodName             = "/tesseral.backend.v1.BackendService/ConsoleListAuditLogEvents"
	BackendService_ConsoleListAuditLogEventNames_FullMethodName         = "/tesseral.backend.v1.BackendService/ConsoleListAuditLogEventNames"
	BackendService_ConsoleSearch_FullMethodName                         = "/tesseral.backend.v1.BackendService/ConsoleSearch"
)

// BackendServiceClient is the client API for BackendService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BackendServiceClient interface {
	// Get the current project.
	GetProject(ctx context.Context, in *GetProjectRequest, opts ...grpc.CallOption) (*GetProjectResponse, error)
	// List Organizations.
	ListOrganizations(ctx context.Context, in *ListOrganizationsRequest, opts ...grpc.CallOption) (*ListOrganizationsResponse, error)
	// Get an Organization.
	GetOrganization(ctx context.Context, in *GetOrganizationRequest, opts ...grpc.CallOption) (*GetOrganizationResponse, error)
	// Create an Organization.
	CreateOrganization(ctx context.Context, in *CreateOrganizationRequest, opts ...grpc.CallOption) (*CreateOrganizationResponse, error)
	// Update an Organization.
	UpdateOrganization(ctx context.Context, in *UpdateOrganizationRequest, opts ...grpc.CallOption) (*UpdateOrganizationResponse, error)
	// Delete an Organization.
	DeleteOrganization(ctx context.Context, in *DeleteOrganizationRequest, opts ...grpc.CallOption) (*DeleteOrganizationResponse, error)
	// Get Organization Domains.
	GetOrganizationDomains(ctx context.Context, in *GetOrganizationDomainsRequest, opts ...grpc.CallOption) (*GetOrganizationDomainsResponse, error)
	// Update Organization Domains.
	UpdateOrganizationDomains(ctx context.Context, in *UpdateOrganizationDomainsRequest, opts ...grpc.CallOption) (*UpdateOrganizationDomainsResponse, error)
	// Get Organization Google Hosted Domains.
	GetOrganizationGoogleHostedDomains(ctx context.Context, in *GetOrganizationGoogleHostedDomainsRequest, opts ...grpc.CallOption) (*GetOrganizationGoogleHostedDomainsResponse, error)
	// Update Organization Google Hosted Domains.
	UpdateOrganizationGoogleHostedDomains(ctx context.Context, in *UpdateOrganizationGoogleHostedDomainsRequest, opts ...grpc.CallOption) (*UpdateOrganizationGoogleHostedDomainsResponse, error)
	// Get Organization Microsoft Tenant IDs.
	GetOrganizationMicrosoftTenantIDs(ctx context.Context, in *GetOrganizationMicrosoftTenantIDsRequest, opts ...grpc.CallOption) (*GetOrganizationMicrosoftTenantIDsResponse, error)
	// Update Organization Microsoft Tenant IDs.
	UpdateOrganizationMicrosoftTenantIDs(ctx context.Context, in *UpdateOrganizationMicrosoftTenantIDsRequest, opts ...grpc.CallOption) (*UpdateOrganizationMicrosoftTenantIDsResponse, error)
	// List SAML Connections.
	ListSAMLConnections(ctx context.Context, in *ListSAMLConnectionsRequest, opts ...grpc.CallOption) (*ListSAMLConnectionsResponse, error)
	// Get a SAML Connection.
	GetSAMLConnection(ctx context.Context, in *GetSAMLConnectionRequest, opts ...grpc.CallOption) (*GetSAMLConnectionResponse, error)
	// Create a SAML Connection.
	CreateSAMLConnection(ctx context.Context, in *CreateSAMLConnectionRequest, opts ...grpc.CallOption) (*CreateSAMLConnectionResponse, error)
	// Update a SAML Connection.
	UpdateSAMLConnection(ctx context.Context, in *UpdateSAMLConnectionRequest, opts ...grpc.CallOption) (*UpdateSAMLConnectionResponse, error)
	// Delete a SAML Connection.
	DeleteSAMLConnection(ctx context.Context, in *DeleteSAMLConnectionRequest, opts ...grpc.CallOption) (*DeleteSAMLConnectionResponse, error)
	// List SCIM API Keys.
	ListSCIMAPIKeys(ctx context.Context, in *ListSCIMAPIKeysRequest, opts ...grpc.CallOption) (*ListSCIMAPIKeysResponse, error)
	// Get a SCIM API Key.
	GetSCIMAPIKey(ctx context.Context, in *GetSCIMAPIKeyRequest, opts ...grpc.CallOption) (*GetSCIMAPIKeyResponse, error)
	// Create a SCIM API Key.
	CreateSCIMAPIKey(ctx context.Context, in *CreateSCIMAPIKeyRequest, opts ...grpc.CallOption) (*CreateSCIMAPIKeyResponse, error)
	// Update a SCIM API Key.
	UpdateSCIMAPIKey(ctx context.Context, in *UpdateSCIMAPIKeyRequest, opts ...grpc.CallOption) (*UpdateSCIMAPIKeyResponse, error)
	// Delete a SCIM API Key.
	DeleteSCIMAPIKey(ctx context.Context, in *DeleteSCIMAPIKeyRequest, opts ...grpc.CallOption) (*DeleteSCIMAPIKeyResponse, error)
	// Revoke a SCIM API Key.
	RevokeSCIMAPIKey(ctx context.Context, in *RevokeSCIMAPIKeyRequest, opts ...grpc.CallOption) (*RevokeSCIMAPIKeyResponse, error)
	// List Users.
	ListUsers(ctx context.Context, in *ListUsersRequest, opts ...grpc.CallOption) (*ListUsersResponse, error)
	// Get a User.
	GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*GetUserResponse, error)
	// Create a User.
	CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*CreateUserResponse, error)
	// Update a User.
	UpdateUser(ctx context.Context, in *UpdateUserRequest, opts ...grpc.CallOption) (*UpdateUserResponse, error)
	// Delete a User.
	DeleteUser(ctx context.Context, in *DeleteUserRequest, opts ...grpc.CallOption) (*DeleteUserResponse, error)
	// List Passkeys.
	ListPasskeys(ctx context.Context, in *ListPasskeysRequest, opts ...grpc.CallOption) (*ListPasskeysResponse, error)
	// Get a Passkey.
	GetPasskey(ctx context.Context, in *GetPasskeyRequest, opts ...grpc.CallOption) (*GetPasskeyResponse, error)
	// Update a Passkey.
	UpdatePasskey(ctx context.Context, in *UpdatePasskeyRequest, opts ...grpc.CallOption) (*UpdatePasskeyResponse, error)
	// Delete a Passkey.
	DeletePasskey(ctx context.Context, in *DeletePasskeyRequest, opts ...grpc.CallOption) (*DeletePasskeyResponse, error)
	// List Sessions.
	ListSessions(ctx context.Context, in *ListSessionsRequest, opts ...grpc.CallOption) (*ListSessionsResponse, error)
	// Get a Session.
	GetSession(ctx context.Context, in *GetSessionRequest, opts ...grpc.CallOption) (*GetSessionResponse, error)
	// List User Invites.
	ListUserInvites(ctx context.Context, in *ListUserInvitesRequest, opts ...grpc.CallOption) (*ListUserInvitesResponse, error)
	// Get a User Invite.
	GetUserInvite(ctx context.Context, in *GetUserInviteRequest, opts ...grpc.CallOption) (*GetUserInviteResponse, error)
	// Create a User Invite.
	CreateUserInvite(ctx context.Context, in *CreateUserInviteRequest, opts ...grpc.CallOption) (*CreateUserInviteResponse, error)
	// Delete a User Invite.
	DeleteUserInvite(ctx context.Context, in *DeleteUserInviteRequest, opts ...grpc.CallOption) (*DeleteUserInviteResponse, error)
	GetRBACPolicy(ctx context.Context, in *GetRBACPolicyRequest, opts ...grpc.CallOption) (*GetRBACPolicyResponse, error)
	UpdateRBACPolicy(ctx context.Context, in *UpdateRBACPolicyRequest, opts ...grpc.CallOption) (*UpdateRBACPolicyResponse, error)
	// List Roles.
	ListRoles(ctx context.Context, in *ListRolesRequest, opts ...grpc.CallOption) (*ListRolesResponse, error)
	// Get a Role.
	GetRole(ctx context.Context, in *GetRoleRequest, opts ...grpc.CallOption) (*GetRoleResponse, error)
	// Create a Role.
	CreateRole(ctx context.Context, in *CreateRoleRequest, opts ...grpc.CallOption) (*CreateRoleResponse, error)
	// Update a Role.
	UpdateRole(ctx context.Context, in *UpdateRoleRequest, opts ...grpc.CallOption) (*UpdateRoleResponse, error)
	// Delete a Role.
	DeleteRole(ctx context.Context, in *DeleteRoleRequest, opts ...grpc.CallOption) (*DeleteRoleResponse, error)
	// List User Role Assignments.
	ListUserRoleAssignments(ctx context.Context, in *ListUserRoleAssignmentsRequest, opts ...grpc.CallOption) (*ListUserRoleAssignmentsResponse, error)
	// Get a User Role Assignment.
	GetUserRoleAssignment(ctx context.Context, in *GetUserRoleAssignmentRequest, opts ...grpc.CallOption) (*GetUserRoleAssignmentResponse, error)
	// Create a User Role Assignment.
	CreateUserRoleAssignment(ctx context.Context, in *CreateUserRoleAssignmentRequest, opts ...grpc.CallOption) (*CreateUserRoleAssignmentResponse, error)
	// Delete a User Role Assignment.
	DeleteUserRoleAssignment(ctx context.Context, in *DeleteUserRoleAssignmentRequest, opts ...grpc.CallOption) (*DeleteUserRoleAssignmentResponse, error)
	// Create an API Key for an Organization.
	CreateAPIKey(ctx context.Context, in *CreateAPIKeyRequest, opts ...grpc.CallOption) (*CreateAPIKeyResponse, error)
	// Delete an API Key.
	DeleteAPIKey(ctx context.Context, in *DeleteAPIKeyRequest, opts ...grpc.CallOption) (*DeleteAPIKeyResponse, error)
	// Get an API Key.
	GetAPIKey(ctx context.Context, in *GetAPIKeyRequest, opts ...grpc.CallOption) (*GetAPIKeyResponse, error)
	// List API Keys.
	ListAPIKeys(ctx context.Context, in *ListAPIKeysRequest, opts ...grpc.CallOption) (*ListAPIKeysResponse, error)
	// Revoke an API Key.
	RevokeAPIKey(ctx context.Context, in *RevokeAPIKeyRequest, opts ...grpc.CallOption) (*RevokeAPIKeyResponse, error)
	// Update an API Key.
	UpdateAPIKey(ctx context.Context, in *UpdateAPIKeyRequest, opts ...grpc.CallOption) (*UpdateAPIKeyResponse, error)
	CreateAPIKeyRoleAssignment(ctx context.Context, in *CreateAPIKeyRoleAssignmentRequest, opts ...grpc.CallOption) (*CreateAPIKeyRoleAssignmentResponse, error)
	DeleteAPIKeyRoleAssignment(ctx context.Context, in *DeleteAPIKeyRoleAssignmentRequest, opts ...grpc.CallOption) (*DeleteAPIKeyRoleAssignmentResponse, error)
	ListAPIKeyRoleAssignments(ctx context.Context, in *ListAPIKeyRoleAssignmentsRequest, opts ...grpc.CallOption) (*ListAPIKeyRoleAssignmentsResponse, error)
	AuthenticateAPIKey(ctx context.Context, in *AuthenticateAPIKeyRequest, opts ...grpc.CallOption) (*AuthenticateAPIKeyResponse, error)
	CreateAuditLogEvent(ctx context.Context, in *CreateAuditLogEventRequest, opts ...grpc.CallOption) (*CreateAuditLogEventResponse, error)
	DisableOrganizationLogins(ctx context.Context, in *DisableOrganizationLoginsRequest, opts ...grpc.CallOption) (*DisableOrganizationLoginsResponse, error)
	DisableProjectLogins(ctx context.Context, in *DisableProjectLoginsRequest, opts ...grpc.CallOption) (*DisableProjectLoginsResponse, error)
	EnableOrganizationLogins(ctx context.Context, in *EnableOrganizationLoginsRequest, opts ...grpc.CallOption) (*EnableOrganizationLoginsResponse, error)
	EnableProjectLogins(ctx context.Context, in *EnableProjectLoginsRequest, opts ...grpc.CallOption) (*EnableProjectLoginsResponse, error)
	UpdateProject(ctx context.Context, in *UpdateProjectRequest, opts ...grpc.CallOption) (*UpdateProjectResponse, error)
	GetVaultDomainSettings(ctx context.Context, in *GetVaultDomainSettingsRequest, opts ...grpc.CallOption) (*GetVaultDomainSettingsResponse, error)
	UpdateVaultDomainSettings(ctx context.Context, in *UpdateVaultDomainSettingsRequest, opts ...grpc.CallOption) (*UpdateVaultDomainSettingsResponse, error)
	EnableCustomVaultDomain(ctx context.Context, in *EnableCustomVaultDomainRequest, opts ...grpc.CallOption) (*EnableCustomVaultDomainResponse, error)
	EnableEmailSendFromDomain(ctx context.Context, in *EnableEmailSendFromDomainRequest, opts ...grpc.CallOption) (*EnableEmailSendFromDomainResponse, error)
	GetProjectUISettings(ctx context.Context, in *GetProjectUISettingsRequest, opts ...grpc.CallOption) (*GetProjectUISettingsResponse, error)
	UpdateProjectUISettings(ctx context.Context, in *UpdateProjectUISettingsRequest, opts ...grpc.CallOption) (*UpdateProjectUISettingsResponse, error)
	ListBackendAPIKeys(ctx context.Context, in *ListBackendAPIKeysRequest, opts ...grpc.CallOption) (*ListBackendAPIKeysResponse, error)
	GetBackendAPIKey(ctx context.Context, in *GetBackendAPIKeyRequest, opts ...grpc.CallOption) (*GetBackendAPIKeyResponse, error)
	CreateBackendAPIKey(ctx context.Context, in *CreateBackendAPIKeyRequest, opts ...grpc.CallOption) (*CreateBackendAPIKeyResponse, error)
	UpdateBackendAPIKey(ctx context.Context, in *UpdateBackendAPIKeyRequest, opts ...grpc.CallOption) (*UpdateBackendAPIKeyResponse, error)
	DeleteBackendAPIKey(ctx context.Context, in *DeleteBackendAPIKeyRequest, opts ...grpc.CallOption) (*DeleteBackendAPIKeyResponse, error)
	RevokeBackendAPIKey(ctx context.Context, in *RevokeBackendAPIKeyRequest, opts ...grpc.CallOption) (*RevokeBackendAPIKeyResponse, error)
	ListPublishableKeys(ctx context.Context, in *ListPublishableKeysRequest, opts ...grpc.CallOption) (*ListPublishableKeysResponse, error)
	GetPublishableKey(ctx context.Context, in *GetPublishableKeyRequest, opts ...grpc.CallOption) (*GetPublishableKeyResponse, error)
	CreatePublishableKey(ctx context.Context, in *CreatePublishableKeyRequest, opts ...grpc.CallOption) (*CreatePublishableKeyResponse, error)
	UpdatePublishableKey(ctx context.Context, in *UpdatePublishableKeyRequest, opts ...grpc.CallOption) (*UpdatePublishableKeyResponse, error)
	DeletePublishableKey(ctx context.Context, in *DeletePublishableKeyRequest, opts ...grpc.CallOption) (*DeletePublishableKeyResponse, error)
	CreateUserImpersonationToken(ctx context.Context, in *CreateUserImpersonationTokenRequest, opts ...grpc.CallOption) (*CreateUserImpersonationTokenResponse, error)
	GetProjectEntitlements(ctx context.Context, in *GetProjectEntitlementsRequest, opts ...grpc.CallOption) (*GetProjectEntitlementsResponse, error)
	CreateStripeCheckoutLink(ctx context.Context, in *CreateStripeCheckoutLinkRequest, opts ...grpc.CallOption) (*CreateStripeCheckoutLinkResponse, error)
	GetProjectWebhookManagementURL(ctx context.Context, in *GetProjectWebhookManagementURLRequest, opts ...grpc.CallOption) (*GetProjectWebhookManagementURLResponse, error)
	ConsoleListAuditLogEvents(ctx context.Context, in *ConsoleListAuditLogEventsRequest, opts ...grpc.CallOption) (*ConsoleListAuditLogEventsResponse, error)
	ConsoleListAuditLogEventNames(ctx context.Context, in *ConsoleListAuditLogEventNamesRequest, opts ...grpc.CallOption) (*ConsoleListAuditLogEventNamesResponse, error)
	ConsoleSearch(ctx context.Context, in *ConsoleSearchRequest, opts ...grpc.CallOption) (*ConsoleSearchResponse, error)
}

type backendServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBackendServiceClient(cc grpc.ClientConnInterface) BackendServiceClient {
	return &backendServiceClient{cc}
}

func (c *backendServiceClient) GetProject(ctx context.Context, in *GetProjectRequest, opts ...grpc.CallOption) (*GetProjectResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetProjectResponse)
	err := c.cc.Invoke(ctx, BackendService_GetProject_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backendServiceClient) ListOrganizations(ctx context.Context, in *ListOrganizationsRequest, opts ...grpc.CallOption) (*ListOrganizationsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListOrganizationsResponse)
	err := c.cc.Invoke(ctx, BackendService_ListOrganizations_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backendServiceClient) GetOrganization(ctx context.Context, in *GetOrganizationRequest, opts ...grpc.CallOption) (*GetOrganizationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetOrganizationResponse)
	err := c.cc.Invoke(ctx, BackendService_GetOrganization_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backendServiceClient) CreateOrganization(ctx context.Context, in *CreateOrganizationRequest, opts ...grpc.CallOption) (*CreateOrganizationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateOrganizationResponse)
	err := c.cc.Invoke(ctx, BackendService_CreateOrganization_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backendServiceClient) UpdateOrganization(ctx context.Context, in *UpdateOrganizationRequest, opts ...grpc.CallOption) (*UpdateOrganizationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateOrganizationResponse)
	err := c.cc.Invoke(ctx, BackendService_UpdateOrganization_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backendServiceClient) DeleteOrganization(ctx context.Context, in *DeleteOrganizationRequest, opts ...grpc.CallOption) (*DeleteOrganizationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteOrganizationResponse)
	err := c.cc.Invoke(ctx, BackendService_DeleteOrganization_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backendServiceClient) GetOrganizationDomains(ctx context.Context, in *GetOrganizationDomainsRequest, opts ...grpc.CallOption) (*GetOrganizationDomainsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetOrganizationDomainsResponse)
	err := c.cc.Invoke(ctx, BackendService_GetOrganizationDomains_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backendServiceClient) UpdateOrganizationDomains(ctx context.Context, in *UpdateOrganizationDomainsRequest, opts ...grpc.CallOption) (*UpdateOrganizationDomainsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateOrganizationDomainsResponse)
	err := c.cc.Invoke(ctx, BackendService_UpdateOrganizationDomains_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backendServiceClient) GetOrganizationGoogleHostedDomains(ctx context.Context, in *GetOrganizationGoogleHostedDomainsRequest, opts ...grpc.CallOption) (*GetOrganizationGoogleHostedDomainsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetOrganizationGoogleHostedDomainsResponse)
	err := c.cc.Invoke(ctx, BackendService_GetOrganizationGoogleHostedDomains_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backendServiceClient) UpdateOrganizationGoogleHostedDomains(ctx context.Context, in *UpdateOrganizationGoogleHostedDomainsRequest, opts ...grpc.CallOption) (*UpdateOrganizationGoogleHostedDomainsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateOrganizationGoogleHostedDomainsResponse)
	err := c.cc.Invoke(ctx, BackendService_UpdateOrganizationGoogleHostedDomains_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backendServiceClient) GetOrganizationMicrosoftTenantIDs(ctx context.Context, in *GetOrganizationMicrosoftTenantIDsRequest, opts ...grpc.CallOption) (*GetOrganizationMicrosoftTenantIDsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetOrganizationMicrosoftTenantIDsResponse)
	err := c.cc.Invoke(ctx, BackendService_GetOrganizationMicrosoftTenantIDs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backendServiceClient) UpdateOrganizationMicrosoftTenantIDs(ctx context.Context, in *UpdateOrganizationMicrosoftTenantIDsRequest, opts ...grpc.CallOption) (*UpdateOrganizationMicrosoftTenantIDsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateOrganizationMicrosoftTenantIDsResponse)
	err := c.cc.Invoke(ctx, BackendService_UpdateOrganizationMicrosoftTenantIDs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backendServiceClient) ListSAMLConnections(ctx context.Context, in *ListSAMLConnectionsRequest, opts ...grpc.CallOption) (*ListSAMLConnectionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListSAMLConnectionsResponse)
	err := c.cc.Invoke(ctx, BackendService_ListSAMLConnections_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backendServiceClient) GetSAMLConnection(ctx context.Context, in *GetSAMLConnectionRequest, opts ...grpc.CallOption) (*GetSAMLConnectionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSAMLConnectionResponse)
	err := c.cc.Invoke(ctx, BackendService_GetSAMLConnection_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backendServiceClient) CreateSAMLConnection(ctx context.Context, in *CreateSAMLConnectionRequest, opts ...grpc.CallOption) (*CreateSAMLConnectionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateSAMLConnectionResponse)
	err := c.cc.Invoke(ctx, BackendService_CreateSAMLConnection_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backendServiceClient) UpdateSAMLConnection(ctx context.Context, in *UpdateSAMLConnectionRequest, opts ...grpc.CallOption) (*UpdateSAMLConnectionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateSAMLConnectionResponse)
	err := c.cc.Invoke(ctx, BackendService_UpdateSAMLConnection_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backendServiceClient) DeleteSAMLConnection(ctx context.Context, in *DeleteSAMLConnectionRequest, opts ...grpc.CallOption) (*DeleteSAMLConnectionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteSAMLConnectionResponse)
	err := c.cc.Invoke(ctx, BackendService_DeleteSAMLConnection_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backendServiceClient) ListSCIMAPIKeys(ctx context.Context, in *ListSCIMAPIKeysRequest, opts ...grpc.CallOption) (*ListSCIMAPIKeysResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListSCIMAPIKeysResponse)
	err := c.cc.Invoke(ctx, BackendService_ListSCIMAPIKeys_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backendServiceClient) GetSCIMAPIKey(ctx context.Context, in *GetSCIMAPIKeyRequest, opts ...grpc.CallOption) (*GetSCIMAPIKeyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSCIMAPIKeyResponse)
	err := c.cc.Invoke(ctx, BackendService_GetSCIMAPIKey_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backendServiceClient) CreateSCIMAPIKey(ctx context.Context, in *CreateSCIMAPIKeyRequest, opts ...grpc.CallOption) (*CreateSCIMAPIKeyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateSCIMAPIKeyResponse)
	err := c.cc.Invoke(ctx, BackendService_CreateSCIMAPIKey_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backendServiceClient) UpdateSCIMAPIKey(ctx context.Context, in *UpdateSCIMAPIKeyRequest, opts ...grpc.CallOption) (*UpdateSCIMAPIKeyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateSCIMAPIKeyResponse)
	err := c.cc.Invoke(ctx, BackendService_UpdateSCIMAPIKey_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backendServiceClient) DeleteSCIMAPIKey(ctx context.Context, in *DeleteSCIMAPIKeyRequest, opts ...grpc.CallOption) (*DeleteSCIMAPIKeyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteSCIMAPIKeyResponse)
	err := c.cc.Invoke(ctx, BackendService_DeleteSCIMAPIKey_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backendServiceClient) RevokeSCIMAPIKey(ctx context.Context, in *RevokeSCIMAPIKeyRequest, opts ...grpc.CallOption) (*RevokeSCIMAPIKeyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RevokeSCIMAPIKeyResponse)
	err := c.cc.Invoke(ctx, BackendService_RevokeSCIMAPIKey_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backendServiceClient) ListUsers(ctx context.Context, in *ListUsersRequest, opts ...grpc.CallOption) (*ListUsersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListUsersResponse)
	err := c.cc.Invoke(ctx, BackendService_ListUsers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backendServiceClient) GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*GetUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserResponse)
	err := c.cc.Invoke(ctx, BackendService_GetUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backendServiceClient) CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*CreateUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateUserResponse)
	err := c.cc.Invoke(ctx, BackendService_CreateUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backendServiceClient) UpdateUser(ctx context.Context, in *UpdateUserRequest, opts ...grpc.CallOption) (*UpdateUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateUserResponse)
	err := c.cc.Invoke(ctx, BackendService_UpdateUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backendServiceClient) DeleteUser(ctx context.Context, in *DeleteUserRequest, opts ...grpc.CallOption) (*DeleteUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteUserResponse)
	err := c.cc.Invoke(ctx, BackendService_DeleteUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backendServiceClient) ListPasskeys(ctx context.Context, in *ListPasskeysRequest, opts ...grpc.CallOption) (*ListPasskeysResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListPasskeysResponse)
	err := c.cc.Invoke(ctx, BackendService_ListPasskeys_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backendServiceClient) GetPasskey(ctx context.Context, in *GetPasskeyRequest, opts ...grpc.CallOption) (*GetPasskeyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPasskeyResponse)
	err := c.cc.Invoke(ctx, BackendService_GetPasskey_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backendServiceClient) UpdatePasskey(ctx context.Context, in *UpdatePasskeyRequest, opts ...grpc.CallOption) (*UpdatePasskeyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdatePasskeyResponse)
	err := c.cc.Invoke(ctx, BackendService_UpdatePasskey_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backendServiceClient) DeletePasskey(ctx context.Context, in *DeletePasskeyRequest, opts ...grpc.CallOption) (*DeletePasskeyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeletePasskeyResponse)
	err := c.cc.Invoke(ctx, BackendService_DeletePasskey_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backendServiceClient) ListSessions(ctx context.Context, in *ListSessionsRequest, opts ...grpc.CallOption) (*ListSessionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListSessionsResponse)
	err := c.cc.Invoke(ctx, BackendService_ListSessions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backendServiceClient) GetSession(ctx context.Context, in *GetSessionRequest, opts ...grpc.CallOption) (*GetSessionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSessionResponse)
	err := c.cc.Invoke(ctx, BackendService_GetSession_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backendServiceClient) ListUserInvites(ctx context.Context, in *ListUserInvitesRequest, opts ...grpc.CallOption) (*ListUserInvitesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListUserInvitesResponse)
	err := c.cc.Invoke(ctx, BackendService_ListUserInvites_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backendServiceClient) GetUserInvite(ctx context.Context, in *GetUserInviteRequest, opts ...grpc.CallOption) (*GetUserInviteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserInviteResponse)
	err := c.cc.Invoke(ctx, BackendService_GetUserInvite_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backendServiceClient) CreateUserInvite(ctx context.Context, in *CreateUserInviteRequest, opts ...grpc.CallOption) (*CreateUserInviteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateUserInviteResponse)
	err := c.cc.Invoke(ctx, BackendService_CreateUserInvite_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backendServiceClient) DeleteUserInvite(ctx context.Context, in *DeleteUserInviteRequest, opts ...grpc.CallOption) (*DeleteUserInviteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteUserInviteResponse)
	err := c.cc.Invoke(ctx, BackendService_DeleteUserInvite_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backendServiceClient) GetRBACPolicy(ctx context.Context, in *GetRBACPolicyRequest, opts ...grpc.CallOption) (*GetRBACPolicyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetRBACPolicyResponse)
	err := c.cc.Invoke(ctx, BackendService_GetRBACPolicy_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backendServiceClient) UpdateRBACPolicy(ctx context.Context, in *UpdateRBACPolicyRequest, opts ...grpc.CallOption) (*UpdateRBACPolicyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateRBACPolicyResponse)
	err := c.cc.Invoke(ctx, BackendService_UpdateRBACPolicy_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backendServiceClient) ListRoles(ctx context.Context, in *ListRolesRequest, opts ...grpc.CallOption) (*ListRolesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListRolesResponse)
	err := c.cc.Invoke(ctx, BackendService_ListRoles_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backendServiceClient) GetRole(ctx context.Context, in *GetRoleRequest, opts ...grpc.CallOption) (*GetRoleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetRoleResponse)
	err := c.cc.Invoke(ctx, BackendService_GetRole_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backendServiceClient) CreateRole(ctx context.Context, in *CreateRoleRequest, opts ...grpc.CallOption) (*CreateRoleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateRoleResponse)
	err := c.cc.Invoke(ctx, BackendService_CreateRole_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backendServiceClient) UpdateRole(ctx context.Context, in *UpdateRoleRequest, opts ...grpc.CallOption) (*UpdateRoleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateRoleResponse)
	err := c.cc.Invoke(ctx, BackendService_UpdateRole_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backendServiceClient) DeleteRole(ctx context.Context, in *DeleteRoleRequest, opts ...grpc.CallOption) (*DeleteRoleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteRoleResponse)
	err := c.cc.Invoke(ctx, BackendService_DeleteRole_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backendServiceClient) ListUserRoleAssignments(ctx context.Context, in *ListUserRoleAssignmentsRequest, opts ...grpc.CallOption) (*ListUserRoleAssignmentsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListUserRoleAssignmentsResponse)
	err := c.cc.Invoke(ctx, BackendService_ListUserRoleAssignments_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backendServiceClient) GetUserRoleAssignment(ctx context.Context, in *GetUserRoleAssignmentRequest, opts ...grpc.CallOption) (*GetUserRoleAssignmentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserRoleAssignmentResponse)
	err := c.cc.Invoke(ctx, BackendService_GetUserRoleAssignment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backendServiceClient) CreateUserRoleAssignment(ctx context.Context, in *CreateUserRoleAssignmentRequest, opts ...grpc.CallOption) (*CreateUserRoleAssignmentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateUserRoleAssignmentResponse)
	err := c.cc.Invoke(ctx, BackendService_CreateUserRoleAssignment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backendServiceClient) DeleteUserRoleAssignment(ctx context.Context, in *DeleteUserRoleAssignmentRequest, opts ...grpc.CallOption) (*DeleteUserRoleAssignmentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteUserRoleAssignmentResponse)
	err := c.cc.Invoke(ctx, BackendService_DeleteUserRoleAssignment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backendServiceClient) CreateAPIKey(ctx context.Context, in *CreateAPIKeyRequest, opts ...grpc.CallOption) (*CreateAPIKeyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateAPIKeyResponse)
	err := c.cc.Invoke(ctx, BackendService_CreateAPIKey_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backendServiceClient) DeleteAPIKey(ctx context.Context, in *DeleteAPIKeyRequest, opts ...grpc.CallOption) (*DeleteAPIKeyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteAPIKeyResponse)
	err := c.cc.Invoke(ctx, BackendService_DeleteAPIKey_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backendServiceClient) GetAPIKey(ctx context.Context, in *GetAPIKeyRequest, opts ...grpc.CallOption) (*GetAPIKeyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAPIKeyResponse)
	err := c.cc.Invoke(ctx, BackendService_GetAPIKey_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backendServiceClient) ListAPIKeys(ctx context.Context, in *ListAPIKeysRequest, opts ...grpc.CallOption) (*ListAPIKeysResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListAPIKeysResponse)
	err := c.cc.Invoke(ctx, BackendService_ListAPIKeys_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backendServiceClient) RevokeAPIKey(ctx context.Context, in *RevokeAPIKeyRequest, opts ...grpc.CallOption) (*RevokeAPIKeyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RevokeAPIKeyResponse)
	err := c.cc.Invoke(ctx, BackendService_RevokeAPIKey_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backendServiceClient) UpdateAPIKey(ctx context.Context, in *UpdateAPIKeyRequest, opts ...grpc.CallOption) (*UpdateAPIKeyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateAPIKeyResponse)
	err := c.cc.Invoke(ctx, BackendService_UpdateAPIKey_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backendServiceClient) CreateAPIKeyRoleAssignment(ctx context.Context, in *CreateAPIKeyRoleAssignmentRequest, opts ...grpc.CallOption) (*CreateAPIKeyRoleAssignmentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateAPIKeyRoleAssignmentResponse)
	err := c.cc.Invoke(ctx, BackendService_CreateAPIKeyRoleAssignment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backendServiceClient) DeleteAPIKeyRoleAssignment(ctx context.Context, in *DeleteAPIKeyRoleAssignmentRequest, opts ...grpc.CallOption) (*DeleteAPIKeyRoleAssignmentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteAPIKeyRoleAssignmentResponse)
	err := c.cc.Invoke(ctx, BackendService_DeleteAPIKeyRoleAssignment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backendServiceClient) ListAPIKeyRoleAssignments(ctx context.Context, in *ListAPIKeyRoleAssignmentsRequest, opts ...grpc.CallOption) (*ListAPIKeyRoleAssignmentsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListAPIKeyRoleAssignmentsResponse)
	err := c.cc.Invoke(ctx, BackendService_ListAPIKeyRoleAssignments_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backendServiceClient) AuthenticateAPIKey(ctx context.Context, in *AuthenticateAPIKeyRequest, opts ...grpc.CallOption) (*AuthenticateAPIKeyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AuthenticateAPIKeyResponse)
	err := c.cc.Invoke(ctx, BackendService_AuthenticateAPIKey_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backendServiceClient) CreateAuditLogEvent(ctx context.Context, in *CreateAuditLogEventRequest, opts ...grpc.CallOption) (*CreateAuditLogEventResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateAuditLogEventResponse)
	err := c.cc.Invoke(ctx, BackendService_CreateAuditLogEvent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backendServiceClient) DisableOrganizationLogins(ctx context.Context, in *DisableOrganizationLoginsRequest, opts ...grpc.CallOption) (*DisableOrganizationLoginsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DisableOrganizationLoginsResponse)
	err := c.cc.Invoke(ctx, BackendService_DisableOrganizationLogins_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backendServiceClient) DisableProjectLogins(ctx context.Context, in *DisableProjectLoginsRequest, opts ...grpc.CallOption) (*DisableProjectLoginsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DisableProjectLoginsResponse)
	err := c.cc.Invoke(ctx, BackendService_DisableProjectLogins_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backendServiceClient) EnableOrganizationLogins(ctx context.Context, in *EnableOrganizationLoginsRequest, opts ...grpc.CallOption) (*EnableOrganizationLoginsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EnableOrganizationLoginsResponse)
	err := c.cc.Invoke(ctx, BackendService_EnableOrganizationLogins_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backendServiceClient) EnableProjectLogins(ctx context.Context, in *EnableProjectLoginsRequest, opts ...grpc.CallOption) (*EnableProjectLoginsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EnableProjectLoginsResponse)
	err := c.cc.Invoke(ctx, BackendService_EnableProjectLogins_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backendServiceClient) UpdateProject(ctx context.Context, in *UpdateProjectRequest, opts ...grpc.CallOption) (*UpdateProjectResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateProjectResponse)
	err := c.cc.Invoke(ctx, BackendService_UpdateProject_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backendServiceClient) GetVaultDomainSettings(ctx context.Context, in *GetVaultDomainSettingsRequest, opts ...grpc.CallOption) (*GetVaultDomainSettingsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetVaultDomainSettingsResponse)
	err := c.cc.Invoke(ctx, BackendService_GetVaultDomainSettings_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backendServiceClient) UpdateVaultDomainSettings(ctx context.Context, in *UpdateVaultDomainSettingsRequest, opts ...grpc.CallOption) (*UpdateVaultDomainSettingsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateVaultDomainSettingsResponse)
	err := c.cc.Invoke(ctx, BackendService_UpdateVaultDomainSettings_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backendServiceClient) EnableCustomVaultDomain(ctx context.Context, in *EnableCustomVaultDomainRequest, opts ...grpc.CallOption) (*EnableCustomVaultDomainResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EnableCustomVaultDomainResponse)
	err := c.cc.Invoke(ctx, BackendService_EnableCustomVaultDomain_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backendServiceClient) EnableEmailSendFromDomain(ctx context.Context, in *EnableEmailSendFromDomainRequest, opts ...grpc.CallOption) (*EnableEmailSendFromDomainResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EnableEmailSendFromDomainResponse)
	err := c.cc.Invoke(ctx, BackendService_EnableEmailSendFromDomain_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backendServiceClient) GetProjectUISettings(ctx context.Context, in *GetProjectUISettingsRequest, opts ...grpc.CallOption) (*GetProjectUISettingsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetProjectUISettingsResponse)
	err := c.cc.Invoke(ctx, BackendService_GetProjectUISettings_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backendServiceClient) UpdateProjectUISettings(ctx context.Context, in *UpdateProjectUISettingsRequest, opts ...grpc.CallOption) (*UpdateProjectUISettingsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateProjectUISettingsResponse)
	err := c.cc.Invoke(ctx, BackendService_UpdateProjectUISettings_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backendServiceClient) ListBackendAPIKeys(ctx context.Context, in *ListBackendAPIKeysRequest, opts ...grpc.CallOption) (*ListBackendAPIKeysResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListBackendAPIKeysResponse)
	err := c.cc.Invoke(ctx, BackendService_ListBackendAPIKeys_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backendServiceClient) GetBackendAPIKey(ctx context.Context, in *GetBackendAPIKeyRequest, opts ...grpc.CallOption) (*GetBackendAPIKeyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetBackendAPIKeyResponse)
	err := c.cc.Invoke(ctx, BackendService_GetBackendAPIKey_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backendServiceClient) CreateBackendAPIKey(ctx context.Context, in *CreateBackendAPIKeyRequest, opts ...grpc.CallOption) (*CreateBackendAPIKeyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateBackendAPIKeyResponse)
	err := c.cc.Invoke(ctx, BackendService_CreateBackendAPIKey_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backendServiceClient) UpdateBackendAPIKey(ctx context.Context, in *UpdateBackendAPIKeyRequest, opts ...grpc.CallOption) (*UpdateBackendAPIKeyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateBackendAPIKeyResponse)
	err := c.cc.Invoke(ctx, BackendService_UpdateBackendAPIKey_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backendServiceClient) DeleteBackendAPIKey(ctx context.Context, in *DeleteBackendAPIKeyRequest, opts ...grpc.CallOption) (*DeleteBackendAPIKeyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteBackendAPIKeyResponse)
	err := c.cc.Invoke(ctx, BackendService_DeleteBackendAPIKey_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backendServiceClient) RevokeBackendAPIKey(ctx context.Context, in *RevokeBackendAPIKeyRequest, opts ...grpc.CallOption) (*RevokeBackendAPIKeyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RevokeBackendAPIKeyResponse)
	err := c.cc.Invoke(ctx, BackendService_RevokeBackendAPIKey_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backendServiceClient) ListPublishableKeys(ctx context.Context, in *ListPublishableKeysRequest, opts ...grpc.CallOption) (*ListPublishableKeysResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListPublishableKeysResponse)
	err := c.cc.Invoke(ctx, BackendService_ListPublishableKeys_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backendServiceClient) GetPublishableKey(ctx context.Context, in *GetPublishableKeyRequest, opts ...grpc.CallOption) (*GetPublishableKeyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPublishableKeyResponse)
	err := c.cc.Invoke(ctx, BackendService_GetPublishableKey_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backendServiceClient) CreatePublishableKey(ctx context.Context, in *CreatePublishableKeyRequest, opts ...grpc.CallOption) (*CreatePublishableKeyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreatePublishableKeyResponse)
	err := c.cc.Invoke(ctx, BackendService_CreatePublishableKey_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backendServiceClient) UpdatePublishableKey(ctx context.Context, in *UpdatePublishableKeyRequest, opts ...grpc.CallOption) (*UpdatePublishableKeyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdatePublishableKeyResponse)
	err := c.cc.Invoke(ctx, BackendService_UpdatePublishableKey_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backendServiceClient) DeletePublishableKey(ctx context.Context, in *DeletePublishableKeyRequest, opts ...grpc.CallOption) (*DeletePublishableKeyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeletePublishableKeyResponse)
	err := c.cc.Invoke(ctx, BackendService_DeletePublishableKey_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backendServiceClient) CreateUserImpersonationToken(ctx context.Context, in *CreateUserImpersonationTokenRequest, opts ...grpc.CallOption) (*CreateUserImpersonationTokenResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateUserImpersonationTokenResponse)
	err := c.cc.Invoke(ctx, BackendService_CreateUserImpersonationToken_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backendServiceClient) GetProjectEntitlements(ctx context.Context, in *GetProjectEntitlementsRequest, opts ...grpc.CallOption) (*GetProjectEntitlementsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetProjectEntitlementsResponse)
	err := c.cc.Invoke(ctx, BackendService_GetProjectEntitlements_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backendServiceClient) CreateStripeCheckoutLink(ctx context.Context, in *CreateStripeCheckoutLinkRequest, opts ...grpc.CallOption) (*CreateStripeCheckoutLinkResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateStripeCheckoutLinkResponse)
	err := c.cc.Invoke(ctx, BackendService_CreateStripeCheckoutLink_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backendServiceClient) GetProjectWebhookManagementURL(ctx context.Context, in *GetProjectWebhookManagementURLRequest, opts ...grpc.CallOption) (*GetProjectWebhookManagementURLResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetProjectWebhookManagementURLResponse)
	err := c.cc.Invoke(ctx, BackendService_GetProjectWebhookManagementURL_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backendServiceClient) ConsoleListAuditLogEvents(ctx context.Context, in *ConsoleListAuditLogEventsRequest, opts ...grpc.CallOption) (*ConsoleListAuditLogEventsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ConsoleListAuditLogEventsResponse)
	err := c.cc.Invoke(ctx, BackendService_ConsoleListAuditLogEvents_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backendServiceClient) ConsoleListAuditLogEventNames(ctx context.Context, in *ConsoleListAuditLogEventNamesRequest, opts ...grpc.CallOption) (*ConsoleListAuditLogEventNamesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ConsoleListAuditLogEventNamesResponse)
	err := c.cc.Invoke(ctx, BackendService_ConsoleListAuditLogEventNames_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backendServiceClient) ConsoleSearch(ctx context.Context, in *ConsoleSearchRequest, opts ...grpc.CallOption) (*ConsoleSearchResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ConsoleSearchResponse)
	err := c.cc.Invoke(ctx, BackendService_ConsoleSearch_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BackendServiceServer is the server API for BackendService service.
// All implementations must embed UnimplementedBackendServiceServer
// for forward compatibility.
type BackendServiceServer interface {
	// Get the current project.
	GetProject(context.Context, *GetProjectRequest) (*GetProjectResponse, error)
	// List Organizations.
	ListOrganizations(context.Context, *ListOrganizationsRequest) (*ListOrganizationsResponse, error)
	// Get an Organization.
	GetOrganization(context.Context, *GetOrganizationRequest) (*GetOrganizationResponse, error)
	// Create an Organization.
	CreateOrganization(context.Context, *CreateOrganizationRequest) (*CreateOrganizationResponse, error)
	// Update an Organization.
	UpdateOrganization(context.Context, *UpdateOrganizationRequest) (*UpdateOrganizationResponse, error)
	// Delete an Organization.
	DeleteOrganization(context.Context, *DeleteOrganizationRequest) (*DeleteOrganizationResponse, error)
	// Get Organization Domains.
	GetOrganizationDomains(context.Context, *GetOrganizationDomainsRequest) (*GetOrganizationDomainsResponse, error)
	// Update Organization Domains.
	UpdateOrganizationDomains(context.Context, *UpdateOrganizationDomainsRequest) (*UpdateOrganizationDomainsResponse, error)
	// Get Organization Google Hosted Domains.
	GetOrganizationGoogleHostedDomains(context.Context, *GetOrganizationGoogleHostedDomainsRequest) (*GetOrganizationGoogleHostedDomainsResponse, error)
	// Update Organization Google Hosted Domains.
	UpdateOrganizationGoogleHostedDomains(context.Context, *UpdateOrganizationGoogleHostedDomainsRequest) (*UpdateOrganizationGoogleHostedDomainsResponse, error)
	// Get Organization Microsoft Tenant IDs.
	GetOrganizationMicrosoftTenantIDs(context.Context, *GetOrganizationMicrosoftTenantIDsRequest) (*GetOrganizationMicrosoftTenantIDsResponse, error)
	// Update Organization Microsoft Tenant IDs.
	UpdateOrganizationMicrosoftTenantIDs(context.Context, *UpdateOrganizationMicrosoftTenantIDsRequest) (*UpdateOrganizationMicrosoftTenantIDsResponse, error)
	// List SAML Connections.
	ListSAMLConnections(context.Context, *ListSAMLConnectionsRequest) (*ListSAMLConnectionsResponse, error)
	// Get a SAML Connection.
	GetSAMLConnection(context.Context, *GetSAMLConnectionRequest) (*GetSAMLConnectionResponse, error)
	// Create a SAML Connection.
	CreateSAMLConnection(context.Context, *CreateSAMLConnectionRequest) (*CreateSAMLConnectionResponse, error)
	// Update a SAML Connection.
	UpdateSAMLConnection(context.Context, *UpdateSAMLConnectionRequest) (*UpdateSAMLConnectionResponse, error)
	// Delete a SAML Connection.
	DeleteSAMLConnection(context.Context, *DeleteSAMLConnectionRequest) (*DeleteSAMLConnectionResponse, error)
	// List SCIM API Keys.
	ListSCIMAPIKeys(context.Context, *ListSCIMAPIKeysRequest) (*ListSCIMAPIKeysResponse, error)
	// Get a SCIM API Key.
	GetSCIMAPIKey(context.Context, *GetSCIMAPIKeyRequest) (*GetSCIMAPIKeyResponse, error)
	// Create a SCIM API Key.
	CreateSCIMAPIKey(context.Context, *CreateSCIMAPIKeyRequest) (*CreateSCIMAPIKeyResponse, error)
	// Update a SCIM API Key.
	UpdateSCIMAPIKey(context.Context, *UpdateSCIMAPIKeyRequest) (*UpdateSCIMAPIKeyResponse, error)
	// Delete a SCIM API Key.
	DeleteSCIMAPIKey(context.Context, *DeleteSCIMAPIKeyRequest) (*DeleteSCIMAPIKeyResponse, error)
	// Revoke a SCIM API Key.
	RevokeSCIMAPIKey(context.Context, *RevokeSCIMAPIKeyRequest) (*RevokeSCIMAPIKeyResponse, error)
	// List Users.
	ListUsers(context.Context, *ListUsersRequest) (*ListUsersResponse, error)
	// Get a User.
	GetUser(context.Context, *GetUserRequest) (*GetUserResponse, error)
	// Create a User.
	CreateUser(context.Context, *CreateUserRequest) (*CreateUserResponse, error)
	// Update a User.
	UpdateUser(context.Context, *UpdateUserRequest) (*UpdateUserResponse, error)
	// Delete a User.
	DeleteUser(context.Context, *DeleteUserRequest) (*DeleteUserResponse, error)
	// List Passkeys.
	ListPasskeys(context.Context, *ListPasskeysRequest) (*ListPasskeysResponse, error)
	// Get a Passkey.
	GetPasskey(context.Context, *GetPasskeyRequest) (*GetPasskeyResponse, error)
	// Update a Passkey.
	UpdatePasskey(context.Context, *UpdatePasskeyRequest) (*UpdatePasskeyResponse, error)
	// Delete a Passkey.
	DeletePasskey(context.Context, *DeletePasskeyRequest) (*DeletePasskeyResponse, error)
	// List Sessions.
	ListSessions(context.Context, *ListSessionsRequest) (*ListSessionsResponse, error)
	// Get a Session.
	GetSession(context.Context, *GetSessionRequest) (*GetSessionResponse, error)
	// List User Invites.
	ListUserInvites(context.Context, *ListUserInvitesRequest) (*ListUserInvitesResponse, error)
	// Get a User Invite.
	GetUserInvite(context.Context, *GetUserInviteRequest) (*GetUserInviteResponse, error)
	// Create a User Invite.
	CreateUserInvite(context.Context, *CreateUserInviteRequest) (*CreateUserInviteResponse, error)
	// Delete a User Invite.
	DeleteUserInvite(context.Context, *DeleteUserInviteRequest) (*DeleteUserInviteResponse, error)
	GetRBACPolicy(context.Context, *GetRBACPolicyRequest) (*GetRBACPolicyResponse, error)
	UpdateRBACPolicy(context.Context, *UpdateRBACPolicyRequest) (*UpdateRBACPolicyResponse, error)
	// List Roles.
	ListRoles(context.Context, *ListRolesRequest) (*ListRolesResponse, error)
	// Get a Role.
	GetRole(context.Context, *GetRoleRequest) (*GetRoleResponse, error)
	// Create a Role.
	CreateRole(context.Context, *CreateRoleRequest) (*CreateRoleResponse, error)
	// Update a Role.
	UpdateRole(context.Context, *UpdateRoleRequest) (*UpdateRoleResponse, error)
	// Delete a Role.
	DeleteRole(context.Context, *DeleteRoleRequest) (*DeleteRoleResponse, error)
	// List User Role Assignments.
	ListUserRoleAssignments(context.Context, *ListUserRoleAssignmentsRequest) (*ListUserRoleAssignmentsResponse, error)
	// Get a User Role Assignment.
	GetUserRoleAssignment(context.Context, *GetUserRoleAssignmentRequest) (*GetUserRoleAssignmentResponse, error)
	// Create a User Role Assignment.
	CreateUserRoleAssignment(context.Context, *CreateUserRoleAssignmentRequest) (*CreateUserRoleAssignmentResponse, error)
	// Delete a User Role Assignment.
	DeleteUserRoleAssignment(context.Context, *DeleteUserRoleAssignmentRequest) (*DeleteUserRoleAssignmentResponse, error)
	// Create an API Key for an Organization.
	CreateAPIKey(context.Context, *CreateAPIKeyRequest) (*CreateAPIKeyResponse, error)
	// Delete an API Key.
	DeleteAPIKey(context.Context, *DeleteAPIKeyRequest) (*DeleteAPIKeyResponse, error)
	// Get an API Key.
	GetAPIKey(context.Context, *GetAPIKeyRequest) (*GetAPIKeyResponse, error)
	// List API Keys.
	ListAPIKeys(context.Context, *ListAPIKeysRequest) (*ListAPIKeysResponse, error)
	// Revoke an API Key.
	RevokeAPIKey(context.Context, *RevokeAPIKeyRequest) (*RevokeAPIKeyResponse, error)
	// Update an API Key.
	UpdateAPIKey(context.Context, *UpdateAPIKeyRequest) (*UpdateAPIKeyResponse, error)
	CreateAPIKeyRoleAssignment(context.Context, *CreateAPIKeyRoleAssignmentRequest) (*CreateAPIKeyRoleAssignmentResponse, error)
	DeleteAPIKeyRoleAssignment(context.Context, *DeleteAPIKeyRoleAssignmentRequest) (*DeleteAPIKeyRoleAssignmentResponse, error)
	ListAPIKeyRoleAssignments(context.Context, *ListAPIKeyRoleAssignmentsRequest) (*ListAPIKeyRoleAssignmentsResponse, error)
	AuthenticateAPIKey(context.Context, *AuthenticateAPIKeyRequest) (*AuthenticateAPIKeyResponse, error)
	CreateAuditLogEvent(context.Context, *CreateAuditLogEventRequest) (*CreateAuditLogEventResponse, error)
	DisableOrganizationLogins(context.Context, *DisableOrganizationLoginsRequest) (*DisableOrganizationLoginsResponse, error)
	DisableProjectLogins(context.Context, *DisableProjectLoginsRequest) (*DisableProjectLoginsResponse, error)
	EnableOrganizationLogins(context.Context, *EnableOrganizationLoginsRequest) (*EnableOrganizationLoginsResponse, error)
	EnableProjectLogins(context.Context, *EnableProjectLoginsRequest) (*EnableProjectLoginsResponse, error)
	UpdateProject(context.Context, *UpdateProjectRequest) (*UpdateProjectResponse, error)
	GetVaultDomainSettings(context.Context, *GetVaultDomainSettingsRequest) (*GetVaultDomainSettingsResponse, error)
	UpdateVaultDomainSettings(context.Context, *UpdateVaultDomainSettingsRequest) (*UpdateVaultDomainSettingsResponse, error)
	EnableCustomVaultDomain(context.Context, *EnableCustomVaultDomainRequest) (*EnableCustomVaultDomainResponse, error)
	EnableEmailSendFromDomain(context.Context, *EnableEmailSendFromDomainRequest) (*EnableEmailSendFromDomainResponse, error)
	GetProjectUISettings(context.Context, *GetProjectUISettingsRequest) (*GetProjectUISettingsResponse, error)
	UpdateProjectUISettings(context.Context, *UpdateProjectUISettingsRequest) (*UpdateProjectUISettingsResponse, error)
	ListBackendAPIKeys(context.Context, *ListBackendAPIKeysRequest) (*ListBackendAPIKeysResponse, error)
	GetBackendAPIKey(context.Context, *GetBackendAPIKeyRequest) (*GetBackendAPIKeyResponse, error)
	CreateBackendAPIKey(context.Context, *CreateBackendAPIKeyRequest) (*CreateBackendAPIKeyResponse, error)
	UpdateBackendAPIKey(context.Context, *UpdateBackendAPIKeyRequest) (*UpdateBackendAPIKeyResponse, error)
	DeleteBackendAPIKey(context.Context, *DeleteBackendAPIKeyRequest) (*DeleteBackendAPIKeyResponse, error)
	RevokeBackendAPIKey(context.Context, *RevokeBackendAPIKeyRequest) (*RevokeBackendAPIKeyResponse, error)
	ListPublishableKeys(context.Context, *ListPublishableKeysRequest) (*ListPublishableKeysResponse, error)
	GetPublishableKey(context.Context, *GetPublishableKeyRequest) (*GetPublishableKeyResponse, error)
	CreatePublishableKey(context.Context, *CreatePublishableKeyRequest) (*CreatePublishableKeyResponse, error)
	UpdatePublishableKey(context.Context, *UpdatePublishableKeyRequest) (*UpdatePublishableKeyResponse, error)
	DeletePublishableKey(context.Context, *DeletePublishableKeyRequest) (*DeletePublishableKeyResponse, error)
	CreateUserImpersonationToken(context.Context, *CreateUserImpersonationTokenRequest) (*CreateUserImpersonationTokenResponse, error)
	GetProjectEntitlements(context.Context, *GetProjectEntitlementsRequest) (*GetProjectEntitlementsResponse, error)
	CreateStripeCheckoutLink(context.Context, *CreateStripeCheckoutLinkRequest) (*CreateStripeCheckoutLinkResponse, error)
	GetProjectWebhookManagementURL(context.Context, *GetProjectWebhookManagementURLRequest) (*GetProjectWebhookManagementURLResponse, error)
	ConsoleListAuditLogEvents(context.Context, *ConsoleListAuditLogEventsRequest) (*ConsoleListAuditLogEventsResponse, error)
	ConsoleListAuditLogEventNames(context.Context, *ConsoleListAuditLogEventNamesRequest) (*ConsoleListAuditLogEventNamesResponse, error)
	ConsoleSearch(context.Context, *ConsoleSearchRequest) (*ConsoleSearchResponse, error)
	mustEmbedUnimplementedBackendServiceServer()
}

// UnimplementedBackendServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedBackendServiceServer struct{}

func (UnimplementedBackendServiceServer) GetProject(context.Context, *GetProjectRequest) (*GetProjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProject not implemented")
}
func (UnimplementedBackendServiceServer) ListOrganizations(context.Context, *ListOrganizationsRequest) (*ListOrganizationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOrganizations not implemented")
}
func (UnimplementedBackendServiceServer) GetOrganization(context.Context, *GetOrganizationRequest) (*GetOrganizationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrganization not implemented")
}
func (UnimplementedBackendServiceServer) CreateOrganization(context.Context, *CreateOrganizationRequest) (*CreateOrganizationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrganization not implemented")
}
func (UnimplementedBackendServiceServer) UpdateOrganization(context.Context, *UpdateOrganizationRequest) (*UpdateOrganizationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOrganization not implemented")
}
func (UnimplementedBackendServiceServer) DeleteOrganization(context.Context, *DeleteOrganizationRequest) (*DeleteOrganizationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteOrganization not implemented")
}
func (UnimplementedBackendServiceServer) GetOrganizationDomains(context.Context, *GetOrganizationDomainsRequest) (*GetOrganizationDomainsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrganizationDomains not implemented")
}
func (UnimplementedBackendServiceServer) UpdateOrganizationDomains(context.Context, *UpdateOrganizationDomainsRequest) (*UpdateOrganizationDomainsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOrganizationDomains not implemented")
}
func (UnimplementedBackendServiceServer) GetOrganizationGoogleHostedDomains(context.Context, *GetOrganizationGoogleHostedDomainsRequest) (*GetOrganizationGoogleHostedDomainsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrganizationGoogleHostedDomains not implemented")
}
func (UnimplementedBackendServiceServer) UpdateOrganizationGoogleHostedDomains(context.Context, *UpdateOrganizationGoogleHostedDomainsRequest) (*UpdateOrganizationGoogleHostedDomainsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOrganizationGoogleHostedDomains not implemented")
}
func (UnimplementedBackendServiceServer) GetOrganizationMicrosoftTenantIDs(context.Context, *GetOrganizationMicrosoftTenantIDsRequest) (*GetOrganizationMicrosoftTenantIDsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrganizationMicrosoftTenantIDs not implemented")
}
func (UnimplementedBackendServiceServer) UpdateOrganizationMicrosoftTenantIDs(context.Context, *UpdateOrganizationMicrosoftTenantIDsRequest) (*UpdateOrganizationMicrosoftTenantIDsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOrganizationMicrosoftTenantIDs not implemented")
}
func (UnimplementedBackendServiceServer) ListSAMLConnections(context.Context, *ListSAMLConnectionsRequest) (*ListSAMLConnectionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSAMLConnections not implemented")
}
func (UnimplementedBackendServiceServer) GetSAMLConnection(context.Context, *GetSAMLConnectionRequest) (*GetSAMLConnectionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSAMLConnection not implemented")
}
func (UnimplementedBackendServiceServer) CreateSAMLConnection(context.Context, *CreateSAMLConnectionRequest) (*CreateSAMLConnectionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSAMLConnection not implemented")
}
func (UnimplementedBackendServiceServer) UpdateSAMLConnection(context.Context, *UpdateSAMLConnectionRequest) (*UpdateSAMLConnectionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSAMLConnection not implemented")
}
func (UnimplementedBackendServiceServer) DeleteSAMLConnection(context.Context, *DeleteSAMLConnectionRequest) (*DeleteSAMLConnectionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSAMLConnection not implemented")
}
func (UnimplementedBackendServiceServer) ListSCIMAPIKeys(context.Context, *ListSCIMAPIKeysRequest) (*ListSCIMAPIKeysResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSCIMAPIKeys not implemented")
}
func (UnimplementedBackendServiceServer) GetSCIMAPIKey(context.Context, *GetSCIMAPIKeyRequest) (*GetSCIMAPIKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSCIMAPIKey not implemented")
}
func (UnimplementedBackendServiceServer) CreateSCIMAPIKey(context.Context, *CreateSCIMAPIKeyRequest) (*CreateSCIMAPIKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSCIMAPIKey not implemented")
}
func (UnimplementedBackendServiceServer) UpdateSCIMAPIKey(context.Context, *UpdateSCIMAPIKeyRequest) (*UpdateSCIMAPIKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSCIMAPIKey not implemented")
}
func (UnimplementedBackendServiceServer) DeleteSCIMAPIKey(context.Context, *DeleteSCIMAPIKeyRequest) (*DeleteSCIMAPIKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSCIMAPIKey not implemented")
}
func (UnimplementedBackendServiceServer) RevokeSCIMAPIKey(context.Context, *RevokeSCIMAPIKeyRequest) (*RevokeSCIMAPIKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RevokeSCIMAPIKey not implemented")
}
func (UnimplementedBackendServiceServer) ListUsers(context.Context, *ListUsersRequest) (*ListUsersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUsers not implemented")
}
func (UnimplementedBackendServiceServer) GetUser(context.Context, *GetUserRequest) (*GetUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUser not implemented")
}
func (UnimplementedBackendServiceServer) CreateUser(context.Context, *CreateUserRequest) (*CreateUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUser not implemented")
}
func (UnimplementedBackendServiceServer) UpdateUser(context.Context, *UpdateUserRequest) (*UpdateUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUser not implemented")
}
func (UnimplementedBackendServiceServer) DeleteUser(context.Context, *DeleteUserRequest) (*DeleteUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUser not implemented")
}
func (UnimplementedBackendServiceServer) ListPasskeys(context.Context, *ListPasskeysRequest) (*ListPasskeysResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPasskeys not implemented")
}
func (UnimplementedBackendServiceServer) GetPasskey(context.Context, *GetPasskeyRequest) (*GetPasskeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPasskey not implemented")
}
func (UnimplementedBackendServiceServer) UpdatePasskey(context.Context, *UpdatePasskeyRequest) (*UpdatePasskeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePasskey not implemented")
}
func (UnimplementedBackendServiceServer) DeletePasskey(context.Context, *DeletePasskeyRequest) (*DeletePasskeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePasskey not implemented")
}
func (UnimplementedBackendServiceServer) ListSessions(context.Context, *ListSessionsRequest) (*ListSessionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSessions not implemented")
}
func (UnimplementedBackendServiceServer) GetSession(context.Context, *GetSessionRequest) (*GetSessionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSession not implemented")
}
func (UnimplementedBackendServiceServer) ListUserInvites(context.Context, *ListUserInvitesRequest) (*ListUserInvitesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUserInvites not implemented")
}
func (UnimplementedBackendServiceServer) GetUserInvite(context.Context, *GetUserInviteRequest) (*GetUserInviteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserInvite not implemented")
}
func (UnimplementedBackendServiceServer) CreateUserInvite(context.Context, *CreateUserInviteRequest) (*CreateUserInviteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUserInvite not implemented")
}
func (UnimplementedBackendServiceServer) DeleteUserInvite(context.Context, *DeleteUserInviteRequest) (*DeleteUserInviteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUserInvite not implemented")
}
func (UnimplementedBackendServiceServer) GetRBACPolicy(context.Context, *GetRBACPolicyRequest) (*GetRBACPolicyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRBACPolicy not implemented")
}
func (UnimplementedBackendServiceServer) UpdateRBACPolicy(context.Context, *UpdateRBACPolicyRequest) (*UpdateRBACPolicyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRBACPolicy not implemented")
}
func (UnimplementedBackendServiceServer) ListRoles(context.Context, *ListRolesRequest) (*ListRolesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRoles not implemented")
}
func (UnimplementedBackendServiceServer) GetRole(context.Context, *GetRoleRequest) (*GetRoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRole not implemented")
}
func (UnimplementedBackendServiceServer) CreateRole(context.Context, *CreateRoleRequest) (*CreateRoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRole not implemented")
}
func (UnimplementedBackendServiceServer) UpdateRole(context.Context, *UpdateRoleRequest) (*UpdateRoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRole not implemented")
}
func (UnimplementedBackendServiceServer) DeleteRole(context.Context, *DeleteRoleRequest) (*DeleteRoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRole not implemented")
}
func (UnimplementedBackendServiceServer) ListUserRoleAssignments(context.Context, *ListUserRoleAssignmentsRequest) (*ListUserRoleAssignmentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUserRoleAssignments not implemented")
}
func (UnimplementedBackendServiceServer) GetUserRoleAssignment(context.Context, *GetUserRoleAssignmentRequest) (*GetUserRoleAssignmentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserRoleAssignment not implemented")
}
func (UnimplementedBackendServiceServer) CreateUserRoleAssignment(context.Context, *CreateUserRoleAssignmentRequest) (*CreateUserRoleAssignmentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUserRoleAssignment not implemented")
}
func (UnimplementedBackendServiceServer) DeleteUserRoleAssignment(context.Context, *DeleteUserRoleAssignmentRequest) (*DeleteUserRoleAssignmentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUserRoleAssignment not implemented")
}
func (UnimplementedBackendServiceServer) CreateAPIKey(context.Context, *CreateAPIKeyRequest) (*CreateAPIKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAPIKey not implemented")
}
func (UnimplementedBackendServiceServer) DeleteAPIKey(context.Context, *DeleteAPIKeyRequest) (*DeleteAPIKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAPIKey not implemented")
}
func (UnimplementedBackendServiceServer) GetAPIKey(context.Context, *GetAPIKeyRequest) (*GetAPIKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAPIKey not implemented")
}
func (UnimplementedBackendServiceServer) ListAPIKeys(context.Context, *ListAPIKeysRequest) (*ListAPIKeysResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAPIKeys not implemented")
}
func (UnimplementedBackendServiceServer) RevokeAPIKey(context.Context, *RevokeAPIKeyRequest) (*RevokeAPIKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RevokeAPIKey not implemented")
}
func (UnimplementedBackendServiceServer) UpdateAPIKey(context.Context, *UpdateAPIKeyRequest) (*UpdateAPIKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAPIKey not implemented")
}
func (UnimplementedBackendServiceServer) CreateAPIKeyRoleAssignment(context.Context, *CreateAPIKeyRoleAssignmentRequest) (*CreateAPIKeyRoleAssignmentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAPIKeyRoleAssignment not implemented")
}
func (UnimplementedBackendServiceServer) DeleteAPIKeyRoleAssignment(context.Context, *DeleteAPIKeyRoleAssignmentRequest) (*DeleteAPIKeyRoleAssignmentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAPIKeyRoleAssignment not implemented")
}
func (UnimplementedBackendServiceServer) ListAPIKeyRoleAssignments(context.Context, *ListAPIKeyRoleAssignmentsRequest) (*ListAPIKeyRoleAssignmentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAPIKeyRoleAssignments not implemented")
}
func (UnimplementedBackendServiceServer) AuthenticateAPIKey(context.Context, *AuthenticateAPIKeyRequest) (*AuthenticateAPIKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthenticateAPIKey not implemented")
}
func (UnimplementedBackendServiceServer) CreateAuditLogEvent(context.Context, *CreateAuditLogEventRequest) (*CreateAuditLogEventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAuditLogEvent not implemented")
}
func (UnimplementedBackendServiceServer) DisableOrganizationLogins(context.Context, *DisableOrganizationLoginsRequest) (*DisableOrganizationLoginsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DisableOrganizationLogins not implemented")
}
func (UnimplementedBackendServiceServer) DisableProjectLogins(context.Context, *DisableProjectLoginsRequest) (*DisableProjectLoginsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DisableProjectLogins not implemented")
}
func (UnimplementedBackendServiceServer) EnableOrganizationLogins(context.Context, *EnableOrganizationLoginsRequest) (*EnableOrganizationLoginsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnableOrganizationLogins not implemented")
}
func (UnimplementedBackendServiceServer) EnableProjectLogins(context.Context, *EnableProjectLoginsRequest) (*EnableProjectLoginsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnableProjectLogins not implemented")
}
func (UnimplementedBackendServiceServer) UpdateProject(context.Context, *UpdateProjectRequest) (*UpdateProjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProject not implemented")
}
func (UnimplementedBackendServiceServer) GetVaultDomainSettings(context.Context, *GetVaultDomainSettingsRequest) (*GetVaultDomainSettingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVaultDomainSettings not implemented")
}
func (UnimplementedBackendServiceServer) UpdateVaultDomainSettings(context.Context, *UpdateVaultDomainSettingsRequest) (*UpdateVaultDomainSettingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateVaultDomainSettings not implemented")
}
func (UnimplementedBackendServiceServer) EnableCustomVaultDomain(context.Context, *EnableCustomVaultDomainRequest) (*EnableCustomVaultDomainResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnableCustomVaultDomain not implemented")
}
func (UnimplementedBackendServiceServer) EnableEmailSendFromDomain(context.Context, *EnableEmailSendFromDomainRequest) (*EnableEmailSendFromDomainResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnableEmailSendFromDomain not implemented")
}
func (UnimplementedBackendServiceServer) GetProjectUISettings(context.Context, *GetProjectUISettingsRequest) (*GetProjectUISettingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProjectUISettings not implemented")
}
func (UnimplementedBackendServiceServer) UpdateProjectUISettings(context.Context, *UpdateProjectUISettingsRequest) (*UpdateProjectUISettingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProjectUISettings not implemented")
}
func (UnimplementedBackendServiceServer) ListBackendAPIKeys(context.Context, *ListBackendAPIKeysRequest) (*ListBackendAPIKeysResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBackendAPIKeys not implemented")
}
func (UnimplementedBackendServiceServer) GetBackendAPIKey(context.Context, *GetBackendAPIKeyRequest) (*GetBackendAPIKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBackendAPIKey not implemented")
}
func (UnimplementedBackendServiceServer) CreateBackendAPIKey(context.Context, *CreateBackendAPIKeyRequest) (*CreateBackendAPIKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBackendAPIKey not implemented")
}
func (UnimplementedBackendServiceServer) UpdateBackendAPIKey(context.Context, *UpdateBackendAPIKeyRequest) (*UpdateBackendAPIKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBackendAPIKey not implemented")
}
func (UnimplementedBackendServiceServer) DeleteBackendAPIKey(context.Context, *DeleteBackendAPIKeyRequest) (*DeleteBackendAPIKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBackendAPIKey not implemented")
}
func (UnimplementedBackendServiceServer) RevokeBackendAPIKey(context.Context, *RevokeBackendAPIKeyRequest) (*RevokeBackendAPIKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RevokeBackendAPIKey not implemented")
}
func (UnimplementedBackendServiceServer) ListPublishableKeys(context.Context, *ListPublishableKeysRequest) (*ListPublishableKeysResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPublishableKeys not implemented")
}
func (UnimplementedBackendServiceServer) GetPublishableKey(context.Context, *GetPublishableKeyRequest) (*GetPublishableKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPublishableKey not implemented")
}
func (UnimplementedBackendServiceServer) CreatePublishableKey(context.Context, *CreatePublishableKeyRequest) (*CreatePublishableKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePublishableKey not implemented")
}
func (UnimplementedBackendServiceServer) UpdatePublishableKey(context.Context, *UpdatePublishableKeyRequest) (*UpdatePublishableKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePublishableKey not implemented")
}
func (UnimplementedBackendServiceServer) DeletePublishableKey(context.Context, *DeletePublishableKeyRequest) (*DeletePublishableKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePublishableKey not implemented")
}
func (UnimplementedBackendServiceServer) CreateUserImpersonationToken(context.Context, *CreateUserImpersonationTokenRequest) (*CreateUserImpersonationTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUserImpersonationToken not implemented")
}
func (UnimplementedBackendServiceServer) GetProjectEntitlements(context.Context, *GetProjectEntitlementsRequest) (*GetProjectEntitlementsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProjectEntitlements not implemented")
}
func (UnimplementedBackendServiceServer) CreateStripeCheckoutLink(context.Context, *CreateStripeCheckoutLinkRequest) (*CreateStripeCheckoutLinkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateStripeCheckoutLink not implemented")
}
func (UnimplementedBackendServiceServer) GetProjectWebhookManagementURL(context.Context, *GetProjectWebhookManagementURLRequest) (*GetProjectWebhookManagementURLResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProjectWebhookManagementURL not implemented")
}
func (UnimplementedBackendServiceServer) ConsoleListAuditLogEvents(context.Context, *ConsoleListAuditLogEventsRequest) (*ConsoleListAuditLogEventsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConsoleListAuditLogEvents not implemented")
}
func (UnimplementedBackendServiceServer) ConsoleListAuditLogEventNames(context.Context, *ConsoleListAuditLogEventNamesRequest) (*ConsoleListAuditLogEventNamesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConsoleListAuditLogEventNames not implemented")
}
func (UnimplementedBackendServiceServer) ConsoleSearch(context.Context, *ConsoleSearchRequest) (*ConsoleSearchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConsoleSearch not implemented")
}
func (UnimplementedBackendServiceServer) mustEmbedUnimplementedBackendServiceServer() {}
func (UnimplementedBackendServiceServer) testEmbeddedByValue()                        {}

// UnsafeBackendServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BackendServiceServer will
// result in compilation errors.
type UnsafeBackendServiceServer interface {
	mustEmbedUnimplementedBackendServiceServer()
}

func RegisterBackendServiceServer(s grpc.ServiceRegistrar, srv BackendServiceServer) {
	// If the following call pancis, it indicates UnimplementedBackendServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&BackendService_ServiceDesc, srv)
}

func _BackendService_GetProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackendServiceServer).GetProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackendService_GetProject_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackendServiceServer).GetProject(ctx, req.(*GetProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackendService_ListOrganizations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListOrganizationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackendServiceServer).ListOrganizations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackendService_ListOrganizations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackendServiceServer).ListOrganizations(ctx, req.(*ListOrganizationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackendService_GetOrganization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrganizationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackendServiceServer).GetOrganization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackendService_GetOrganization_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackendServiceServer).GetOrganization(ctx, req.(*GetOrganizationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackendService_CreateOrganization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOrganizationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackendServiceServer).CreateOrganization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackendService_CreateOrganization_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackendServiceServer).CreateOrganization(ctx, req.(*CreateOrganizationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackendService_UpdateOrganization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateOrganizationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackendServiceServer).UpdateOrganization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackendService_UpdateOrganization_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackendServiceServer).UpdateOrganization(ctx, req.(*UpdateOrganizationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackendService_DeleteOrganization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteOrganizationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackendServiceServer).DeleteOrganization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackendService_DeleteOrganization_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackendServiceServer).DeleteOrganization(ctx, req.(*DeleteOrganizationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackendService_GetOrganizationDomains_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrganizationDomainsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackendServiceServer).GetOrganizationDomains(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackendService_GetOrganizationDomains_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackendServiceServer).GetOrganizationDomains(ctx, req.(*GetOrganizationDomainsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackendService_UpdateOrganizationDomains_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateOrganizationDomainsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackendServiceServer).UpdateOrganizationDomains(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackendService_UpdateOrganizationDomains_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackendServiceServer).UpdateOrganizationDomains(ctx, req.(*UpdateOrganizationDomainsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackendService_GetOrganizationGoogleHostedDomains_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrganizationGoogleHostedDomainsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackendServiceServer).GetOrganizationGoogleHostedDomains(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackendService_GetOrganizationGoogleHostedDomains_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackendServiceServer).GetOrganizationGoogleHostedDomains(ctx, req.(*GetOrganizationGoogleHostedDomainsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackendService_UpdateOrganizationGoogleHostedDomains_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateOrganizationGoogleHostedDomainsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackendServiceServer).UpdateOrganizationGoogleHostedDomains(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackendService_UpdateOrganizationGoogleHostedDomains_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackendServiceServer).UpdateOrganizationGoogleHostedDomains(ctx, req.(*UpdateOrganizationGoogleHostedDomainsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackendService_GetOrganizationMicrosoftTenantIDs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrganizationMicrosoftTenantIDsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackendServiceServer).GetOrganizationMicrosoftTenantIDs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackendService_GetOrganizationMicrosoftTenantIDs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackendServiceServer).GetOrganizationMicrosoftTenantIDs(ctx, req.(*GetOrganizationMicrosoftTenantIDsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackendService_UpdateOrganizationMicrosoftTenantIDs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateOrganizationMicrosoftTenantIDsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackendServiceServer).UpdateOrganizationMicrosoftTenantIDs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackendService_UpdateOrganizationMicrosoftTenantIDs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackendServiceServer).UpdateOrganizationMicrosoftTenantIDs(ctx, req.(*UpdateOrganizationMicrosoftTenantIDsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackendService_ListSAMLConnections_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSAMLConnectionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackendServiceServer).ListSAMLConnections(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackendService_ListSAMLConnections_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackendServiceServer).ListSAMLConnections(ctx, req.(*ListSAMLConnectionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackendService_GetSAMLConnection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSAMLConnectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackendServiceServer).GetSAMLConnection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackendService_GetSAMLConnection_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackendServiceServer).GetSAMLConnection(ctx, req.(*GetSAMLConnectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackendService_CreateSAMLConnection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSAMLConnectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackendServiceServer).CreateSAMLConnection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackendService_CreateSAMLConnection_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackendServiceServer).CreateSAMLConnection(ctx, req.(*CreateSAMLConnectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackendService_UpdateSAMLConnection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSAMLConnectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackendServiceServer).UpdateSAMLConnection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackendService_UpdateSAMLConnection_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackendServiceServer).UpdateSAMLConnection(ctx, req.(*UpdateSAMLConnectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackendService_DeleteSAMLConnection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSAMLConnectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackendServiceServer).DeleteSAMLConnection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackendService_DeleteSAMLConnection_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackendServiceServer).DeleteSAMLConnection(ctx, req.(*DeleteSAMLConnectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackendService_ListSCIMAPIKeys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSCIMAPIKeysRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackendServiceServer).ListSCIMAPIKeys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackendService_ListSCIMAPIKeys_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackendServiceServer).ListSCIMAPIKeys(ctx, req.(*ListSCIMAPIKeysRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackendService_GetSCIMAPIKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSCIMAPIKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackendServiceServer).GetSCIMAPIKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackendService_GetSCIMAPIKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackendServiceServer).GetSCIMAPIKey(ctx, req.(*GetSCIMAPIKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackendService_CreateSCIMAPIKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSCIMAPIKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackendServiceServer).CreateSCIMAPIKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackendService_CreateSCIMAPIKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackendServiceServer).CreateSCIMAPIKey(ctx, req.(*CreateSCIMAPIKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackendService_UpdateSCIMAPIKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSCIMAPIKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackendServiceServer).UpdateSCIMAPIKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackendService_UpdateSCIMAPIKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackendServiceServer).UpdateSCIMAPIKey(ctx, req.(*UpdateSCIMAPIKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackendService_DeleteSCIMAPIKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSCIMAPIKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackendServiceServer).DeleteSCIMAPIKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackendService_DeleteSCIMAPIKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackendServiceServer).DeleteSCIMAPIKey(ctx, req.(*DeleteSCIMAPIKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackendService_RevokeSCIMAPIKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RevokeSCIMAPIKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackendServiceServer).RevokeSCIMAPIKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackendService_RevokeSCIMAPIKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackendServiceServer).RevokeSCIMAPIKey(ctx, req.(*RevokeSCIMAPIKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackendService_ListUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackendServiceServer).ListUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackendService_ListUsers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackendServiceServer).ListUsers(ctx, req.(*ListUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackendService_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackendServiceServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackendService_GetUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackendServiceServer).GetUser(ctx, req.(*GetUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackendService_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackendServiceServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackendService_CreateUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackendServiceServer).CreateUser(ctx, req.(*CreateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackendService_UpdateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackendServiceServer).UpdateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackendService_UpdateUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackendServiceServer).UpdateUser(ctx, req.(*UpdateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackendService_DeleteUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackendServiceServer).DeleteUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackendService_DeleteUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackendServiceServer).DeleteUser(ctx, req.(*DeleteUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackendService_ListPasskeys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPasskeysRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackendServiceServer).ListPasskeys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackendService_ListPasskeys_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackendServiceServer).ListPasskeys(ctx, req.(*ListPasskeysRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackendService_GetPasskey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPasskeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackendServiceServer).GetPasskey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackendService_GetPasskey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackendServiceServer).GetPasskey(ctx, req.(*GetPasskeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackendService_UpdatePasskey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePasskeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackendServiceServer).UpdatePasskey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackendService_UpdatePasskey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackendServiceServer).UpdatePasskey(ctx, req.(*UpdatePasskeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackendService_DeletePasskey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePasskeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackendServiceServer).DeletePasskey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackendService_DeletePasskey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackendServiceServer).DeletePasskey(ctx, req.(*DeletePasskeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackendService_ListSessions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSessionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackendServiceServer).ListSessions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackendService_ListSessions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackendServiceServer).ListSessions(ctx, req.(*ListSessionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackendService_GetSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackendServiceServer).GetSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackendService_GetSession_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackendServiceServer).GetSession(ctx, req.(*GetSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackendService_ListUserInvites_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUserInvitesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackendServiceServer).ListUserInvites(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackendService_ListUserInvites_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackendServiceServer).ListUserInvites(ctx, req.(*ListUserInvitesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackendService_GetUserInvite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserInviteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackendServiceServer).GetUserInvite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackendService_GetUserInvite_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackendServiceServer).GetUserInvite(ctx, req.(*GetUserInviteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackendService_CreateUserInvite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserInviteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackendServiceServer).CreateUserInvite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackendService_CreateUserInvite_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackendServiceServer).CreateUserInvite(ctx, req.(*CreateUserInviteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackendService_DeleteUserInvite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUserInviteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackendServiceServer).DeleteUserInvite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackendService_DeleteUserInvite_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackendServiceServer).DeleteUserInvite(ctx, req.(*DeleteUserInviteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackendService_GetRBACPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRBACPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackendServiceServer).GetRBACPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackendService_GetRBACPolicy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackendServiceServer).GetRBACPolicy(ctx, req.(*GetRBACPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackendService_UpdateRBACPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRBACPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackendServiceServer).UpdateRBACPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackendService_UpdateRBACPolicy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackendServiceServer).UpdateRBACPolicy(ctx, req.(*UpdateRBACPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackendService_ListRoles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRolesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackendServiceServer).ListRoles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackendService_ListRoles_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackendServiceServer).ListRoles(ctx, req.(*ListRolesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackendService_GetRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackendServiceServer).GetRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackendService_GetRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackendServiceServer).GetRole(ctx, req.(*GetRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackendService_CreateRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackendServiceServer).CreateRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackendService_CreateRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackendServiceServer).CreateRole(ctx, req.(*CreateRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackendService_UpdateRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackendServiceServer).UpdateRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackendService_UpdateRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackendServiceServer).UpdateRole(ctx, req.(*UpdateRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackendService_DeleteRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackendServiceServer).DeleteRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackendService_DeleteRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackendServiceServer).DeleteRole(ctx, req.(*DeleteRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackendService_ListUserRoleAssignments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUserRoleAssignmentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackendServiceServer).ListUserRoleAssignments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackendService_ListUserRoleAssignments_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackendServiceServer).ListUserRoleAssignments(ctx, req.(*ListUserRoleAssignmentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackendService_GetUserRoleAssignment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserRoleAssignmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackendServiceServer).GetUserRoleAssignment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackendService_GetUserRoleAssignment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackendServiceServer).GetUserRoleAssignment(ctx, req.(*GetUserRoleAssignmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackendService_CreateUserRoleAssignment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserRoleAssignmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackendServiceServer).CreateUserRoleAssignment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackendService_CreateUserRoleAssignment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackendServiceServer).CreateUserRoleAssignment(ctx, req.(*CreateUserRoleAssignmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackendService_DeleteUserRoleAssignment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUserRoleAssignmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackendServiceServer).DeleteUserRoleAssignment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackendService_DeleteUserRoleAssignment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackendServiceServer).DeleteUserRoleAssignment(ctx, req.(*DeleteUserRoleAssignmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackendService_CreateAPIKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAPIKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackendServiceServer).CreateAPIKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackendService_CreateAPIKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackendServiceServer).CreateAPIKey(ctx, req.(*CreateAPIKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackendService_DeleteAPIKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAPIKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackendServiceServer).DeleteAPIKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackendService_DeleteAPIKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackendServiceServer).DeleteAPIKey(ctx, req.(*DeleteAPIKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackendService_GetAPIKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAPIKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackendServiceServer).GetAPIKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackendService_GetAPIKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackendServiceServer).GetAPIKey(ctx, req.(*GetAPIKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackendService_ListAPIKeys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAPIKeysRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackendServiceServer).ListAPIKeys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackendService_ListAPIKeys_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackendServiceServer).ListAPIKeys(ctx, req.(*ListAPIKeysRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackendService_RevokeAPIKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RevokeAPIKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackendServiceServer).RevokeAPIKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackendService_RevokeAPIKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackendServiceServer).RevokeAPIKey(ctx, req.(*RevokeAPIKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackendService_UpdateAPIKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAPIKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackendServiceServer).UpdateAPIKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackendService_UpdateAPIKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackendServiceServer).UpdateAPIKey(ctx, req.(*UpdateAPIKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackendService_CreateAPIKeyRoleAssignment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAPIKeyRoleAssignmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackendServiceServer).CreateAPIKeyRoleAssignment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackendService_CreateAPIKeyRoleAssignment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackendServiceServer).CreateAPIKeyRoleAssignment(ctx, req.(*CreateAPIKeyRoleAssignmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackendService_DeleteAPIKeyRoleAssignment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAPIKeyRoleAssignmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackendServiceServer).DeleteAPIKeyRoleAssignment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackendService_DeleteAPIKeyRoleAssignment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackendServiceServer).DeleteAPIKeyRoleAssignment(ctx, req.(*DeleteAPIKeyRoleAssignmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackendService_ListAPIKeyRoleAssignments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAPIKeyRoleAssignmentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackendServiceServer).ListAPIKeyRoleAssignments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackendService_ListAPIKeyRoleAssignments_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackendServiceServer).ListAPIKeyRoleAssignments(ctx, req.(*ListAPIKeyRoleAssignmentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackendService_AuthenticateAPIKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthenticateAPIKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackendServiceServer).AuthenticateAPIKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackendService_AuthenticateAPIKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackendServiceServer).AuthenticateAPIKey(ctx, req.(*AuthenticateAPIKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackendService_CreateAuditLogEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAuditLogEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackendServiceServer).CreateAuditLogEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackendService_CreateAuditLogEvent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackendServiceServer).CreateAuditLogEvent(ctx, req.(*CreateAuditLogEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackendService_DisableOrganizationLogins_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DisableOrganizationLoginsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackendServiceServer).DisableOrganizationLogins(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackendService_DisableOrganizationLogins_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackendServiceServer).DisableOrganizationLogins(ctx, req.(*DisableOrganizationLoginsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackendService_DisableProjectLogins_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DisableProjectLoginsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackendServiceServer).DisableProjectLogins(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackendService_DisableProjectLogins_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackendServiceServer).DisableProjectLogins(ctx, req.(*DisableProjectLoginsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackendService_EnableOrganizationLogins_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnableOrganizationLoginsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackendServiceServer).EnableOrganizationLogins(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackendService_EnableOrganizationLogins_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackendServiceServer).EnableOrganizationLogins(ctx, req.(*EnableOrganizationLoginsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackendService_EnableProjectLogins_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnableProjectLoginsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackendServiceServer).EnableProjectLogins(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackendService_EnableProjectLogins_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackendServiceServer).EnableProjectLogins(ctx, req.(*EnableProjectLoginsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackendService_UpdateProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackendServiceServer).UpdateProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackendService_UpdateProject_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackendServiceServer).UpdateProject(ctx, req.(*UpdateProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackendService_GetVaultDomainSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVaultDomainSettingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackendServiceServer).GetVaultDomainSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackendService_GetVaultDomainSettings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackendServiceServer).GetVaultDomainSettings(ctx, req.(*GetVaultDomainSettingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackendService_UpdateVaultDomainSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateVaultDomainSettingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackendServiceServer).UpdateVaultDomainSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackendService_UpdateVaultDomainSettings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackendServiceServer).UpdateVaultDomainSettings(ctx, req.(*UpdateVaultDomainSettingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackendService_EnableCustomVaultDomain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnableCustomVaultDomainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackendServiceServer).EnableCustomVaultDomain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackendService_EnableCustomVaultDomain_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackendServiceServer).EnableCustomVaultDomain(ctx, req.(*EnableCustomVaultDomainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackendService_EnableEmailSendFromDomain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnableEmailSendFromDomainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackendServiceServer).EnableEmailSendFromDomain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackendService_EnableEmailSendFromDomain_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackendServiceServer).EnableEmailSendFromDomain(ctx, req.(*EnableEmailSendFromDomainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackendService_GetProjectUISettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProjectUISettingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackendServiceServer).GetProjectUISettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackendService_GetProjectUISettings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackendServiceServer).GetProjectUISettings(ctx, req.(*GetProjectUISettingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackendService_UpdateProjectUISettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateProjectUISettingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackendServiceServer).UpdateProjectUISettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackendService_UpdateProjectUISettings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackendServiceServer).UpdateProjectUISettings(ctx, req.(*UpdateProjectUISettingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackendService_ListBackendAPIKeys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListBackendAPIKeysRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackendServiceServer).ListBackendAPIKeys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackendService_ListBackendAPIKeys_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackendServiceServer).ListBackendAPIKeys(ctx, req.(*ListBackendAPIKeysRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackendService_GetBackendAPIKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBackendAPIKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackendServiceServer).GetBackendAPIKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackendService_GetBackendAPIKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackendServiceServer).GetBackendAPIKey(ctx, req.(*GetBackendAPIKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackendService_CreateBackendAPIKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBackendAPIKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackendServiceServer).CreateBackendAPIKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackendService_CreateBackendAPIKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackendServiceServer).CreateBackendAPIKey(ctx, req.(*CreateBackendAPIKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackendService_UpdateBackendAPIKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBackendAPIKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackendServiceServer).UpdateBackendAPIKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackendService_UpdateBackendAPIKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackendServiceServer).UpdateBackendAPIKey(ctx, req.(*UpdateBackendAPIKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackendService_DeleteBackendAPIKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteBackendAPIKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackendServiceServer).DeleteBackendAPIKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackendService_DeleteBackendAPIKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackendServiceServer).DeleteBackendAPIKey(ctx, req.(*DeleteBackendAPIKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackendService_RevokeBackendAPIKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RevokeBackendAPIKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackendServiceServer).RevokeBackendAPIKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackendService_RevokeBackendAPIKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackendServiceServer).RevokeBackendAPIKey(ctx, req.(*RevokeBackendAPIKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackendService_ListPublishableKeys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPublishableKeysRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackendServiceServer).ListPublishableKeys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackendService_ListPublishableKeys_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackendServiceServer).ListPublishableKeys(ctx, req.(*ListPublishableKeysRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackendService_GetPublishableKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPublishableKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackendServiceServer).GetPublishableKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackendService_GetPublishableKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackendServiceServer).GetPublishableKey(ctx, req.(*GetPublishableKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackendService_CreatePublishableKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePublishableKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackendServiceServer).CreatePublishableKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackendService_CreatePublishableKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackendServiceServer).CreatePublishableKey(ctx, req.(*CreatePublishableKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackendService_UpdatePublishableKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePublishableKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackendServiceServer).UpdatePublishableKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackendService_UpdatePublishableKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackendServiceServer).UpdatePublishableKey(ctx, req.(*UpdatePublishableKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackendService_DeletePublishableKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePublishableKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackendServiceServer).DeletePublishableKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackendService_DeletePublishableKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackendServiceServer).DeletePublishableKey(ctx, req.(*DeletePublishableKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackendService_CreateUserImpersonationToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserImpersonationTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackendServiceServer).CreateUserImpersonationToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackendService_CreateUserImpersonationToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackendServiceServer).CreateUserImpersonationToken(ctx, req.(*CreateUserImpersonationTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackendService_GetProjectEntitlements_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProjectEntitlementsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackendServiceServer).GetProjectEntitlements(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackendService_GetProjectEntitlements_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackendServiceServer).GetProjectEntitlements(ctx, req.(*GetProjectEntitlementsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackendService_CreateStripeCheckoutLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateStripeCheckoutLinkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackendServiceServer).CreateStripeCheckoutLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackendService_CreateStripeCheckoutLink_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackendServiceServer).CreateStripeCheckoutLink(ctx, req.(*CreateStripeCheckoutLinkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackendService_GetProjectWebhookManagementURL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProjectWebhookManagementURLRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackendServiceServer).GetProjectWebhookManagementURL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackendService_GetProjectWebhookManagementURL_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackendServiceServer).GetProjectWebhookManagementURL(ctx, req.(*GetProjectWebhookManagementURLRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackendService_ConsoleListAuditLogEvents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConsoleListAuditLogEventsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackendServiceServer).ConsoleListAuditLogEvents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackendService_ConsoleListAuditLogEvents_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackendServiceServer).ConsoleListAuditLogEvents(ctx, req.(*ConsoleListAuditLogEventsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackendService_ConsoleListAuditLogEventNames_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConsoleListAuditLogEventNamesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackendServiceServer).ConsoleListAuditLogEventNames(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackendService_ConsoleListAuditLogEventNames_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackendServiceServer).ConsoleListAuditLogEventNames(ctx, req.(*ConsoleListAuditLogEventNamesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackendService_ConsoleSearch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConsoleSearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackendServiceServer).ConsoleSearch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackendService_ConsoleSearch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackendServiceServer).ConsoleSearch(ctx, req.(*ConsoleSearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BackendService_ServiceDesc is the grpc.ServiceDesc for BackendService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BackendService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "tesseral.backend.v1.BackendService",
	HandlerType: (*BackendServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetProject",
			Handler:    _BackendService_GetProject_Handler,
		},
		{
			MethodName: "ListOrganizations",
			Handler:    _BackendService_ListOrganizations_Handler,
		},
		{
			MethodName: "GetOrganization",
			Handler:    _BackendService_GetOrganization_Handler,
		},
		{
			MethodName: "CreateOrganization",
			Handler:    _BackendService_CreateOrganization_Handler,
		},
		{
			MethodName: "UpdateOrganization",
			Handler:    _BackendService_UpdateOrganization_Handler,
		},
		{
			MethodName: "DeleteOrganization",
			Handler:    _BackendService_DeleteOrganization_Handler,
		},
		{
			MethodName: "GetOrganizationDomains",
			Handler:    _BackendService_GetOrganizationDomains_Handler,
		},
		{
			MethodName: "UpdateOrganizationDomains",
			Handler:    _BackendService_UpdateOrganizationDomains_Handler,
		},
		{
			MethodName: "GetOrganizationGoogleHostedDomains",
			Handler:    _BackendService_GetOrganizationGoogleHostedDomains_Handler,
		},
		{
			MethodName: "UpdateOrganizationGoogleHostedDomains",
			Handler:    _BackendService_UpdateOrganizationGoogleHostedDomains_Handler,
		},
		{
			MethodName: "GetOrganizationMicrosoftTenantIDs",
			Handler:    _BackendService_GetOrganizationMicrosoftTenantIDs_Handler,
		},
		{
			MethodName: "UpdateOrganizationMicrosoftTenantIDs",
			Handler:    _BackendService_UpdateOrganizationMicrosoftTenantIDs_Handler,
		},
		{
			MethodName: "ListSAMLConnections",
			Handler:    _BackendService_ListSAMLConnections_Handler,
		},
		{
			MethodName: "GetSAMLConnection",
			Handler:    _BackendService_GetSAMLConnection_Handler,
		},
		{
			MethodName: "CreateSAMLConnection",
			Handler:    _BackendService_CreateSAMLConnection_Handler,
		},
		{
			MethodName: "UpdateSAMLConnection",
			Handler:    _BackendService_UpdateSAMLConnection_Handler,
		},
		{
			MethodName: "DeleteSAMLConnection",
			Handler:    _BackendService_DeleteSAMLConnection_Handler,
		},
		{
			MethodName: "ListSCIMAPIKeys",
			Handler:    _BackendService_ListSCIMAPIKeys_Handler,
		},
		{
			MethodName: "GetSCIMAPIKey",
			Handler:    _BackendService_GetSCIMAPIKey_Handler,
		},
		{
			MethodName: "CreateSCIMAPIKey",
			Handler:    _BackendService_CreateSCIMAPIKey_Handler,
		},
		{
			MethodName: "UpdateSCIMAPIKey",
			Handler:    _BackendService_UpdateSCIMAPIKey_Handler,
		},
		{
			MethodName: "DeleteSCIMAPIKey",
			Handler:    _BackendService_DeleteSCIMAPIKey_Handler,
		},
		{
			MethodName: "RevokeSCIMAPIKey",
			Handler:    _BackendService_RevokeSCIMAPIKey_Handler,
		},
		{
			MethodName: "ListUsers",
			Handler:    _BackendService_ListUsers_Handler,
		},
		{
			MethodName: "GetUser",
			Handler:    _BackendService_GetUser_Handler,
		},
		{
			MethodName: "CreateUser",
			Handler:    _BackendService_CreateUser_Handler,
		},
		{
			MethodName: "UpdateUser",
			Handler:    _BackendService_UpdateUser_Handler,
		},
		{
			MethodName: "DeleteUser",
			Handler:    _BackendService_DeleteUser_Handler,
		},
		{
			MethodName: "ListPasskeys",
			Handler:    _BackendService_ListPasskeys_Handler,
		},
		{
			MethodName: "GetPasskey",
			Handler:    _BackendService_GetPasskey_Handler,
		},
		{
			MethodName: "UpdatePasskey",
			Handler:    _BackendService_UpdatePasskey_Handler,
		},
		{
			MethodName: "DeletePasskey",
			Handler:    _BackendService_DeletePasskey_Handler,
		},
		{
			MethodName: "ListSessions",
			Handler:    _BackendService_ListSessions_Handler,
		},
		{
			MethodName: "GetSession",
			Handler:    _BackendService_GetSession_Handler,
		},
		{
			MethodName: "ListUserInvites",
			Handler:    _BackendService_ListUserInvites_Handler,
		},
		{
			MethodName: "GetUserInvite",
			Handler:    _BackendService_GetUserInvite_Handler,
		},
		{
			MethodName: "CreateUserInvite",
			Handler:    _BackendService_CreateUserInvite_Handler,
		},
		{
			MethodName: "DeleteUserInvite",
			Handler:    _BackendService_DeleteUserInvite_Handler,
		},
		{
			MethodName: "GetRBACPolicy",
			Handler:    _BackendService_GetRBACPolicy_Handler,
		},
		{
			MethodName: "UpdateRBACPolicy",
			Handler:    _BackendService_UpdateRBACPolicy_Handler,
		},
		{
			MethodName: "ListRoles",
			Handler:    _BackendService_ListRoles_Handler,
		},
		{
			MethodName: "GetRole",
			Handler:    _BackendService_GetRole_Handler,
		},
		{
			MethodName: "CreateRole",
			Handler:    _BackendService_CreateRole_Handler,
		},
		{
			MethodName: "UpdateRole",
			Handler:    _BackendService_UpdateRole_Handler,
		},
		{
			MethodName: "DeleteRole",
			Handler:    _BackendService_DeleteRole_Handler,
		},
		{
			MethodName: "ListUserRoleAssignments",
			Handler:    _BackendService_ListUserRoleAssignments_Handler,
		},
		{
			MethodName: "GetUserRoleAssignment",
			Handler:    _BackendService_GetUserRoleAssignment_Handler,
		},
		{
			MethodName: "CreateUserRoleAssignment",
			Handler:    _BackendService_CreateUserRoleAssignment_Handler,
		},
		{
			MethodName: "DeleteUserRoleAssignment",
			Handler:    _BackendService_DeleteUserRoleAssignment_Handler,
		},
		{
			MethodName: "CreateAPIKey",
			Handler:    _BackendService_CreateAPIKey_Handler,
		},
		{
			MethodName: "DeleteAPIKey",
			Handler:    _BackendService_DeleteAPIKey_Handler,
		},
		{
			MethodName: "GetAPIKey",
			Handler:    _BackendService_GetAPIKey_Handler,
		},
		{
			MethodName: "ListAPIKeys",
			Handler:    _BackendService_ListAPIKeys_Handler,
		},
		{
			MethodName: "RevokeAPIKey",
			Handler:    _BackendService_RevokeAPIKey_Handler,
		},
		{
			MethodName: "UpdateAPIKey",
			Handler:    _BackendService_UpdateAPIKey_Handler,
		},
		{
			MethodName: "CreateAPIKeyRoleAssignment",
			Handler:    _BackendService_CreateAPIKeyRoleAssignment_Handler,
		},
		{
			MethodName: "DeleteAPIKeyRoleAssignment",
			Handler:    _BackendService_DeleteAPIKeyRoleAssignment_Handler,
		},
		{
			MethodName: "ListAPIKeyRoleAssignments",
			Handler:    _BackendService_ListAPIKeyRoleAssignments_Handler,
		},
		{
			MethodName: "AuthenticateAPIKey",
			Handler:    _BackendService_AuthenticateAPIKey_Handler,
		},
		{
			MethodName: "CreateAuditLogEvent",
			Handler:    _BackendService_CreateAuditLogEvent_Handler,
		},
		{
			MethodName: "DisableOrganizationLogins",
			Handler:    _BackendService_DisableOrganizationLogins_Handler,
		},
		{
			MethodName: "DisableProjectLogins",
			Handler:    _BackendService_DisableProjectLogins_Handler,
		},
		{
			MethodName: "EnableOrganizationLogins",
			Handler:    _BackendService_EnableOrganizationLogins_Handler,
		},
		{
			MethodName: "EnableProjectLogins",
			Handler:    _BackendService_EnableProjectLogins_Handler,
		},
		{
			MethodName: "UpdateProject",
			Handler:    _BackendService_UpdateProject_Handler,
		},
		{
			MethodName: "GetVaultDomainSettings",
			Handler:    _BackendService_GetVaultDomainSettings_Handler,
		},
		{
			MethodName: "UpdateVaultDomainSettings",
			Handler:    _BackendService_UpdateVaultDomainSettings_Handler,
		},
		{
			MethodName: "EnableCustomVaultDomain",
			Handler:    _BackendService_EnableCustomVaultDomain_Handler,
		},
		{
			MethodName: "EnableEmailSendFromDomain",
			Handler:    _BackendService_EnableEmailSendFromDomain_Handler,
		},
		{
			MethodName: "GetProjectUISettings",
			Handler:    _BackendService_GetProjectUISettings_Handler,
		},
		{
			MethodName: "UpdateProjectUISettings",
			Handler:    _BackendService_UpdateProjectUISettings_Handler,
		},
		{
			MethodName: "ListBackendAPIKeys",
			Handler:    _BackendService_ListBackendAPIKeys_Handler,
		},
		{
			MethodName: "GetBackendAPIKey",
			Handler:    _BackendService_GetBackendAPIKey_Handler,
		},
		{
			MethodName: "CreateBackendAPIKey",
			Handler:    _BackendService_CreateBackendAPIKey_Handler,
		},
		{
			MethodName: "UpdateBackendAPIKey",
			Handler:    _BackendService_UpdateBackendAPIKey_Handler,
		},
		{
			MethodName: "DeleteBackendAPIKey",
			Handler:    _BackendService_DeleteBackendAPIKey_Handler,
		},
		{
			MethodName: "RevokeBackendAPIKey",
			Handler:    _BackendService_RevokeBackendAPIKey_Handler,
		},
		{
			MethodName: "ListPublishableKeys",
			Handler:    _BackendService_ListPublishableKeys_Handler,
		},
		{
			MethodName: "GetPublishableKey",
			Handler:    _BackendService_GetPublishableKey_Handler,
		},
		{
			MethodName: "CreatePublishableKey",
			Handler:    _BackendService_CreatePublishableKey_Handler,
		},
		{
			MethodName: "UpdatePublishableKey",
			Handler:    _BackendService_UpdatePublishableKey_Handler,
		},
		{
			MethodName: "DeletePublishableKey",
			Handler:    _BackendService_DeletePublishableKey_Handler,
		},
		{
			MethodName: "CreateUserImpersonationToken",
			Handler:    _BackendService_CreateUserImpersonationToken_Handler,
		},
		{
			MethodName: "GetProjectEntitlements",
			Handler:    _BackendService_GetProjectEntitlements_Handler,
		},
		{
			MethodName: "CreateStripeCheckoutLink",
			Handler:    _BackendService_CreateStripeCheckoutLink_Handler,
		},
		{
			MethodName: "GetProjectWebhookManagementURL",
			Handler:    _BackendService_GetProjectWebhookManagementURL_Handler,
		},
		{
			MethodName: "ConsoleListAuditLogEvents",
			Handler:    _BackendService_ConsoleListAuditLogEvents_Handler,
		},
		{
			MethodName: "ConsoleListAuditLogEventNames",
			Handler:    _BackendService_ConsoleListAuditLogEventNames_Handler,
		},
		{
			MethodName: "ConsoleSearch",
			Handler:    _BackendService_ConsoleSearch_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "tesseral/backend/v1/backend.proto",
}
