// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        (unknown)
// source: tesseral/backend/v1/backend.proto

package backendv1

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GetProjectRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetProjectRequest) Reset() {
	*x = GetProjectRequest{}
	mi := &file_tesseral_backend_v1_backend_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetProjectRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProjectRequest) ProtoMessage() {}

func (x *GetProjectRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tesseral_backend_v1_backend_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProjectRequest.ProtoReflect.Descriptor instead.
func (*GetProjectRequest) Descriptor() ([]byte, []int) {
	return file_tesseral_backend_v1_backend_proto_rawDescGZIP(), []int{0}
}

type GetProjectResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Project       *Project               `protobuf:"bytes,1,opt,name=project,proto3" json:"project,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetProjectResponse) Reset() {
	*x = GetProjectResponse{}
	mi := &file_tesseral_backend_v1_backend_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetProjectResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProjectResponse) ProtoMessage() {}

func (x *GetProjectResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tesseral_backend_v1_backend_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProjectResponse.ProtoReflect.Descriptor instead.
func (*GetProjectResponse) Descriptor() ([]byte, []int) {
	return file_tesseral_backend_v1_backend_proto_rawDescGZIP(), []int{1}
}

func (x *GetProjectResponse) GetProject() *Project {
	if x != nil {
		return x.Project
	}
	return nil
}

type UpdateProjectRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Project       *Project               `protobuf:"bytes,1,opt,name=project,proto3" json:"project,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateProjectRequest) Reset() {
	*x = UpdateProjectRequest{}
	mi := &file_tesseral_backend_v1_backend_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateProjectRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateProjectRequest) ProtoMessage() {}

func (x *UpdateProjectRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tesseral_backend_v1_backend_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateProjectRequest.ProtoReflect.Descriptor instead.
func (*UpdateProjectRequest) Descriptor() ([]byte, []int) {
	return file_tesseral_backend_v1_backend_proto_rawDescGZIP(), []int{2}
}

func (x *UpdateProjectRequest) GetProject() *Project {
	if x != nil {
		return x.Project
	}
	return nil
}

type UpdateProjectResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Project       *Project               `protobuf:"bytes,1,opt,name=project,proto3" json:"project,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateProjectResponse) Reset() {
	*x = UpdateProjectResponse{}
	mi := &file_tesseral_backend_v1_backend_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateProjectResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateProjectResponse) ProtoMessage() {}

func (x *UpdateProjectResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tesseral_backend_v1_backend_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateProjectResponse.ProtoReflect.Descriptor instead.
func (*UpdateProjectResponse) Descriptor() ([]byte, []int) {
	return file_tesseral_backend_v1_backend_proto_rawDescGZIP(), []int{3}
}

func (x *UpdateProjectResponse) GetProject() *Project {
	if x != nil {
		return x.Project
	}
	return nil
}

type ListOrganizationsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PageToken     string                 `protobuf:"bytes,1,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListOrganizationsRequest) Reset() {
	*x = ListOrganizationsRequest{}
	mi := &file_tesseral_backend_v1_backend_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListOrganizationsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListOrganizationsRequest) ProtoMessage() {}

func (x *ListOrganizationsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tesseral_backend_v1_backend_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListOrganizationsRequest.ProtoReflect.Descriptor instead.
func (*ListOrganizationsRequest) Descriptor() ([]byte, []int) {
	return file_tesseral_backend_v1_backend_proto_rawDescGZIP(), []int{4}
}

func (x *ListOrganizationsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

type ListOrganizationsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Organizations []*Organization        `protobuf:"bytes,1,rep,name=organizations,proto3" json:"organizations,omitempty"`
	NextPageToken string                 `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListOrganizationsResponse) Reset() {
	*x = ListOrganizationsResponse{}
	mi := &file_tesseral_backend_v1_backend_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListOrganizationsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListOrganizationsResponse) ProtoMessage() {}

func (x *ListOrganizationsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tesseral_backend_v1_backend_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListOrganizationsResponse.ProtoReflect.Descriptor instead.
func (*ListOrganizationsResponse) Descriptor() ([]byte, []int) {
	return file_tesseral_backend_v1_backend_proto_rawDescGZIP(), []int{5}
}

func (x *ListOrganizationsResponse) GetOrganizations() []*Organization {
	if x != nil {
		return x.Organizations
	}
	return nil
}

func (x *ListOrganizationsResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

type GetOrganizationRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetOrganizationRequest) Reset() {
	*x = GetOrganizationRequest{}
	mi := &file_tesseral_backend_v1_backend_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetOrganizationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOrganizationRequest) ProtoMessage() {}

func (x *GetOrganizationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tesseral_backend_v1_backend_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOrganizationRequest.ProtoReflect.Descriptor instead.
func (*GetOrganizationRequest) Descriptor() ([]byte, []int) {
	return file_tesseral_backend_v1_backend_proto_rawDescGZIP(), []int{6}
}

func (x *GetOrganizationRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type GetOrganizationResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Organization  *Organization          `protobuf:"bytes,1,opt,name=organization,proto3" json:"organization,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetOrganizationResponse) Reset() {
	*x = GetOrganizationResponse{}
	mi := &file_tesseral_backend_v1_backend_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetOrganizationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOrganizationResponse) ProtoMessage() {}

func (x *GetOrganizationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tesseral_backend_v1_backend_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOrganizationResponse.ProtoReflect.Descriptor instead.
func (*GetOrganizationResponse) Descriptor() ([]byte, []int) {
	return file_tesseral_backend_v1_backend_proto_rawDescGZIP(), []int{7}
}

func (x *GetOrganizationResponse) GetOrganization() *Organization {
	if x != nil {
		return x.Organization
	}
	return nil
}

type CreateOrganizationRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Organization  *Organization          `protobuf:"bytes,1,opt,name=organization,proto3" json:"organization,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateOrganizationRequest) Reset() {
	*x = CreateOrganizationRequest{}
	mi := &file_tesseral_backend_v1_backend_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateOrganizationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateOrganizationRequest) ProtoMessage() {}

func (x *CreateOrganizationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tesseral_backend_v1_backend_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateOrganizationRequest.ProtoReflect.Descriptor instead.
func (*CreateOrganizationRequest) Descriptor() ([]byte, []int) {
	return file_tesseral_backend_v1_backend_proto_rawDescGZIP(), []int{8}
}

func (x *CreateOrganizationRequest) GetOrganization() *Organization {
	if x != nil {
		return x.Organization
	}
	return nil
}

type CreateOrganizationResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Organization  *Organization          `protobuf:"bytes,1,opt,name=organization,proto3" json:"organization,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateOrganizationResponse) Reset() {
	*x = CreateOrganizationResponse{}
	mi := &file_tesseral_backend_v1_backend_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateOrganizationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateOrganizationResponse) ProtoMessage() {}

func (x *CreateOrganizationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tesseral_backend_v1_backend_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateOrganizationResponse.ProtoReflect.Descriptor instead.
func (*CreateOrganizationResponse) Descriptor() ([]byte, []int) {
	return file_tesseral_backend_v1_backend_proto_rawDescGZIP(), []int{9}
}

func (x *CreateOrganizationResponse) GetOrganization() *Organization {
	if x != nil {
		return x.Organization
	}
	return nil
}

type UpdateOrganizationRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Organization  *Organization          `protobuf:"bytes,2,opt,name=organization,proto3" json:"organization,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateOrganizationRequest) Reset() {
	*x = UpdateOrganizationRequest{}
	mi := &file_tesseral_backend_v1_backend_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateOrganizationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateOrganizationRequest) ProtoMessage() {}

func (x *UpdateOrganizationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tesseral_backend_v1_backend_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateOrganizationRequest.ProtoReflect.Descriptor instead.
func (*UpdateOrganizationRequest) Descriptor() ([]byte, []int) {
	return file_tesseral_backend_v1_backend_proto_rawDescGZIP(), []int{10}
}

func (x *UpdateOrganizationRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateOrganizationRequest) GetOrganization() *Organization {
	if x != nil {
		return x.Organization
	}
	return nil
}

type UpdateOrganizationResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Organization  *Organization          `protobuf:"bytes,1,opt,name=organization,proto3" json:"organization,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateOrganizationResponse) Reset() {
	*x = UpdateOrganizationResponse{}
	mi := &file_tesseral_backend_v1_backend_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateOrganizationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateOrganizationResponse) ProtoMessage() {}

func (x *UpdateOrganizationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tesseral_backend_v1_backend_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateOrganizationResponse.ProtoReflect.Descriptor instead.
func (*UpdateOrganizationResponse) Descriptor() ([]byte, []int) {
	return file_tesseral_backend_v1_backend_proto_rawDescGZIP(), []int{11}
}

func (x *UpdateOrganizationResponse) GetOrganization() *Organization {
	if x != nil {
		return x.Organization
	}
	return nil
}

type DeleteOrganizationRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteOrganizationRequest) Reset() {
	*x = DeleteOrganizationRequest{}
	mi := &file_tesseral_backend_v1_backend_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteOrganizationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteOrganizationRequest) ProtoMessage() {}

func (x *DeleteOrganizationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tesseral_backend_v1_backend_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteOrganizationRequest.ProtoReflect.Descriptor instead.
func (*DeleteOrganizationRequest) Descriptor() ([]byte, []int) {
	return file_tesseral_backend_v1_backend_proto_rawDescGZIP(), []int{12}
}

func (x *DeleteOrganizationRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type DeleteOrganizationResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteOrganizationResponse) Reset() {
	*x = DeleteOrganizationResponse{}
	mi := &file_tesseral_backend_v1_backend_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteOrganizationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteOrganizationResponse) ProtoMessage() {}

func (x *DeleteOrganizationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tesseral_backend_v1_backend_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteOrganizationResponse.ProtoReflect.Descriptor instead.
func (*DeleteOrganizationResponse) Descriptor() ([]byte, []int) {
	return file_tesseral_backend_v1_backend_proto_rawDescGZIP(), []int{13}
}

type GetOrganizationGoogleHostedDomainsRequest struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	OrganizationId string                 `protobuf:"bytes,1,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *GetOrganizationGoogleHostedDomainsRequest) Reset() {
	*x = GetOrganizationGoogleHostedDomainsRequest{}
	mi := &file_tesseral_backend_v1_backend_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetOrganizationGoogleHostedDomainsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOrganizationGoogleHostedDomainsRequest) ProtoMessage() {}

func (x *GetOrganizationGoogleHostedDomainsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tesseral_backend_v1_backend_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOrganizationGoogleHostedDomainsRequest.ProtoReflect.Descriptor instead.
func (*GetOrganizationGoogleHostedDomainsRequest) Descriptor() ([]byte, []int) {
	return file_tesseral_backend_v1_backend_proto_rawDescGZIP(), []int{14}
}

func (x *GetOrganizationGoogleHostedDomainsRequest) GetOrganizationId() string {
	if x != nil {
		return x.OrganizationId
	}
	return ""
}

type GetOrganizationGoogleHostedDomainsResponse struct {
	state                           protoimpl.MessageState           `protogen:"open.v1"`
	OrganizationGoogleHostedDomains *OrganizationGoogleHostedDomains `protobuf:"bytes,1,opt,name=organization_google_hosted_domains,json=organizationGoogleHostedDomains,proto3" json:"organization_google_hosted_domains,omitempty"`
	unknownFields                   protoimpl.UnknownFields
	sizeCache                       protoimpl.SizeCache
}

func (x *GetOrganizationGoogleHostedDomainsResponse) Reset() {
	*x = GetOrganizationGoogleHostedDomainsResponse{}
	mi := &file_tesseral_backend_v1_backend_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetOrganizationGoogleHostedDomainsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOrganizationGoogleHostedDomainsResponse) ProtoMessage() {}

func (x *GetOrganizationGoogleHostedDomainsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tesseral_backend_v1_backend_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOrganizationGoogleHostedDomainsResponse.ProtoReflect.Descriptor instead.
func (*GetOrganizationGoogleHostedDomainsResponse) Descriptor() ([]byte, []int) {
	return file_tesseral_backend_v1_backend_proto_rawDescGZIP(), []int{15}
}

func (x *GetOrganizationGoogleHostedDomainsResponse) GetOrganizationGoogleHostedDomains() *OrganizationGoogleHostedDomains {
	if x != nil {
		return x.OrganizationGoogleHostedDomains
	}
	return nil
}

type UpdateOrganizationGoogleHostedDomainsRequest struct {
	state                           protoimpl.MessageState           `protogen:"open.v1"`
	OrganizationId                  string                           `protobuf:"bytes,1,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
	OrganizationGoogleHostedDomains *OrganizationGoogleHostedDomains `protobuf:"bytes,2,opt,name=organization_google_hosted_domains,json=organizationGoogleHostedDomains,proto3" json:"organization_google_hosted_domains,omitempty"`
	unknownFields                   protoimpl.UnknownFields
	sizeCache                       protoimpl.SizeCache
}

func (x *UpdateOrganizationGoogleHostedDomainsRequest) Reset() {
	*x = UpdateOrganizationGoogleHostedDomainsRequest{}
	mi := &file_tesseral_backend_v1_backend_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateOrganizationGoogleHostedDomainsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateOrganizationGoogleHostedDomainsRequest) ProtoMessage() {}

func (x *UpdateOrganizationGoogleHostedDomainsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tesseral_backend_v1_backend_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateOrganizationGoogleHostedDomainsRequest.ProtoReflect.Descriptor instead.
func (*UpdateOrganizationGoogleHostedDomainsRequest) Descriptor() ([]byte, []int) {
	return file_tesseral_backend_v1_backend_proto_rawDescGZIP(), []int{16}
}

func (x *UpdateOrganizationGoogleHostedDomainsRequest) GetOrganizationId() string {
	if x != nil {
		return x.OrganizationId
	}
	return ""
}

func (x *UpdateOrganizationGoogleHostedDomainsRequest) GetOrganizationGoogleHostedDomains() *OrganizationGoogleHostedDomains {
	if x != nil {
		return x.OrganizationGoogleHostedDomains
	}
	return nil
}

type UpdateOrganizationGoogleHostedDomainsResponse struct {
	state                           protoimpl.MessageState           `protogen:"open.v1"`
	OrganizationGoogleHostedDomains *OrganizationGoogleHostedDomains `protobuf:"bytes,1,opt,name=organization_google_hosted_domains,json=organizationGoogleHostedDomains,proto3" json:"organization_google_hosted_domains,omitempty"`
	unknownFields                   protoimpl.UnknownFields
	sizeCache                       protoimpl.SizeCache
}

func (x *UpdateOrganizationGoogleHostedDomainsResponse) Reset() {
	*x = UpdateOrganizationGoogleHostedDomainsResponse{}
	mi := &file_tesseral_backend_v1_backend_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateOrganizationGoogleHostedDomainsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateOrganizationGoogleHostedDomainsResponse) ProtoMessage() {}

func (x *UpdateOrganizationGoogleHostedDomainsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tesseral_backend_v1_backend_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateOrganizationGoogleHostedDomainsResponse.ProtoReflect.Descriptor instead.
func (*UpdateOrganizationGoogleHostedDomainsResponse) Descriptor() ([]byte, []int) {
	return file_tesseral_backend_v1_backend_proto_rawDescGZIP(), []int{17}
}

func (x *UpdateOrganizationGoogleHostedDomainsResponse) GetOrganizationGoogleHostedDomains() *OrganizationGoogleHostedDomains {
	if x != nil {
		return x.OrganizationGoogleHostedDomains
	}
	return nil
}

type GetOrganizationMicrosoftTenantIDsRequest struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	OrganizationId string                 `protobuf:"bytes,1,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *GetOrganizationMicrosoftTenantIDsRequest) Reset() {
	*x = GetOrganizationMicrosoftTenantIDsRequest{}
	mi := &file_tesseral_backend_v1_backend_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetOrganizationMicrosoftTenantIDsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOrganizationMicrosoftTenantIDsRequest) ProtoMessage() {}

func (x *GetOrganizationMicrosoftTenantIDsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tesseral_backend_v1_backend_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOrganizationMicrosoftTenantIDsRequest.ProtoReflect.Descriptor instead.
func (*GetOrganizationMicrosoftTenantIDsRequest) Descriptor() ([]byte, []int) {
	return file_tesseral_backend_v1_backend_proto_rawDescGZIP(), []int{18}
}

func (x *GetOrganizationMicrosoftTenantIDsRequest) GetOrganizationId() string {
	if x != nil {
		return x.OrganizationId
	}
	return ""
}

type GetOrganizationMicrosoftTenantIDsResponse struct {
	state                          protoimpl.MessageState          `protogen:"open.v1"`
	OrganizationMicrosoftTenantIds *OrganizationMicrosoftTenantIDs `protobuf:"bytes,1,opt,name=organization_microsoft_tenant_ids,json=organizationMicrosoftTenantIds,proto3" json:"organization_microsoft_tenant_ids,omitempty"`
	unknownFields                  protoimpl.UnknownFields
	sizeCache                      protoimpl.SizeCache
}

func (x *GetOrganizationMicrosoftTenantIDsResponse) Reset() {
	*x = GetOrganizationMicrosoftTenantIDsResponse{}
	mi := &file_tesseral_backend_v1_backend_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetOrganizationMicrosoftTenantIDsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOrganizationMicrosoftTenantIDsResponse) ProtoMessage() {}

func (x *GetOrganizationMicrosoftTenantIDsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tesseral_backend_v1_backend_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOrganizationMicrosoftTenantIDsResponse.ProtoReflect.Descriptor instead.
func (*GetOrganizationMicrosoftTenantIDsResponse) Descriptor() ([]byte, []int) {
	return file_tesseral_backend_v1_backend_proto_rawDescGZIP(), []int{19}
}

func (x *GetOrganizationMicrosoftTenantIDsResponse) GetOrganizationMicrosoftTenantIds() *OrganizationMicrosoftTenantIDs {
	if x != nil {
		return x.OrganizationMicrosoftTenantIds
	}
	return nil
}

type UpdateOrganizationMicrosoftTenantIDsRequest struct {
	state                          protoimpl.MessageState          `protogen:"open.v1"`
	OrganizationId                 string                          `protobuf:"bytes,1,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
	OrganizationMicrosoftTenantIds *OrganizationMicrosoftTenantIDs `protobuf:"bytes,2,opt,name=organization_microsoft_tenant_ids,json=organizationMicrosoftTenantIds,proto3" json:"organization_microsoft_tenant_ids,omitempty"`
	unknownFields                  protoimpl.UnknownFields
	sizeCache                      protoimpl.SizeCache
}

func (x *UpdateOrganizationMicrosoftTenantIDsRequest) Reset() {
	*x = UpdateOrganizationMicrosoftTenantIDsRequest{}
	mi := &file_tesseral_backend_v1_backend_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateOrganizationMicrosoftTenantIDsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateOrganizationMicrosoftTenantIDsRequest) ProtoMessage() {}

func (x *UpdateOrganizationMicrosoftTenantIDsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tesseral_backend_v1_backend_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateOrganizationMicrosoftTenantIDsRequest.ProtoReflect.Descriptor instead.
func (*UpdateOrganizationMicrosoftTenantIDsRequest) Descriptor() ([]byte, []int) {
	return file_tesseral_backend_v1_backend_proto_rawDescGZIP(), []int{20}
}

func (x *UpdateOrganizationMicrosoftTenantIDsRequest) GetOrganizationId() string {
	if x != nil {
		return x.OrganizationId
	}
	return ""
}

func (x *UpdateOrganizationMicrosoftTenantIDsRequest) GetOrganizationMicrosoftTenantIds() *OrganizationMicrosoftTenantIDs {
	if x != nil {
		return x.OrganizationMicrosoftTenantIds
	}
	return nil
}

type UpdateOrganizationMicrosoftTenantIDsResponse struct {
	state                          protoimpl.MessageState          `protogen:"open.v1"`
	OrganizationMicrosoftTenantIds *OrganizationMicrosoftTenantIDs `protobuf:"bytes,1,opt,name=organization_microsoft_tenant_ids,json=organizationMicrosoftTenantIds,proto3" json:"organization_microsoft_tenant_ids,omitempty"`
	unknownFields                  protoimpl.UnknownFields
	sizeCache                      protoimpl.SizeCache
}

func (x *UpdateOrganizationMicrosoftTenantIDsResponse) Reset() {
	*x = UpdateOrganizationMicrosoftTenantIDsResponse{}
	mi := &file_tesseral_backend_v1_backend_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateOrganizationMicrosoftTenantIDsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateOrganizationMicrosoftTenantIDsResponse) ProtoMessage() {}

func (x *UpdateOrganizationMicrosoftTenantIDsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tesseral_backend_v1_backend_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateOrganizationMicrosoftTenantIDsResponse.ProtoReflect.Descriptor instead.
func (*UpdateOrganizationMicrosoftTenantIDsResponse) Descriptor() ([]byte, []int) {
	return file_tesseral_backend_v1_backend_proto_rawDescGZIP(), []int{21}
}

func (x *UpdateOrganizationMicrosoftTenantIDsResponse) GetOrganizationMicrosoftTenantIds() *OrganizationMicrosoftTenantIDs {
	if x != nil {
		return x.OrganizationMicrosoftTenantIds
	}
	return nil
}

type CreateSAMLConnectionRequest struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	SamlConnection *SAMLConnection        `protobuf:"bytes,1,opt,name=saml_connection,json=samlConnection,proto3" json:"saml_connection,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *CreateSAMLConnectionRequest) Reset() {
	*x = CreateSAMLConnectionRequest{}
	mi := &file_tesseral_backend_v1_backend_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateSAMLConnectionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSAMLConnectionRequest) ProtoMessage() {}

func (x *CreateSAMLConnectionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tesseral_backend_v1_backend_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSAMLConnectionRequest.ProtoReflect.Descriptor instead.
func (*CreateSAMLConnectionRequest) Descriptor() ([]byte, []int) {
	return file_tesseral_backend_v1_backend_proto_rawDescGZIP(), []int{22}
}

func (x *CreateSAMLConnectionRequest) GetSamlConnection() *SAMLConnection {
	if x != nil {
		return x.SamlConnection
	}
	return nil
}

type CreateSAMLConnectionResponse struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	SamlConnection *SAMLConnection        `protobuf:"bytes,1,opt,name=saml_connection,json=samlConnection,proto3" json:"saml_connection,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *CreateSAMLConnectionResponse) Reset() {
	*x = CreateSAMLConnectionResponse{}
	mi := &file_tesseral_backend_v1_backend_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateSAMLConnectionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSAMLConnectionResponse) ProtoMessage() {}

func (x *CreateSAMLConnectionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tesseral_backend_v1_backend_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSAMLConnectionResponse.ProtoReflect.Descriptor instead.
func (*CreateSAMLConnectionResponse) Descriptor() ([]byte, []int) {
	return file_tesseral_backend_v1_backend_proto_rawDescGZIP(), []int{23}
}

func (x *CreateSAMLConnectionResponse) GetSamlConnection() *SAMLConnection {
	if x != nil {
		return x.SamlConnection
	}
	return nil
}

type GetSAMLConnectionRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetSAMLConnectionRequest) Reset() {
	*x = GetSAMLConnectionRequest{}
	mi := &file_tesseral_backend_v1_backend_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetSAMLConnectionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSAMLConnectionRequest) ProtoMessage() {}

func (x *GetSAMLConnectionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tesseral_backend_v1_backend_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSAMLConnectionRequest.ProtoReflect.Descriptor instead.
func (*GetSAMLConnectionRequest) Descriptor() ([]byte, []int) {
	return file_tesseral_backend_v1_backend_proto_rawDescGZIP(), []int{24}
}

func (x *GetSAMLConnectionRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type GetSAMLConnectionResponse struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	SamlConnection *SAMLConnection        `protobuf:"bytes,1,opt,name=saml_connection,json=samlConnection,proto3" json:"saml_connection,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *GetSAMLConnectionResponse) Reset() {
	*x = GetSAMLConnectionResponse{}
	mi := &file_tesseral_backend_v1_backend_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetSAMLConnectionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSAMLConnectionResponse) ProtoMessage() {}

func (x *GetSAMLConnectionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tesseral_backend_v1_backend_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSAMLConnectionResponse.ProtoReflect.Descriptor instead.
func (*GetSAMLConnectionResponse) Descriptor() ([]byte, []int) {
	return file_tesseral_backend_v1_backend_proto_rawDescGZIP(), []int{25}
}

func (x *GetSAMLConnectionResponse) GetSamlConnection() *SAMLConnection {
	if x != nil {
		return x.SamlConnection
	}
	return nil
}

type ListSAMLConnectionsRequest struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	OrganizationId string                 `protobuf:"bytes,1,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
	PageToken      string                 `protobuf:"bytes,2,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *ListSAMLConnectionsRequest) Reset() {
	*x = ListSAMLConnectionsRequest{}
	mi := &file_tesseral_backend_v1_backend_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListSAMLConnectionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSAMLConnectionsRequest) ProtoMessage() {}

func (x *ListSAMLConnectionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tesseral_backend_v1_backend_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSAMLConnectionsRequest.ProtoReflect.Descriptor instead.
func (*ListSAMLConnectionsRequest) Descriptor() ([]byte, []int) {
	return file_tesseral_backend_v1_backend_proto_rawDescGZIP(), []int{26}
}

func (x *ListSAMLConnectionsRequest) GetOrganizationId() string {
	if x != nil {
		return x.OrganizationId
	}
	return ""
}

func (x *ListSAMLConnectionsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

type ListSAMLConnectionsResponse struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	SamlConnections []*SAMLConnection      `protobuf:"bytes,1,rep,name=saml_connections,json=samlConnections,proto3" json:"saml_connections,omitempty"`
	NextPageToken   string                 `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *ListSAMLConnectionsResponse) Reset() {
	*x = ListSAMLConnectionsResponse{}
	mi := &file_tesseral_backend_v1_backend_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListSAMLConnectionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSAMLConnectionsResponse) ProtoMessage() {}

func (x *ListSAMLConnectionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tesseral_backend_v1_backend_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSAMLConnectionsResponse.ProtoReflect.Descriptor instead.
func (*ListSAMLConnectionsResponse) Descriptor() ([]byte, []int) {
	return file_tesseral_backend_v1_backend_proto_rawDescGZIP(), []int{27}
}

func (x *ListSAMLConnectionsResponse) GetSamlConnections() []*SAMLConnection {
	if x != nil {
		return x.SamlConnections
	}
	return nil
}

func (x *ListSAMLConnectionsResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

type UpdateSAMLConnectionRequest struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Id             string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	SamlConnection *SAMLConnection        `protobuf:"bytes,2,opt,name=saml_connection,json=samlConnection,proto3" json:"saml_connection,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *UpdateSAMLConnectionRequest) Reset() {
	*x = UpdateSAMLConnectionRequest{}
	mi := &file_tesseral_backend_v1_backend_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateSAMLConnectionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSAMLConnectionRequest) ProtoMessage() {}

func (x *UpdateSAMLConnectionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tesseral_backend_v1_backend_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSAMLConnectionRequest.ProtoReflect.Descriptor instead.
func (*UpdateSAMLConnectionRequest) Descriptor() ([]byte, []int) {
	return file_tesseral_backend_v1_backend_proto_rawDescGZIP(), []int{28}
}

func (x *UpdateSAMLConnectionRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateSAMLConnectionRequest) GetSamlConnection() *SAMLConnection {
	if x != nil {
		return x.SamlConnection
	}
	return nil
}

type UpdateSAMLConnectionResponse struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	SamlConnection *SAMLConnection        `protobuf:"bytes,1,opt,name=saml_connection,json=samlConnection,proto3" json:"saml_connection,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *UpdateSAMLConnectionResponse) Reset() {
	*x = UpdateSAMLConnectionResponse{}
	mi := &file_tesseral_backend_v1_backend_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateSAMLConnectionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSAMLConnectionResponse) ProtoMessage() {}

func (x *UpdateSAMLConnectionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tesseral_backend_v1_backend_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSAMLConnectionResponse.ProtoReflect.Descriptor instead.
func (*UpdateSAMLConnectionResponse) Descriptor() ([]byte, []int) {
	return file_tesseral_backend_v1_backend_proto_rawDescGZIP(), []int{29}
}

func (x *UpdateSAMLConnectionResponse) GetSamlConnection() *SAMLConnection {
	if x != nil {
		return x.SamlConnection
	}
	return nil
}

type DeleteSAMLConnectionRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteSAMLConnectionRequest) Reset() {
	*x = DeleteSAMLConnectionRequest{}
	mi := &file_tesseral_backend_v1_backend_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteSAMLConnectionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteSAMLConnectionRequest) ProtoMessage() {}

func (x *DeleteSAMLConnectionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tesseral_backend_v1_backend_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteSAMLConnectionRequest.ProtoReflect.Descriptor instead.
func (*DeleteSAMLConnectionRequest) Descriptor() ([]byte, []int) {
	return file_tesseral_backend_v1_backend_proto_rawDescGZIP(), []int{30}
}

func (x *DeleteSAMLConnectionRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type DeleteSAMLConnectionResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteSAMLConnectionResponse) Reset() {
	*x = DeleteSAMLConnectionResponse{}
	mi := &file_tesseral_backend_v1_backend_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteSAMLConnectionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteSAMLConnectionResponse) ProtoMessage() {}

func (x *DeleteSAMLConnectionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tesseral_backend_v1_backend_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteSAMLConnectionResponse.ProtoReflect.Descriptor instead.
func (*DeleteSAMLConnectionResponse) Descriptor() ([]byte, []int) {
	return file_tesseral_backend_v1_backend_proto_rawDescGZIP(), []int{31}
}

type ListSCIMAPIKeysRequest struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	OrganizationId string                 `protobuf:"bytes,1,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
	PageToken      string                 `protobuf:"bytes,2,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *ListSCIMAPIKeysRequest) Reset() {
	*x = ListSCIMAPIKeysRequest{}
	mi := &file_tesseral_backend_v1_backend_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListSCIMAPIKeysRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSCIMAPIKeysRequest) ProtoMessage() {}

func (x *ListSCIMAPIKeysRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tesseral_backend_v1_backend_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSCIMAPIKeysRequest.ProtoReflect.Descriptor instead.
func (*ListSCIMAPIKeysRequest) Descriptor() ([]byte, []int) {
	return file_tesseral_backend_v1_backend_proto_rawDescGZIP(), []int{32}
}

func (x *ListSCIMAPIKeysRequest) GetOrganizationId() string {
	if x != nil {
		return x.OrganizationId
	}
	return ""
}

func (x *ListSCIMAPIKeysRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

type ListSCIMAPIKeysResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ScimApiKeys   []*SCIMAPIKey          `protobuf:"bytes,1,rep,name=scim_api_keys,json=scimApiKeys,proto3" json:"scim_api_keys,omitempty"`
	NextPageToken string                 `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListSCIMAPIKeysResponse) Reset() {
	*x = ListSCIMAPIKeysResponse{}
	mi := &file_tesseral_backend_v1_backend_proto_msgTypes[33]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListSCIMAPIKeysResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSCIMAPIKeysResponse) ProtoMessage() {}

func (x *ListSCIMAPIKeysResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tesseral_backend_v1_backend_proto_msgTypes[33]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSCIMAPIKeysResponse.ProtoReflect.Descriptor instead.
func (*ListSCIMAPIKeysResponse) Descriptor() ([]byte, []int) {
	return file_tesseral_backend_v1_backend_proto_rawDescGZIP(), []int{33}
}

func (x *ListSCIMAPIKeysResponse) GetScimApiKeys() []*SCIMAPIKey {
	if x != nil {
		return x.ScimApiKeys
	}
	return nil
}

func (x *ListSCIMAPIKeysResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

type GetSCIMAPIKeyRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetSCIMAPIKeyRequest) Reset() {
	*x = GetSCIMAPIKeyRequest{}
	mi := &file_tesseral_backend_v1_backend_proto_msgTypes[34]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetSCIMAPIKeyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSCIMAPIKeyRequest) ProtoMessage() {}

func (x *GetSCIMAPIKeyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tesseral_backend_v1_backend_proto_msgTypes[34]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSCIMAPIKeyRequest.ProtoReflect.Descriptor instead.
func (*GetSCIMAPIKeyRequest) Descriptor() ([]byte, []int) {
	return file_tesseral_backend_v1_backend_proto_rawDescGZIP(), []int{34}
}

func (x *GetSCIMAPIKeyRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type GetSCIMAPIKeyResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ScimApiKey    *SCIMAPIKey            `protobuf:"bytes,1,opt,name=scim_api_key,json=scimApiKey,proto3" json:"scim_api_key,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetSCIMAPIKeyResponse) Reset() {
	*x = GetSCIMAPIKeyResponse{}
	mi := &file_tesseral_backend_v1_backend_proto_msgTypes[35]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetSCIMAPIKeyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSCIMAPIKeyResponse) ProtoMessage() {}

func (x *GetSCIMAPIKeyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tesseral_backend_v1_backend_proto_msgTypes[35]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSCIMAPIKeyResponse.ProtoReflect.Descriptor instead.
func (*GetSCIMAPIKeyResponse) Descriptor() ([]byte, []int) {
	return file_tesseral_backend_v1_backend_proto_rawDescGZIP(), []int{35}
}

func (x *GetSCIMAPIKeyResponse) GetScimApiKey() *SCIMAPIKey {
	if x != nil {
		return x.ScimApiKey
	}
	return nil
}

type CreateSCIMAPIKeyRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ScimApiKey    *SCIMAPIKey            `protobuf:"bytes,1,opt,name=scim_api_key,json=scimApiKey,proto3" json:"scim_api_key,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateSCIMAPIKeyRequest) Reset() {
	*x = CreateSCIMAPIKeyRequest{}
	mi := &file_tesseral_backend_v1_backend_proto_msgTypes[36]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateSCIMAPIKeyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSCIMAPIKeyRequest) ProtoMessage() {}

func (x *CreateSCIMAPIKeyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tesseral_backend_v1_backend_proto_msgTypes[36]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSCIMAPIKeyRequest.ProtoReflect.Descriptor instead.
func (*CreateSCIMAPIKeyRequest) Descriptor() ([]byte, []int) {
	return file_tesseral_backend_v1_backend_proto_rawDescGZIP(), []int{36}
}

func (x *CreateSCIMAPIKeyRequest) GetScimApiKey() *SCIMAPIKey {
	if x != nil {
		return x.ScimApiKey
	}
	return nil
}

type CreateSCIMAPIKeyResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ScimApiKey    *SCIMAPIKey            `protobuf:"bytes,1,opt,name=scim_api_key,json=scimApiKey,proto3" json:"scim_api_key,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateSCIMAPIKeyResponse) Reset() {
	*x = CreateSCIMAPIKeyResponse{}
	mi := &file_tesseral_backend_v1_backend_proto_msgTypes[37]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateSCIMAPIKeyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSCIMAPIKeyResponse) ProtoMessage() {}

func (x *CreateSCIMAPIKeyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tesseral_backend_v1_backend_proto_msgTypes[37]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSCIMAPIKeyResponse.ProtoReflect.Descriptor instead.
func (*CreateSCIMAPIKeyResponse) Descriptor() ([]byte, []int) {
	return file_tesseral_backend_v1_backend_proto_rawDescGZIP(), []int{37}
}

func (x *CreateSCIMAPIKeyResponse) GetScimApiKey() *SCIMAPIKey {
	if x != nil {
		return x.ScimApiKey
	}
	return nil
}

type UpdateSCIMAPIKeyRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	ScimApiKey    *SCIMAPIKey            `protobuf:"bytes,2,opt,name=scim_api_key,json=scimApiKey,proto3" json:"scim_api_key,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateSCIMAPIKeyRequest) Reset() {
	*x = UpdateSCIMAPIKeyRequest{}
	mi := &file_tesseral_backend_v1_backend_proto_msgTypes[38]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateSCIMAPIKeyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSCIMAPIKeyRequest) ProtoMessage() {}

func (x *UpdateSCIMAPIKeyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tesseral_backend_v1_backend_proto_msgTypes[38]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSCIMAPIKeyRequest.ProtoReflect.Descriptor instead.
func (*UpdateSCIMAPIKeyRequest) Descriptor() ([]byte, []int) {
	return file_tesseral_backend_v1_backend_proto_rawDescGZIP(), []int{38}
}

func (x *UpdateSCIMAPIKeyRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateSCIMAPIKeyRequest) GetScimApiKey() *SCIMAPIKey {
	if x != nil {
		return x.ScimApiKey
	}
	return nil
}

type UpdateSCIMAPIKeyResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ScimApiKey    *SCIMAPIKey            `protobuf:"bytes,1,opt,name=scim_api_key,json=scimApiKey,proto3" json:"scim_api_key,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateSCIMAPIKeyResponse) Reset() {
	*x = UpdateSCIMAPIKeyResponse{}
	mi := &file_tesseral_backend_v1_backend_proto_msgTypes[39]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateSCIMAPIKeyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSCIMAPIKeyResponse) ProtoMessage() {}

func (x *UpdateSCIMAPIKeyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tesseral_backend_v1_backend_proto_msgTypes[39]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSCIMAPIKeyResponse.ProtoReflect.Descriptor instead.
func (*UpdateSCIMAPIKeyResponse) Descriptor() ([]byte, []int) {
	return file_tesseral_backend_v1_backend_proto_rawDescGZIP(), []int{39}
}

func (x *UpdateSCIMAPIKeyResponse) GetScimApiKey() *SCIMAPIKey {
	if x != nil {
		return x.ScimApiKey
	}
	return nil
}

type DeleteSCIMAPIKeyRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteSCIMAPIKeyRequest) Reset() {
	*x = DeleteSCIMAPIKeyRequest{}
	mi := &file_tesseral_backend_v1_backend_proto_msgTypes[40]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteSCIMAPIKeyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteSCIMAPIKeyRequest) ProtoMessage() {}

func (x *DeleteSCIMAPIKeyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tesseral_backend_v1_backend_proto_msgTypes[40]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteSCIMAPIKeyRequest.ProtoReflect.Descriptor instead.
func (*DeleteSCIMAPIKeyRequest) Descriptor() ([]byte, []int) {
	return file_tesseral_backend_v1_backend_proto_rawDescGZIP(), []int{40}
}

func (x *DeleteSCIMAPIKeyRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type DeleteSCIMAPIKeyResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteSCIMAPIKeyResponse) Reset() {
	*x = DeleteSCIMAPIKeyResponse{}
	mi := &file_tesseral_backend_v1_backend_proto_msgTypes[41]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteSCIMAPIKeyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteSCIMAPIKeyResponse) ProtoMessage() {}

func (x *DeleteSCIMAPIKeyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tesseral_backend_v1_backend_proto_msgTypes[41]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteSCIMAPIKeyResponse.ProtoReflect.Descriptor instead.
func (*DeleteSCIMAPIKeyResponse) Descriptor() ([]byte, []int) {
	return file_tesseral_backend_v1_backend_proto_rawDescGZIP(), []int{41}
}

type RevokeSCIMAPIKeyRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RevokeSCIMAPIKeyRequest) Reset() {
	*x = RevokeSCIMAPIKeyRequest{}
	mi := &file_tesseral_backend_v1_backend_proto_msgTypes[42]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RevokeSCIMAPIKeyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RevokeSCIMAPIKeyRequest) ProtoMessage() {}

func (x *RevokeSCIMAPIKeyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tesseral_backend_v1_backend_proto_msgTypes[42]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RevokeSCIMAPIKeyRequest.ProtoReflect.Descriptor instead.
func (*RevokeSCIMAPIKeyRequest) Descriptor() ([]byte, []int) {
	return file_tesseral_backend_v1_backend_proto_rawDescGZIP(), []int{42}
}

func (x *RevokeSCIMAPIKeyRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type RevokeSCIMAPIKeyResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ScimApiKey    *SCIMAPIKey            `protobuf:"bytes,1,opt,name=scim_api_key,json=scimApiKey,proto3" json:"scim_api_key,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RevokeSCIMAPIKeyResponse) Reset() {
	*x = RevokeSCIMAPIKeyResponse{}
	mi := &file_tesseral_backend_v1_backend_proto_msgTypes[43]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RevokeSCIMAPIKeyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RevokeSCIMAPIKeyResponse) ProtoMessage() {}

func (x *RevokeSCIMAPIKeyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tesseral_backend_v1_backend_proto_msgTypes[43]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RevokeSCIMAPIKeyResponse.ProtoReflect.Descriptor instead.
func (*RevokeSCIMAPIKeyResponse) Descriptor() ([]byte, []int) {
	return file_tesseral_backend_v1_backend_proto_rawDescGZIP(), []int{43}
}

func (x *RevokeSCIMAPIKeyResponse) GetScimApiKey() *SCIMAPIKey {
	if x != nil {
		return x.ScimApiKey
	}
	return nil
}

type ListUsersRequest struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	OrganizationId string                 `protobuf:"bytes,1,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
	PageToken      string                 `protobuf:"bytes,2,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *ListUsersRequest) Reset() {
	*x = ListUsersRequest{}
	mi := &file_tesseral_backend_v1_backend_proto_msgTypes[44]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListUsersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListUsersRequest) ProtoMessage() {}

func (x *ListUsersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tesseral_backend_v1_backend_proto_msgTypes[44]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListUsersRequest.ProtoReflect.Descriptor instead.
func (*ListUsersRequest) Descriptor() ([]byte, []int) {
	return file_tesseral_backend_v1_backend_proto_rawDescGZIP(), []int{44}
}

func (x *ListUsersRequest) GetOrganizationId() string {
	if x != nil {
		return x.OrganizationId
	}
	return ""
}

func (x *ListUsersRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

type ListUsersResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Users         []*User                `protobuf:"bytes,1,rep,name=users,proto3" json:"users,omitempty"`
	NextPageToken string                 `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListUsersResponse) Reset() {
	*x = ListUsersResponse{}
	mi := &file_tesseral_backend_v1_backend_proto_msgTypes[45]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListUsersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListUsersResponse) ProtoMessage() {}

func (x *ListUsersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tesseral_backend_v1_backend_proto_msgTypes[45]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListUsersResponse.ProtoReflect.Descriptor instead.
func (*ListUsersResponse) Descriptor() ([]byte, []int) {
	return file_tesseral_backend_v1_backend_proto_rawDescGZIP(), []int{45}
}

func (x *ListUsersResponse) GetUsers() []*User {
	if x != nil {
		return x.Users
	}
	return nil
}

func (x *ListUsersResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

type GetUserRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetUserRequest) Reset() {
	*x = GetUserRequest{}
	mi := &file_tesseral_backend_v1_backend_proto_msgTypes[46]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetUserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserRequest) ProtoMessage() {}

func (x *GetUserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tesseral_backend_v1_backend_proto_msgTypes[46]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserRequest.ProtoReflect.Descriptor instead.
func (*GetUserRequest) Descriptor() ([]byte, []int) {
	return file_tesseral_backend_v1_backend_proto_rawDescGZIP(), []int{46}
}

func (x *GetUserRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type GetUserResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	User          *User                  `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetUserResponse) Reset() {
	*x = GetUserResponse{}
	mi := &file_tesseral_backend_v1_backend_proto_msgTypes[47]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetUserResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserResponse) ProtoMessage() {}

func (x *GetUserResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tesseral_backend_v1_backend_proto_msgTypes[47]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserResponse.ProtoReflect.Descriptor instead.
func (*GetUserResponse) Descriptor() ([]byte, []int) {
	return file_tesseral_backend_v1_backend_proto_rawDescGZIP(), []int{47}
}

func (x *GetUserResponse) GetUser() *User {
	if x != nil {
		return x.User
	}
	return nil
}

type CreateUserRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	User          *User                  `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateUserRequest) Reset() {
	*x = CreateUserRequest{}
	mi := &file_tesseral_backend_v1_backend_proto_msgTypes[48]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateUserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateUserRequest) ProtoMessage() {}

func (x *CreateUserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tesseral_backend_v1_backend_proto_msgTypes[48]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateUserRequest.ProtoReflect.Descriptor instead.
func (*CreateUserRequest) Descriptor() ([]byte, []int) {
	return file_tesseral_backend_v1_backend_proto_rawDescGZIP(), []int{48}
}

func (x *CreateUserRequest) GetUser() *User {
	if x != nil {
		return x.User
	}
	return nil
}

type CreateUserResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	User          *User                  `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateUserResponse) Reset() {
	*x = CreateUserResponse{}
	mi := &file_tesseral_backend_v1_backend_proto_msgTypes[49]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateUserResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateUserResponse) ProtoMessage() {}

func (x *CreateUserResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tesseral_backend_v1_backend_proto_msgTypes[49]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateUserResponse.ProtoReflect.Descriptor instead.
func (*CreateUserResponse) Descriptor() ([]byte, []int) {
	return file_tesseral_backend_v1_backend_proto_rawDescGZIP(), []int{49}
}

func (x *CreateUserResponse) GetUser() *User {
	if x != nil {
		return x.User
	}
	return nil
}

type UpdateUserRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	User          *User                  `protobuf:"bytes,2,opt,name=user,proto3" json:"user,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateUserRequest) Reset() {
	*x = UpdateUserRequest{}
	mi := &file_tesseral_backend_v1_backend_proto_msgTypes[50]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateUserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateUserRequest) ProtoMessage() {}

func (x *UpdateUserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tesseral_backend_v1_backend_proto_msgTypes[50]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateUserRequest.ProtoReflect.Descriptor instead.
func (*UpdateUserRequest) Descriptor() ([]byte, []int) {
	return file_tesseral_backend_v1_backend_proto_rawDescGZIP(), []int{50}
}

func (x *UpdateUserRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateUserRequest) GetUser() *User {
	if x != nil {
		return x.User
	}
	return nil
}

type UpdateUserResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	User          *User                  `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateUserResponse) Reset() {
	*x = UpdateUserResponse{}
	mi := &file_tesseral_backend_v1_backend_proto_msgTypes[51]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateUserResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateUserResponse) ProtoMessage() {}

func (x *UpdateUserResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tesseral_backend_v1_backend_proto_msgTypes[51]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateUserResponse.ProtoReflect.Descriptor instead.
func (*UpdateUserResponse) Descriptor() ([]byte, []int) {
	return file_tesseral_backend_v1_backend_proto_rawDescGZIP(), []int{51}
}

func (x *UpdateUserResponse) GetUser() *User {
	if x != nil {
		return x.User
	}
	return nil
}

type DeleteUserRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteUserRequest) Reset() {
	*x = DeleteUserRequest{}
	mi := &file_tesseral_backend_v1_backend_proto_msgTypes[52]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteUserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteUserRequest) ProtoMessage() {}

func (x *DeleteUserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tesseral_backend_v1_backend_proto_msgTypes[52]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteUserRequest.ProtoReflect.Descriptor instead.
func (*DeleteUserRequest) Descriptor() ([]byte, []int) {
	return file_tesseral_backend_v1_backend_proto_rawDescGZIP(), []int{52}
}

func (x *DeleteUserRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type DeleteUserResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteUserResponse) Reset() {
	*x = DeleteUserResponse{}
	mi := &file_tesseral_backend_v1_backend_proto_msgTypes[53]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteUserResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteUserResponse) ProtoMessage() {}

func (x *DeleteUserResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tesseral_backend_v1_backend_proto_msgTypes[53]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteUserResponse.ProtoReflect.Descriptor instead.
func (*DeleteUserResponse) Descriptor() ([]byte, []int) {
	return file_tesseral_backend_v1_backend_proto_rawDescGZIP(), []int{53}
}

type ListPasskeysRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserId        string                 `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	PageToken     string                 `protobuf:"bytes,2,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListPasskeysRequest) Reset() {
	*x = ListPasskeysRequest{}
	mi := &file_tesseral_backend_v1_backend_proto_msgTypes[54]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListPasskeysRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListPasskeysRequest) ProtoMessage() {}

func (x *ListPasskeysRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tesseral_backend_v1_backend_proto_msgTypes[54]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListPasskeysRequest.ProtoReflect.Descriptor instead.
func (*ListPasskeysRequest) Descriptor() ([]byte, []int) {
	return file_tesseral_backend_v1_backend_proto_rawDescGZIP(), []int{54}
}

func (x *ListPasskeysRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *ListPasskeysRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

type ListPasskeysResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Passkeys      []*Passkey             `protobuf:"bytes,1,rep,name=passkeys,proto3" json:"passkeys,omitempty"`
	NextPageToken string                 `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListPasskeysResponse) Reset() {
	*x = ListPasskeysResponse{}
	mi := &file_tesseral_backend_v1_backend_proto_msgTypes[55]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListPasskeysResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListPasskeysResponse) ProtoMessage() {}

func (x *ListPasskeysResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tesseral_backend_v1_backend_proto_msgTypes[55]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListPasskeysResponse.ProtoReflect.Descriptor instead.
func (*ListPasskeysResponse) Descriptor() ([]byte, []int) {
	return file_tesseral_backend_v1_backend_proto_rawDescGZIP(), []int{55}
}

func (x *ListPasskeysResponse) GetPasskeys() []*Passkey {
	if x != nil {
		return x.Passkeys
	}
	return nil
}

func (x *ListPasskeysResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

type GetPasskeyRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetPasskeyRequest) Reset() {
	*x = GetPasskeyRequest{}
	mi := &file_tesseral_backend_v1_backend_proto_msgTypes[56]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetPasskeyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPasskeyRequest) ProtoMessage() {}

func (x *GetPasskeyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tesseral_backend_v1_backend_proto_msgTypes[56]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPasskeyRequest.ProtoReflect.Descriptor instead.
func (*GetPasskeyRequest) Descriptor() ([]byte, []int) {
	return file_tesseral_backend_v1_backend_proto_rawDescGZIP(), []int{56}
}

func (x *GetPasskeyRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type GetPasskeyResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Passkey       *Passkey               `protobuf:"bytes,1,opt,name=passkey,proto3" json:"passkey,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetPasskeyResponse) Reset() {
	*x = GetPasskeyResponse{}
	mi := &file_tesseral_backend_v1_backend_proto_msgTypes[57]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetPasskeyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPasskeyResponse) ProtoMessage() {}

func (x *GetPasskeyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tesseral_backend_v1_backend_proto_msgTypes[57]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPasskeyResponse.ProtoReflect.Descriptor instead.
func (*GetPasskeyResponse) Descriptor() ([]byte, []int) {
	return file_tesseral_backend_v1_backend_proto_rawDescGZIP(), []int{57}
}

func (x *GetPasskeyResponse) GetPasskey() *Passkey {
	if x != nil {
		return x.Passkey
	}
	return nil
}

type UpdatePasskeyRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Passkey       *Passkey               `protobuf:"bytes,2,opt,name=passkey,proto3" json:"passkey,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdatePasskeyRequest) Reset() {
	*x = UpdatePasskeyRequest{}
	mi := &file_tesseral_backend_v1_backend_proto_msgTypes[58]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdatePasskeyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdatePasskeyRequest) ProtoMessage() {}

func (x *UpdatePasskeyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tesseral_backend_v1_backend_proto_msgTypes[58]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdatePasskeyRequest.ProtoReflect.Descriptor instead.
func (*UpdatePasskeyRequest) Descriptor() ([]byte, []int) {
	return file_tesseral_backend_v1_backend_proto_rawDescGZIP(), []int{58}
}

func (x *UpdatePasskeyRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdatePasskeyRequest) GetPasskey() *Passkey {
	if x != nil {
		return x.Passkey
	}
	return nil
}

type UpdatePasskeyResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Passkey       *Passkey               `protobuf:"bytes,1,opt,name=passkey,proto3" json:"passkey,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdatePasskeyResponse) Reset() {
	*x = UpdatePasskeyResponse{}
	mi := &file_tesseral_backend_v1_backend_proto_msgTypes[59]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdatePasskeyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdatePasskeyResponse) ProtoMessage() {}

func (x *UpdatePasskeyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tesseral_backend_v1_backend_proto_msgTypes[59]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdatePasskeyResponse.ProtoReflect.Descriptor instead.
func (*UpdatePasskeyResponse) Descriptor() ([]byte, []int) {
	return file_tesseral_backend_v1_backend_proto_rawDescGZIP(), []int{59}
}

func (x *UpdatePasskeyResponse) GetPasskey() *Passkey {
	if x != nil {
		return x.Passkey
	}
	return nil
}

type DeletePasskeyRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeletePasskeyRequest) Reset() {
	*x = DeletePasskeyRequest{}
	mi := &file_tesseral_backend_v1_backend_proto_msgTypes[60]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeletePasskeyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeletePasskeyRequest) ProtoMessage() {}

func (x *DeletePasskeyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tesseral_backend_v1_backend_proto_msgTypes[60]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeletePasskeyRequest.ProtoReflect.Descriptor instead.
func (*DeletePasskeyRequest) Descriptor() ([]byte, []int) {
	return file_tesseral_backend_v1_backend_proto_rawDescGZIP(), []int{60}
}

func (x *DeletePasskeyRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type DeletePasskeyResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeletePasskeyResponse) Reset() {
	*x = DeletePasskeyResponse{}
	mi := &file_tesseral_backend_v1_backend_proto_msgTypes[61]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeletePasskeyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeletePasskeyResponse) ProtoMessage() {}

func (x *DeletePasskeyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tesseral_backend_v1_backend_proto_msgTypes[61]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeletePasskeyResponse.ProtoReflect.Descriptor instead.
func (*DeletePasskeyResponse) Descriptor() ([]byte, []int) {
	return file_tesseral_backend_v1_backend_proto_rawDescGZIP(), []int{61}
}

type ListSessionsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserId        string                 `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	PageToken     string                 `protobuf:"bytes,2,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListSessionsRequest) Reset() {
	*x = ListSessionsRequest{}
	mi := &file_tesseral_backend_v1_backend_proto_msgTypes[62]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListSessionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSessionsRequest) ProtoMessage() {}

func (x *ListSessionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tesseral_backend_v1_backend_proto_msgTypes[62]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSessionsRequest.ProtoReflect.Descriptor instead.
func (*ListSessionsRequest) Descriptor() ([]byte, []int) {
	return file_tesseral_backend_v1_backend_proto_rawDescGZIP(), []int{62}
}

func (x *ListSessionsRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *ListSessionsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

type ListSessionsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Sessions      []*Session             `protobuf:"bytes,1,rep,name=sessions,proto3" json:"sessions,omitempty"`
	NextPageToken string                 `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListSessionsResponse) Reset() {
	*x = ListSessionsResponse{}
	mi := &file_tesseral_backend_v1_backend_proto_msgTypes[63]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListSessionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSessionsResponse) ProtoMessage() {}

func (x *ListSessionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tesseral_backend_v1_backend_proto_msgTypes[63]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSessionsResponse.ProtoReflect.Descriptor instead.
func (*ListSessionsResponse) Descriptor() ([]byte, []int) {
	return file_tesseral_backend_v1_backend_proto_rawDescGZIP(), []int{63}
}

func (x *ListSessionsResponse) GetSessions() []*Session {
	if x != nil {
		return x.Sessions
	}
	return nil
}

func (x *ListSessionsResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

type GetSessionRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetSessionRequest) Reset() {
	*x = GetSessionRequest{}
	mi := &file_tesseral_backend_v1_backend_proto_msgTypes[64]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetSessionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSessionRequest) ProtoMessage() {}

func (x *GetSessionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tesseral_backend_v1_backend_proto_msgTypes[64]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSessionRequest.ProtoReflect.Descriptor instead.
func (*GetSessionRequest) Descriptor() ([]byte, []int) {
	return file_tesseral_backend_v1_backend_proto_rawDescGZIP(), []int{64}
}

func (x *GetSessionRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type GetSessionResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Session       *Session               `protobuf:"bytes,1,opt,name=session,proto3" json:"session,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetSessionResponse) Reset() {
	*x = GetSessionResponse{}
	mi := &file_tesseral_backend_v1_backend_proto_msgTypes[65]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetSessionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSessionResponse) ProtoMessage() {}

func (x *GetSessionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tesseral_backend_v1_backend_proto_msgTypes[65]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSessionResponse.ProtoReflect.Descriptor instead.
func (*GetSessionResponse) Descriptor() ([]byte, []int) {
	return file_tesseral_backend_v1_backend_proto_rawDescGZIP(), []int{65}
}

func (x *GetSessionResponse) GetSession() *Session {
	if x != nil {
		return x.Session
	}
	return nil
}

type ListUserInvitesRequest struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	OrganizationId string                 `protobuf:"bytes,1,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
	PageToken      string                 `protobuf:"bytes,2,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *ListUserInvitesRequest) Reset() {
	*x = ListUserInvitesRequest{}
	mi := &file_tesseral_backend_v1_backend_proto_msgTypes[66]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListUserInvitesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListUserInvitesRequest) ProtoMessage() {}

func (x *ListUserInvitesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tesseral_backend_v1_backend_proto_msgTypes[66]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListUserInvitesRequest.ProtoReflect.Descriptor instead.
func (*ListUserInvitesRequest) Descriptor() ([]byte, []int) {
	return file_tesseral_backend_v1_backend_proto_rawDescGZIP(), []int{66}
}

func (x *ListUserInvitesRequest) GetOrganizationId() string {
	if x != nil {
		return x.OrganizationId
	}
	return ""
}

func (x *ListUserInvitesRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

type ListUserInvitesResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserInvites   []*UserInvite          `protobuf:"bytes,1,rep,name=user_invites,json=userInvites,proto3" json:"user_invites,omitempty"`
	NextPageToken string                 `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListUserInvitesResponse) Reset() {
	*x = ListUserInvitesResponse{}
	mi := &file_tesseral_backend_v1_backend_proto_msgTypes[67]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListUserInvitesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListUserInvitesResponse) ProtoMessage() {}

func (x *ListUserInvitesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tesseral_backend_v1_backend_proto_msgTypes[67]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListUserInvitesResponse.ProtoReflect.Descriptor instead.
func (*ListUserInvitesResponse) Descriptor() ([]byte, []int) {
	return file_tesseral_backend_v1_backend_proto_rawDescGZIP(), []int{67}
}

func (x *ListUserInvitesResponse) GetUserInvites() []*UserInvite {
	if x != nil {
		return x.UserInvites
	}
	return nil
}

func (x *ListUserInvitesResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

type GetUserInviteRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetUserInviteRequest) Reset() {
	*x = GetUserInviteRequest{}
	mi := &file_tesseral_backend_v1_backend_proto_msgTypes[68]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetUserInviteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserInviteRequest) ProtoMessage() {}

func (x *GetUserInviteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tesseral_backend_v1_backend_proto_msgTypes[68]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserInviteRequest.ProtoReflect.Descriptor instead.
func (*GetUserInviteRequest) Descriptor() ([]byte, []int) {
	return file_tesseral_backend_v1_backend_proto_rawDescGZIP(), []int{68}
}

func (x *GetUserInviteRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type GetUserInviteResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserInvite    *UserInvite            `protobuf:"bytes,1,opt,name=user_invite,json=userInvite,proto3" json:"user_invite,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetUserInviteResponse) Reset() {
	*x = GetUserInviteResponse{}
	mi := &file_tesseral_backend_v1_backend_proto_msgTypes[69]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetUserInviteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserInviteResponse) ProtoMessage() {}

func (x *GetUserInviteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tesseral_backend_v1_backend_proto_msgTypes[69]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserInviteResponse.ProtoReflect.Descriptor instead.
func (*GetUserInviteResponse) Descriptor() ([]byte, []int) {
	return file_tesseral_backend_v1_backend_proto_rawDescGZIP(), []int{69}
}

func (x *GetUserInviteResponse) GetUserInvite() *UserInvite {
	if x != nil {
		return x.UserInvite
	}
	return nil
}

type CreateUserInviteRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserInvite    *UserInvite            `protobuf:"bytes,1,opt,name=user_invite,json=userInvite,proto3" json:"user_invite,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateUserInviteRequest) Reset() {
	*x = CreateUserInviteRequest{}
	mi := &file_tesseral_backend_v1_backend_proto_msgTypes[70]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateUserInviteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateUserInviteRequest) ProtoMessage() {}

func (x *CreateUserInviteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tesseral_backend_v1_backend_proto_msgTypes[70]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateUserInviteRequest.ProtoReflect.Descriptor instead.
func (*CreateUserInviteRequest) Descriptor() ([]byte, []int) {
	return file_tesseral_backend_v1_backend_proto_rawDescGZIP(), []int{70}
}

func (x *CreateUserInviteRequest) GetUserInvite() *UserInvite {
	if x != nil {
		return x.UserInvite
	}
	return nil
}

type CreateUserInviteResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserInvite    *UserInvite            `protobuf:"bytes,1,opt,name=user_invite,json=userInvite,proto3" json:"user_invite,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateUserInviteResponse) Reset() {
	*x = CreateUserInviteResponse{}
	mi := &file_tesseral_backend_v1_backend_proto_msgTypes[71]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateUserInviteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateUserInviteResponse) ProtoMessage() {}

func (x *CreateUserInviteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tesseral_backend_v1_backend_proto_msgTypes[71]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateUserInviteResponse.ProtoReflect.Descriptor instead.
func (*CreateUserInviteResponse) Descriptor() ([]byte, []int) {
	return file_tesseral_backend_v1_backend_proto_rawDescGZIP(), []int{71}
}

func (x *CreateUserInviteResponse) GetUserInvite() *UserInvite {
	if x != nil {
		return x.UserInvite
	}
	return nil
}

type DeleteUserInviteRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteUserInviteRequest) Reset() {
	*x = DeleteUserInviteRequest{}
	mi := &file_tesseral_backend_v1_backend_proto_msgTypes[72]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteUserInviteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteUserInviteRequest) ProtoMessage() {}

func (x *DeleteUserInviteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tesseral_backend_v1_backend_proto_msgTypes[72]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteUserInviteRequest.ProtoReflect.Descriptor instead.
func (*DeleteUserInviteRequest) Descriptor() ([]byte, []int) {
	return file_tesseral_backend_v1_backend_proto_rawDescGZIP(), []int{72}
}

func (x *DeleteUserInviteRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type DeleteUserInviteResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteUserInviteResponse) Reset() {
	*x = DeleteUserInviteResponse{}
	mi := &file_tesseral_backend_v1_backend_proto_msgTypes[73]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteUserInviteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteUserInviteResponse) ProtoMessage() {}

func (x *DeleteUserInviteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tesseral_backend_v1_backend_proto_msgTypes[73]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteUserInviteResponse.ProtoReflect.Descriptor instead.
func (*DeleteUserInviteResponse) Descriptor() ([]byte, []int) {
	return file_tesseral_backend_v1_backend_proto_rawDescGZIP(), []int{73}
}

type ListProjectAPIKeysRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PageToken     string                 `protobuf:"bytes,1,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListProjectAPIKeysRequest) Reset() {
	*x = ListProjectAPIKeysRequest{}
	mi := &file_tesseral_backend_v1_backend_proto_msgTypes[74]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListProjectAPIKeysRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListProjectAPIKeysRequest) ProtoMessage() {}

func (x *ListProjectAPIKeysRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tesseral_backend_v1_backend_proto_msgTypes[74]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListProjectAPIKeysRequest.ProtoReflect.Descriptor instead.
func (*ListProjectAPIKeysRequest) Descriptor() ([]byte, []int) {
	return file_tesseral_backend_v1_backend_proto_rawDescGZIP(), []int{74}
}

func (x *ListProjectAPIKeysRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

type ListProjectAPIKeysResponse struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	ProjectApiKeys []*ProjectAPIKey       `protobuf:"bytes,1,rep,name=project_api_keys,json=projectApiKeys,proto3" json:"project_api_keys,omitempty"`
	NextPageToken  string                 `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *ListProjectAPIKeysResponse) Reset() {
	*x = ListProjectAPIKeysResponse{}
	mi := &file_tesseral_backend_v1_backend_proto_msgTypes[75]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListProjectAPIKeysResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListProjectAPIKeysResponse) ProtoMessage() {}

func (x *ListProjectAPIKeysResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tesseral_backend_v1_backend_proto_msgTypes[75]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListProjectAPIKeysResponse.ProtoReflect.Descriptor instead.
func (*ListProjectAPIKeysResponse) Descriptor() ([]byte, []int) {
	return file_tesseral_backend_v1_backend_proto_rawDescGZIP(), []int{75}
}

func (x *ListProjectAPIKeysResponse) GetProjectApiKeys() []*ProjectAPIKey {
	if x != nil {
		return x.ProjectApiKeys
	}
	return nil
}

func (x *ListProjectAPIKeysResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

type GetProjectAPIKeyRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetProjectAPIKeyRequest) Reset() {
	*x = GetProjectAPIKeyRequest{}
	mi := &file_tesseral_backend_v1_backend_proto_msgTypes[76]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetProjectAPIKeyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProjectAPIKeyRequest) ProtoMessage() {}

func (x *GetProjectAPIKeyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tesseral_backend_v1_backend_proto_msgTypes[76]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProjectAPIKeyRequest.ProtoReflect.Descriptor instead.
func (*GetProjectAPIKeyRequest) Descriptor() ([]byte, []int) {
	return file_tesseral_backend_v1_backend_proto_rawDescGZIP(), []int{76}
}

func (x *GetProjectAPIKeyRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type GetProjectAPIKeyResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ProjectApiKey *ProjectAPIKey         `protobuf:"bytes,1,opt,name=project_api_key,json=projectApiKey,proto3" json:"project_api_key,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetProjectAPIKeyResponse) Reset() {
	*x = GetProjectAPIKeyResponse{}
	mi := &file_tesseral_backend_v1_backend_proto_msgTypes[77]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetProjectAPIKeyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProjectAPIKeyResponse) ProtoMessage() {}

func (x *GetProjectAPIKeyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tesseral_backend_v1_backend_proto_msgTypes[77]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProjectAPIKeyResponse.ProtoReflect.Descriptor instead.
func (*GetProjectAPIKeyResponse) Descriptor() ([]byte, []int) {
	return file_tesseral_backend_v1_backend_proto_rawDescGZIP(), []int{77}
}

func (x *GetProjectAPIKeyResponse) GetProjectApiKey() *ProjectAPIKey {
	if x != nil {
		return x.ProjectApiKey
	}
	return nil
}

type CreateProjectAPIKeyRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ProjectApiKey *ProjectAPIKey         `protobuf:"bytes,1,opt,name=project_api_key,json=projectApiKey,proto3" json:"project_api_key,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateProjectAPIKeyRequest) Reset() {
	*x = CreateProjectAPIKeyRequest{}
	mi := &file_tesseral_backend_v1_backend_proto_msgTypes[78]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateProjectAPIKeyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateProjectAPIKeyRequest) ProtoMessage() {}

func (x *CreateProjectAPIKeyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tesseral_backend_v1_backend_proto_msgTypes[78]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateProjectAPIKeyRequest.ProtoReflect.Descriptor instead.
func (*CreateProjectAPIKeyRequest) Descriptor() ([]byte, []int) {
	return file_tesseral_backend_v1_backend_proto_rawDescGZIP(), []int{78}
}

func (x *CreateProjectAPIKeyRequest) GetProjectApiKey() *ProjectAPIKey {
	if x != nil {
		return x.ProjectApiKey
	}
	return nil
}

type CreateProjectAPIKeyResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ProjectApiKey *ProjectAPIKey         `protobuf:"bytes,1,opt,name=project_api_key,json=projectApiKey,proto3" json:"project_api_key,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateProjectAPIKeyResponse) Reset() {
	*x = CreateProjectAPIKeyResponse{}
	mi := &file_tesseral_backend_v1_backend_proto_msgTypes[79]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateProjectAPIKeyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateProjectAPIKeyResponse) ProtoMessage() {}

func (x *CreateProjectAPIKeyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tesseral_backend_v1_backend_proto_msgTypes[79]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateProjectAPIKeyResponse.ProtoReflect.Descriptor instead.
func (*CreateProjectAPIKeyResponse) Descriptor() ([]byte, []int) {
	return file_tesseral_backend_v1_backend_proto_rawDescGZIP(), []int{79}
}

func (x *CreateProjectAPIKeyResponse) GetProjectApiKey() *ProjectAPIKey {
	if x != nil {
		return x.ProjectApiKey
	}
	return nil
}

type UpdateProjectAPIKeyRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	ProjectApiKey *ProjectAPIKey         `protobuf:"bytes,2,opt,name=project_api_key,json=projectApiKey,proto3" json:"project_api_key,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateProjectAPIKeyRequest) Reset() {
	*x = UpdateProjectAPIKeyRequest{}
	mi := &file_tesseral_backend_v1_backend_proto_msgTypes[80]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateProjectAPIKeyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateProjectAPIKeyRequest) ProtoMessage() {}

func (x *UpdateProjectAPIKeyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tesseral_backend_v1_backend_proto_msgTypes[80]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateProjectAPIKeyRequest.ProtoReflect.Descriptor instead.
func (*UpdateProjectAPIKeyRequest) Descriptor() ([]byte, []int) {
	return file_tesseral_backend_v1_backend_proto_rawDescGZIP(), []int{80}
}

func (x *UpdateProjectAPIKeyRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateProjectAPIKeyRequest) GetProjectApiKey() *ProjectAPIKey {
	if x != nil {
		return x.ProjectApiKey
	}
	return nil
}

type UpdateProjectAPIKeyResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ProjectApiKey *ProjectAPIKey         `protobuf:"bytes,1,opt,name=project_api_key,json=projectApiKey,proto3" json:"project_api_key,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateProjectAPIKeyResponse) Reset() {
	*x = UpdateProjectAPIKeyResponse{}
	mi := &file_tesseral_backend_v1_backend_proto_msgTypes[81]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateProjectAPIKeyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateProjectAPIKeyResponse) ProtoMessage() {}

func (x *UpdateProjectAPIKeyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tesseral_backend_v1_backend_proto_msgTypes[81]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateProjectAPIKeyResponse.ProtoReflect.Descriptor instead.
func (*UpdateProjectAPIKeyResponse) Descriptor() ([]byte, []int) {
	return file_tesseral_backend_v1_backend_proto_rawDescGZIP(), []int{81}
}

func (x *UpdateProjectAPIKeyResponse) GetProjectApiKey() *ProjectAPIKey {
	if x != nil {
		return x.ProjectApiKey
	}
	return nil
}

type DeleteProjectAPIKeyRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteProjectAPIKeyRequest) Reset() {
	*x = DeleteProjectAPIKeyRequest{}
	mi := &file_tesseral_backend_v1_backend_proto_msgTypes[82]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteProjectAPIKeyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteProjectAPIKeyRequest) ProtoMessage() {}

func (x *DeleteProjectAPIKeyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tesseral_backend_v1_backend_proto_msgTypes[82]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteProjectAPIKeyRequest.ProtoReflect.Descriptor instead.
func (*DeleteProjectAPIKeyRequest) Descriptor() ([]byte, []int) {
	return file_tesseral_backend_v1_backend_proto_rawDescGZIP(), []int{82}
}

func (x *DeleteProjectAPIKeyRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type DeleteProjectAPIKeyResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteProjectAPIKeyResponse) Reset() {
	*x = DeleteProjectAPIKeyResponse{}
	mi := &file_tesseral_backend_v1_backend_proto_msgTypes[83]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteProjectAPIKeyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteProjectAPIKeyResponse) ProtoMessage() {}

func (x *DeleteProjectAPIKeyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tesseral_backend_v1_backend_proto_msgTypes[83]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteProjectAPIKeyResponse.ProtoReflect.Descriptor instead.
func (*DeleteProjectAPIKeyResponse) Descriptor() ([]byte, []int) {
	return file_tesseral_backend_v1_backend_proto_rawDescGZIP(), []int{83}
}

type RevokeProjectAPIKeyRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RevokeProjectAPIKeyRequest) Reset() {
	*x = RevokeProjectAPIKeyRequest{}
	mi := &file_tesseral_backend_v1_backend_proto_msgTypes[84]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RevokeProjectAPIKeyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RevokeProjectAPIKeyRequest) ProtoMessage() {}

func (x *RevokeProjectAPIKeyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tesseral_backend_v1_backend_proto_msgTypes[84]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RevokeProjectAPIKeyRequest.ProtoReflect.Descriptor instead.
func (*RevokeProjectAPIKeyRequest) Descriptor() ([]byte, []int) {
	return file_tesseral_backend_v1_backend_proto_rawDescGZIP(), []int{84}
}

func (x *RevokeProjectAPIKeyRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type RevokeProjectAPIKeyResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ProjectApiKey *ProjectAPIKey         `protobuf:"bytes,1,opt,name=project_api_key,json=projectApiKey,proto3" json:"project_api_key,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RevokeProjectAPIKeyResponse) Reset() {
	*x = RevokeProjectAPIKeyResponse{}
	mi := &file_tesseral_backend_v1_backend_proto_msgTypes[85]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RevokeProjectAPIKeyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RevokeProjectAPIKeyResponse) ProtoMessage() {}

func (x *RevokeProjectAPIKeyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tesseral_backend_v1_backend_proto_msgTypes[85]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RevokeProjectAPIKeyResponse.ProtoReflect.Descriptor instead.
func (*RevokeProjectAPIKeyResponse) Descriptor() ([]byte, []int) {
	return file_tesseral_backend_v1_backend_proto_rawDescGZIP(), []int{85}
}

func (x *RevokeProjectAPIKeyResponse) GetProjectApiKey() *ProjectAPIKey {
	if x != nil {
		return x.ProjectApiKey
	}
	return nil
}

type GetVaultDomainSettingsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetVaultDomainSettingsRequest) Reset() {
	*x = GetVaultDomainSettingsRequest{}
	mi := &file_tesseral_backend_v1_backend_proto_msgTypes[86]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetVaultDomainSettingsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetVaultDomainSettingsRequest) ProtoMessage() {}

func (x *GetVaultDomainSettingsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tesseral_backend_v1_backend_proto_msgTypes[86]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetVaultDomainSettingsRequest.ProtoReflect.Descriptor instead.
func (*GetVaultDomainSettingsRequest) Descriptor() ([]byte, []int) {
	return file_tesseral_backend_v1_backend_proto_rawDescGZIP(), []int{86}
}

type GetVaultDomainSettingsResponse struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	VaultDomainSettings *VaultDomainSettings   `protobuf:"bytes,1,opt,name=vault_domain_settings,json=vaultDomainSettings,proto3" json:"vault_domain_settings,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *GetVaultDomainSettingsResponse) Reset() {
	*x = GetVaultDomainSettingsResponse{}
	mi := &file_tesseral_backend_v1_backend_proto_msgTypes[87]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetVaultDomainSettingsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetVaultDomainSettingsResponse) ProtoMessage() {}

func (x *GetVaultDomainSettingsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tesseral_backend_v1_backend_proto_msgTypes[87]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetVaultDomainSettingsResponse.ProtoReflect.Descriptor instead.
func (*GetVaultDomainSettingsResponse) Descriptor() ([]byte, []int) {
	return file_tesseral_backend_v1_backend_proto_rawDescGZIP(), []int{87}
}

func (x *GetVaultDomainSettingsResponse) GetVaultDomainSettings() *VaultDomainSettings {
	if x != nil {
		return x.VaultDomainSettings
	}
	return nil
}

type ListPublishableKeysRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PageToken     string                 `protobuf:"bytes,1,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListPublishableKeysRequest) Reset() {
	*x = ListPublishableKeysRequest{}
	mi := &file_tesseral_backend_v1_backend_proto_msgTypes[88]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListPublishableKeysRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListPublishableKeysRequest) ProtoMessage() {}

func (x *ListPublishableKeysRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tesseral_backend_v1_backend_proto_msgTypes[88]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListPublishableKeysRequest.ProtoReflect.Descriptor instead.
func (*ListPublishableKeysRequest) Descriptor() ([]byte, []int) {
	return file_tesseral_backend_v1_backend_proto_rawDescGZIP(), []int{88}
}

func (x *ListPublishableKeysRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

type ListPublishableKeysResponse struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	PublishableKeys []*PublishableKey      `protobuf:"bytes,1,rep,name=publishable_keys,json=publishableKeys,proto3" json:"publishable_keys,omitempty"`
	NextPageToken   string                 `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *ListPublishableKeysResponse) Reset() {
	*x = ListPublishableKeysResponse{}
	mi := &file_tesseral_backend_v1_backend_proto_msgTypes[89]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListPublishableKeysResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListPublishableKeysResponse) ProtoMessage() {}

func (x *ListPublishableKeysResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tesseral_backend_v1_backend_proto_msgTypes[89]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListPublishableKeysResponse.ProtoReflect.Descriptor instead.
func (*ListPublishableKeysResponse) Descriptor() ([]byte, []int) {
	return file_tesseral_backend_v1_backend_proto_rawDescGZIP(), []int{89}
}

func (x *ListPublishableKeysResponse) GetPublishableKeys() []*PublishableKey {
	if x != nil {
		return x.PublishableKeys
	}
	return nil
}

func (x *ListPublishableKeysResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

type GetPublishableKeyRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetPublishableKeyRequest) Reset() {
	*x = GetPublishableKeyRequest{}
	mi := &file_tesseral_backend_v1_backend_proto_msgTypes[90]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetPublishableKeyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPublishableKeyRequest) ProtoMessage() {}

func (x *GetPublishableKeyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tesseral_backend_v1_backend_proto_msgTypes[90]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPublishableKeyRequest.ProtoReflect.Descriptor instead.
func (*GetPublishableKeyRequest) Descriptor() ([]byte, []int) {
	return file_tesseral_backend_v1_backend_proto_rawDescGZIP(), []int{90}
}

func (x *GetPublishableKeyRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type GetPublishableKeyResponse struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	PublishableKey *PublishableKey        `protobuf:"bytes,1,opt,name=publishable_key,json=publishableKey,proto3" json:"publishable_key,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *GetPublishableKeyResponse) Reset() {
	*x = GetPublishableKeyResponse{}
	mi := &file_tesseral_backend_v1_backend_proto_msgTypes[91]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetPublishableKeyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPublishableKeyResponse) ProtoMessage() {}

func (x *GetPublishableKeyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tesseral_backend_v1_backend_proto_msgTypes[91]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPublishableKeyResponse.ProtoReflect.Descriptor instead.
func (*GetPublishableKeyResponse) Descriptor() ([]byte, []int) {
	return file_tesseral_backend_v1_backend_proto_rawDescGZIP(), []int{91}
}

func (x *GetPublishableKeyResponse) GetPublishableKey() *PublishableKey {
	if x != nil {
		return x.PublishableKey
	}
	return nil
}

type CreatePublishableKeyRequest struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	PublishableKey *PublishableKey        `protobuf:"bytes,1,opt,name=publishable_key,json=publishableKey,proto3" json:"publishable_key,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *CreatePublishableKeyRequest) Reset() {
	*x = CreatePublishableKeyRequest{}
	mi := &file_tesseral_backend_v1_backend_proto_msgTypes[92]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreatePublishableKeyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePublishableKeyRequest) ProtoMessage() {}

func (x *CreatePublishableKeyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tesseral_backend_v1_backend_proto_msgTypes[92]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePublishableKeyRequest.ProtoReflect.Descriptor instead.
func (*CreatePublishableKeyRequest) Descriptor() ([]byte, []int) {
	return file_tesseral_backend_v1_backend_proto_rawDescGZIP(), []int{92}
}

func (x *CreatePublishableKeyRequest) GetPublishableKey() *PublishableKey {
	if x != nil {
		return x.PublishableKey
	}
	return nil
}

type CreatePublishableKeyResponse struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	PublishableKey *PublishableKey        `protobuf:"bytes,1,opt,name=publishable_key,json=publishableKey,proto3" json:"publishable_key,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *CreatePublishableKeyResponse) Reset() {
	*x = CreatePublishableKeyResponse{}
	mi := &file_tesseral_backend_v1_backend_proto_msgTypes[93]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreatePublishableKeyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePublishableKeyResponse) ProtoMessage() {}

func (x *CreatePublishableKeyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tesseral_backend_v1_backend_proto_msgTypes[93]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePublishableKeyResponse.ProtoReflect.Descriptor instead.
func (*CreatePublishableKeyResponse) Descriptor() ([]byte, []int) {
	return file_tesseral_backend_v1_backend_proto_rawDescGZIP(), []int{93}
}

func (x *CreatePublishableKeyResponse) GetPublishableKey() *PublishableKey {
	if x != nil {
		return x.PublishableKey
	}
	return nil
}

type UpdatePublishableKeyRequest struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Id             string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	PublishableKey *PublishableKey        `protobuf:"bytes,2,opt,name=publishable_key,json=publishableKey,proto3" json:"publishable_key,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *UpdatePublishableKeyRequest) Reset() {
	*x = UpdatePublishableKeyRequest{}
	mi := &file_tesseral_backend_v1_backend_proto_msgTypes[94]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdatePublishableKeyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdatePublishableKeyRequest) ProtoMessage() {}

func (x *UpdatePublishableKeyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tesseral_backend_v1_backend_proto_msgTypes[94]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdatePublishableKeyRequest.ProtoReflect.Descriptor instead.
func (*UpdatePublishableKeyRequest) Descriptor() ([]byte, []int) {
	return file_tesseral_backend_v1_backend_proto_rawDescGZIP(), []int{94}
}

func (x *UpdatePublishableKeyRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdatePublishableKeyRequest) GetPublishableKey() *PublishableKey {
	if x != nil {
		return x.PublishableKey
	}
	return nil
}

type UpdatePublishableKeyResponse struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	PublishableKey *PublishableKey        `protobuf:"bytes,1,opt,name=publishable_key,json=publishableKey,proto3" json:"publishable_key,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *UpdatePublishableKeyResponse) Reset() {
	*x = UpdatePublishableKeyResponse{}
	mi := &file_tesseral_backend_v1_backend_proto_msgTypes[95]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdatePublishableKeyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdatePublishableKeyResponse) ProtoMessage() {}

func (x *UpdatePublishableKeyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tesseral_backend_v1_backend_proto_msgTypes[95]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdatePublishableKeyResponse.ProtoReflect.Descriptor instead.
func (*UpdatePublishableKeyResponse) Descriptor() ([]byte, []int) {
	return file_tesseral_backend_v1_backend_proto_rawDescGZIP(), []int{95}
}

func (x *UpdatePublishableKeyResponse) GetPublishableKey() *PublishableKey {
	if x != nil {
		return x.PublishableKey
	}
	return nil
}

type DeletePublishableKeyRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeletePublishableKeyRequest) Reset() {
	*x = DeletePublishableKeyRequest{}
	mi := &file_tesseral_backend_v1_backend_proto_msgTypes[96]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeletePublishableKeyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeletePublishableKeyRequest) ProtoMessage() {}

func (x *DeletePublishableKeyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tesseral_backend_v1_backend_proto_msgTypes[96]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeletePublishableKeyRequest.ProtoReflect.Descriptor instead.
func (*DeletePublishableKeyRequest) Descriptor() ([]byte, []int) {
	return file_tesseral_backend_v1_backend_proto_rawDescGZIP(), []int{96}
}

func (x *DeletePublishableKeyRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type DeletePublishableKeyResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeletePublishableKeyResponse) Reset() {
	*x = DeletePublishableKeyResponse{}
	mi := &file_tesseral_backend_v1_backend_proto_msgTypes[97]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeletePublishableKeyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeletePublishableKeyResponse) ProtoMessage() {}

func (x *DeletePublishableKeyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tesseral_backend_v1_backend_proto_msgTypes[97]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeletePublishableKeyResponse.ProtoReflect.Descriptor instead.
func (*DeletePublishableKeyResponse) Descriptor() ([]byte, []int) {
	return file_tesseral_backend_v1_backend_proto_rawDescGZIP(), []int{97}
}

type GetProjectUISettingsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetProjectUISettingsRequest) Reset() {
	*x = GetProjectUISettingsRequest{}
	mi := &file_tesseral_backend_v1_backend_proto_msgTypes[98]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetProjectUISettingsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProjectUISettingsRequest) ProtoMessage() {}

func (x *GetProjectUISettingsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tesseral_backend_v1_backend_proto_msgTypes[98]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProjectUISettingsRequest.ProtoReflect.Descriptor instead.
func (*GetProjectUISettingsRequest) Descriptor() ([]byte, []int) {
	return file_tesseral_backend_v1_backend_proto_rawDescGZIP(), []int{98}
}

type GetProjectUISettingsResponse struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	ProjectUiSettings *ProjectUISettings     `protobuf:"bytes,1,opt,name=project_ui_settings,json=projectUiSettings,proto3" json:"project_ui_settings,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *GetProjectUISettingsResponse) Reset() {
	*x = GetProjectUISettingsResponse{}
	mi := &file_tesseral_backend_v1_backend_proto_msgTypes[99]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetProjectUISettingsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProjectUISettingsResponse) ProtoMessage() {}

func (x *GetProjectUISettingsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tesseral_backend_v1_backend_proto_msgTypes[99]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProjectUISettingsResponse.ProtoReflect.Descriptor instead.
func (*GetProjectUISettingsResponse) Descriptor() ([]byte, []int) {
	return file_tesseral_backend_v1_backend_proto_rawDescGZIP(), []int{99}
}

func (x *GetProjectUISettingsResponse) GetProjectUiSettings() *ProjectUISettings {
	if x != nil {
		return x.ProjectUiSettings
	}
	return nil
}

type UpdateProjectUISettingsRequest struct {
	state                 protoimpl.MessageState `protogen:"open.v1"`
	LogInLayout           string                 `protobuf:"bytes,1,opt,name=log_in_layout,json=logInLayout,proto3" json:"log_in_layout,omitempty"`
	PrimaryColor          *string                `protobuf:"bytes,2,opt,name=primary_color,json=primaryColor,proto3,oneof" json:"primary_color,omitempty"`
	DetectDarkModeEnabled bool                   `protobuf:"varint,3,opt,name=detect_dark_mode_enabled,json=detectDarkModeEnabled,proto3" json:"detect_dark_mode_enabled,omitempty"`
	DarkModePrimaryColor  *string                `protobuf:"bytes,4,opt,name=dark_mode_primary_color,json=darkModePrimaryColor,proto3,oneof" json:"dark_mode_primary_color,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *UpdateProjectUISettingsRequest) Reset() {
	*x = UpdateProjectUISettingsRequest{}
	mi := &file_tesseral_backend_v1_backend_proto_msgTypes[100]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateProjectUISettingsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateProjectUISettingsRequest) ProtoMessage() {}

func (x *UpdateProjectUISettingsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tesseral_backend_v1_backend_proto_msgTypes[100]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateProjectUISettingsRequest.ProtoReflect.Descriptor instead.
func (*UpdateProjectUISettingsRequest) Descriptor() ([]byte, []int) {
	return file_tesseral_backend_v1_backend_proto_rawDescGZIP(), []int{100}
}

func (x *UpdateProjectUISettingsRequest) GetLogInLayout() string {
	if x != nil {
		return x.LogInLayout
	}
	return ""
}

func (x *UpdateProjectUISettingsRequest) GetPrimaryColor() string {
	if x != nil && x.PrimaryColor != nil {
		return *x.PrimaryColor
	}
	return ""
}

func (x *UpdateProjectUISettingsRequest) GetDetectDarkModeEnabled() bool {
	if x != nil {
		return x.DetectDarkModeEnabled
	}
	return false
}

func (x *UpdateProjectUISettingsRequest) GetDarkModePrimaryColor() string {
	if x != nil && x.DarkModePrimaryColor != nil {
		return *x.DarkModePrimaryColor
	}
	return ""
}

type UpdateProjectUISettingsResponse struct {
	state                          protoimpl.MessageState `protogen:"open.v1"`
	Id                             string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	ProjectId                      string                 `protobuf:"bytes,2,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	CreateTime                     *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	UpdateTime                     *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	DarkModeLogoPresignedUploadUrl string                 `protobuf:"bytes,5,opt,name=dark_mode_logo_presigned_upload_url,json=darkModeLogoPresignedUploadUrl,proto3" json:"dark_mode_logo_presigned_upload_url,omitempty"`
	FaviconPresignedUploadUrl      string                 `protobuf:"bytes,6,opt,name=favicon_presigned_upload_url,json=faviconPresignedUploadUrl,proto3" json:"favicon_presigned_upload_url,omitempty"`
	LogoPresignedUploadUrl         string                 `protobuf:"bytes,7,opt,name=logo_presigned_upload_url,json=logoPresignedUploadUrl,proto3" json:"logo_presigned_upload_url,omitempty"`
	DarkModePrimaryColor           string                 `protobuf:"bytes,8,opt,name=dark_mode_primary_color,json=darkModePrimaryColor,proto3" json:"dark_mode_primary_color,omitempty"`
	DetectDarkModeEnabled          bool                   `protobuf:"varint,9,opt,name=detect_dark_mode_enabled,json=detectDarkModeEnabled,proto3" json:"detect_dark_mode_enabled,omitempty"`
	PrimaryColor                   string                 `protobuf:"bytes,10,opt,name=primary_color,json=primaryColor,proto3" json:"primary_color,omitempty"`
	LogInLayout                    string                 `protobuf:"bytes,11,opt,name=log_in_layout,json=logInLayout,proto3" json:"log_in_layout,omitempty"`
	unknownFields                  protoimpl.UnknownFields
	sizeCache                      protoimpl.SizeCache
}

func (x *UpdateProjectUISettingsResponse) Reset() {
	*x = UpdateProjectUISettingsResponse{}
	mi := &file_tesseral_backend_v1_backend_proto_msgTypes[101]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateProjectUISettingsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateProjectUISettingsResponse) ProtoMessage() {}

func (x *UpdateProjectUISettingsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tesseral_backend_v1_backend_proto_msgTypes[101]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateProjectUISettingsResponse.ProtoReflect.Descriptor instead.
func (*UpdateProjectUISettingsResponse) Descriptor() ([]byte, []int) {
	return file_tesseral_backend_v1_backend_proto_rawDescGZIP(), []int{101}
}

func (x *UpdateProjectUISettingsResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateProjectUISettingsResponse) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *UpdateProjectUISettingsResponse) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *UpdateProjectUISettingsResponse) GetUpdateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdateTime
	}
	return nil
}

func (x *UpdateProjectUISettingsResponse) GetDarkModeLogoPresignedUploadUrl() string {
	if x != nil {
		return x.DarkModeLogoPresignedUploadUrl
	}
	return ""
}

func (x *UpdateProjectUISettingsResponse) GetFaviconPresignedUploadUrl() string {
	if x != nil {
		return x.FaviconPresignedUploadUrl
	}
	return ""
}

func (x *UpdateProjectUISettingsResponse) GetLogoPresignedUploadUrl() string {
	if x != nil {
		return x.LogoPresignedUploadUrl
	}
	return ""
}

func (x *UpdateProjectUISettingsResponse) GetDarkModePrimaryColor() string {
	if x != nil {
		return x.DarkModePrimaryColor
	}
	return ""
}

func (x *UpdateProjectUISettingsResponse) GetDetectDarkModeEnabled() bool {
	if x != nil {
		return x.DetectDarkModeEnabled
	}
	return false
}

func (x *UpdateProjectUISettingsResponse) GetPrimaryColor() string {
	if x != nil {
		return x.PrimaryColor
	}
	return ""
}

func (x *UpdateProjectUISettingsResponse) GetLogInLayout() string {
	if x != nil {
		return x.LogInLayout
	}
	return ""
}

type DisableOrganizationLoginsRequest struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	OrganizationId string                 `protobuf:"bytes,1,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *DisableOrganizationLoginsRequest) Reset() {
	*x = DisableOrganizationLoginsRequest{}
	mi := &file_tesseral_backend_v1_backend_proto_msgTypes[102]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DisableOrganizationLoginsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DisableOrganizationLoginsRequest) ProtoMessage() {}

func (x *DisableOrganizationLoginsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tesseral_backend_v1_backend_proto_msgTypes[102]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DisableOrganizationLoginsRequest.ProtoReflect.Descriptor instead.
func (*DisableOrganizationLoginsRequest) Descriptor() ([]byte, []int) {
	return file_tesseral_backend_v1_backend_proto_rawDescGZIP(), []int{102}
}

func (x *DisableOrganizationLoginsRequest) GetOrganizationId() string {
	if x != nil {
		return x.OrganizationId
	}
	return ""
}

type DisableOrganizationLoginsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DisableOrganizationLoginsResponse) Reset() {
	*x = DisableOrganizationLoginsResponse{}
	mi := &file_tesseral_backend_v1_backend_proto_msgTypes[103]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DisableOrganizationLoginsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DisableOrganizationLoginsResponse) ProtoMessage() {}

func (x *DisableOrganizationLoginsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tesseral_backend_v1_backend_proto_msgTypes[103]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DisableOrganizationLoginsResponse.ProtoReflect.Descriptor instead.
func (*DisableOrganizationLoginsResponse) Descriptor() ([]byte, []int) {
	return file_tesseral_backend_v1_backend_proto_rawDescGZIP(), []int{103}
}

type DisableProjectLoginsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ProjectId     string                 `protobuf:"bytes,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DisableProjectLoginsRequest) Reset() {
	*x = DisableProjectLoginsRequest{}
	mi := &file_tesseral_backend_v1_backend_proto_msgTypes[104]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DisableProjectLoginsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DisableProjectLoginsRequest) ProtoMessage() {}

func (x *DisableProjectLoginsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tesseral_backend_v1_backend_proto_msgTypes[104]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DisableProjectLoginsRequest.ProtoReflect.Descriptor instead.
func (*DisableProjectLoginsRequest) Descriptor() ([]byte, []int) {
	return file_tesseral_backend_v1_backend_proto_rawDescGZIP(), []int{104}
}

func (x *DisableProjectLoginsRequest) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

type DisableProjectLoginsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DisableProjectLoginsResponse) Reset() {
	*x = DisableProjectLoginsResponse{}
	mi := &file_tesseral_backend_v1_backend_proto_msgTypes[105]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DisableProjectLoginsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DisableProjectLoginsResponse) ProtoMessage() {}

func (x *DisableProjectLoginsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tesseral_backend_v1_backend_proto_msgTypes[105]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DisableProjectLoginsResponse.ProtoReflect.Descriptor instead.
func (*DisableProjectLoginsResponse) Descriptor() ([]byte, []int) {
	return file_tesseral_backend_v1_backend_proto_rawDescGZIP(), []int{105}
}

type EnableOrganizationLoginsRequest struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	OrganizationId string                 `protobuf:"bytes,1,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *EnableOrganizationLoginsRequest) Reset() {
	*x = EnableOrganizationLoginsRequest{}
	mi := &file_tesseral_backend_v1_backend_proto_msgTypes[106]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EnableOrganizationLoginsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnableOrganizationLoginsRequest) ProtoMessage() {}

func (x *EnableOrganizationLoginsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tesseral_backend_v1_backend_proto_msgTypes[106]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnableOrganizationLoginsRequest.ProtoReflect.Descriptor instead.
func (*EnableOrganizationLoginsRequest) Descriptor() ([]byte, []int) {
	return file_tesseral_backend_v1_backend_proto_rawDescGZIP(), []int{106}
}

func (x *EnableOrganizationLoginsRequest) GetOrganizationId() string {
	if x != nil {
		return x.OrganizationId
	}
	return ""
}

type EnableOrganizationLoginsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EnableOrganizationLoginsResponse) Reset() {
	*x = EnableOrganizationLoginsResponse{}
	mi := &file_tesseral_backend_v1_backend_proto_msgTypes[107]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EnableOrganizationLoginsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnableOrganizationLoginsResponse) ProtoMessage() {}

func (x *EnableOrganizationLoginsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tesseral_backend_v1_backend_proto_msgTypes[107]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnableOrganizationLoginsResponse.ProtoReflect.Descriptor instead.
func (*EnableOrganizationLoginsResponse) Descriptor() ([]byte, []int) {
	return file_tesseral_backend_v1_backend_proto_rawDescGZIP(), []int{107}
}

type EnableProjectLoginsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ProjectId     string                 `protobuf:"bytes,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EnableProjectLoginsRequest) Reset() {
	*x = EnableProjectLoginsRequest{}
	mi := &file_tesseral_backend_v1_backend_proto_msgTypes[108]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EnableProjectLoginsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnableProjectLoginsRequest) ProtoMessage() {}

func (x *EnableProjectLoginsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tesseral_backend_v1_backend_proto_msgTypes[108]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnableProjectLoginsRequest.ProtoReflect.Descriptor instead.
func (*EnableProjectLoginsRequest) Descriptor() ([]byte, []int) {
	return file_tesseral_backend_v1_backend_proto_rawDescGZIP(), []int{108}
}

func (x *EnableProjectLoginsRequest) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

type EnableProjectLoginsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EnableProjectLoginsResponse) Reset() {
	*x = EnableProjectLoginsResponse{}
	mi := &file_tesseral_backend_v1_backend_proto_msgTypes[109]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EnableProjectLoginsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnableProjectLoginsResponse) ProtoMessage() {}

func (x *EnableProjectLoginsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tesseral_backend_v1_backend_proto_msgTypes[109]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnableProjectLoginsResponse.ProtoReflect.Descriptor instead.
func (*EnableProjectLoginsResponse) Descriptor() ([]byte, []int) {
	return file_tesseral_backend_v1_backend_proto_rawDescGZIP(), []int{109}
}

type ImageUploadRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Data          []byte                 `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	MimeType      string                 `protobuf:"bytes,2,opt,name=mime_type,json=mimeType,proto3" json:"mime_type,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ImageUploadRequest) Reset() {
	*x = ImageUploadRequest{}
	mi := &file_tesseral_backend_v1_backend_proto_msgTypes[110]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ImageUploadRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImageUploadRequest) ProtoMessage() {}

func (x *ImageUploadRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tesseral_backend_v1_backend_proto_msgTypes[110]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImageUploadRequest.ProtoReflect.Descriptor instead.
func (*ImageUploadRequest) Descriptor() ([]byte, []int) {
	return file_tesseral_backend_v1_backend_proto_rawDescGZIP(), []int{110}
}

func (x *ImageUploadRequest) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *ImageUploadRequest) GetMimeType() string {
	if x != nil {
		return x.MimeType
	}
	return ""
}

type CreateUserImpersonationTokenRequest struct {
	state                  protoimpl.MessageState  `protogen:"open.v1"`
	UserImpersonationToken *UserImpersonationToken `protobuf:"bytes,1,opt,name=user_impersonation_token,json=userImpersonationToken,proto3" json:"user_impersonation_token,omitempty"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *CreateUserImpersonationTokenRequest) Reset() {
	*x = CreateUserImpersonationTokenRequest{}
	mi := &file_tesseral_backend_v1_backend_proto_msgTypes[111]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateUserImpersonationTokenRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateUserImpersonationTokenRequest) ProtoMessage() {}

func (x *CreateUserImpersonationTokenRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tesseral_backend_v1_backend_proto_msgTypes[111]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateUserImpersonationTokenRequest.ProtoReflect.Descriptor instead.
func (*CreateUserImpersonationTokenRequest) Descriptor() ([]byte, []int) {
	return file_tesseral_backend_v1_backend_proto_rawDescGZIP(), []int{111}
}

func (x *CreateUserImpersonationTokenRequest) GetUserImpersonationToken() *UserImpersonationToken {
	if x != nil {
		return x.UserImpersonationToken
	}
	return nil
}

type CreateUserImpersonationTokenResponse struct {
	state                  protoimpl.MessageState  `protogen:"open.v1"`
	UserImpersonationToken *UserImpersonationToken `protobuf:"bytes,1,opt,name=user_impersonation_token,json=userImpersonationToken,proto3" json:"user_impersonation_token,omitempty"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *CreateUserImpersonationTokenResponse) Reset() {
	*x = CreateUserImpersonationTokenResponse{}
	mi := &file_tesseral_backend_v1_backend_proto_msgTypes[112]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateUserImpersonationTokenResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateUserImpersonationTokenResponse) ProtoMessage() {}

func (x *CreateUserImpersonationTokenResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tesseral_backend_v1_backend_proto_msgTypes[112]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateUserImpersonationTokenResponse.ProtoReflect.Descriptor instead.
func (*CreateUserImpersonationTokenResponse) Descriptor() ([]byte, []int) {
	return file_tesseral_backend_v1_backend_proto_rawDescGZIP(), []int{112}
}

func (x *CreateUserImpersonationTokenResponse) GetUserImpersonationToken() *UserImpersonationToken {
	if x != nil {
		return x.UserImpersonationToken
	}
	return nil
}

var File_tesseral_backend_v1_backend_proto protoreflect.FileDescriptor

var file_tesseral_backend_v1_backend_proto_rawDesc = string([]byte{
	0x0a, 0x21, 0x74, 0x65, 0x73, 0x73, 0x65, 0x72, 0x61, 0x6c, 0x2f, 0x62, 0x61, 0x63, 0x6b, 0x65,
	0x6e, 0x64, 0x2f, 0x76, 0x31, 0x2f, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x13, 0x74, 0x65, 0x73, 0x73, 0x65, 0x72, 0x61, 0x6c, 0x2e, 0x62, 0x61,
	0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x74, 0x65, 0x73, 0x73, 0x65, 0x72, 0x61,
	0x6c, 0x2f, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x13, 0x0a, 0x11, 0x47, 0x65, 0x74,
	0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x4c,
	0x0a, 0x12, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x36, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x74, 0x65, 0x73, 0x73, 0x65, 0x72, 0x61, 0x6c,
	0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x22, 0x4e, 0x0a, 0x14,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x36, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x74, 0x65, 0x73, 0x73, 0x65, 0x72, 0x61, 0x6c,
	0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x22, 0x4f, 0x0a, 0x15,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x36, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x74, 0x65, 0x73, 0x73, 0x65, 0x72, 0x61,
	0x6c, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x22, 0x39, 0x0a,
	0x18, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67,
	0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70,
	0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x8c, 0x01, 0x0a, 0x19, 0x4c, 0x69, 0x73,
	0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x47, 0x0a, 0x0d, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x74, 0x65, 0x73, 0x73, 0x65, 0x72, 0x61, 0x6c, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64,
	0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x0d, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61,
	0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x28, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x4f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x22, 0x60, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x45, 0x0a, 0x0c,
	0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x74, 0x65, 0x73, 0x73, 0x65, 0x72, 0x61, 0x6c, 0x2e, 0x62, 0x61,
	0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x22, 0x62, 0x0a, 0x19, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x45, 0x0a, 0x0c, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x74, 0x65, 0x73, 0x73, 0x65, 0x72, 0x61,
	0x6c, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x6f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x63, 0x0a, 0x1a, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x45, 0x0a, 0x0c, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x74, 0x65,
	0x73, 0x73, 0x65, 0x72, 0x61, 0x6c, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76,
	0x31, 0x2e, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c,
	0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x72, 0x0a, 0x19,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x45, 0x0a, 0x0c, 0x6f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x74, 0x65, 0x73, 0x73, 0x65, 0x72, 0x61, 0x6c, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65,
	0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x0c, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0x63, 0x0a, 0x1a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x45,
	0x0a, 0x0c, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x74, 0x65, 0x73, 0x73, 0x65, 0x72, 0x61, 0x6c, 0x2e,
	0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x2b, 0x0a, 0x19, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x22, 0x1c, 0x0a, 0x1a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x54, 0x0a, 0x29, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x48, 0x6f, 0x73, 0x74, 0x65, 0x64, 0x44,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x27, 0x0a,
	0x0f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0xb0, 0x01, 0x0a, 0x2a, 0x47, 0x65, 0x74, 0x4f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x48, 0x6f, 0x73, 0x74, 0x65, 0x64, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x81, 0x01, 0x0a, 0x22, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x5f, 0x68, 0x6f,
	0x73, 0x74, 0x65, 0x64, 0x5f, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x34, 0x2e, 0x74, 0x65, 0x73, 0x73, 0x65, 0x72, 0x61, 0x6c, 0x2e, 0x62, 0x61,
	0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x48, 0x6f, 0x73, 0x74, 0x65,
	0x64, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x52, 0x1f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x48, 0x6f, 0x73, 0x74,
	0x65, 0x64, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x22, 0xdb, 0x01, 0x0a, 0x2c, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x48, 0x6f, 0x73, 0x74, 0x65, 0x64, 0x44, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x6f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x12, 0x81, 0x01, 0x0a, 0x22, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x5f, 0x68, 0x6f, 0x73, 0x74,
	0x65, 0x64, 0x5f, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x34, 0x2e, 0x74, 0x65, 0x73, 0x73, 0x65, 0x72, 0x61, 0x6c, 0x2e, 0x62, 0x61, 0x63, 0x6b,
	0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x48, 0x6f, 0x73, 0x74, 0x65, 0x64, 0x44,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x52, 0x1f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x48, 0x6f, 0x73, 0x74, 0x65, 0x64,
	0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x22, 0xb3, 0x01, 0x0a, 0x2d, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x48, 0x6f, 0x73, 0x74, 0x65, 0x64, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x81, 0x01, 0x0a, 0x22, 0x6f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x5f, 0x68, 0x6f, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x74, 0x65, 0x73, 0x73, 0x65, 0x72, 0x61,
	0x6c, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x48,
	0x6f, 0x73, 0x74, 0x65, 0x64, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x52, 0x1f, 0x6f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x48, 0x6f, 0x73, 0x74, 0x65, 0x64, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x22, 0x53, 0x0a,
	0x28, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x4d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x6f, 0x66, 0x74, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49,
	0x44, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x6f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x22, 0xab, 0x01, 0x0a, 0x29, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x6f, 0x66, 0x74, 0x54,
	0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x44, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x7e, 0x0a, 0x21, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x6f, 0x66, 0x74, 0x5f, 0x74, 0x65, 0x6e, 0x61, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x74, 0x65,
	0x73, 0x73, 0x65, 0x72, 0x61, 0x6c, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76,
	0x31, 0x2e, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x69,
	0x63, 0x72, 0x6f, 0x73, 0x6f, 0x66, 0x74, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x44, 0x73,
	0x52, 0x1e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x69,
	0x63, 0x72, 0x6f, 0x73, 0x6f, 0x66, 0x74, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x73,
	0x22, 0xd6, 0x01, 0x0a, 0x2b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x6f, 0x66, 0x74,
	0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x44, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x27, 0x0a, 0x0f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x7e, 0x0a, 0x21, 0x6f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73,
	0x6f, 0x66, 0x74, 0x5f, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x74, 0x65, 0x73, 0x73, 0x65, 0x72, 0x61, 0x6c, 0x2e,
	0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x6f, 0x66, 0x74,
	0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x44, 0x73, 0x52, 0x1e, 0x6f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x6f, 0x66, 0x74,
	0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x73, 0x22, 0xae, 0x01, 0x0a, 0x2c, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x4d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x6f, 0x66, 0x74, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49,
	0x44, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x7e, 0x0a, 0x21, 0x6f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x69, 0x63, 0x72, 0x6f,
	0x73, 0x6f, 0x66, 0x74, 0x5f, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x74, 0x65, 0x73, 0x73, 0x65, 0x72, 0x61, 0x6c,
	0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x6f, 0x66,
	0x74, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x44, 0x73, 0x52, 0x1e, 0x6f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x6f, 0x66,
	0x74, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x73, 0x22, 0x6b, 0x0a, 0x1b, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x53, 0x41, 0x4d, 0x4c, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4c, 0x0a, 0x0f, 0x73, 0x61, 0x6d,
	0x6c, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x23, 0x2e, 0x74, 0x65, 0x73, 0x73, 0x65, 0x72, 0x61, 0x6c, 0x2e, 0x62, 0x61,
	0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x41, 0x4d, 0x4c, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x73, 0x61, 0x6d, 0x6c, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x6c, 0x0a, 0x1c, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x53, 0x41, 0x4d, 0x4c, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4c, 0x0a, 0x0f, 0x73, 0x61, 0x6d, 0x6c, 0x5f,
	0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x23, 0x2e, 0x74, 0x65, 0x73, 0x73, 0x65, 0x72, 0x61, 0x6c, 0x2e, 0x62, 0x61, 0x63, 0x6b,
	0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x41, 0x4d, 0x4c, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x73, 0x61, 0x6d, 0x6c, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x2a, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x53, 0x41, 0x4d, 0x4c,
	0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x22, 0x69, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x53, 0x41, 0x4d, 0x4c, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4c,
	0x0a, 0x0f, 0x73, 0x61, 0x6d, 0x6c, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x74, 0x65, 0x73, 0x73, 0x65, 0x72,
	0x61, 0x6c, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x41,
	0x4d, 0x4c, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x73, 0x61,
	0x6d, 0x6c, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x64, 0x0a, 0x1a,
	0x4c, 0x69, 0x73, 0x74, 0x53, 0x41, 0x4d, 0x4c, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x6f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x22, 0x95, 0x01, 0x0a, 0x1b, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x41, 0x4d, 0x4c, 0x43,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x4e, 0x0a, 0x10, 0x73, 0x61, 0x6d, 0x6c, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x74,
	0x65, 0x73, 0x73, 0x65, 0x72, 0x61, 0x6c, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x41, 0x4d, 0x4c, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x0f, 0x73, 0x61, 0x6d, 0x6c, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78,
	0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x7b, 0x0a, 0x1b, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x53, 0x41, 0x4d, 0x4c, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x4c, 0x0a, 0x0f, 0x73, 0x61, 0x6d,
	0x6c, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x23, 0x2e, 0x74, 0x65, 0x73, 0x73, 0x65, 0x72, 0x61, 0x6c, 0x2e, 0x62, 0x61,
	0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x41, 0x4d, 0x4c, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x73, 0x61, 0x6d, 0x6c, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x6c, 0x0a, 0x1c, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x53, 0x41, 0x4d, 0x4c, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4c, 0x0a, 0x0f, 0x73, 0x61, 0x6d, 0x6c, 0x5f,
	0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x23, 0x2e, 0x74, 0x65, 0x73, 0x73, 0x65, 0x72, 0x61, 0x6c, 0x2e, 0x62, 0x61, 0x63, 0x6b,
	0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x41, 0x4d, 0x4c, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x73, 0x61, 0x6d, 0x6c, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x2d, 0x0a, 0x1b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53,
	0x41, 0x4d, 0x4c, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x22, 0x1e, 0x0a, 0x1c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x41,
	0x4d, 0x4c, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x60, 0x0a, 0x16, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x43, 0x49, 0x4d,
	0x41, 0x50, 0x49, 0x4b, 0x65, 0x79, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x27,
	0x0a, 0x0f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x67,
	0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x86, 0x01, 0x0a, 0x17, 0x4c, 0x69, 0x73, 0x74, 0x53,
	0x43, 0x49, 0x4d, 0x41, 0x50, 0x49, 0x4b, 0x65, 0x79, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x43, 0x0a, 0x0d, 0x73, 0x63, 0x69, 0x6d, 0x5f, 0x61, 0x70, 0x69, 0x5f, 0x6b,
	0x65, 0x79, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x74, 0x65, 0x73, 0x73,
	0x65, 0x72, 0x61, 0x6c, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x43, 0x49, 0x4d, 0x41, 0x50, 0x49, 0x4b, 0x65, 0x79, 0x52, 0x0b, 0x73, 0x63, 0x69, 0x6d,
	0x41, 0x70, 0x69, 0x4b, 0x65, 0x79, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f,
	0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22,
	0x26, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x53, 0x43, 0x49, 0x4d, 0x41, 0x50, 0x49, 0x4b, 0x65, 0x79,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x5a, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x53, 0x43,
	0x49, 0x4d, 0x41, 0x50, 0x49, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x41, 0x0a, 0x0c, 0x73, 0x63, 0x69, 0x6d, 0x5f, 0x61, 0x70, 0x69, 0x5f, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x74, 0x65, 0x73, 0x73, 0x65, 0x72, 0x61,
	0x6c, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x43, 0x49,
	0x4d, 0x41, 0x50, 0x49, 0x4b, 0x65, 0x79, 0x52, 0x0a, 0x73, 0x63, 0x69, 0x6d, 0x41, 0x70, 0x69,
	0x4b, 0x65, 0x79, 0x22, 0x5c, 0x0a, 0x17, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x43, 0x49,
	0x4d, 0x41, 0x50, 0x49, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x41,
	0x0a, 0x0c, 0x73, 0x63, 0x69, 0x6d, 0x5f, 0x61, 0x70, 0x69, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x74, 0x65, 0x73, 0x73, 0x65, 0x72, 0x61, 0x6c, 0x2e,
	0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x43, 0x49, 0x4d, 0x41,
	0x50, 0x49, 0x4b, 0x65, 0x79, 0x52, 0x0a, 0x73, 0x63, 0x69, 0x6d, 0x41, 0x70, 0x69, 0x4b, 0x65,
	0x79, 0x22, 0x5d, 0x0a, 0x18, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x43, 0x49, 0x4d, 0x41,
	0x50, 0x49, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x41, 0x0a,
	0x0c, 0x73, 0x63, 0x69, 0x6d, 0x5f, 0x61, 0x70, 0x69, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x74, 0x65, 0x73, 0x73, 0x65, 0x72, 0x61, 0x6c, 0x2e, 0x62,
	0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x43, 0x49, 0x4d, 0x41, 0x50,
	0x49, 0x4b, 0x65, 0x79, 0x52, 0x0a, 0x73, 0x63, 0x69, 0x6d, 0x41, 0x70, 0x69, 0x4b, 0x65, 0x79,
	0x22, 0x6c, 0x0a, 0x17, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x43, 0x49, 0x4d, 0x41, 0x50,
	0x49, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x41, 0x0a, 0x0c, 0x73,
	0x63, 0x69, 0x6d, 0x5f, 0x61, 0x70, 0x69, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x74, 0x65, 0x73, 0x73, 0x65, 0x72, 0x61, 0x6c, 0x2e, 0x62, 0x61, 0x63,
	0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x43, 0x49, 0x4d, 0x41, 0x50, 0x49, 0x4b,
	0x65, 0x79, 0x52, 0x0a, 0x73, 0x63, 0x69, 0x6d, 0x41, 0x70, 0x69, 0x4b, 0x65, 0x79, 0x22, 0x5d,
	0x0a, 0x18, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x43, 0x49, 0x4d, 0x41, 0x50, 0x49, 0x4b,
	0x65, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x41, 0x0a, 0x0c, 0x73, 0x63,
	0x69, 0x6d, 0x5f, 0x61, 0x70, 0x69, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x74, 0x65, 0x73, 0x73, 0x65, 0x72, 0x61, 0x6c, 0x2e, 0x62, 0x61, 0x63, 0x6b,
	0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x43, 0x49, 0x4d, 0x41, 0x50, 0x49, 0x4b, 0x65,
	0x79, 0x52, 0x0a, 0x73, 0x63, 0x69, 0x6d, 0x41, 0x70, 0x69, 0x4b, 0x65, 0x79, 0x22, 0x29, 0x0a,
	0x17, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x43, 0x49, 0x4d, 0x41, 0x50, 0x49, 0x4b, 0x65,
	0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x1a, 0x0a, 0x18, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x53, 0x43, 0x49, 0x4d, 0x41, 0x50, 0x49, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x29, 0x0a, 0x17, 0x52, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x53, 0x43,
	0x49, 0x4d, 0x41, 0x50, 0x49, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22,
	0x5d, 0x0a, 0x18, 0x52, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x53, 0x43, 0x49, 0x4d, 0x41, 0x50, 0x49,
	0x4b, 0x65, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x41, 0x0a, 0x0c, 0x73,
	0x63, 0x69, 0x6d, 0x5f, 0x61, 0x70, 0x69, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x74, 0x65, 0x73, 0x73, 0x65, 0x72, 0x61, 0x6c, 0x2e, 0x62, 0x61, 0x63,
	0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x43, 0x49, 0x4d, 0x41, 0x50, 0x49, 0x4b,
	0x65, 0x79, 0x52, 0x0a, 0x73, 0x63, 0x69, 0x6d, 0x41, 0x70, 0x69, 0x4b, 0x65, 0x79, 0x22, 0x5a,
	0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x70,
	0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x6c, 0x0a, 0x11, 0x4c, 0x69,
	0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x2f, 0x0a, 0x05, 0x75, 0x73, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x74, 0x65, 0x73, 0x73, 0x65, 0x72, 0x61, 0x6c, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e,
	0x64, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x05, 0x75, 0x73, 0x65, 0x72, 0x73,
	0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50,
	0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x20, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x55,
	0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x40, 0x0a, 0x0f, 0x47, 0x65,
	0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2d, 0x0a,
	0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x74, 0x65,
	0x73, 0x73, 0x65, 0x72, 0x61, 0x6c, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76,
	0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x22, 0x42, 0x0a, 0x11,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x2d, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x74, 0x65, 0x73, 0x73, 0x65, 0x72, 0x61, 0x6c, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65,
	0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72,
	0x22, 0x43, 0x0a, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2d, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x74, 0x65, 0x73, 0x73, 0x65, 0x72, 0x61, 0x6c, 0x2e,
	0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52,
	0x04, 0x75, 0x73, 0x65, 0x72, 0x22, 0x52, 0x0a, 0x11, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55,
	0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2d, 0x0a, 0x04, 0x75, 0x73,
	0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x74, 0x65, 0x73, 0x73, 0x65,
	0x72, 0x61, 0x6c, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x22, 0x43, 0x0a, 0x12, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x2d, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x74, 0x65, 0x73, 0x73, 0x65, 0x72, 0x61, 0x6c, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64,
	0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x22, 0x23,
	0x0a, 0x11, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x22, 0x14, 0x0a, 0x12, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x55, 0x73, 0x65,
	0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x4d, 0x0a, 0x13, 0x4c, 0x69, 0x73,
	0x74, 0x50, 0x61, 0x73, 0x73, 0x6b, 0x65, 0x79, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67,
	0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70,
	0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x78, 0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74,
	0x50, 0x61, 0x73, 0x73, 0x6b, 0x65, 0x79, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x38, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x74, 0x65, 0x73, 0x73, 0x65, 0x72, 0x61, 0x6c, 0x2e, 0x62, 0x61,
	0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x73, 0x73, 0x6b, 0x65, 0x79,
	0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x6b, 0x65, 0x79, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65,
	0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x22, 0x23, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x50, 0x61, 0x73, 0x73, 0x6b, 0x65, 0x79,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x4c, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x50, 0x61,
	0x73, 0x73, 0x6b, 0x65, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x36, 0x0a,
	0x07, 0x70, 0x61, 0x73, 0x73, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x74, 0x65, 0x73, 0x73, 0x65, 0x72, 0x61, 0x6c, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e,
	0x64, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x73, 0x73, 0x6b, 0x65, 0x79, 0x52, 0x07, 0x70, 0x61,
	0x73, 0x73, 0x6b, 0x65, 0x79, 0x22, 0x5e, 0x0a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50,
	0x61, 0x73, 0x73, 0x6b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x36, 0x0a,
	0x07, 0x70, 0x61, 0x73, 0x73, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x74, 0x65, 0x73, 0x73, 0x65, 0x72, 0x61, 0x6c, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e,
	0x64, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x73, 0x73, 0x6b, 0x65, 0x79, 0x52, 0x07, 0x70, 0x61,
	0x73, 0x73, 0x6b, 0x65, 0x79, 0x22, 0x4f, 0x0a, 0x15, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50,
	0x61, 0x73, 0x73, 0x6b, 0x65, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x36,
	0x0a, 0x07, 0x70, 0x61, 0x73, 0x73, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x74, 0x65, 0x73, 0x73, 0x65, 0x72, 0x61, 0x6c, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65,
	0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x73, 0x73, 0x6b, 0x65, 0x79, 0x52, 0x07, 0x70,
	0x61, 0x73, 0x73, 0x6b, 0x65, 0x79, 0x22, 0x26, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x50, 0x61, 0x73, 0x73, 0x6b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x17,
	0x0a, 0x15, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x61, 0x73, 0x73, 0x6b, 0x65, 0x79, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x4d, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17,
	0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x67,
	0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x78, 0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x38,
	0x0a, 0x08, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x74, 0x65, 0x73, 0x73, 0x65, 0x72, 0x61, 0x6c, 0x2e, 0x62, 0x61, 0x63, 0x6b,
	0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x08,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74,
	0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x22, 0x23, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x4c, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x36, 0x0a, 0x07, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x74,
	0x65, 0x73, 0x73, 0x65, 0x72, 0x61, 0x6c, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x22, 0x60, 0x0a, 0x16, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x6e, 0x76, 0x69, 0x74, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x27, 0x0a,
	0x0f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x85, 0x01, 0x0a, 0x17, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x42, 0x0a, 0x0c, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x74, 0x65, 0x73, 0x73, 0x65, 0x72,
	0x61, 0x6c, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x52, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x49, 0x6e,
	0x76, 0x69, 0x74, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61,
	0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x26, 0x0a,
	0x14, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x59, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x40,
	0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x74, 0x65, 0x73, 0x73, 0x65, 0x72, 0x61, 0x6c, 0x2e, 0x62,
	0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e,
	0x76, 0x69, 0x74, 0x65, 0x52, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65,
	0x22, 0x5b, 0x0a, 0x17, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e,
	0x76, 0x69, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x40, 0x0a, 0x0b, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x74, 0x65, 0x73, 0x73, 0x65, 0x72, 0x61, 0x6c, 0x2e, 0x62, 0x61, 0x63, 0x6b,
	0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x76, 0x69, 0x74,
	0x65, 0x52, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x22, 0x5c, 0x0a,
	0x18, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x76, 0x69, 0x74,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x40, 0x0a, 0x0b, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x74, 0x65, 0x73, 0x73, 0x65, 0x72, 0x61, 0x6c, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e,
	0x64, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x52,
	0x0a, 0x75, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x22, 0x29, 0x0a, 0x17, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x1a, 0x0a, 0x18, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x3a, 0x0a, 0x19, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x41, 0x50, 0x49, 0x4b, 0x65, 0x79, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x92,
	0x01, 0x0a, 0x1a, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x41, 0x50,
	0x49, 0x4b, 0x65, 0x79, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4c, 0x0a,
	0x10, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x61, 0x70, 0x69, 0x5f, 0x6b, 0x65, 0x79,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x74, 0x65, 0x73, 0x73, 0x65, 0x72,
	0x61, 0x6c, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x41, 0x50, 0x49, 0x4b, 0x65, 0x79, 0x52, 0x0e, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x41, 0x70, 0x69, 0x4b, 0x65, 0x79, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6e,
	0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x22, 0x29, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x41, 0x50, 0x49, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x66,
	0x0a, 0x18, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x41, 0x50, 0x49, 0x4b,
	0x65, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4a, 0x0a, 0x0f, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x61, 0x70, 0x69, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x74, 0x65, 0x73, 0x73, 0x65, 0x72, 0x61, 0x6c, 0x2e, 0x62,
	0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x41, 0x50, 0x49, 0x4b, 0x65, 0x79, 0x52, 0x0d, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x41, 0x70, 0x69, 0x4b, 0x65, 0x79, 0x22, 0x68, 0x0a, 0x1a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x41, 0x50, 0x49, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x4a, 0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f,
	0x61, 0x70, 0x69, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e,
	0x74, 0x65, 0x73, 0x73, 0x65, 0x72, 0x61, 0x6c, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64,
	0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x41, 0x50, 0x49, 0x4b, 0x65,
	0x79, 0x52, 0x0d, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x41, 0x70, 0x69, 0x4b, 0x65, 0x79,
	0x22, 0x69, 0x0a, 0x1b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x41, 0x50, 0x49, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x4a, 0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x61, 0x70, 0x69, 0x5f, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x74, 0x65, 0x73, 0x73, 0x65,
	0x72, 0x61, 0x6c, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x50,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x41, 0x50, 0x49, 0x4b, 0x65, 0x79, 0x52, 0x0d, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x41, 0x70, 0x69, 0x4b, 0x65, 0x79, 0x22, 0x78, 0x0a, 0x1a, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x41, 0x50, 0x49, 0x4b,
	0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x4a, 0x0a, 0x0f, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x5f, 0x61, 0x70, 0x69, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x74, 0x65, 0x73, 0x73, 0x65, 0x72, 0x61, 0x6c, 0x2e, 0x62, 0x61,
	0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x41, 0x50, 0x49, 0x4b, 0x65, 0x79, 0x52, 0x0d, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x41,
	0x70, 0x69, 0x4b, 0x65, 0x79, 0x22, 0x69, 0x0a, 0x1b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x41, 0x50, 0x49, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4a, 0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f,
	0x61, 0x70, 0x69, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e,
	0x74, 0x65, 0x73, 0x73, 0x65, 0x72, 0x61, 0x6c, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64,
	0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x41, 0x50, 0x49, 0x4b, 0x65,
	0x79, 0x52, 0x0d, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x41, 0x70, 0x69, 0x4b, 0x65, 0x79,
	0x22, 0x2c, 0x0a, 0x1a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x41, 0x50, 0x49, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x1d,
	0x0a, 0x1b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x41,
	0x50, 0x49, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2c, 0x0a,
	0x1a, 0x52, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x41, 0x50,
	0x49, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x69, 0x0a, 0x1b, 0x52,
	0x65, 0x76, 0x6f, 0x6b, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x41, 0x50, 0x49, 0x4b,
	0x65, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4a, 0x0a, 0x0f, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x61, 0x70, 0x69, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x74, 0x65, 0x73, 0x73, 0x65, 0x72, 0x61, 0x6c, 0x2e, 0x62,
	0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x41, 0x50, 0x49, 0x4b, 0x65, 0x79, 0x52, 0x0d, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x41, 0x70, 0x69, 0x4b, 0x65, 0x79, 0x22, 0x1f, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x56, 0x61, 0x75,
	0x6c, 0x74, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x7e, 0x0a, 0x1e, 0x47, 0x65, 0x74, 0x56, 0x61,
	0x75, 0x6c, 0x74, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5c, 0x0a, 0x15, 0x76, 0x61, 0x75,
	0x6c, 0x74, 0x5f, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x74, 0x65, 0x73, 0x73, 0x65,
	0x72, 0x61, 0x6c, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x56,
	0x61, 0x75, 0x6c, 0x74, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x52, 0x13, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x22, 0x3b, 0x0a, 0x1a, 0x4c, 0x69, 0x73, 0x74, 0x50,
	0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x61, 0x62, 0x6c, 0x65, 0x4b, 0x65, 0x79, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x95, 0x01, 0x0a, 0x1b, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x75, 0x62,
	0x6c, 0x69, 0x73, 0x68, 0x61, 0x62, 0x6c, 0x65, 0x4b, 0x65, 0x79, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4e, 0x0a, 0x10, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x61,
	0x62, 0x6c, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23,
	0x2e, 0x74, 0x65, 0x73, 0x73, 0x65, 0x72, 0x61, 0x6c, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e,
	0x64, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x61, 0x62, 0x6c, 0x65,
	0x4b, 0x65, 0x79, 0x52, 0x0f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x61, 0x62, 0x6c, 0x65,
	0x4b, 0x65, 0x79, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67,
	0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e,
	0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x2a, 0x0a, 0x18,
	0x47, 0x65, 0x74, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x61, 0x62, 0x6c, 0x65, 0x4b, 0x65,
	0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x69, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x50,
	0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x61, 0x62, 0x6c, 0x65, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4c, 0x0a, 0x0f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68,
	0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23,
	0x2e, 0x74, 0x65, 0x73, 0x73, 0x65, 0x72, 0x61, 0x6c, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e,
	0x64, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x61, 0x62, 0x6c, 0x65,
	0x4b, 0x65, 0x79, 0x52, 0x0e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x61, 0x62, 0x6c, 0x65,
	0x4b, 0x65, 0x79, 0x22, 0x6b, 0x0a, 0x1b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x75, 0x62,
	0x6c, 0x69, 0x73, 0x68, 0x61, 0x62, 0x6c, 0x65, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x4c, 0x0a, 0x0f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x61, 0x62, 0x6c,
	0x65, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x74, 0x65,
	0x73, 0x73, 0x65, 0x72, 0x61, 0x6c, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76,
	0x31, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x61, 0x62, 0x6c, 0x65, 0x4b, 0x65, 0x79,
	0x52, 0x0e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x61, 0x62, 0x6c, 0x65, 0x4b, 0x65, 0x79,
	0x22, 0x6c, 0x0a, 0x1c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73,
	0x68, 0x61, 0x62, 0x6c, 0x65, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x4c, 0x0a, 0x0f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x61, 0x62, 0x6c, 0x65, 0x5f,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x74, 0x65, 0x73, 0x73,
	0x65, 0x72, 0x61, 0x6c, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e,
	0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x61, 0x62, 0x6c, 0x65, 0x4b, 0x65, 0x79, 0x52, 0x0e,
	0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x61, 0x62, 0x6c, 0x65, 0x4b, 0x65, 0x79, 0x22, 0x7b,
	0x0a, 0x1b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x61,
	0x62, 0x6c, 0x65, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x4c, 0x0a,
	0x0f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6b, 0x65, 0x79,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x74, 0x65, 0x73, 0x73, 0x65, 0x72, 0x61,
	0x6c, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x75, 0x62,
	0x6c, 0x69, 0x73, 0x68, 0x61, 0x62, 0x6c, 0x65, 0x4b, 0x65, 0x79, 0x52, 0x0e, 0x70, 0x75, 0x62,
	0x6c, 0x69, 0x73, 0x68, 0x61, 0x62, 0x6c, 0x65, 0x4b, 0x65, 0x79, 0x22, 0x6c, 0x0a, 0x1c, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x61, 0x62, 0x6c, 0x65,
	0x4b, 0x65, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4c, 0x0a, 0x0f, 0x70,
	0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x74, 0x65, 0x73, 0x73, 0x65, 0x72, 0x61, 0x6c, 0x2e,
	0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69,
	0x73, 0x68, 0x61, 0x62, 0x6c, 0x65, 0x4b, 0x65, 0x79, 0x52, 0x0e, 0x70, 0x75, 0x62, 0x6c, 0x69,
	0x73, 0x68, 0x61, 0x62, 0x6c, 0x65, 0x4b, 0x65, 0x79, 0x22, 0x2d, 0x0a, 0x1b, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x61, 0x62, 0x6c, 0x65, 0x4b, 0x65,
	0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x1e, 0x0a, 0x1c, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x61, 0x62, 0x6c, 0x65, 0x4b, 0x65, 0x79,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1d, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x50,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x55, 0x49, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x76, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x50, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x55, 0x49, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x56, 0x0a, 0x13, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x5f, 0x75, 0x69, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x74, 0x65, 0x73, 0x73, 0x65, 0x72, 0x61, 0x6c, 0x2e,
	0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x55, 0x49, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x11, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x55, 0x69, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x22,
	0x91, 0x02, 0x0a, 0x1e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x55, 0x49, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x22, 0x0a, 0x0d, 0x6c, 0x6f, 0x67, 0x5f, 0x69, 0x6e, 0x5f, 0x6c, 0x61, 0x79,
	0x6f, 0x75, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6c, 0x6f, 0x67, 0x49, 0x6e,
	0x4c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x12, 0x28, 0x0a, 0x0d, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72,
	0x79, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52,
	0x0c, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x88, 0x01, 0x01,
	0x12, 0x37, 0x0a, 0x18, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x5f, 0x64, 0x61, 0x72, 0x6b, 0x5f,
	0x6d, 0x6f, 0x64, 0x65, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x15, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x44, 0x61, 0x72, 0x6b, 0x4d, 0x6f,
	0x64, 0x65, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x3a, 0x0a, 0x17, 0x64, 0x61, 0x72,
	0x6b, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x5f, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x63,
	0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x14, 0x64, 0x61,
	0x72, 0x6b, 0x4d, 0x6f, 0x64, 0x65, 0x50, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x43, 0x6f, 0x6c,
	0x6f, 0x72, 0x88, 0x01, 0x01, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72,
	0x79, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x42, 0x1a, 0x0a, 0x18, 0x5f, 0x64, 0x61, 0x72, 0x6b,
	0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x5f, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x63, 0x6f,
	0x6c, 0x6f, 0x72, 0x22, 0xcc, 0x04, 0x0a, 0x1f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x55, 0x49, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x3b, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x4b, 0x0a, 0x23, 0x64, 0x61, 0x72, 0x6b, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x5f, 0x6c, 0x6f,
	0x67, 0x6f, 0x5f, 0x70, 0x72, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x5f, 0x75, 0x70, 0x6c,
	0x6f, 0x61, 0x64, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1e, 0x64,
	0x61, 0x72, 0x6b, 0x4d, 0x6f, 0x64, 0x65, 0x4c, 0x6f, 0x67, 0x6f, 0x50, 0x72, 0x65, 0x73, 0x69,
	0x67, 0x6e, 0x65, 0x64, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x55, 0x72, 0x6c, 0x12, 0x3f, 0x0a,
	0x1c, 0x66, 0x61, 0x76, 0x69, 0x63, 0x6f, 0x6e, 0x5f, 0x70, 0x72, 0x65, 0x73, 0x69, 0x67, 0x6e,
	0x65, 0x64, 0x5f, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x19, 0x66, 0x61, 0x76, 0x69, 0x63, 0x6f, 0x6e, 0x50, 0x72, 0x65, 0x73,
	0x69, 0x67, 0x6e, 0x65, 0x64, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x55, 0x72, 0x6c, 0x12, 0x39,
	0x0a, 0x19, 0x6c, 0x6f, 0x67, 0x6f, 0x5f, 0x70, 0x72, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64,
	0x5f, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x16, 0x6c, 0x6f, 0x67, 0x6f, 0x50, 0x72, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64,
	0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x55, 0x72, 0x6c, 0x12, 0x35, 0x0a, 0x17, 0x64, 0x61, 0x72,
	0x6b, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x5f, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x63,
	0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x64, 0x61, 0x72, 0x6b,
	0x4d, 0x6f, 0x64, 0x65, 0x50, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x43, 0x6f, 0x6c, 0x6f, 0x72,
	0x12, 0x37, 0x0a, 0x18, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x5f, 0x64, 0x61, 0x72, 0x6b, 0x5f,
	0x6d, 0x6f, 0x64, 0x65, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x15, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x44, 0x61, 0x72, 0x6b, 0x4d, 0x6f,
	0x64, 0x65, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x72, 0x69,
	0x6d, 0x61, 0x72, 0x79, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x22,
	0x0a, 0x0d, 0x6c, 0x6f, 0x67, 0x5f, 0x69, 0x6e, 0x5f, 0x6c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6c, 0x6f, 0x67, 0x49, 0x6e, 0x4c, 0x61, 0x79, 0x6f,
	0x75, 0x74, 0x22, 0x4b, 0x0a, 0x20, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x4f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22,
	0x23, 0x0a, 0x21, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3c, 0x0a, 0x1b, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x50,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x49, 0x64, 0x22, 0x1e, 0x0a, 0x1c, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x4a, 0x0a, 0x1f, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x4f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x22,
	0x0a, 0x20, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x3b, 0x0a, 0x1a, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x22,
	0x1d, 0x0a, 0x1b, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x45,
	0x0a, 0x12, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x69, 0x6d, 0x65,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x69, 0x6d,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x22, 0x8c, 0x01, 0x0a, 0x23, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x6d, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x65, 0x0a,
	0x18, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x6d, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2b, 0x2e, 0x74, 0x65, 0x73, 0x73, 0x65, 0x72, 0x61, 0x6c, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65,
	0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6d, 0x70, 0x65, 0x72, 0x73,
	0x6f, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x16, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x6d, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x8d, 0x01, 0x0a, 0x24, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x6d, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x65, 0x0a,
	0x18, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x6d, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2b, 0x2e, 0x74, 0x65, 0x73, 0x73, 0x65, 0x72, 0x61, 0x6c, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65,
	0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6d, 0x70, 0x65, 0x72, 0x73,
	0x6f, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x16, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x6d, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x32, 0xa2, 0x41, 0x0a, 0x0e, 0x42, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x7a, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x50, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x26, 0x2e, 0x74, 0x65, 0x73, 0x73, 0x65, 0x72, 0x61, 0x6c,
	0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x50,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e,
	0x74, 0x65, 0x73, 0x73, 0x65, 0x72, 0x61, 0x6c, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x15, 0x12, 0x13,
	0x2f, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x12, 0x95, 0x01, 0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2d, 0x2e, 0x74, 0x65, 0x73, 0x73,
	0x65, 0x72, 0x61, 0x6c, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x74, 0x65, 0x73, 0x73, 0x65,
	0x72, 0x61, 0x6c, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x21, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1b,
	0x12, 0x19, 0x2f, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x94, 0x01, 0x0a, 0x0f,
	0x47, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x2b, 0x2e, 0x74, 0x65, 0x73, 0x73, 0x65, 0x72, 0x61, 0x6c, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65,
	0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x74,
	0x65, 0x73, 0x73, 0x65, 0x72, 0x61, 0x6c, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x26, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x20, 0x12, 0x1e, 0x2f, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2f, 0x76, 0x31, 0x2f,
	0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x69,
	0x64, 0x7d, 0x12, 0xa6, 0x01, 0x0a, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x2e, 0x74, 0x65, 0x73, 0x73,
	0x65, 0x72, 0x61, 0x6c, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x74, 0x65, 0x73, 0x73,
	0x65, 0x72, 0x61, 0x6c, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2f, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x29, 0x3a, 0x0c, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0x19, 0x2f, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0xab, 0x01, 0x0a, 0x12,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x2e, 0x2e, 0x74, 0x65, 0x73, 0x73, 0x65, 0x72, 0x61, 0x6c, 0x2e, 0x62, 0x61,
	0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x74, 0x65, 0x73, 0x73, 0x65, 0x72, 0x61, 0x6c, 0x2e, 0x62, 0x61,
	0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x34, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2e, 0x3a, 0x0c, 0x6f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x32, 0x1e, 0x2f, 0x62, 0x61, 0x63, 0x6b,
	0x65, 0x6e, 0x64, 0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0x9d, 0x01, 0x0a, 0x12, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x2e, 0x2e, 0x74, 0x65, 0x73, 0x73, 0x65, 0x72, 0x61, 0x6c, 0x2e, 0x62, 0x61, 0x63, 0x6b,
	0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x2f, 0x2e, 0x74, 0x65, 0x73, 0x73, 0x65, 0x72, 0x61, 0x6c, 0x2e, 0x62, 0x61, 0x63, 0x6b,
	0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x26, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x20, 0x2a, 0x1e, 0x2f, 0x62, 0x61, 0x63, 0x6b,
	0x65, 0x6e, 0x64, 0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0xf0, 0x01, 0x0a, 0x22, 0x47, 0x65,
	0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x48, 0x6f, 0x73, 0x74, 0x65, 0x64, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73,
	0x12, 0x3e, 0x2e, 0x74, 0x65, 0x73, 0x73, 0x65, 0x72, 0x61, 0x6c, 0x2e, 0x62, 0x61, 0x63, 0x6b,
	0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x48, 0x6f, 0x73, 0x74,
	0x65, 0x64, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x3f, 0x2e, 0x74, 0x65, 0x73, 0x73, 0x65, 0x72, 0x61, 0x6c, 0x2e, 0x62, 0x61, 0x63, 0x6b,
	0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x48, 0x6f, 0x73, 0x74,
	0x65, 0x64, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x49, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x43, 0x12, 0x41, 0x2f, 0x62, 0x61, 0x63, 0x6b,
	0x65, 0x6e, 0x64, 0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2d, 0x68, 0x6f,
	0x73, 0x74, 0x65, 0x64, 0x2d, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x12, 0x9d, 0x02, 0x0a,
	0x25, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x48, 0x6f, 0x73, 0x74, 0x65, 0x64, 0x44,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x12, 0x41, 0x2e, 0x74, 0x65, 0x73, 0x73, 0x65, 0x72, 0x61,
	0x6c, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x48, 0x6f, 0x73, 0x74, 0x65, 0x64, 0x44, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x42, 0x2e, 0x74, 0x65, 0x73, 0x73,
	0x65, 0x72, 0x61, 0x6c, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x48, 0x6f, 0x73, 0x74, 0x65, 0x64, 0x44, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x6d, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x67, 0x3a, 0x22, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x5f, 0x68, 0x6f, 0x73, 0x74, 0x65,
	0x64, 0x5f, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x32, 0x41, 0x2f, 0x62, 0x61, 0x63, 0x6b,
	0x65, 0x6e, 0x64, 0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2d, 0x68, 0x6f,
	0x73, 0x74, 0x65, 0x64, 0x2d, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x12, 0xec, 0x01, 0x0a,
	0x21, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x4d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x6f, 0x66, 0x74, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49,
	0x44, 0x73, 0x12, 0x3d, 0x2e, 0x74, 0x65, 0x73, 0x73, 0x65, 0x72, 0x61, 0x6c, 0x2e, 0x62, 0x61,
	0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x6f, 0x66,
	0x74, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x44, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x3e, 0x2e, 0x74, 0x65, 0x73, 0x73, 0x65, 0x72, 0x61, 0x6c, 0x2e, 0x62, 0x61, 0x63,
	0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x6f, 0x66, 0x74,
	0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x44, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x48, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x42, 0x12, 0x40, 0x2f, 0x62, 0x61, 0x63, 0x6b,
	0x65, 0x6e, 0x64, 0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x6f, 0x66, 0x74,
	0x2d, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x2d, 0x69, 0x64, 0x73, 0x12, 0x98, 0x02, 0x0a, 0x24,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x4d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x6f, 0x66, 0x74, 0x54, 0x65, 0x6e, 0x61, 0x6e,
	0x74, 0x49, 0x44, 0x73, 0x12, 0x40, 0x2e, 0x74, 0x65, 0x73, 0x73, 0x65, 0x72, 0x61, 0x6c, 0x2e,
	0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x69, 0x63,
	0x72, 0x6f, 0x73, 0x6f, 0x66, 0x74, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x44, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x41, 0x2e, 0x74, 0x65, 0x73, 0x73, 0x65, 0x72, 0x61,
	0x6c, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d,
	0x69, 0x63, 0x72, 0x6f, 0x73, 0x6f, 0x66, 0x74, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x44,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x6b, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x65, 0x3a, 0x21, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x6f, 0x66, 0x74, 0x5f, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x73, 0x32, 0x40, 0x2f, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2f, 0x76,
	0x31, 0x2f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f,
	0x7b, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x7d, 0x2f, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x6f, 0x66, 0x74, 0x2d, 0x74, 0x65, 0x6e, 0x61,
	0x6e, 0x74, 0x2d, 0x69, 0x64, 0x73, 0x12, 0x9e, 0x01, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x53,
	0x41, 0x4d, 0x4c, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2f,
	0x2e, 0x74, 0x65, 0x73, 0x73, 0x65, 0x72, 0x61, 0x6c, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e,
	0x64, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x41, 0x4d, 0x4c, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x30, 0x2e, 0x74, 0x65, 0x73, 0x73, 0x65, 0x72, 0x61, 0x6c, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65,
	0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x41, 0x4d, 0x4c, 0x43, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x24, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1e, 0x12, 0x1c, 0x2f, 0x62, 0x61, 0x63, 0x6b,
	0x65, 0x6e, 0x64, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x61, 0x6d, 0x6c, 0x2d, 0x63, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x9d, 0x01, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x53,
	0x41, 0x4d, 0x4c, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2d, 0x2e,
	0x74, 0x65, 0x73, 0x73, 0x65, 0x72, 0x61, 0x6c, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x41, 0x4d, 0x4c, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x74,
	0x65, 0x73, 0x73, 0x65, 0x72, 0x61, 0x6c, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x41, 0x4d, 0x4c, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x29, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x23, 0x12, 0x21, 0x2f, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2f, 0x76,
	0x31, 0x2f, 0x73, 0x61, 0x6d, 0x6c, 0x2d, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0xb2, 0x01, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x53, 0x41, 0x4d, 0x4c, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x30, 0x2e, 0x74, 0x65, 0x73, 0x73, 0x65, 0x72, 0x61, 0x6c, 0x2e, 0x62, 0x61, 0x63, 0x6b,
	0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x41, 0x4d,
	0x4c, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x31, 0x2e, 0x74, 0x65, 0x73, 0x73, 0x65, 0x72, 0x61, 0x6c, 0x2e, 0x62, 0x61,
	0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53,
	0x41, 0x4d, 0x4c, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x35, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2f, 0x3a, 0x0f, 0x73,
	0x61, 0x6d, 0x6c, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x1c,
	0x2f, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x61, 0x6d, 0x6c,
	0x2d, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0xb7, 0x01, 0x0a,
	0x14, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x41, 0x4d, 0x4c, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x30, 0x2e, 0x74, 0x65, 0x73, 0x73, 0x65, 0x72, 0x61, 0x6c,
	0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x53, 0x41, 0x4d, 0x4c, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x74, 0x65, 0x73, 0x73, 0x65, 0x72,
	0x61, 0x6c, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x53, 0x41, 0x4d, 0x4c, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3a, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x34, 0x3a, 0x0f, 0x73, 0x61, 0x6d, 0x6c, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x32, 0x21, 0x2f, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2f, 0x76, 0x31,
	0x2f, 0x73, 0x61, 0x6d, 0x6c, 0x2d, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0xa6, 0x01, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x53, 0x41, 0x4d, 0x4c, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x30, 0x2e, 0x74, 0x65, 0x73, 0x73, 0x65, 0x72, 0x61, 0x6c, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65,
	0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x41, 0x4d, 0x4c,
	0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x31, 0x2e, 0x74, 0x65, 0x73, 0x73, 0x65, 0x72, 0x61, 0x6c, 0x2e, 0x62, 0x61, 0x63,
	0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x41,
	0x4d, 0x4c, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x29, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x23, 0x2a, 0x21, 0x2f, 0x62,
	0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x61, 0x6d, 0x6c, 0x2d, 0x63,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12,
	0x8f, 0x01, 0x0a, 0x0f, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x43, 0x49, 0x4d, 0x41, 0x50, 0x49, 0x4b,
	0x65, 0x79, 0x73, 0x12, 0x2b, 0x2e, 0x74, 0x65, 0x73, 0x73, 0x65, 0x72, 0x61, 0x6c, 0x2e, 0x62,
	0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x43,
	0x49, 0x4d, 0x41, 0x50, 0x49, 0x4b, 0x65, 0x79, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x2c, 0x2e, 0x74, 0x65, 0x73, 0x73, 0x65, 0x72, 0x61, 0x6c, 0x2e, 0x62, 0x61, 0x63, 0x6b,
	0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x43, 0x49, 0x4d, 0x41,
	0x50, 0x49, 0x4b, 0x65, 0x79, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x21,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1b, 0x12, 0x19, 0x2f, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64,
	0x2f, 0x76, 0x31, 0x2f, 0x73, 0x63, 0x69, 0x6d, 0x2d, 0x61, 0x70, 0x69, 0x2d, 0x6b, 0x65, 0x79,
	0x73, 0x12, 0x8e, 0x01, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x53, 0x43, 0x49, 0x4d, 0x41, 0x50, 0x49,
	0x4b, 0x65, 0x79, 0x12, 0x29, 0x2e, 0x74, 0x65, 0x73, 0x73, 0x65, 0x72, 0x61, 0x6c, 0x2e, 0x62,
	0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x43, 0x49,
	0x4d, 0x41, 0x50, 0x49, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a,
	0x2e, 0x74, 0x65, 0x73, 0x73, 0x65, 0x72, 0x61, 0x6c, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e,
	0x64, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x43, 0x49, 0x4d, 0x41, 0x50, 0x49, 0x4b,
	0x65, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x26, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x20, 0x12, 0x1e, 0x2f, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2f, 0x76, 0x31, 0x2f,
	0x73, 0x63, 0x69, 0x6d, 0x2d, 0x61, 0x70, 0x69, 0x2d, 0x6b, 0x65, 0x79, 0x73, 0x2f, 0x7b, 0x69,
	0x64, 0x7d, 0x12, 0xa0, 0x01, 0x0a, 0x10, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x43, 0x49,
	0x4d, 0x41, 0x50, 0x49, 0x4b, 0x65, 0x79, 0x12, 0x2c, 0x2e, 0x74, 0x65, 0x73, 0x73, 0x65, 0x72,
	0x61, 0x6c, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x53, 0x43, 0x49, 0x4d, 0x41, 0x50, 0x49, 0x4b, 0x65, 0x79, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x74, 0x65, 0x73, 0x73, 0x65, 0x72, 0x61, 0x6c,
	0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x53, 0x43, 0x49, 0x4d, 0x41, 0x50, 0x49, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x29, 0x3a, 0x0c, 0x73, 0x63,
	0x69, 0x6d, 0x5f, 0x61, 0x70, 0x69, 0x5f, 0x6b, 0x65, 0x79, 0x22, 0x19, 0x2f, 0x62, 0x61, 0x63,
	0x6b, 0x65, 0x6e, 0x64, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x63, 0x69, 0x6d, 0x2d, 0x61, 0x70, 0x69,
	0x2d, 0x6b, 0x65, 0x79, 0x73, 0x12, 0xa5, 0x01, 0x0a, 0x10, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x53, 0x43, 0x49, 0x4d, 0x41, 0x50, 0x49, 0x4b, 0x65, 0x79, 0x12, 0x2c, 0x2e, 0x74, 0x65, 0x73,
	0x73, 0x65, 0x72, 0x61, 0x6c, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x43, 0x49, 0x4d, 0x41, 0x50, 0x49, 0x4b, 0x65,
	0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x74, 0x65, 0x73, 0x73, 0x65,
	0x72, 0x61, 0x6c, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x43, 0x49, 0x4d, 0x41, 0x50, 0x49, 0x4b, 0x65, 0x79, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x34, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2e, 0x3a,
	0x0c, 0x73, 0x63, 0x69, 0x6d, 0x5f, 0x61, 0x70, 0x69, 0x5f, 0x6b, 0x65, 0x79, 0x32, 0x1e, 0x2f,
	0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x63, 0x69, 0x6d, 0x2d,
	0x61, 0x70, 0x69, 0x2d, 0x6b, 0x65, 0x79, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0x97, 0x01,
	0x0a, 0x10, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x43, 0x49, 0x4d, 0x41, 0x50, 0x49, 0x4b,
	0x65, 0x79, 0x12, 0x2c, 0x2e, 0x74, 0x65, 0x73, 0x73, 0x65, 0x72, 0x61, 0x6c, 0x2e, 0x62, 0x61,
	0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53,
	0x43, 0x49, 0x4d, 0x41, 0x50, 0x49, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x2d, 0x2e, 0x74, 0x65, 0x73, 0x73, 0x65, 0x72, 0x61, 0x6c, 0x2e, 0x62, 0x61, 0x63, 0x6b,
	0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x43, 0x49,
	0x4d, 0x41, 0x50, 0x49, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x26, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x20, 0x2a, 0x1e, 0x2f, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e,
	0x64, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x63, 0x69, 0x6d, 0x2d, 0x61, 0x70, 0x69, 0x2d, 0x6b, 0x65,
	0x79, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0x9e, 0x01, 0x0a, 0x10, 0x52, 0x65, 0x76, 0x6f,
	0x6b, 0x65, 0x53, 0x43, 0x49, 0x4d, 0x41, 0x50, 0x49, 0x4b, 0x65, 0x79, 0x12, 0x2c, 0x2e, 0x74,
	0x65, 0x73, 0x73, 0x65, 0x72, 0x61, 0x6c, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e,
	0x76, 0x31, 0x2e, 0x52, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x53, 0x43, 0x49, 0x4d, 0x41, 0x50, 0x49,
	0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x74, 0x65, 0x73,
	0x73, 0x65, 0x72, 0x61, 0x6c, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31,
	0x2e, 0x52, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x53, 0x43, 0x49, 0x4d, 0x41, 0x50, 0x49, 0x4b, 0x65,
	0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2d, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x27, 0x22, 0x25, 0x2f, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2f, 0x76, 0x31, 0x2f, 0x73,
	0x63, 0x69, 0x6d, 0x2d, 0x61, 0x70, 0x69, 0x2d, 0x6b, 0x65, 0x79, 0x73, 0x2f, 0x7b, 0x69, 0x64,
	0x7d, 0x2f, 0x72, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x12, 0x75, 0x0a, 0x09, 0x4c, 0x69, 0x73, 0x74,
	0x55, 0x73, 0x65, 0x72, 0x73, 0x12, 0x25, 0x2e, 0x74, 0x65, 0x73, 0x73, 0x65, 0x72, 0x61, 0x6c,
	0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x55, 0x73, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x74,
	0x65, 0x73, 0x73, 0x65, 0x72, 0x61, 0x6c, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e,
	0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x19, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x13, 0x12, 0x11, 0x2f, 0x62,
	0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2f, 0x76, 0x31, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x12,
	0x74, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x12, 0x23, 0x2e, 0x74, 0x65, 0x73,
	0x73, 0x65, 0x72, 0x61, 0x6c, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x24, 0x2e, 0x74, 0x65, 0x73, 0x73, 0x65, 0x72, 0x61, 0x6c, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65,
	0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x18, 0x12, 0x16, 0x2f,
	0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2f, 0x76, 0x31, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73,
	0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0x7e, 0x0a, 0x0a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x55,
	0x73, 0x65, 0x72, 0x12, 0x26, 0x2e, 0x74, 0x65, 0x73, 0x73, 0x65, 0x72, 0x61, 0x6c, 0x2e, 0x62,
	0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x74, 0x65,
	0x73, 0x73, 0x65, 0x72, 0x61, 0x6c, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x19, 0x3a, 0x04, 0x75, 0x73,
	0x65, 0x72, 0x22, 0x11, 0x2f, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2f, 0x76, 0x31, 0x2f,
	0x75, 0x73, 0x65, 0x72, 0x73, 0x12, 0x83, 0x01, 0x0a, 0x0a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x55, 0x73, 0x65, 0x72, 0x12, 0x26, 0x2e, 0x74, 0x65, 0x73, 0x73, 0x65, 0x72, 0x61, 0x6c, 0x2e,
	0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x74,
	0x65, 0x73, 0x73, 0x65, 0x72, 0x61, 0x6c, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e,
	0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x24, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1e, 0x3a, 0x04, 0x75,
	0x73, 0x65, 0x72, 0x32, 0x16, 0x2f, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2f, 0x76, 0x31,
	0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0x7d, 0x0a, 0x0a, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x12, 0x26, 0x2e, 0x74, 0x65, 0x73, 0x73,
	0x65, 0x72, 0x61, 0x6c, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x27, 0x2e, 0x74, 0x65, 0x73, 0x73, 0x65, 0x72, 0x61, 0x6c, 0x2e, 0x62, 0x61, 0x63,
	0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x55, 0x73,
	0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1e, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x18, 0x2a, 0x16, 0x2f, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2f, 0x76, 0x31, 0x2f,
	0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0x81, 0x01, 0x0a, 0x0c, 0x4c,
	0x69, 0x73, 0x74, 0x50, 0x61, 0x73, 0x73, 0x6b, 0x65, 0x79, 0x73, 0x12, 0x28, 0x2e, 0x74, 0x65,
	0x73, 0x73, 0x65, 0x72, 0x61, 0x6c, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76,
	0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x61, 0x73, 0x73, 0x6b, 0x65, 0x79, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x74, 0x65, 0x73, 0x73, 0x65, 0x72, 0x61, 0x6c,
	0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x50, 0x61, 0x73, 0x73, 0x6b, 0x65, 0x79, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x1c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x16, 0x12, 0x14, 0x2f, 0x62, 0x61, 0x63, 0x6b, 0x65,
	0x6e, 0x64, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x61, 0x73, 0x73, 0x6b, 0x65, 0x79, 0x73, 0x12, 0x80,
	0x01, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x50, 0x61, 0x73, 0x73, 0x6b, 0x65, 0x79, 0x12, 0x26, 0x2e,
	0x74, 0x65, 0x73, 0x73, 0x65, 0x72, 0x61, 0x6c, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x61, 0x73, 0x73, 0x6b, 0x65, 0x79, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x74, 0x65, 0x73, 0x73, 0x65, 0x72, 0x61, 0x6c,
	0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x50,
	0x61, 0x73, 0x73, 0x6b, 0x65, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x21,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1b, 0x12, 0x19, 0x2f, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64,
	0x2f, 0x76, 0x31, 0x2f, 0x70, 0x61, 0x73, 0x73, 0x6b, 0x65, 0x79, 0x73, 0x2f, 0x7b, 0x69, 0x64,
	0x7d, 0x12, 0x92, 0x01, 0x0a, 0x0d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x61, 0x73, 0x73,
	0x6b, 0x65, 0x79, 0x12, 0x29, 0x2e, 0x74, 0x65, 0x73, 0x73, 0x65, 0x72, 0x61, 0x6c, 0x2e, 0x62,
	0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x50, 0x61, 0x73, 0x73, 0x6b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a,
	0x2e, 0x74, 0x65, 0x73, 0x73, 0x65, 0x72, 0x61, 0x6c, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e,
	0x64, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x61, 0x73, 0x73, 0x6b,
	0x65, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2a, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x24, 0x3a, 0x07, 0x70, 0x61, 0x73, 0x73, 0x6b, 0x65, 0x79, 0x32, 0x19, 0x2f, 0x62, 0x61,
	0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x61, 0x73, 0x73, 0x6b, 0x65, 0x79,
	0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0x89, 0x01, 0x0a, 0x0d, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x50, 0x61, 0x73, 0x73, 0x6b, 0x65, 0x79, 0x12, 0x29, 0x2e, 0x74, 0x65, 0x73, 0x73, 0x65,
	0x72, 0x61, 0x6c, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x61, 0x73, 0x73, 0x6b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x74, 0x65, 0x73, 0x73, 0x65, 0x72, 0x61, 0x6c, 0x2e, 0x62,
	0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x50, 0x61, 0x73, 0x73, 0x6b, 0x65, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x21, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1b, 0x2a, 0x19, 0x2f, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e,
	0x64, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x61, 0x73, 0x73, 0x6b, 0x65, 0x79, 0x73, 0x2f, 0x7b, 0x69,
	0x64, 0x7d, 0x12, 0x81, 0x01, 0x0a, 0x0c, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x28, 0x2e, 0x74, 0x65, 0x73, 0x73, 0x65, 0x72, 0x61, 0x6c, 0x2e, 0x62,
	0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e,
	0x74, 0x65, 0x73, 0x73, 0x65, 0x72, 0x61, 0x6c, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64,
	0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x16,
	0x12, 0x14, 0x2f, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x80, 0x01, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x53, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x2e, 0x74, 0x65, 0x73, 0x73, 0x65, 0x72, 0x61, 0x6c,
	0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e,
	0x74, 0x65, 0x73, 0x73, 0x65, 0x72, 0x61, 0x6c, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x21, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1b, 0x12, 0x19,
	0x2f, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0x8e, 0x01, 0x0a, 0x0f, 0x4c, 0x69,
	0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x73, 0x12, 0x2b, 0x2e,
	0x74, 0x65, 0x73, 0x73, 0x65, 0x72, 0x61, 0x6c, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64,
	0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x76, 0x69,
	0x74, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x74, 0x65, 0x73,
	0x73, 0x65, 0x72, 0x61, 0x6c, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x20, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1a,
	0x12, 0x18, 0x2f, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2f, 0x76, 0x31, 0x2f, 0x75, 0x73,
	0x65, 0x72, 0x2d, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x73, 0x12, 0x8d, 0x01, 0x0a, 0x0d, 0x47,
	0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x12, 0x29, 0x2e, 0x74,
	0x65, 0x73, 0x73, 0x65, 0x72, 0x61, 0x6c, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x74, 0x65, 0x73, 0x73, 0x65, 0x72,
	0x61, 0x6c, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65,
	0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x25, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1f, 0x12, 0x1d, 0x2f, 0x62, 0x61,
	0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2f, 0x76, 0x31, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2d, 0x69, 0x6e,
	0x76, 0x69, 0x74, 0x65, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0x9e, 0x01, 0x0a, 0x10, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x12,
	0x2c, 0x2e, 0x74, 0x65, 0x73, 0x73, 0x65, 0x72, 0x61, 0x6c, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65,
	0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e,
	0x74, 0x65, 0x73, 0x73, 0x65, 0x72, 0x61, 0x6c, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e,
	0x76, 0x69, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2d, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x27, 0x3a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x76, 0x69, 0x74,
	0x65, 0x22, 0x18, 0x2f, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2f, 0x76, 0x31, 0x2f, 0x75,
	0x73, 0x65, 0x72, 0x2d, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x73, 0x12, 0x96, 0x01, 0x0a, 0x10,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65,
	0x12, 0x2c, 0x2e, 0x74, 0x65, 0x73, 0x73, 0x65, 0x72, 0x61, 0x6c, 0x2e, 0x62, 0x61, 0x63, 0x6b,
	0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d,
	0x2e, 0x74, 0x65, 0x73, 0x73, 0x65, 0x72, 0x61, 0x6c, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e,
	0x64, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x6e, 0x76, 0x69, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x25, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x1f, 0x2a, 0x1d, 0x2f, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2f,
	0x76, 0x31, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2d, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x73, 0x2f,
	0x7b, 0x69, 0x64, 0x7d, 0x12, 0x8c, 0x01, 0x0a, 0x19, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65,
	0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x6f, 0x67, 0x69,
	0x6e, 0x73, 0x12, 0x35, 0x2e, 0x74, 0x65, 0x73, 0x73, 0x65, 0x72, 0x61, 0x6c, 0x2e, 0x62, 0x61,
	0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65,
	0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x6f, 0x67, 0x69,
	0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x36, 0x2e, 0x74, 0x65, 0x73, 0x73,
	0x65, 0x72, 0x61, 0x6c, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e,
	0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x7d, 0x0a, 0x14, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x73, 0x12, 0x30, 0x2e, 0x74, 0x65,
	0x73, 0x73, 0x65, 0x72, 0x61, 0x6c, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76,
	0x31, 0x2e, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e,
	0x74, 0x65, 0x73, 0x73, 0x65, 0x72, 0x61, 0x6c, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64,
	0x2e, 0x76, 0x31, 0x2e, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x89, 0x01, 0x0a, 0x18, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x4f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x73, 0x12,
	0x34, 0x2e, 0x74, 0x65, 0x73, 0x73, 0x65, 0x72, 0x61, 0x6c, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65,
	0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x4f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e, 0x74, 0x65, 0x73, 0x73, 0x65, 0x72, 0x61, 0x6c,
	0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x6f,
	0x67, 0x69, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x7a,
	0x0a, 0x13, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4c,
	0x6f, 0x67, 0x69, 0x6e, 0x73, 0x12, 0x2f, 0x2e, 0x74, 0x65, 0x73, 0x73, 0x65, 0x72, 0x61, 0x6c,
	0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x74, 0x65, 0x73, 0x73, 0x65, 0x72, 0x61,
	0x6c, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x66, 0x0a, 0x0d, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x29, 0x2e, 0x74, 0x65,
	0x73, 0x73, 0x65, 0x72, 0x61, 0x6c, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76,
	0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x74, 0x65, 0x73, 0x73, 0x65, 0x72, 0x61,
	0x6c, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x81, 0x01, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x56, 0x61, 0x75, 0x6c, 0x74, 0x44,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x32, 0x2e,
	0x74, 0x65, 0x73, 0x73, 0x65, 0x72, 0x61, 0x6c, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x56, 0x61, 0x75, 0x6c, 0x74, 0x44, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x33, 0x2e, 0x74, 0x65, 0x73, 0x73, 0x65, 0x72, 0x61, 0x6c, 0x2e, 0x62, 0x61, 0x63,
	0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x56, 0x61, 0x75, 0x6c, 0x74,
	0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x7d, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x55, 0x49, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x30,
	0x2e, 0x74, 0x65, 0x73, 0x73, 0x65, 0x72, 0x61, 0x6c, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e,
	0x64, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x55,
	0x49, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x31, 0x2e, 0x74, 0x65, 0x73, 0x73, 0x65, 0x72, 0x61, 0x6c, 0x2e, 0x62, 0x61, 0x63, 0x6b,
	0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x55, 0x49, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x86, 0x01, 0x0a, 0x17, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x55, 0x49, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x12, 0x33, 0x2e, 0x74, 0x65, 0x73, 0x73, 0x65, 0x72, 0x61, 0x6c, 0x2e, 0x62, 0x61, 0x63,
	0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x55, 0x49, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e, 0x74, 0x65, 0x73, 0x73, 0x65, 0x72, 0x61,
	0x6c, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x55, 0x49, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x75,
	0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x41, 0x50, 0x49,
	0x4b, 0x65, 0x79, 0x73, 0x12, 0x2e, 0x2e, 0x74, 0x65, 0x73, 0x73, 0x65, 0x72, 0x61, 0x6c, 0x2e,
	0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x50,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x41, 0x50, 0x49, 0x4b, 0x65, 0x79, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x74, 0x65, 0x73, 0x73, 0x65, 0x72, 0x61, 0x6c, 0x2e,
	0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x50,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x41, 0x50, 0x49, 0x4b, 0x65, 0x79, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6f, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x41, 0x50, 0x49, 0x4b, 0x65, 0x79, 0x12, 0x2c, 0x2e, 0x74, 0x65, 0x73, 0x73,
	0x65, 0x72, 0x61, 0x6c, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x41, 0x50, 0x49, 0x4b, 0x65, 0x79,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x74, 0x65, 0x73, 0x73, 0x65, 0x72,
	0x61, 0x6c, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65,
	0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x41, 0x50, 0x49, 0x4b, 0x65, 0x79, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x78, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x41, 0x50, 0x49, 0x4b, 0x65, 0x79, 0x12, 0x2f, 0x2e,
	0x74, 0x65, 0x73, 0x73, 0x65, 0x72, 0x61, 0x6c, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x41, 0x50, 0x49, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30,
	0x2e, 0x74, 0x65, 0x73, 0x73, 0x65, 0x72, 0x61, 0x6c, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e,
	0x64, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x41, 0x50, 0x49, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x78, 0x0a, 0x13, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x41, 0x50, 0x49, 0x4b, 0x65, 0x79, 0x12, 0x2f, 0x2e, 0x74, 0x65, 0x73, 0x73, 0x65, 0x72,
	0x61, 0x6c, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x41, 0x50, 0x49, 0x4b, 0x65,
	0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x74, 0x65, 0x73, 0x73, 0x65,
	0x72, 0x61, 0x6c, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x41, 0x50, 0x49, 0x4b,
	0x65, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x78, 0x0a, 0x13, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x41, 0x50, 0x49, 0x4b, 0x65,
	0x79, 0x12, 0x2f, 0x2e, 0x74, 0x65, 0x73, 0x73, 0x65, 0x72, 0x61, 0x6c, 0x2e, 0x62, 0x61, 0x63,
	0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x41, 0x50, 0x49, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x30, 0x2e, 0x74, 0x65, 0x73, 0x73, 0x65, 0x72, 0x61, 0x6c, 0x2e, 0x62, 0x61,
	0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x41, 0x50, 0x49, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x78, 0x0a, 0x13, 0x52, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x50, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x41, 0x50, 0x49, 0x4b, 0x65, 0x79, 0x12, 0x2f, 0x2e, 0x74, 0x65,
	0x73, 0x73, 0x65, 0x72, 0x61, 0x6c, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76,
	0x31, 0x2e, 0x52, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x41,
	0x50, 0x49, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x74,
	0x65, 0x73, 0x73, 0x65, 0x72, 0x61, 0x6c, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e,
	0x76, 0x31, 0x2e, 0x52, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x41, 0x50, 0x49, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x78,
	0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x61, 0x62, 0x6c,
	0x65, 0x4b, 0x65, 0x79, 0x73, 0x12, 0x2f, 0x2e, 0x74, 0x65, 0x73, 0x73, 0x65, 0x72, 0x61, 0x6c,
	0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x61, 0x62, 0x6c, 0x65, 0x4b, 0x65, 0x79, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x74, 0x65, 0x73, 0x73, 0x65, 0x72, 0x61,
	0x6c, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x61, 0x62, 0x6c, 0x65, 0x4b, 0x65, 0x79, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x72, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x50,
	0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x61, 0x62, 0x6c, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x2d, 0x2e,
	0x74, 0x65, 0x73, 0x73, 0x65, 0x72, 0x61, 0x6c, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x61, 0x62,
	0x6c, 0x65, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x74,
	0x65, 0x73, 0x73, 0x65, 0x72, 0x61, 0x6c, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x61, 0x62, 0x6c,
	0x65, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x7b, 0x0a, 0x14,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x61, 0x62, 0x6c,
	0x65, 0x4b, 0x65, 0x79, 0x12, 0x30, 0x2e, 0x74, 0x65, 0x73, 0x73, 0x65, 0x72, 0x61, 0x6c, 0x2e,
	0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x61, 0x62, 0x6c, 0x65, 0x4b, 0x65, 0x79, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x74, 0x65, 0x73, 0x73, 0x65, 0x72, 0x61,
	0x6c, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x61, 0x62, 0x6c, 0x65, 0x4b, 0x65,
	0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x7b, 0x0a, 0x14, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x61, 0x62, 0x6c, 0x65, 0x4b, 0x65,
	0x79, 0x12, 0x30, 0x2e, 0x74, 0x65, 0x73, 0x73, 0x65, 0x72, 0x61, 0x6c, 0x2e, 0x62, 0x61, 0x63,
	0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x75,
	0x62, 0x6c, 0x69, 0x73, 0x68, 0x61, 0x62, 0x6c, 0x65, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x74, 0x65, 0x73, 0x73, 0x65, 0x72, 0x61, 0x6c, 0x2e, 0x62,
	0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x61, 0x62, 0x6c, 0x65, 0x4b, 0x65, 0x79, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x7b, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x61, 0x62, 0x6c, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x30,
	0x2e, 0x74, 0x65, 0x73, 0x73, 0x65, 0x72, 0x61, 0x6c, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e,
	0x64, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x75, 0x62, 0x6c, 0x69,
	0x73, 0x68, 0x61, 0x62, 0x6c, 0x65, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x31, 0x2e, 0x74, 0x65, 0x73, 0x73, 0x65, 0x72, 0x61, 0x6c, 0x2e, 0x62, 0x61, 0x63, 0x6b,
	0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x75, 0x62,
	0x6c, 0x69, 0x73, 0x68, 0x61, 0x62, 0x6c, 0x65, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x93, 0x01, 0x0a, 0x1c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x6d, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x38, 0x2e, 0x74, 0x65, 0x73, 0x73, 0x65, 0x72, 0x61, 0x6c, 0x2e,
	0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6d, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x39,
	0x2e, 0x74, 0x65, 0x73, 0x73, 0x65, 0x72, 0x61, 0x6c, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e,
	0x64, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x6d, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0xeb, 0x01, 0x0a, 0x17, 0x63, 0x6f,
	0x6d, 0x2e, 0x74, 0x65, 0x73, 0x73, 0x65, 0x72, 0x61, 0x6c, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65,
	0x6e, 0x64, 0x2e, 0x76, 0x31, 0x42, 0x0c, 0x42, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x54, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x74, 0x65, 0x73, 0x73, 0x65, 0x72, 0x61, 0x6c, 0x2d, 0x6c, 0x61, 0x62, 0x73, 0x2f,
	0x74, 0x65, 0x73, 0x73, 0x65, 0x72, 0x61, 0x6c, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x2f, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x74, 0x65,
	0x73, 0x73, 0x65, 0x72, 0x61, 0x6c, 0x2f, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2f, 0x76,
	0x31, 0x3b, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x76, 0x31, 0xa2, 0x02, 0x03, 0x54, 0x42,
	0x58, 0xaa, 0x02, 0x13, 0x54, 0x65, 0x73, 0x73, 0x65, 0x72, 0x61, 0x6c, 0x2e, 0x42, 0x61, 0x63,
	0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x13, 0x54, 0x65, 0x73, 0x73, 0x65, 0x72,
	0x61, 0x6c, 0x5c, 0x42, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x5c, 0x56, 0x31, 0xe2, 0x02, 0x1f,
	0x54, 0x65, 0x73, 0x73, 0x65, 0x72, 0x61, 0x6c, 0x5c, 0x42, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64,
	0x5c, 0x56, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea,
	0x02, 0x15, 0x54, 0x65, 0x73, 0x73, 0x65, 0x72, 0x61, 0x6c, 0x3a, 0x3a, 0x42, 0x61, 0x63, 0x6b,
	0x65, 0x6e, 0x64, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_tesseral_backend_v1_backend_proto_rawDescOnce sync.Once
	file_tesseral_backend_v1_backend_proto_rawDescData []byte
)

func file_tesseral_backend_v1_backend_proto_rawDescGZIP() []byte {
	file_tesseral_backend_v1_backend_proto_rawDescOnce.Do(func() {
		file_tesseral_backend_v1_backend_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_tesseral_backend_v1_backend_proto_rawDesc), len(file_tesseral_backend_v1_backend_proto_rawDesc)))
	})
	return file_tesseral_backend_v1_backend_proto_rawDescData
}

var file_tesseral_backend_v1_backend_proto_msgTypes = make([]protoimpl.MessageInfo, 113)
var file_tesseral_backend_v1_backend_proto_goTypes = []any{
	(*GetProjectRequest)(nil),                             // 0: tesseral.backend.v1.GetProjectRequest
	(*GetProjectResponse)(nil),                            // 1: tesseral.backend.v1.GetProjectResponse
	(*UpdateProjectRequest)(nil),                          // 2: tesseral.backend.v1.UpdateProjectRequest
	(*UpdateProjectResponse)(nil),                         // 3: tesseral.backend.v1.UpdateProjectResponse
	(*ListOrganizationsRequest)(nil),                      // 4: tesseral.backend.v1.ListOrganizationsRequest
	(*ListOrganizationsResponse)(nil),                     // 5: tesseral.backend.v1.ListOrganizationsResponse
	(*GetOrganizationRequest)(nil),                        // 6: tesseral.backend.v1.GetOrganizationRequest
	(*GetOrganizationResponse)(nil),                       // 7: tesseral.backend.v1.GetOrganizationResponse
	(*CreateOrganizationRequest)(nil),                     // 8: tesseral.backend.v1.CreateOrganizationRequest
	(*CreateOrganizationResponse)(nil),                    // 9: tesseral.backend.v1.CreateOrganizationResponse
	(*UpdateOrganizationRequest)(nil),                     // 10: tesseral.backend.v1.UpdateOrganizationRequest
	(*UpdateOrganizationResponse)(nil),                    // 11: tesseral.backend.v1.UpdateOrganizationResponse
	(*DeleteOrganizationRequest)(nil),                     // 12: tesseral.backend.v1.DeleteOrganizationRequest
	(*DeleteOrganizationResponse)(nil),                    // 13: tesseral.backend.v1.DeleteOrganizationResponse
	(*GetOrganizationGoogleHostedDomainsRequest)(nil),     // 14: tesseral.backend.v1.GetOrganizationGoogleHostedDomainsRequest
	(*GetOrganizationGoogleHostedDomainsResponse)(nil),    // 15: tesseral.backend.v1.GetOrganizationGoogleHostedDomainsResponse
	(*UpdateOrganizationGoogleHostedDomainsRequest)(nil),  // 16: tesseral.backend.v1.UpdateOrganizationGoogleHostedDomainsRequest
	(*UpdateOrganizationGoogleHostedDomainsResponse)(nil), // 17: tesseral.backend.v1.UpdateOrganizationGoogleHostedDomainsResponse
	(*GetOrganizationMicrosoftTenantIDsRequest)(nil),      // 18: tesseral.backend.v1.GetOrganizationMicrosoftTenantIDsRequest
	(*GetOrganizationMicrosoftTenantIDsResponse)(nil),     // 19: tesseral.backend.v1.GetOrganizationMicrosoftTenantIDsResponse
	(*UpdateOrganizationMicrosoftTenantIDsRequest)(nil),   // 20: tesseral.backend.v1.UpdateOrganizationMicrosoftTenantIDsRequest
	(*UpdateOrganizationMicrosoftTenantIDsResponse)(nil),  // 21: tesseral.backend.v1.UpdateOrganizationMicrosoftTenantIDsResponse
	(*CreateSAMLConnectionRequest)(nil),                   // 22: tesseral.backend.v1.CreateSAMLConnectionRequest
	(*CreateSAMLConnectionResponse)(nil),                  // 23: tesseral.backend.v1.CreateSAMLConnectionResponse
	(*GetSAMLConnectionRequest)(nil),                      // 24: tesseral.backend.v1.GetSAMLConnectionRequest
	(*GetSAMLConnectionResponse)(nil),                     // 25: tesseral.backend.v1.GetSAMLConnectionResponse
	(*ListSAMLConnectionsRequest)(nil),                    // 26: tesseral.backend.v1.ListSAMLConnectionsRequest
	(*ListSAMLConnectionsResponse)(nil),                   // 27: tesseral.backend.v1.ListSAMLConnectionsResponse
	(*UpdateSAMLConnectionRequest)(nil),                   // 28: tesseral.backend.v1.UpdateSAMLConnectionRequest
	(*UpdateSAMLConnectionResponse)(nil),                  // 29: tesseral.backend.v1.UpdateSAMLConnectionResponse
	(*DeleteSAMLConnectionRequest)(nil),                   // 30: tesseral.backend.v1.DeleteSAMLConnectionRequest
	(*DeleteSAMLConnectionResponse)(nil),                  // 31: tesseral.backend.v1.DeleteSAMLConnectionResponse
	(*ListSCIMAPIKeysRequest)(nil),                        // 32: tesseral.backend.v1.ListSCIMAPIKeysRequest
	(*ListSCIMAPIKeysResponse)(nil),                       // 33: tesseral.backend.v1.ListSCIMAPIKeysResponse
	(*GetSCIMAPIKeyRequest)(nil),                          // 34: tesseral.backend.v1.GetSCIMAPIKeyRequest
	(*GetSCIMAPIKeyResponse)(nil),                         // 35: tesseral.backend.v1.GetSCIMAPIKeyResponse
	(*CreateSCIMAPIKeyRequest)(nil),                       // 36: tesseral.backend.v1.CreateSCIMAPIKeyRequest
	(*CreateSCIMAPIKeyResponse)(nil),                      // 37: tesseral.backend.v1.CreateSCIMAPIKeyResponse
	(*UpdateSCIMAPIKeyRequest)(nil),                       // 38: tesseral.backend.v1.UpdateSCIMAPIKeyRequest
	(*UpdateSCIMAPIKeyResponse)(nil),                      // 39: tesseral.backend.v1.UpdateSCIMAPIKeyResponse
	(*DeleteSCIMAPIKeyRequest)(nil),                       // 40: tesseral.backend.v1.DeleteSCIMAPIKeyRequest
	(*DeleteSCIMAPIKeyResponse)(nil),                      // 41: tesseral.backend.v1.DeleteSCIMAPIKeyResponse
	(*RevokeSCIMAPIKeyRequest)(nil),                       // 42: tesseral.backend.v1.RevokeSCIMAPIKeyRequest
	(*RevokeSCIMAPIKeyResponse)(nil),                      // 43: tesseral.backend.v1.RevokeSCIMAPIKeyResponse
	(*ListUsersRequest)(nil),                              // 44: tesseral.backend.v1.ListUsersRequest
	(*ListUsersResponse)(nil),                             // 45: tesseral.backend.v1.ListUsersResponse
	(*GetUserRequest)(nil),                                // 46: tesseral.backend.v1.GetUserRequest
	(*GetUserResponse)(nil),                               // 47: tesseral.backend.v1.GetUserResponse
	(*CreateUserRequest)(nil),                             // 48: tesseral.backend.v1.CreateUserRequest
	(*CreateUserResponse)(nil),                            // 49: tesseral.backend.v1.CreateUserResponse
	(*UpdateUserRequest)(nil),                             // 50: tesseral.backend.v1.UpdateUserRequest
	(*UpdateUserResponse)(nil),                            // 51: tesseral.backend.v1.UpdateUserResponse
	(*DeleteUserRequest)(nil),                             // 52: tesseral.backend.v1.DeleteUserRequest
	(*DeleteUserResponse)(nil),                            // 53: tesseral.backend.v1.DeleteUserResponse
	(*ListPasskeysRequest)(nil),                           // 54: tesseral.backend.v1.ListPasskeysRequest
	(*ListPasskeysResponse)(nil),                          // 55: tesseral.backend.v1.ListPasskeysResponse
	(*GetPasskeyRequest)(nil),                             // 56: tesseral.backend.v1.GetPasskeyRequest
	(*GetPasskeyResponse)(nil),                            // 57: tesseral.backend.v1.GetPasskeyResponse
	(*UpdatePasskeyRequest)(nil),                          // 58: tesseral.backend.v1.UpdatePasskeyRequest
	(*UpdatePasskeyResponse)(nil),                         // 59: tesseral.backend.v1.UpdatePasskeyResponse
	(*DeletePasskeyRequest)(nil),                          // 60: tesseral.backend.v1.DeletePasskeyRequest
	(*DeletePasskeyResponse)(nil),                         // 61: tesseral.backend.v1.DeletePasskeyResponse
	(*ListSessionsRequest)(nil),                           // 62: tesseral.backend.v1.ListSessionsRequest
	(*ListSessionsResponse)(nil),                          // 63: tesseral.backend.v1.ListSessionsResponse
	(*GetSessionRequest)(nil),                             // 64: tesseral.backend.v1.GetSessionRequest
	(*GetSessionResponse)(nil),                            // 65: tesseral.backend.v1.GetSessionResponse
	(*ListUserInvitesRequest)(nil),                        // 66: tesseral.backend.v1.ListUserInvitesRequest
	(*ListUserInvitesResponse)(nil),                       // 67: tesseral.backend.v1.ListUserInvitesResponse
	(*GetUserInviteRequest)(nil),                          // 68: tesseral.backend.v1.GetUserInviteRequest
	(*GetUserInviteResponse)(nil),                         // 69: tesseral.backend.v1.GetUserInviteResponse
	(*CreateUserInviteRequest)(nil),                       // 70: tesseral.backend.v1.CreateUserInviteRequest
	(*CreateUserInviteResponse)(nil),                      // 71: tesseral.backend.v1.CreateUserInviteResponse
	(*DeleteUserInviteRequest)(nil),                       // 72: tesseral.backend.v1.DeleteUserInviteRequest
	(*DeleteUserInviteResponse)(nil),                      // 73: tesseral.backend.v1.DeleteUserInviteResponse
	(*ListProjectAPIKeysRequest)(nil),                     // 74: tesseral.backend.v1.ListProjectAPIKeysRequest
	(*ListProjectAPIKeysResponse)(nil),                    // 75: tesseral.backend.v1.ListProjectAPIKeysResponse
	(*GetProjectAPIKeyRequest)(nil),                       // 76: tesseral.backend.v1.GetProjectAPIKeyRequest
	(*GetProjectAPIKeyResponse)(nil),                      // 77: tesseral.backend.v1.GetProjectAPIKeyResponse
	(*CreateProjectAPIKeyRequest)(nil),                    // 78: tesseral.backend.v1.CreateProjectAPIKeyRequest
	(*CreateProjectAPIKeyResponse)(nil),                   // 79: tesseral.backend.v1.CreateProjectAPIKeyResponse
	(*UpdateProjectAPIKeyRequest)(nil),                    // 80: tesseral.backend.v1.UpdateProjectAPIKeyRequest
	(*UpdateProjectAPIKeyResponse)(nil),                   // 81: tesseral.backend.v1.UpdateProjectAPIKeyResponse
	(*DeleteProjectAPIKeyRequest)(nil),                    // 82: tesseral.backend.v1.DeleteProjectAPIKeyRequest
	(*DeleteProjectAPIKeyResponse)(nil),                   // 83: tesseral.backend.v1.DeleteProjectAPIKeyResponse
	(*RevokeProjectAPIKeyRequest)(nil),                    // 84: tesseral.backend.v1.RevokeProjectAPIKeyRequest
	(*RevokeProjectAPIKeyResponse)(nil),                   // 85: tesseral.backend.v1.RevokeProjectAPIKeyResponse
	(*GetVaultDomainSettingsRequest)(nil),                 // 86: tesseral.backend.v1.GetVaultDomainSettingsRequest
	(*GetVaultDomainSettingsResponse)(nil),                // 87: tesseral.backend.v1.GetVaultDomainSettingsResponse
	(*ListPublishableKeysRequest)(nil),                    // 88: tesseral.backend.v1.ListPublishableKeysRequest
	(*ListPublishableKeysResponse)(nil),                   // 89: tesseral.backend.v1.ListPublishableKeysResponse
	(*GetPublishableKeyRequest)(nil),                      // 90: tesseral.backend.v1.GetPublishableKeyRequest
	(*GetPublishableKeyResponse)(nil),                     // 91: tesseral.backend.v1.GetPublishableKeyResponse
	(*CreatePublishableKeyRequest)(nil),                   // 92: tesseral.backend.v1.CreatePublishableKeyRequest
	(*CreatePublishableKeyResponse)(nil),                  // 93: tesseral.backend.v1.CreatePublishableKeyResponse
	(*UpdatePublishableKeyRequest)(nil),                   // 94: tesseral.backend.v1.UpdatePublishableKeyRequest
	(*UpdatePublishableKeyResponse)(nil),                  // 95: tesseral.backend.v1.UpdatePublishableKeyResponse
	(*DeletePublishableKeyRequest)(nil),                   // 96: tesseral.backend.v1.DeletePublishableKeyRequest
	(*DeletePublishableKeyResponse)(nil),                  // 97: tesseral.backend.v1.DeletePublishableKeyResponse
	(*GetProjectUISettingsRequest)(nil),                   // 98: tesseral.backend.v1.GetProjectUISettingsRequest
	(*GetProjectUISettingsResponse)(nil),                  // 99: tesseral.backend.v1.GetProjectUISettingsResponse
	(*UpdateProjectUISettingsRequest)(nil),                // 100: tesseral.backend.v1.UpdateProjectUISettingsRequest
	(*UpdateProjectUISettingsResponse)(nil),               // 101: tesseral.backend.v1.UpdateProjectUISettingsResponse
	(*DisableOrganizationLoginsRequest)(nil),              // 102: tesseral.backend.v1.DisableOrganizationLoginsRequest
	(*DisableOrganizationLoginsResponse)(nil),             // 103: tesseral.backend.v1.DisableOrganizationLoginsResponse
	(*DisableProjectLoginsRequest)(nil),                   // 104: tesseral.backend.v1.DisableProjectLoginsRequest
	(*DisableProjectLoginsResponse)(nil),                  // 105: tesseral.backend.v1.DisableProjectLoginsResponse
	(*EnableOrganizationLoginsRequest)(nil),               // 106: tesseral.backend.v1.EnableOrganizationLoginsRequest
	(*EnableOrganizationLoginsResponse)(nil),              // 107: tesseral.backend.v1.EnableOrganizationLoginsResponse
	(*EnableProjectLoginsRequest)(nil),                    // 108: tesseral.backend.v1.EnableProjectLoginsRequest
	(*EnableProjectLoginsResponse)(nil),                   // 109: tesseral.backend.v1.EnableProjectLoginsResponse
	(*ImageUploadRequest)(nil),                            // 110: tesseral.backend.v1.ImageUploadRequest
	(*CreateUserImpersonationTokenRequest)(nil),           // 111: tesseral.backend.v1.CreateUserImpersonationTokenRequest
	(*CreateUserImpersonationTokenResponse)(nil),          // 112: tesseral.backend.v1.CreateUserImpersonationTokenResponse
	(*Project)(nil),                                       // 113: tesseral.backend.v1.Project
	(*Organization)(nil),                                  // 114: tesseral.backend.v1.Organization
	(*OrganizationGoogleHostedDomains)(nil),               // 115: tesseral.backend.v1.OrganizationGoogleHostedDomains
	(*OrganizationMicrosoftTenantIDs)(nil),                // 116: tesseral.backend.v1.OrganizationMicrosoftTenantIDs
	(*SAMLConnection)(nil),                                // 117: tesseral.backend.v1.SAMLConnection
	(*SCIMAPIKey)(nil),                                    // 118: tesseral.backend.v1.SCIMAPIKey
	(*User)(nil),                                          // 119: tesseral.backend.v1.User
	(*Passkey)(nil),                                       // 120: tesseral.backend.v1.Passkey
	(*Session)(nil),                                       // 121: tesseral.backend.v1.Session
	(*UserInvite)(nil),                                    // 122: tesseral.backend.v1.UserInvite
	(*ProjectAPIKey)(nil),                                 // 123: tesseral.backend.v1.ProjectAPIKey
	(*VaultDomainSettings)(nil),                           // 124: tesseral.backend.v1.VaultDomainSettings
	(*PublishableKey)(nil),                                // 125: tesseral.backend.v1.PublishableKey
	(*ProjectUISettings)(nil),                             // 126: tesseral.backend.v1.ProjectUISettings
	(*timestamppb.Timestamp)(nil),                         // 127: google.protobuf.Timestamp
	(*UserImpersonationToken)(nil),                        // 128: tesseral.backend.v1.UserImpersonationToken
}
var file_tesseral_backend_v1_backend_proto_depIdxs = []int32{
	113, // 0: tesseral.backend.v1.GetProjectResponse.project:type_name -> tesseral.backend.v1.Project
	113, // 1: tesseral.backend.v1.UpdateProjectRequest.project:type_name -> tesseral.backend.v1.Project
	113, // 2: tesseral.backend.v1.UpdateProjectResponse.project:type_name -> tesseral.backend.v1.Project
	114, // 3: tesseral.backend.v1.ListOrganizationsResponse.organizations:type_name -> tesseral.backend.v1.Organization
	114, // 4: tesseral.backend.v1.GetOrganizationResponse.organization:type_name -> tesseral.backend.v1.Organization
	114, // 5: tesseral.backend.v1.CreateOrganizationRequest.organization:type_name -> tesseral.backend.v1.Organization
	114, // 6: tesseral.backend.v1.CreateOrganizationResponse.organization:type_name -> tesseral.backend.v1.Organization
	114, // 7: tesseral.backend.v1.UpdateOrganizationRequest.organization:type_name -> tesseral.backend.v1.Organization
	114, // 8: tesseral.backend.v1.UpdateOrganizationResponse.organization:type_name -> tesseral.backend.v1.Organization
	115, // 9: tesseral.backend.v1.GetOrganizationGoogleHostedDomainsResponse.organization_google_hosted_domains:type_name -> tesseral.backend.v1.OrganizationGoogleHostedDomains
	115, // 10: tesseral.backend.v1.UpdateOrganizationGoogleHostedDomainsRequest.organization_google_hosted_domains:type_name -> tesseral.backend.v1.OrganizationGoogleHostedDomains
	115, // 11: tesseral.backend.v1.UpdateOrganizationGoogleHostedDomainsResponse.organization_google_hosted_domains:type_name -> tesseral.backend.v1.OrganizationGoogleHostedDomains
	116, // 12: tesseral.backend.v1.GetOrganizationMicrosoftTenantIDsResponse.organization_microsoft_tenant_ids:type_name -> tesseral.backend.v1.OrganizationMicrosoftTenantIDs
	116, // 13: tesseral.backend.v1.UpdateOrganizationMicrosoftTenantIDsRequest.organization_microsoft_tenant_ids:type_name -> tesseral.backend.v1.OrganizationMicrosoftTenantIDs
	116, // 14: tesseral.backend.v1.UpdateOrganizationMicrosoftTenantIDsResponse.organization_microsoft_tenant_ids:type_name -> tesseral.backend.v1.OrganizationMicrosoftTenantIDs
	117, // 15: tesseral.backend.v1.CreateSAMLConnectionRequest.saml_connection:type_name -> tesseral.backend.v1.SAMLConnection
	117, // 16: tesseral.backend.v1.CreateSAMLConnectionResponse.saml_connection:type_name -> tesseral.backend.v1.SAMLConnection
	117, // 17: tesseral.backend.v1.GetSAMLConnectionResponse.saml_connection:type_name -> tesseral.backend.v1.SAMLConnection
	117, // 18: tesseral.backend.v1.ListSAMLConnectionsResponse.saml_connections:type_name -> tesseral.backend.v1.SAMLConnection
	117, // 19: tesseral.backend.v1.UpdateSAMLConnectionRequest.saml_connection:type_name -> tesseral.backend.v1.SAMLConnection
	117, // 20: tesseral.backend.v1.UpdateSAMLConnectionResponse.saml_connection:type_name -> tesseral.backend.v1.SAMLConnection
	118, // 21: tesseral.backend.v1.ListSCIMAPIKeysResponse.scim_api_keys:type_name -> tesseral.backend.v1.SCIMAPIKey
	118, // 22: tesseral.backend.v1.GetSCIMAPIKeyResponse.scim_api_key:type_name -> tesseral.backend.v1.SCIMAPIKey
	118, // 23: tesseral.backend.v1.CreateSCIMAPIKeyRequest.scim_api_key:type_name -> tesseral.backend.v1.SCIMAPIKey
	118, // 24: tesseral.backend.v1.CreateSCIMAPIKeyResponse.scim_api_key:type_name -> tesseral.backend.v1.SCIMAPIKey
	118, // 25: tesseral.backend.v1.UpdateSCIMAPIKeyRequest.scim_api_key:type_name -> tesseral.backend.v1.SCIMAPIKey
	118, // 26: tesseral.backend.v1.UpdateSCIMAPIKeyResponse.scim_api_key:type_name -> tesseral.backend.v1.SCIMAPIKey
	118, // 27: tesseral.backend.v1.RevokeSCIMAPIKeyResponse.scim_api_key:type_name -> tesseral.backend.v1.SCIMAPIKey
	119, // 28: tesseral.backend.v1.ListUsersResponse.users:type_name -> tesseral.backend.v1.User
	119, // 29: tesseral.backend.v1.GetUserResponse.user:type_name -> tesseral.backend.v1.User
	119, // 30: tesseral.backend.v1.CreateUserRequest.user:type_name -> tesseral.backend.v1.User
	119, // 31: tesseral.backend.v1.CreateUserResponse.user:type_name -> tesseral.backend.v1.User
	119, // 32: tesseral.backend.v1.UpdateUserRequest.user:type_name -> tesseral.backend.v1.User
	119, // 33: tesseral.backend.v1.UpdateUserResponse.user:type_name -> tesseral.backend.v1.User
	120, // 34: tesseral.backend.v1.ListPasskeysResponse.passkeys:type_name -> tesseral.backend.v1.Passkey
	120, // 35: tesseral.backend.v1.GetPasskeyResponse.passkey:type_name -> tesseral.backend.v1.Passkey
	120, // 36: tesseral.backend.v1.UpdatePasskeyRequest.passkey:type_name -> tesseral.backend.v1.Passkey
	120, // 37: tesseral.backend.v1.UpdatePasskeyResponse.passkey:type_name -> tesseral.backend.v1.Passkey
	121, // 38: tesseral.backend.v1.ListSessionsResponse.sessions:type_name -> tesseral.backend.v1.Session
	121, // 39: tesseral.backend.v1.GetSessionResponse.session:type_name -> tesseral.backend.v1.Session
	122, // 40: tesseral.backend.v1.ListUserInvitesResponse.user_invites:type_name -> tesseral.backend.v1.UserInvite
	122, // 41: tesseral.backend.v1.GetUserInviteResponse.user_invite:type_name -> tesseral.backend.v1.UserInvite
	122, // 42: tesseral.backend.v1.CreateUserInviteRequest.user_invite:type_name -> tesseral.backend.v1.UserInvite
	122, // 43: tesseral.backend.v1.CreateUserInviteResponse.user_invite:type_name -> tesseral.backend.v1.UserInvite
	123, // 44: tesseral.backend.v1.ListProjectAPIKeysResponse.project_api_keys:type_name -> tesseral.backend.v1.ProjectAPIKey
	123, // 45: tesseral.backend.v1.GetProjectAPIKeyResponse.project_api_key:type_name -> tesseral.backend.v1.ProjectAPIKey
	123, // 46: tesseral.backend.v1.CreateProjectAPIKeyRequest.project_api_key:type_name -> tesseral.backend.v1.ProjectAPIKey
	123, // 47: tesseral.backend.v1.CreateProjectAPIKeyResponse.project_api_key:type_name -> tesseral.backend.v1.ProjectAPIKey
	123, // 48: tesseral.backend.v1.UpdateProjectAPIKeyRequest.project_api_key:type_name -> tesseral.backend.v1.ProjectAPIKey
	123, // 49: tesseral.backend.v1.UpdateProjectAPIKeyResponse.project_api_key:type_name -> tesseral.backend.v1.ProjectAPIKey
	123, // 50: tesseral.backend.v1.RevokeProjectAPIKeyResponse.project_api_key:type_name -> tesseral.backend.v1.ProjectAPIKey
	124, // 51: tesseral.backend.v1.GetVaultDomainSettingsResponse.vault_domain_settings:type_name -> tesseral.backend.v1.VaultDomainSettings
	125, // 52: tesseral.backend.v1.ListPublishableKeysResponse.publishable_keys:type_name -> tesseral.backend.v1.PublishableKey
	125, // 53: tesseral.backend.v1.GetPublishableKeyResponse.publishable_key:type_name -> tesseral.backend.v1.PublishableKey
	125, // 54: tesseral.backend.v1.CreatePublishableKeyRequest.publishable_key:type_name -> tesseral.backend.v1.PublishableKey
	125, // 55: tesseral.backend.v1.CreatePublishableKeyResponse.publishable_key:type_name -> tesseral.backend.v1.PublishableKey
	125, // 56: tesseral.backend.v1.UpdatePublishableKeyRequest.publishable_key:type_name -> tesseral.backend.v1.PublishableKey
	125, // 57: tesseral.backend.v1.UpdatePublishableKeyResponse.publishable_key:type_name -> tesseral.backend.v1.PublishableKey
	126, // 58: tesseral.backend.v1.GetProjectUISettingsResponse.project_ui_settings:type_name -> tesseral.backend.v1.ProjectUISettings
	127, // 59: tesseral.backend.v1.UpdateProjectUISettingsResponse.create_time:type_name -> google.protobuf.Timestamp
	127, // 60: tesseral.backend.v1.UpdateProjectUISettingsResponse.update_time:type_name -> google.protobuf.Timestamp
	128, // 61: tesseral.backend.v1.CreateUserImpersonationTokenRequest.user_impersonation_token:type_name -> tesseral.backend.v1.UserImpersonationToken
	128, // 62: tesseral.backend.v1.CreateUserImpersonationTokenResponse.user_impersonation_token:type_name -> tesseral.backend.v1.UserImpersonationToken
	0,   // 63: tesseral.backend.v1.BackendService.GetProject:input_type -> tesseral.backend.v1.GetProjectRequest
	4,   // 64: tesseral.backend.v1.BackendService.ListOrganizations:input_type -> tesseral.backend.v1.ListOrganizationsRequest
	6,   // 65: tesseral.backend.v1.BackendService.GetOrganization:input_type -> tesseral.backend.v1.GetOrganizationRequest
	8,   // 66: tesseral.backend.v1.BackendService.CreateOrganization:input_type -> tesseral.backend.v1.CreateOrganizationRequest
	10,  // 67: tesseral.backend.v1.BackendService.UpdateOrganization:input_type -> tesseral.backend.v1.UpdateOrganizationRequest
	12,  // 68: tesseral.backend.v1.BackendService.DeleteOrganization:input_type -> tesseral.backend.v1.DeleteOrganizationRequest
	14,  // 69: tesseral.backend.v1.BackendService.GetOrganizationGoogleHostedDomains:input_type -> tesseral.backend.v1.GetOrganizationGoogleHostedDomainsRequest
	16,  // 70: tesseral.backend.v1.BackendService.UpdateOrganizationGoogleHostedDomains:input_type -> tesseral.backend.v1.UpdateOrganizationGoogleHostedDomainsRequest
	18,  // 71: tesseral.backend.v1.BackendService.GetOrganizationMicrosoftTenantIDs:input_type -> tesseral.backend.v1.GetOrganizationMicrosoftTenantIDsRequest
	20,  // 72: tesseral.backend.v1.BackendService.UpdateOrganizationMicrosoftTenantIDs:input_type -> tesseral.backend.v1.UpdateOrganizationMicrosoftTenantIDsRequest
	26,  // 73: tesseral.backend.v1.BackendService.ListSAMLConnections:input_type -> tesseral.backend.v1.ListSAMLConnectionsRequest
	24,  // 74: tesseral.backend.v1.BackendService.GetSAMLConnection:input_type -> tesseral.backend.v1.GetSAMLConnectionRequest
	22,  // 75: tesseral.backend.v1.BackendService.CreateSAMLConnection:input_type -> tesseral.backend.v1.CreateSAMLConnectionRequest
	28,  // 76: tesseral.backend.v1.BackendService.UpdateSAMLConnection:input_type -> tesseral.backend.v1.UpdateSAMLConnectionRequest
	30,  // 77: tesseral.backend.v1.BackendService.DeleteSAMLConnection:input_type -> tesseral.backend.v1.DeleteSAMLConnectionRequest
	32,  // 78: tesseral.backend.v1.BackendService.ListSCIMAPIKeys:input_type -> tesseral.backend.v1.ListSCIMAPIKeysRequest
	34,  // 79: tesseral.backend.v1.BackendService.GetSCIMAPIKey:input_type -> tesseral.backend.v1.GetSCIMAPIKeyRequest
	36,  // 80: tesseral.backend.v1.BackendService.CreateSCIMAPIKey:input_type -> tesseral.backend.v1.CreateSCIMAPIKeyRequest
	38,  // 81: tesseral.backend.v1.BackendService.UpdateSCIMAPIKey:input_type -> tesseral.backend.v1.UpdateSCIMAPIKeyRequest
	40,  // 82: tesseral.backend.v1.BackendService.DeleteSCIMAPIKey:input_type -> tesseral.backend.v1.DeleteSCIMAPIKeyRequest
	42,  // 83: tesseral.backend.v1.BackendService.RevokeSCIMAPIKey:input_type -> tesseral.backend.v1.RevokeSCIMAPIKeyRequest
	44,  // 84: tesseral.backend.v1.BackendService.ListUsers:input_type -> tesseral.backend.v1.ListUsersRequest
	46,  // 85: tesseral.backend.v1.BackendService.GetUser:input_type -> tesseral.backend.v1.GetUserRequest
	48,  // 86: tesseral.backend.v1.BackendService.CreateUser:input_type -> tesseral.backend.v1.CreateUserRequest
	50,  // 87: tesseral.backend.v1.BackendService.UpdateUser:input_type -> tesseral.backend.v1.UpdateUserRequest
	52,  // 88: tesseral.backend.v1.BackendService.DeleteUser:input_type -> tesseral.backend.v1.DeleteUserRequest
	54,  // 89: tesseral.backend.v1.BackendService.ListPasskeys:input_type -> tesseral.backend.v1.ListPasskeysRequest
	56,  // 90: tesseral.backend.v1.BackendService.GetPasskey:input_type -> tesseral.backend.v1.GetPasskeyRequest
	58,  // 91: tesseral.backend.v1.BackendService.UpdatePasskey:input_type -> tesseral.backend.v1.UpdatePasskeyRequest
	60,  // 92: tesseral.backend.v1.BackendService.DeletePasskey:input_type -> tesseral.backend.v1.DeletePasskeyRequest
	62,  // 93: tesseral.backend.v1.BackendService.ListSessions:input_type -> tesseral.backend.v1.ListSessionsRequest
	64,  // 94: tesseral.backend.v1.BackendService.GetSession:input_type -> tesseral.backend.v1.GetSessionRequest
	66,  // 95: tesseral.backend.v1.BackendService.ListUserInvites:input_type -> tesseral.backend.v1.ListUserInvitesRequest
	68,  // 96: tesseral.backend.v1.BackendService.GetUserInvite:input_type -> tesseral.backend.v1.GetUserInviteRequest
	70,  // 97: tesseral.backend.v1.BackendService.CreateUserInvite:input_type -> tesseral.backend.v1.CreateUserInviteRequest
	72,  // 98: tesseral.backend.v1.BackendService.DeleteUserInvite:input_type -> tesseral.backend.v1.DeleteUserInviteRequest
	102, // 99: tesseral.backend.v1.BackendService.DisableOrganizationLogins:input_type -> tesseral.backend.v1.DisableOrganizationLoginsRequest
	104, // 100: tesseral.backend.v1.BackendService.DisableProjectLogins:input_type -> tesseral.backend.v1.DisableProjectLoginsRequest
	106, // 101: tesseral.backend.v1.BackendService.EnableOrganizationLogins:input_type -> tesseral.backend.v1.EnableOrganizationLoginsRequest
	108, // 102: tesseral.backend.v1.BackendService.EnableProjectLogins:input_type -> tesseral.backend.v1.EnableProjectLoginsRequest
	2,   // 103: tesseral.backend.v1.BackendService.UpdateProject:input_type -> tesseral.backend.v1.UpdateProjectRequest
	86,  // 104: tesseral.backend.v1.BackendService.GetVaultDomainSettings:input_type -> tesseral.backend.v1.GetVaultDomainSettingsRequest
	98,  // 105: tesseral.backend.v1.BackendService.GetProjectUISettings:input_type -> tesseral.backend.v1.GetProjectUISettingsRequest
	100, // 106: tesseral.backend.v1.BackendService.UpdateProjectUISettings:input_type -> tesseral.backend.v1.UpdateProjectUISettingsRequest
	74,  // 107: tesseral.backend.v1.BackendService.ListProjectAPIKeys:input_type -> tesseral.backend.v1.ListProjectAPIKeysRequest
	76,  // 108: tesseral.backend.v1.BackendService.GetProjectAPIKey:input_type -> tesseral.backend.v1.GetProjectAPIKeyRequest
	78,  // 109: tesseral.backend.v1.BackendService.CreateProjectAPIKey:input_type -> tesseral.backend.v1.CreateProjectAPIKeyRequest
	80,  // 110: tesseral.backend.v1.BackendService.UpdateProjectAPIKey:input_type -> tesseral.backend.v1.UpdateProjectAPIKeyRequest
	82,  // 111: tesseral.backend.v1.BackendService.DeleteProjectAPIKey:input_type -> tesseral.backend.v1.DeleteProjectAPIKeyRequest
	84,  // 112: tesseral.backend.v1.BackendService.RevokeProjectAPIKey:input_type -> tesseral.backend.v1.RevokeProjectAPIKeyRequest
	88,  // 113: tesseral.backend.v1.BackendService.ListPublishableKeys:input_type -> tesseral.backend.v1.ListPublishableKeysRequest
	90,  // 114: tesseral.backend.v1.BackendService.GetPublishableKey:input_type -> tesseral.backend.v1.GetPublishableKeyRequest
	92,  // 115: tesseral.backend.v1.BackendService.CreatePublishableKey:input_type -> tesseral.backend.v1.CreatePublishableKeyRequest
	94,  // 116: tesseral.backend.v1.BackendService.UpdatePublishableKey:input_type -> tesseral.backend.v1.UpdatePublishableKeyRequest
	96,  // 117: tesseral.backend.v1.BackendService.DeletePublishableKey:input_type -> tesseral.backend.v1.DeletePublishableKeyRequest
	111, // 118: tesseral.backend.v1.BackendService.CreateUserImpersonationToken:input_type -> tesseral.backend.v1.CreateUserImpersonationTokenRequest
	1,   // 119: tesseral.backend.v1.BackendService.GetProject:output_type -> tesseral.backend.v1.GetProjectResponse
	5,   // 120: tesseral.backend.v1.BackendService.ListOrganizations:output_type -> tesseral.backend.v1.ListOrganizationsResponse
	7,   // 121: tesseral.backend.v1.BackendService.GetOrganization:output_type -> tesseral.backend.v1.GetOrganizationResponse
	9,   // 122: tesseral.backend.v1.BackendService.CreateOrganization:output_type -> tesseral.backend.v1.CreateOrganizationResponse
	11,  // 123: tesseral.backend.v1.BackendService.UpdateOrganization:output_type -> tesseral.backend.v1.UpdateOrganizationResponse
	13,  // 124: tesseral.backend.v1.BackendService.DeleteOrganization:output_type -> tesseral.backend.v1.DeleteOrganizationResponse
	15,  // 125: tesseral.backend.v1.BackendService.GetOrganizationGoogleHostedDomains:output_type -> tesseral.backend.v1.GetOrganizationGoogleHostedDomainsResponse
	17,  // 126: tesseral.backend.v1.BackendService.UpdateOrganizationGoogleHostedDomains:output_type -> tesseral.backend.v1.UpdateOrganizationGoogleHostedDomainsResponse
	19,  // 127: tesseral.backend.v1.BackendService.GetOrganizationMicrosoftTenantIDs:output_type -> tesseral.backend.v1.GetOrganizationMicrosoftTenantIDsResponse
	21,  // 128: tesseral.backend.v1.BackendService.UpdateOrganizationMicrosoftTenantIDs:output_type -> tesseral.backend.v1.UpdateOrganizationMicrosoftTenantIDsResponse
	27,  // 129: tesseral.backend.v1.BackendService.ListSAMLConnections:output_type -> tesseral.backend.v1.ListSAMLConnectionsResponse
	25,  // 130: tesseral.backend.v1.BackendService.GetSAMLConnection:output_type -> tesseral.backend.v1.GetSAMLConnectionResponse
	23,  // 131: tesseral.backend.v1.BackendService.CreateSAMLConnection:output_type -> tesseral.backend.v1.CreateSAMLConnectionResponse
	29,  // 132: tesseral.backend.v1.BackendService.UpdateSAMLConnection:output_type -> tesseral.backend.v1.UpdateSAMLConnectionResponse
	31,  // 133: tesseral.backend.v1.BackendService.DeleteSAMLConnection:output_type -> tesseral.backend.v1.DeleteSAMLConnectionResponse
	33,  // 134: tesseral.backend.v1.BackendService.ListSCIMAPIKeys:output_type -> tesseral.backend.v1.ListSCIMAPIKeysResponse
	35,  // 135: tesseral.backend.v1.BackendService.GetSCIMAPIKey:output_type -> tesseral.backend.v1.GetSCIMAPIKeyResponse
	37,  // 136: tesseral.backend.v1.BackendService.CreateSCIMAPIKey:output_type -> tesseral.backend.v1.CreateSCIMAPIKeyResponse
	39,  // 137: tesseral.backend.v1.BackendService.UpdateSCIMAPIKey:output_type -> tesseral.backend.v1.UpdateSCIMAPIKeyResponse
	41,  // 138: tesseral.backend.v1.BackendService.DeleteSCIMAPIKey:output_type -> tesseral.backend.v1.DeleteSCIMAPIKeyResponse
	43,  // 139: tesseral.backend.v1.BackendService.RevokeSCIMAPIKey:output_type -> tesseral.backend.v1.RevokeSCIMAPIKeyResponse
	45,  // 140: tesseral.backend.v1.BackendService.ListUsers:output_type -> tesseral.backend.v1.ListUsersResponse
	47,  // 141: tesseral.backend.v1.BackendService.GetUser:output_type -> tesseral.backend.v1.GetUserResponse
	49,  // 142: tesseral.backend.v1.BackendService.CreateUser:output_type -> tesseral.backend.v1.CreateUserResponse
	51,  // 143: tesseral.backend.v1.BackendService.UpdateUser:output_type -> tesseral.backend.v1.UpdateUserResponse
	53,  // 144: tesseral.backend.v1.BackendService.DeleteUser:output_type -> tesseral.backend.v1.DeleteUserResponse
	55,  // 145: tesseral.backend.v1.BackendService.ListPasskeys:output_type -> tesseral.backend.v1.ListPasskeysResponse
	57,  // 146: tesseral.backend.v1.BackendService.GetPasskey:output_type -> tesseral.backend.v1.GetPasskeyResponse
	59,  // 147: tesseral.backend.v1.BackendService.UpdatePasskey:output_type -> tesseral.backend.v1.UpdatePasskeyResponse
	61,  // 148: tesseral.backend.v1.BackendService.DeletePasskey:output_type -> tesseral.backend.v1.DeletePasskeyResponse
	63,  // 149: tesseral.backend.v1.BackendService.ListSessions:output_type -> tesseral.backend.v1.ListSessionsResponse
	65,  // 150: tesseral.backend.v1.BackendService.GetSession:output_type -> tesseral.backend.v1.GetSessionResponse
	67,  // 151: tesseral.backend.v1.BackendService.ListUserInvites:output_type -> tesseral.backend.v1.ListUserInvitesResponse
	69,  // 152: tesseral.backend.v1.BackendService.GetUserInvite:output_type -> tesseral.backend.v1.GetUserInviteResponse
	71,  // 153: tesseral.backend.v1.BackendService.CreateUserInvite:output_type -> tesseral.backend.v1.CreateUserInviteResponse
	73,  // 154: tesseral.backend.v1.BackendService.DeleteUserInvite:output_type -> tesseral.backend.v1.DeleteUserInviteResponse
	103, // 155: tesseral.backend.v1.BackendService.DisableOrganizationLogins:output_type -> tesseral.backend.v1.DisableOrganizationLoginsResponse
	105, // 156: tesseral.backend.v1.BackendService.DisableProjectLogins:output_type -> tesseral.backend.v1.DisableProjectLoginsResponse
	107, // 157: tesseral.backend.v1.BackendService.EnableOrganizationLogins:output_type -> tesseral.backend.v1.EnableOrganizationLoginsResponse
	109, // 158: tesseral.backend.v1.BackendService.EnableProjectLogins:output_type -> tesseral.backend.v1.EnableProjectLoginsResponse
	3,   // 159: tesseral.backend.v1.BackendService.UpdateProject:output_type -> tesseral.backend.v1.UpdateProjectResponse
	87,  // 160: tesseral.backend.v1.BackendService.GetVaultDomainSettings:output_type -> tesseral.backend.v1.GetVaultDomainSettingsResponse
	99,  // 161: tesseral.backend.v1.BackendService.GetProjectUISettings:output_type -> tesseral.backend.v1.GetProjectUISettingsResponse
	101, // 162: tesseral.backend.v1.BackendService.UpdateProjectUISettings:output_type -> tesseral.backend.v1.UpdateProjectUISettingsResponse
	75,  // 163: tesseral.backend.v1.BackendService.ListProjectAPIKeys:output_type -> tesseral.backend.v1.ListProjectAPIKeysResponse
	77,  // 164: tesseral.backend.v1.BackendService.GetProjectAPIKey:output_type -> tesseral.backend.v1.GetProjectAPIKeyResponse
	79,  // 165: tesseral.backend.v1.BackendService.CreateProjectAPIKey:output_type -> tesseral.backend.v1.CreateProjectAPIKeyResponse
	81,  // 166: tesseral.backend.v1.BackendService.UpdateProjectAPIKey:output_type -> tesseral.backend.v1.UpdateProjectAPIKeyResponse
	83,  // 167: tesseral.backend.v1.BackendService.DeleteProjectAPIKey:output_type -> tesseral.backend.v1.DeleteProjectAPIKeyResponse
	85,  // 168: tesseral.backend.v1.BackendService.RevokeProjectAPIKey:output_type -> tesseral.backend.v1.RevokeProjectAPIKeyResponse
	89,  // 169: tesseral.backend.v1.BackendService.ListPublishableKeys:output_type -> tesseral.backend.v1.ListPublishableKeysResponse
	91,  // 170: tesseral.backend.v1.BackendService.GetPublishableKey:output_type -> tesseral.backend.v1.GetPublishableKeyResponse
	93,  // 171: tesseral.backend.v1.BackendService.CreatePublishableKey:output_type -> tesseral.backend.v1.CreatePublishableKeyResponse
	95,  // 172: tesseral.backend.v1.BackendService.UpdatePublishableKey:output_type -> tesseral.backend.v1.UpdatePublishableKeyResponse
	97,  // 173: tesseral.backend.v1.BackendService.DeletePublishableKey:output_type -> tesseral.backend.v1.DeletePublishableKeyResponse
	112, // 174: tesseral.backend.v1.BackendService.CreateUserImpersonationToken:output_type -> tesseral.backend.v1.CreateUserImpersonationTokenResponse
	119, // [119:175] is the sub-list for method output_type
	63,  // [63:119] is the sub-list for method input_type
	63,  // [63:63] is the sub-list for extension type_name
	63,  // [63:63] is the sub-list for extension extendee
	0,   // [0:63] is the sub-list for field type_name
}

func init() { file_tesseral_backend_v1_backend_proto_init() }
func file_tesseral_backend_v1_backend_proto_init() {
	if File_tesseral_backend_v1_backend_proto != nil {
		return
	}
	file_tesseral_backend_v1_models_proto_init()
	file_tesseral_backend_v1_backend_proto_msgTypes[100].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_tesseral_backend_v1_backend_proto_rawDesc), len(file_tesseral_backend_v1_backend_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   113,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_tesseral_backend_v1_backend_proto_goTypes,
		DependencyIndexes: file_tesseral_backend_v1_backend_proto_depIdxs,
		MessageInfos:      file_tesseral_backend_v1_backend_proto_msgTypes,
	}.Build()
	File_tesseral_backend_v1_backend_proto = out.File
	file_tesseral_backend_v1_backend_proto_goTypes = nil
	file_tesseral_backend_v1_backend_proto_depIdxs = nil
}
