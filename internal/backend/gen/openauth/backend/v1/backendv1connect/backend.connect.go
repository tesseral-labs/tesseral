// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: openauth/backend/v1/backend.proto

package backendv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/openauth/openauth/internal/backend/gen/openauth/backend/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// BackendServiceName is the fully-qualified name of the BackendService service.
	BackendServiceName = "openauth.backend.v1.BackendService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// BackendServiceGetProjectProcedure is the fully-qualified name of the BackendService's GetProject
	// RPC.
	BackendServiceGetProjectProcedure = "/openauth.backend.v1.BackendService/GetProject"
	// BackendServiceListOrganizationsProcedure is the fully-qualified name of the BackendService's
	// ListOrganizations RPC.
	BackendServiceListOrganizationsProcedure = "/openauth.backend.v1.BackendService/ListOrganizations"
	// BackendServiceGetOrganizationProcedure is the fully-qualified name of the BackendService's
	// GetOrganization RPC.
	BackendServiceGetOrganizationProcedure = "/openauth.backend.v1.BackendService/GetOrganization"
	// BackendServiceCreateOrganizationProcedure is the fully-qualified name of the BackendService's
	// CreateOrganization RPC.
	BackendServiceCreateOrganizationProcedure = "/openauth.backend.v1.BackendService/CreateOrganization"
	// BackendServiceUpdateOrganizationProcedure is the fully-qualified name of the BackendService's
	// UpdateOrganization RPC.
	BackendServiceUpdateOrganizationProcedure = "/openauth.backend.v1.BackendService/UpdateOrganization"
	// BackendServiceDeleteOrganizationProcedure is the fully-qualified name of the BackendService's
	// DeleteOrganization RPC.
	BackendServiceDeleteOrganizationProcedure = "/openauth.backend.v1.BackendService/DeleteOrganization"
	// BackendServiceListSAMLConnectionsProcedure is the fully-qualified name of the BackendService's
	// ListSAMLConnections RPC.
	BackendServiceListSAMLConnectionsProcedure = "/openauth.backend.v1.BackendService/ListSAMLConnections"
	// BackendServiceGetSAMLConnectionProcedure is the fully-qualified name of the BackendService's
	// GetSAMLConnection RPC.
	BackendServiceGetSAMLConnectionProcedure = "/openauth.backend.v1.BackendService/GetSAMLConnection"
	// BackendServiceCreateSAMLConnectionProcedure is the fully-qualified name of the BackendService's
	// CreateSAMLConnection RPC.
	BackendServiceCreateSAMLConnectionProcedure = "/openauth.backend.v1.BackendService/CreateSAMLConnection"
	// BackendServiceUpdateSAMLConnectionProcedure is the fully-qualified name of the BackendService's
	// UpdateSAMLConnection RPC.
	BackendServiceUpdateSAMLConnectionProcedure = "/openauth.backend.v1.BackendService/UpdateSAMLConnection"
	// BackendServiceDeleteSAMLConnectionProcedure is the fully-qualified name of the BackendService's
	// DeleteSAMLConnection RPC.
	BackendServiceDeleteSAMLConnectionProcedure = "/openauth.backend.v1.BackendService/DeleteSAMLConnection"
	// BackendServiceListSCIMAPIKeysProcedure is the fully-qualified name of the BackendService's
	// ListSCIMAPIKeys RPC.
	BackendServiceListSCIMAPIKeysProcedure = "/openauth.backend.v1.BackendService/ListSCIMAPIKeys"
	// BackendServiceGetSCIMAPIKeyProcedure is the fully-qualified name of the BackendService's
	// GetSCIMAPIKey RPC.
	BackendServiceGetSCIMAPIKeyProcedure = "/openauth.backend.v1.BackendService/GetSCIMAPIKey"
	// BackendServiceCreateSCIMAPIKeyProcedure is the fully-qualified name of the BackendService's
	// CreateSCIMAPIKey RPC.
	BackendServiceCreateSCIMAPIKeyProcedure = "/openauth.backend.v1.BackendService/CreateSCIMAPIKey"
	// BackendServiceUpdateSCIMAPIKeyProcedure is the fully-qualified name of the BackendService's
	// UpdateSCIMAPIKey RPC.
	BackendServiceUpdateSCIMAPIKeyProcedure = "/openauth.backend.v1.BackendService/UpdateSCIMAPIKey"
	// BackendServiceDeleteSCIMAPIKeyProcedure is the fully-qualified name of the BackendService's
	// DeleteSCIMAPIKey RPC.
	BackendServiceDeleteSCIMAPIKeyProcedure = "/openauth.backend.v1.BackendService/DeleteSCIMAPIKey"
	// BackendServiceRevokeSCIMAPIKeyProcedure is the fully-qualified name of the BackendService's
	// RevokeSCIMAPIKey RPC.
	BackendServiceRevokeSCIMAPIKeyProcedure = "/openauth.backend.v1.BackendService/RevokeSCIMAPIKey"
	// BackendServiceListUsersProcedure is the fully-qualified name of the BackendService's ListUsers
	// RPC.
	BackendServiceListUsersProcedure = "/openauth.backend.v1.BackendService/ListUsers"
	// BackendServiceGetUserProcedure is the fully-qualified name of the BackendService's GetUser RPC.
	BackendServiceGetUserProcedure = "/openauth.backend.v1.BackendService/GetUser"
	// BackendServiceListSessionsProcedure is the fully-qualified name of the BackendService's
	// ListSessions RPC.
	BackendServiceListSessionsProcedure = "/openauth.backend.v1.BackendService/ListSessions"
	// BackendServiceGetSessionProcedure is the fully-qualified name of the BackendService's GetSession
	// RPC.
	BackendServiceGetSessionProcedure = "/openauth.backend.v1.BackendService/GetSession"
	// BackendServiceListIntermediateSessionsProcedure is the fully-qualified name of the
	// BackendService's ListIntermediateSessions RPC.
	BackendServiceListIntermediateSessionsProcedure = "/openauth.backend.v1.BackendService/ListIntermediateSessions"
	// BackendServiceGetIntermediateSessionProcedure is the fully-qualified name of the BackendService's
	// GetIntermediateSession RPC.
	BackendServiceGetIntermediateSessionProcedure = "/openauth.backend.v1.BackendService/GetIntermediateSession"
	// BackendServiceUpdateProjectProcedure is the fully-qualified name of the BackendService's
	// UpdateProject RPC.
	BackendServiceUpdateProjectProcedure = "/openauth.backend.v1.BackendService/UpdateProject"
	// BackendServiceCreateProjectRedirectURIProcedure is the fully-qualified name of the
	// BackendService's CreateProjectRedirectURI RPC.
	BackendServiceCreateProjectRedirectURIProcedure = "/openauth.backend.v1.BackendService/CreateProjectRedirectURI"
	// BackendServiceDeleteProjectRedirectURIProcedure is the fully-qualified name of the
	// BackendService's DeleteProjectRedirectURI RPC.
	BackendServiceDeleteProjectRedirectURIProcedure = "/openauth.backend.v1.BackendService/DeleteProjectRedirectURI"
	// BackendServiceGetProjectRedirectURIProcedure is the fully-qualified name of the BackendService's
	// GetProjectRedirectURI RPC.
	BackendServiceGetProjectRedirectURIProcedure = "/openauth.backend.v1.BackendService/GetProjectRedirectURI"
	// BackendServiceListProjectRedirectURIsProcedure is the fully-qualified name of the
	// BackendService's ListProjectRedirectURIs RPC.
	BackendServiceListProjectRedirectURIsProcedure = "/openauth.backend.v1.BackendService/ListProjectRedirectURIs"
	// BackendServiceUpdateProjectRedirectURIProcedure is the fully-qualified name of the
	// BackendService's UpdateProjectRedirectURI RPC.
	BackendServiceUpdateProjectRedirectURIProcedure = "/openauth.backend.v1.BackendService/UpdateProjectRedirectURI"
	// BackendServiceListProjectAPIKeysProcedure is the fully-qualified name of the BackendService's
	// ListProjectAPIKeys RPC.
	BackendServiceListProjectAPIKeysProcedure = "/openauth.backend.v1.BackendService/ListProjectAPIKeys"
	// BackendServiceGetProjectAPIKeyProcedure is the fully-qualified name of the BackendService's
	// GetProjectAPIKey RPC.
	BackendServiceGetProjectAPIKeyProcedure = "/openauth.backend.v1.BackendService/GetProjectAPIKey"
	// BackendServiceCreateProjectAPIKeyProcedure is the fully-qualified name of the BackendService's
	// CreateProjectAPIKey RPC.
	BackendServiceCreateProjectAPIKeyProcedure = "/openauth.backend.v1.BackendService/CreateProjectAPIKey"
	// BackendServiceUpdateProjectAPIKeyProcedure is the fully-qualified name of the BackendService's
	// UpdateProjectAPIKey RPC.
	BackendServiceUpdateProjectAPIKeyProcedure = "/openauth.backend.v1.BackendService/UpdateProjectAPIKey"
	// BackendServiceDeleteProjectAPIKeyProcedure is the fully-qualified name of the BackendService's
	// DeleteProjectAPIKey RPC.
	BackendServiceDeleteProjectAPIKeyProcedure = "/openauth.backend.v1.BackendService/DeleteProjectAPIKey"
	// BackendServiceRevokeProjectAPIKeyProcedure is the fully-qualified name of the BackendService's
	// RevokeProjectAPIKey RPC.
	BackendServiceRevokeProjectAPIKeyProcedure = "/openauth.backend.v1.BackendService/RevokeProjectAPIKey"
)

// BackendServiceClient is a client for the openauth.backend.v1.BackendService service.
type BackendServiceClient interface {
	GetProject(context.Context, *connect.Request[v1.GetProjectRequest]) (*connect.Response[v1.GetProjectResponse], error)
	ListOrganizations(context.Context, *connect.Request[v1.ListOrganizationsRequest]) (*connect.Response[v1.ListOrganizationsResponse], error)
	GetOrganization(context.Context, *connect.Request[v1.GetOrganizationRequest]) (*connect.Response[v1.GetOrganizationResponse], error)
	CreateOrganization(context.Context, *connect.Request[v1.CreateOrganizationRequest]) (*connect.Response[v1.CreateOrganizationResponse], error)
	UpdateOrganization(context.Context, *connect.Request[v1.UpdateOrganizationRequest]) (*connect.Response[v1.UpdateOrganizationResponse], error)
	DeleteOrganization(context.Context, *connect.Request[v1.DeleteOrganizationRequest]) (*connect.Response[v1.DeleteOrganizationResponse], error)
	ListSAMLConnections(context.Context, *connect.Request[v1.ListSAMLConnectionsRequest]) (*connect.Response[v1.ListSAMLConnectionsResponse], error)
	GetSAMLConnection(context.Context, *connect.Request[v1.GetSAMLConnectionRequest]) (*connect.Response[v1.GetSAMLConnectionResponse], error)
	CreateSAMLConnection(context.Context, *connect.Request[v1.CreateSAMLConnectionRequest]) (*connect.Response[v1.CreateSAMLConnectionResponse], error)
	UpdateSAMLConnection(context.Context, *connect.Request[v1.UpdateSAMLConnectionRequest]) (*connect.Response[v1.UpdateSAMLConnectionResponse], error)
	DeleteSAMLConnection(context.Context, *connect.Request[v1.DeleteSAMLConnectionRequest]) (*connect.Response[v1.DeleteSAMLConnectionResponse], error)
	ListSCIMAPIKeys(context.Context, *connect.Request[v1.ListSCIMAPIKeysRequest]) (*connect.Response[v1.ListSCIMAPIKeysResponse], error)
	GetSCIMAPIKey(context.Context, *connect.Request[v1.GetSCIMAPIKeyRequest]) (*connect.Response[v1.GetSCIMAPIKeyResponse], error)
	CreateSCIMAPIKey(context.Context, *connect.Request[v1.CreateSCIMAPIKeyRequest]) (*connect.Response[v1.CreateSCIMAPIKeyResponse], error)
	UpdateSCIMAPIKey(context.Context, *connect.Request[v1.UpdateSCIMAPIKeyRequest]) (*connect.Response[v1.UpdateSCIMAPIKeyResponse], error)
	DeleteSCIMAPIKey(context.Context, *connect.Request[v1.DeleteSCIMAPIKeyRequest]) (*connect.Response[v1.DeleteSCIMAPIKeyResponse], error)
	RevokeSCIMAPIKey(context.Context, *connect.Request[v1.RevokeSCIMAPIKeyRequest]) (*connect.Response[v1.RevokeSCIMAPIKeyResponse], error)
	ListUsers(context.Context, *connect.Request[v1.ListUsersRequest]) (*connect.Response[v1.ListUsersResponse], error)
	GetUser(context.Context, *connect.Request[v1.GetUserRequest]) (*connect.Response[v1.GetUserResponse], error)
	ListSessions(context.Context, *connect.Request[v1.ListSessionsRequest]) (*connect.Response[v1.ListSessionsResponse], error)
	GetSession(context.Context, *connect.Request[v1.GetSessionRequest]) (*connect.Response[v1.GetSessionResponse], error)
	ListIntermediateSessions(context.Context, *connect.Request[v1.ListIntermediateSessionsRequest]) (*connect.Response[v1.ListIntermediateSessionsResponse], error)
	GetIntermediateSession(context.Context, *connect.Request[v1.GetIntermediateSessionRequest]) (*connect.Response[v1.GetIntermediateSessionResponse], error)
	UpdateProject(context.Context, *connect.Request[v1.UpdateProjectRequest]) (*connect.Response[v1.UpdateProjectResponse], error)
	CreateProjectRedirectURI(context.Context, *connect.Request[v1.CreateProjectRedirectURIRequest]) (*connect.Response[v1.CreateProjectRedirectURIResponse], error)
	DeleteProjectRedirectURI(context.Context, *connect.Request[v1.DeleteProjectRedirectURIRequest]) (*connect.Response[v1.DeleteProjectRedirectURIResponse], error)
	GetProjectRedirectURI(context.Context, *connect.Request[v1.GetProjectRedirectURIRequest]) (*connect.Response[v1.GetProjectRedirectURIResponse], error)
	ListProjectRedirectURIs(context.Context, *connect.Request[v1.ListProjectRedirectURIsRequest]) (*connect.Response[v1.ListProjectRedirectURIsResponse], error)
	UpdateProjectRedirectURI(context.Context, *connect.Request[v1.UpdateProjectRedirectURIRequest]) (*connect.Response[v1.UpdateProjectRedirectURIResponse], error)
	ListProjectAPIKeys(context.Context, *connect.Request[v1.ListProjectAPIKeysRequest]) (*connect.Response[v1.ListProjectAPIKeysResponse], error)
	GetProjectAPIKey(context.Context, *connect.Request[v1.GetProjectAPIKeyRequest]) (*connect.Response[v1.GetProjectAPIKeyResponse], error)
	CreateProjectAPIKey(context.Context, *connect.Request[v1.CreateProjectAPIKeyRequest]) (*connect.Response[v1.CreateProjectAPIKeyResponse], error)
	UpdateProjectAPIKey(context.Context, *connect.Request[v1.UpdateProjectAPIKeyRequest]) (*connect.Response[v1.UpdateProjectAPIKeyResponse], error)
	DeleteProjectAPIKey(context.Context, *connect.Request[v1.DeleteProjectAPIKeyRequest]) (*connect.Response[v1.DeleteProjectAPIKeyResponse], error)
	RevokeProjectAPIKey(context.Context, *connect.Request[v1.RevokeProjectAPIKeyRequest]) (*connect.Response[v1.RevokeProjectAPIKeyResponse], error)
}

// NewBackendServiceClient constructs a client for the openauth.backend.v1.BackendService service.
// By default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped
// responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewBackendServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) BackendServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	backendServiceMethods := v1.File_openauth_backend_v1_backend_proto.Services().ByName("BackendService").Methods()
	return &backendServiceClient{
		getProject: connect.NewClient[v1.GetProjectRequest, v1.GetProjectResponse](
			httpClient,
			baseURL+BackendServiceGetProjectProcedure,
			connect.WithSchema(backendServiceMethods.ByName("GetProject")),
			connect.WithClientOptions(opts...),
		),
		listOrganizations: connect.NewClient[v1.ListOrganizationsRequest, v1.ListOrganizationsResponse](
			httpClient,
			baseURL+BackendServiceListOrganizationsProcedure,
			connect.WithSchema(backendServiceMethods.ByName("ListOrganizations")),
			connect.WithClientOptions(opts...),
		),
		getOrganization: connect.NewClient[v1.GetOrganizationRequest, v1.GetOrganizationResponse](
			httpClient,
			baseURL+BackendServiceGetOrganizationProcedure,
			connect.WithSchema(backendServiceMethods.ByName("GetOrganization")),
			connect.WithClientOptions(opts...),
		),
		createOrganization: connect.NewClient[v1.CreateOrganizationRequest, v1.CreateOrganizationResponse](
			httpClient,
			baseURL+BackendServiceCreateOrganizationProcedure,
			connect.WithSchema(backendServiceMethods.ByName("CreateOrganization")),
			connect.WithClientOptions(opts...),
		),
		updateOrganization: connect.NewClient[v1.UpdateOrganizationRequest, v1.UpdateOrganizationResponse](
			httpClient,
			baseURL+BackendServiceUpdateOrganizationProcedure,
			connect.WithSchema(backendServiceMethods.ByName("UpdateOrganization")),
			connect.WithClientOptions(opts...),
		),
		deleteOrganization: connect.NewClient[v1.DeleteOrganizationRequest, v1.DeleteOrganizationResponse](
			httpClient,
			baseURL+BackendServiceDeleteOrganizationProcedure,
			connect.WithSchema(backendServiceMethods.ByName("DeleteOrganization")),
			connect.WithClientOptions(opts...),
		),
		listSAMLConnections: connect.NewClient[v1.ListSAMLConnectionsRequest, v1.ListSAMLConnectionsResponse](
			httpClient,
			baseURL+BackendServiceListSAMLConnectionsProcedure,
			connect.WithSchema(backendServiceMethods.ByName("ListSAMLConnections")),
			connect.WithClientOptions(opts...),
		),
		getSAMLConnection: connect.NewClient[v1.GetSAMLConnectionRequest, v1.GetSAMLConnectionResponse](
			httpClient,
			baseURL+BackendServiceGetSAMLConnectionProcedure,
			connect.WithSchema(backendServiceMethods.ByName("GetSAMLConnection")),
			connect.WithClientOptions(opts...),
		),
		createSAMLConnection: connect.NewClient[v1.CreateSAMLConnectionRequest, v1.CreateSAMLConnectionResponse](
			httpClient,
			baseURL+BackendServiceCreateSAMLConnectionProcedure,
			connect.WithSchema(backendServiceMethods.ByName("CreateSAMLConnection")),
			connect.WithClientOptions(opts...),
		),
		updateSAMLConnection: connect.NewClient[v1.UpdateSAMLConnectionRequest, v1.UpdateSAMLConnectionResponse](
			httpClient,
			baseURL+BackendServiceUpdateSAMLConnectionProcedure,
			connect.WithSchema(backendServiceMethods.ByName("UpdateSAMLConnection")),
			connect.WithClientOptions(opts...),
		),
		deleteSAMLConnection: connect.NewClient[v1.DeleteSAMLConnectionRequest, v1.DeleteSAMLConnectionResponse](
			httpClient,
			baseURL+BackendServiceDeleteSAMLConnectionProcedure,
			connect.WithSchema(backendServiceMethods.ByName("DeleteSAMLConnection")),
			connect.WithClientOptions(opts...),
		),
		listSCIMAPIKeys: connect.NewClient[v1.ListSCIMAPIKeysRequest, v1.ListSCIMAPIKeysResponse](
			httpClient,
			baseURL+BackendServiceListSCIMAPIKeysProcedure,
			connect.WithSchema(backendServiceMethods.ByName("ListSCIMAPIKeys")),
			connect.WithClientOptions(opts...),
		),
		getSCIMAPIKey: connect.NewClient[v1.GetSCIMAPIKeyRequest, v1.GetSCIMAPIKeyResponse](
			httpClient,
			baseURL+BackendServiceGetSCIMAPIKeyProcedure,
			connect.WithSchema(backendServiceMethods.ByName("GetSCIMAPIKey")),
			connect.WithClientOptions(opts...),
		),
		createSCIMAPIKey: connect.NewClient[v1.CreateSCIMAPIKeyRequest, v1.CreateSCIMAPIKeyResponse](
			httpClient,
			baseURL+BackendServiceCreateSCIMAPIKeyProcedure,
			connect.WithSchema(backendServiceMethods.ByName("CreateSCIMAPIKey")),
			connect.WithClientOptions(opts...),
		),
		updateSCIMAPIKey: connect.NewClient[v1.UpdateSCIMAPIKeyRequest, v1.UpdateSCIMAPIKeyResponse](
			httpClient,
			baseURL+BackendServiceUpdateSCIMAPIKeyProcedure,
			connect.WithSchema(backendServiceMethods.ByName("UpdateSCIMAPIKey")),
			connect.WithClientOptions(opts...),
		),
		deleteSCIMAPIKey: connect.NewClient[v1.DeleteSCIMAPIKeyRequest, v1.DeleteSCIMAPIKeyResponse](
			httpClient,
			baseURL+BackendServiceDeleteSCIMAPIKeyProcedure,
			connect.WithSchema(backendServiceMethods.ByName("DeleteSCIMAPIKey")),
			connect.WithClientOptions(opts...),
		),
		revokeSCIMAPIKey: connect.NewClient[v1.RevokeSCIMAPIKeyRequest, v1.RevokeSCIMAPIKeyResponse](
			httpClient,
			baseURL+BackendServiceRevokeSCIMAPIKeyProcedure,
			connect.WithSchema(backendServiceMethods.ByName("RevokeSCIMAPIKey")),
			connect.WithClientOptions(opts...),
		),
		listUsers: connect.NewClient[v1.ListUsersRequest, v1.ListUsersResponse](
			httpClient,
			baseURL+BackendServiceListUsersProcedure,
			connect.WithSchema(backendServiceMethods.ByName("ListUsers")),
			connect.WithClientOptions(opts...),
		),
		getUser: connect.NewClient[v1.GetUserRequest, v1.GetUserResponse](
			httpClient,
			baseURL+BackendServiceGetUserProcedure,
			connect.WithSchema(backendServiceMethods.ByName("GetUser")),
			connect.WithClientOptions(opts...),
		),
		listSessions: connect.NewClient[v1.ListSessionsRequest, v1.ListSessionsResponse](
			httpClient,
			baseURL+BackendServiceListSessionsProcedure,
			connect.WithSchema(backendServiceMethods.ByName("ListSessions")),
			connect.WithClientOptions(opts...),
		),
		getSession: connect.NewClient[v1.GetSessionRequest, v1.GetSessionResponse](
			httpClient,
			baseURL+BackendServiceGetSessionProcedure,
			connect.WithSchema(backendServiceMethods.ByName("GetSession")),
			connect.WithClientOptions(opts...),
		),
		listIntermediateSessions: connect.NewClient[v1.ListIntermediateSessionsRequest, v1.ListIntermediateSessionsResponse](
			httpClient,
			baseURL+BackendServiceListIntermediateSessionsProcedure,
			connect.WithSchema(backendServiceMethods.ByName("ListIntermediateSessions")),
			connect.WithClientOptions(opts...),
		),
		getIntermediateSession: connect.NewClient[v1.GetIntermediateSessionRequest, v1.GetIntermediateSessionResponse](
			httpClient,
			baseURL+BackendServiceGetIntermediateSessionProcedure,
			connect.WithSchema(backendServiceMethods.ByName("GetIntermediateSession")),
			connect.WithClientOptions(opts...),
		),
		updateProject: connect.NewClient[v1.UpdateProjectRequest, v1.UpdateProjectResponse](
			httpClient,
			baseURL+BackendServiceUpdateProjectProcedure,
			connect.WithSchema(backendServiceMethods.ByName("UpdateProject")),
			connect.WithClientOptions(opts...),
		),
		createProjectRedirectURI: connect.NewClient[v1.CreateProjectRedirectURIRequest, v1.CreateProjectRedirectURIResponse](
			httpClient,
			baseURL+BackendServiceCreateProjectRedirectURIProcedure,
			connect.WithSchema(backendServiceMethods.ByName("CreateProjectRedirectURI")),
			connect.WithClientOptions(opts...),
		),
		deleteProjectRedirectURI: connect.NewClient[v1.DeleteProjectRedirectURIRequest, v1.DeleteProjectRedirectURIResponse](
			httpClient,
			baseURL+BackendServiceDeleteProjectRedirectURIProcedure,
			connect.WithSchema(backendServiceMethods.ByName("DeleteProjectRedirectURI")),
			connect.WithClientOptions(opts...),
		),
		getProjectRedirectURI: connect.NewClient[v1.GetProjectRedirectURIRequest, v1.GetProjectRedirectURIResponse](
			httpClient,
			baseURL+BackendServiceGetProjectRedirectURIProcedure,
			connect.WithSchema(backendServiceMethods.ByName("GetProjectRedirectURI")),
			connect.WithClientOptions(opts...),
		),
		listProjectRedirectURIs: connect.NewClient[v1.ListProjectRedirectURIsRequest, v1.ListProjectRedirectURIsResponse](
			httpClient,
			baseURL+BackendServiceListProjectRedirectURIsProcedure,
			connect.WithSchema(backendServiceMethods.ByName("ListProjectRedirectURIs")),
			connect.WithClientOptions(opts...),
		),
		updateProjectRedirectURI: connect.NewClient[v1.UpdateProjectRedirectURIRequest, v1.UpdateProjectRedirectURIResponse](
			httpClient,
			baseURL+BackendServiceUpdateProjectRedirectURIProcedure,
			connect.WithSchema(backendServiceMethods.ByName("UpdateProjectRedirectURI")),
			connect.WithClientOptions(opts...),
		),
		listProjectAPIKeys: connect.NewClient[v1.ListProjectAPIKeysRequest, v1.ListProjectAPIKeysResponse](
			httpClient,
			baseURL+BackendServiceListProjectAPIKeysProcedure,
			connect.WithSchema(backendServiceMethods.ByName("ListProjectAPIKeys")),
			connect.WithClientOptions(opts...),
		),
		getProjectAPIKey: connect.NewClient[v1.GetProjectAPIKeyRequest, v1.GetProjectAPIKeyResponse](
			httpClient,
			baseURL+BackendServiceGetProjectAPIKeyProcedure,
			connect.WithSchema(backendServiceMethods.ByName("GetProjectAPIKey")),
			connect.WithClientOptions(opts...),
		),
		createProjectAPIKey: connect.NewClient[v1.CreateProjectAPIKeyRequest, v1.CreateProjectAPIKeyResponse](
			httpClient,
			baseURL+BackendServiceCreateProjectAPIKeyProcedure,
			connect.WithSchema(backendServiceMethods.ByName("CreateProjectAPIKey")),
			connect.WithClientOptions(opts...),
		),
		updateProjectAPIKey: connect.NewClient[v1.UpdateProjectAPIKeyRequest, v1.UpdateProjectAPIKeyResponse](
			httpClient,
			baseURL+BackendServiceUpdateProjectAPIKeyProcedure,
			connect.WithSchema(backendServiceMethods.ByName("UpdateProjectAPIKey")),
			connect.WithClientOptions(opts...),
		),
		deleteProjectAPIKey: connect.NewClient[v1.DeleteProjectAPIKeyRequest, v1.DeleteProjectAPIKeyResponse](
			httpClient,
			baseURL+BackendServiceDeleteProjectAPIKeyProcedure,
			connect.WithSchema(backendServiceMethods.ByName("DeleteProjectAPIKey")),
			connect.WithClientOptions(opts...),
		),
		revokeProjectAPIKey: connect.NewClient[v1.RevokeProjectAPIKeyRequest, v1.RevokeProjectAPIKeyResponse](
			httpClient,
			baseURL+BackendServiceRevokeProjectAPIKeyProcedure,
			connect.WithSchema(backendServiceMethods.ByName("RevokeProjectAPIKey")),
			connect.WithClientOptions(opts...),
		),
	}
}

// backendServiceClient implements BackendServiceClient.
type backendServiceClient struct {
	getProject               *connect.Client[v1.GetProjectRequest, v1.GetProjectResponse]
	listOrganizations        *connect.Client[v1.ListOrganizationsRequest, v1.ListOrganizationsResponse]
	getOrganization          *connect.Client[v1.GetOrganizationRequest, v1.GetOrganizationResponse]
	createOrganization       *connect.Client[v1.CreateOrganizationRequest, v1.CreateOrganizationResponse]
	updateOrganization       *connect.Client[v1.UpdateOrganizationRequest, v1.UpdateOrganizationResponse]
	deleteOrganization       *connect.Client[v1.DeleteOrganizationRequest, v1.DeleteOrganizationResponse]
	listSAMLConnections      *connect.Client[v1.ListSAMLConnectionsRequest, v1.ListSAMLConnectionsResponse]
	getSAMLConnection        *connect.Client[v1.GetSAMLConnectionRequest, v1.GetSAMLConnectionResponse]
	createSAMLConnection     *connect.Client[v1.CreateSAMLConnectionRequest, v1.CreateSAMLConnectionResponse]
	updateSAMLConnection     *connect.Client[v1.UpdateSAMLConnectionRequest, v1.UpdateSAMLConnectionResponse]
	deleteSAMLConnection     *connect.Client[v1.DeleteSAMLConnectionRequest, v1.DeleteSAMLConnectionResponse]
	listSCIMAPIKeys          *connect.Client[v1.ListSCIMAPIKeysRequest, v1.ListSCIMAPIKeysResponse]
	getSCIMAPIKey            *connect.Client[v1.GetSCIMAPIKeyRequest, v1.GetSCIMAPIKeyResponse]
	createSCIMAPIKey         *connect.Client[v1.CreateSCIMAPIKeyRequest, v1.CreateSCIMAPIKeyResponse]
	updateSCIMAPIKey         *connect.Client[v1.UpdateSCIMAPIKeyRequest, v1.UpdateSCIMAPIKeyResponse]
	deleteSCIMAPIKey         *connect.Client[v1.DeleteSCIMAPIKeyRequest, v1.DeleteSCIMAPIKeyResponse]
	revokeSCIMAPIKey         *connect.Client[v1.RevokeSCIMAPIKeyRequest, v1.RevokeSCIMAPIKeyResponse]
	listUsers                *connect.Client[v1.ListUsersRequest, v1.ListUsersResponse]
	getUser                  *connect.Client[v1.GetUserRequest, v1.GetUserResponse]
	listSessions             *connect.Client[v1.ListSessionsRequest, v1.ListSessionsResponse]
	getSession               *connect.Client[v1.GetSessionRequest, v1.GetSessionResponse]
	listIntermediateSessions *connect.Client[v1.ListIntermediateSessionsRequest, v1.ListIntermediateSessionsResponse]
	getIntermediateSession   *connect.Client[v1.GetIntermediateSessionRequest, v1.GetIntermediateSessionResponse]
	updateProject            *connect.Client[v1.UpdateProjectRequest, v1.UpdateProjectResponse]
	createProjectRedirectURI *connect.Client[v1.CreateProjectRedirectURIRequest, v1.CreateProjectRedirectURIResponse]
	deleteProjectRedirectURI *connect.Client[v1.DeleteProjectRedirectURIRequest, v1.DeleteProjectRedirectURIResponse]
	getProjectRedirectURI    *connect.Client[v1.GetProjectRedirectURIRequest, v1.GetProjectRedirectURIResponse]
	listProjectRedirectURIs  *connect.Client[v1.ListProjectRedirectURIsRequest, v1.ListProjectRedirectURIsResponse]
	updateProjectRedirectURI *connect.Client[v1.UpdateProjectRedirectURIRequest, v1.UpdateProjectRedirectURIResponse]
	listProjectAPIKeys       *connect.Client[v1.ListProjectAPIKeysRequest, v1.ListProjectAPIKeysResponse]
	getProjectAPIKey         *connect.Client[v1.GetProjectAPIKeyRequest, v1.GetProjectAPIKeyResponse]
	createProjectAPIKey      *connect.Client[v1.CreateProjectAPIKeyRequest, v1.CreateProjectAPIKeyResponse]
	updateProjectAPIKey      *connect.Client[v1.UpdateProjectAPIKeyRequest, v1.UpdateProjectAPIKeyResponse]
	deleteProjectAPIKey      *connect.Client[v1.DeleteProjectAPIKeyRequest, v1.DeleteProjectAPIKeyResponse]
	revokeProjectAPIKey      *connect.Client[v1.RevokeProjectAPIKeyRequest, v1.RevokeProjectAPIKeyResponse]
}

// GetProject calls openauth.backend.v1.BackendService.GetProject.
func (c *backendServiceClient) GetProject(ctx context.Context, req *connect.Request[v1.GetProjectRequest]) (*connect.Response[v1.GetProjectResponse], error) {
	return c.getProject.CallUnary(ctx, req)
}

// ListOrganizations calls openauth.backend.v1.BackendService.ListOrganizations.
func (c *backendServiceClient) ListOrganizations(ctx context.Context, req *connect.Request[v1.ListOrganizationsRequest]) (*connect.Response[v1.ListOrganizationsResponse], error) {
	return c.listOrganizations.CallUnary(ctx, req)
}

// GetOrganization calls openauth.backend.v1.BackendService.GetOrganization.
func (c *backendServiceClient) GetOrganization(ctx context.Context, req *connect.Request[v1.GetOrganizationRequest]) (*connect.Response[v1.GetOrganizationResponse], error) {
	return c.getOrganization.CallUnary(ctx, req)
}

// CreateOrganization calls openauth.backend.v1.BackendService.CreateOrganization.
func (c *backendServiceClient) CreateOrganization(ctx context.Context, req *connect.Request[v1.CreateOrganizationRequest]) (*connect.Response[v1.CreateOrganizationResponse], error) {
	return c.createOrganization.CallUnary(ctx, req)
}

// UpdateOrganization calls openauth.backend.v1.BackendService.UpdateOrganization.
func (c *backendServiceClient) UpdateOrganization(ctx context.Context, req *connect.Request[v1.UpdateOrganizationRequest]) (*connect.Response[v1.UpdateOrganizationResponse], error) {
	return c.updateOrganization.CallUnary(ctx, req)
}

// DeleteOrganization calls openauth.backend.v1.BackendService.DeleteOrganization.
func (c *backendServiceClient) DeleteOrganization(ctx context.Context, req *connect.Request[v1.DeleteOrganizationRequest]) (*connect.Response[v1.DeleteOrganizationResponse], error) {
	return c.deleteOrganization.CallUnary(ctx, req)
}

// ListSAMLConnections calls openauth.backend.v1.BackendService.ListSAMLConnections.
func (c *backendServiceClient) ListSAMLConnections(ctx context.Context, req *connect.Request[v1.ListSAMLConnectionsRequest]) (*connect.Response[v1.ListSAMLConnectionsResponse], error) {
	return c.listSAMLConnections.CallUnary(ctx, req)
}

// GetSAMLConnection calls openauth.backend.v1.BackendService.GetSAMLConnection.
func (c *backendServiceClient) GetSAMLConnection(ctx context.Context, req *connect.Request[v1.GetSAMLConnectionRequest]) (*connect.Response[v1.GetSAMLConnectionResponse], error) {
	return c.getSAMLConnection.CallUnary(ctx, req)
}

// CreateSAMLConnection calls openauth.backend.v1.BackendService.CreateSAMLConnection.
func (c *backendServiceClient) CreateSAMLConnection(ctx context.Context, req *connect.Request[v1.CreateSAMLConnectionRequest]) (*connect.Response[v1.CreateSAMLConnectionResponse], error) {
	return c.createSAMLConnection.CallUnary(ctx, req)
}

// UpdateSAMLConnection calls openauth.backend.v1.BackendService.UpdateSAMLConnection.
func (c *backendServiceClient) UpdateSAMLConnection(ctx context.Context, req *connect.Request[v1.UpdateSAMLConnectionRequest]) (*connect.Response[v1.UpdateSAMLConnectionResponse], error) {
	return c.updateSAMLConnection.CallUnary(ctx, req)
}

// DeleteSAMLConnection calls openauth.backend.v1.BackendService.DeleteSAMLConnection.
func (c *backendServiceClient) DeleteSAMLConnection(ctx context.Context, req *connect.Request[v1.DeleteSAMLConnectionRequest]) (*connect.Response[v1.DeleteSAMLConnectionResponse], error) {
	return c.deleteSAMLConnection.CallUnary(ctx, req)
}

// ListSCIMAPIKeys calls openauth.backend.v1.BackendService.ListSCIMAPIKeys.
func (c *backendServiceClient) ListSCIMAPIKeys(ctx context.Context, req *connect.Request[v1.ListSCIMAPIKeysRequest]) (*connect.Response[v1.ListSCIMAPIKeysResponse], error) {
	return c.listSCIMAPIKeys.CallUnary(ctx, req)
}

// GetSCIMAPIKey calls openauth.backend.v1.BackendService.GetSCIMAPIKey.
func (c *backendServiceClient) GetSCIMAPIKey(ctx context.Context, req *connect.Request[v1.GetSCIMAPIKeyRequest]) (*connect.Response[v1.GetSCIMAPIKeyResponse], error) {
	return c.getSCIMAPIKey.CallUnary(ctx, req)
}

// CreateSCIMAPIKey calls openauth.backend.v1.BackendService.CreateSCIMAPIKey.
func (c *backendServiceClient) CreateSCIMAPIKey(ctx context.Context, req *connect.Request[v1.CreateSCIMAPIKeyRequest]) (*connect.Response[v1.CreateSCIMAPIKeyResponse], error) {
	return c.createSCIMAPIKey.CallUnary(ctx, req)
}

// UpdateSCIMAPIKey calls openauth.backend.v1.BackendService.UpdateSCIMAPIKey.
func (c *backendServiceClient) UpdateSCIMAPIKey(ctx context.Context, req *connect.Request[v1.UpdateSCIMAPIKeyRequest]) (*connect.Response[v1.UpdateSCIMAPIKeyResponse], error) {
	return c.updateSCIMAPIKey.CallUnary(ctx, req)
}

// DeleteSCIMAPIKey calls openauth.backend.v1.BackendService.DeleteSCIMAPIKey.
func (c *backendServiceClient) DeleteSCIMAPIKey(ctx context.Context, req *connect.Request[v1.DeleteSCIMAPIKeyRequest]) (*connect.Response[v1.DeleteSCIMAPIKeyResponse], error) {
	return c.deleteSCIMAPIKey.CallUnary(ctx, req)
}

// RevokeSCIMAPIKey calls openauth.backend.v1.BackendService.RevokeSCIMAPIKey.
func (c *backendServiceClient) RevokeSCIMAPIKey(ctx context.Context, req *connect.Request[v1.RevokeSCIMAPIKeyRequest]) (*connect.Response[v1.RevokeSCIMAPIKeyResponse], error) {
	return c.revokeSCIMAPIKey.CallUnary(ctx, req)
}

// ListUsers calls openauth.backend.v1.BackendService.ListUsers.
func (c *backendServiceClient) ListUsers(ctx context.Context, req *connect.Request[v1.ListUsersRequest]) (*connect.Response[v1.ListUsersResponse], error) {
	return c.listUsers.CallUnary(ctx, req)
}

// GetUser calls openauth.backend.v1.BackendService.GetUser.
func (c *backendServiceClient) GetUser(ctx context.Context, req *connect.Request[v1.GetUserRequest]) (*connect.Response[v1.GetUserResponse], error) {
	return c.getUser.CallUnary(ctx, req)
}

// ListSessions calls openauth.backend.v1.BackendService.ListSessions.
func (c *backendServiceClient) ListSessions(ctx context.Context, req *connect.Request[v1.ListSessionsRequest]) (*connect.Response[v1.ListSessionsResponse], error) {
	return c.listSessions.CallUnary(ctx, req)
}

// GetSession calls openauth.backend.v1.BackendService.GetSession.
func (c *backendServiceClient) GetSession(ctx context.Context, req *connect.Request[v1.GetSessionRequest]) (*connect.Response[v1.GetSessionResponse], error) {
	return c.getSession.CallUnary(ctx, req)
}

// ListIntermediateSessions calls openauth.backend.v1.BackendService.ListIntermediateSessions.
func (c *backendServiceClient) ListIntermediateSessions(ctx context.Context, req *connect.Request[v1.ListIntermediateSessionsRequest]) (*connect.Response[v1.ListIntermediateSessionsResponse], error) {
	return c.listIntermediateSessions.CallUnary(ctx, req)
}

// GetIntermediateSession calls openauth.backend.v1.BackendService.GetIntermediateSession.
func (c *backendServiceClient) GetIntermediateSession(ctx context.Context, req *connect.Request[v1.GetIntermediateSessionRequest]) (*connect.Response[v1.GetIntermediateSessionResponse], error) {
	return c.getIntermediateSession.CallUnary(ctx, req)
}

// UpdateProject calls openauth.backend.v1.BackendService.UpdateProject.
func (c *backendServiceClient) UpdateProject(ctx context.Context, req *connect.Request[v1.UpdateProjectRequest]) (*connect.Response[v1.UpdateProjectResponse], error) {
	return c.updateProject.CallUnary(ctx, req)
}

// CreateProjectRedirectURI calls openauth.backend.v1.BackendService.CreateProjectRedirectURI.
func (c *backendServiceClient) CreateProjectRedirectURI(ctx context.Context, req *connect.Request[v1.CreateProjectRedirectURIRequest]) (*connect.Response[v1.CreateProjectRedirectURIResponse], error) {
	return c.createProjectRedirectURI.CallUnary(ctx, req)
}

// DeleteProjectRedirectURI calls openauth.backend.v1.BackendService.DeleteProjectRedirectURI.
func (c *backendServiceClient) DeleteProjectRedirectURI(ctx context.Context, req *connect.Request[v1.DeleteProjectRedirectURIRequest]) (*connect.Response[v1.DeleteProjectRedirectURIResponse], error) {
	return c.deleteProjectRedirectURI.CallUnary(ctx, req)
}

// GetProjectRedirectURI calls openauth.backend.v1.BackendService.GetProjectRedirectURI.
func (c *backendServiceClient) GetProjectRedirectURI(ctx context.Context, req *connect.Request[v1.GetProjectRedirectURIRequest]) (*connect.Response[v1.GetProjectRedirectURIResponse], error) {
	return c.getProjectRedirectURI.CallUnary(ctx, req)
}

// ListProjectRedirectURIs calls openauth.backend.v1.BackendService.ListProjectRedirectURIs.
func (c *backendServiceClient) ListProjectRedirectURIs(ctx context.Context, req *connect.Request[v1.ListProjectRedirectURIsRequest]) (*connect.Response[v1.ListProjectRedirectURIsResponse], error) {
	return c.listProjectRedirectURIs.CallUnary(ctx, req)
}

// UpdateProjectRedirectURI calls openauth.backend.v1.BackendService.UpdateProjectRedirectURI.
func (c *backendServiceClient) UpdateProjectRedirectURI(ctx context.Context, req *connect.Request[v1.UpdateProjectRedirectURIRequest]) (*connect.Response[v1.UpdateProjectRedirectURIResponse], error) {
	return c.updateProjectRedirectURI.CallUnary(ctx, req)
}

// ListProjectAPIKeys calls openauth.backend.v1.BackendService.ListProjectAPIKeys.
func (c *backendServiceClient) ListProjectAPIKeys(ctx context.Context, req *connect.Request[v1.ListProjectAPIKeysRequest]) (*connect.Response[v1.ListProjectAPIKeysResponse], error) {
	return c.listProjectAPIKeys.CallUnary(ctx, req)
}

// GetProjectAPIKey calls openauth.backend.v1.BackendService.GetProjectAPIKey.
func (c *backendServiceClient) GetProjectAPIKey(ctx context.Context, req *connect.Request[v1.GetProjectAPIKeyRequest]) (*connect.Response[v1.GetProjectAPIKeyResponse], error) {
	return c.getProjectAPIKey.CallUnary(ctx, req)
}

// CreateProjectAPIKey calls openauth.backend.v1.BackendService.CreateProjectAPIKey.
func (c *backendServiceClient) CreateProjectAPIKey(ctx context.Context, req *connect.Request[v1.CreateProjectAPIKeyRequest]) (*connect.Response[v1.CreateProjectAPIKeyResponse], error) {
	return c.createProjectAPIKey.CallUnary(ctx, req)
}

// UpdateProjectAPIKey calls openauth.backend.v1.BackendService.UpdateProjectAPIKey.
func (c *backendServiceClient) UpdateProjectAPIKey(ctx context.Context, req *connect.Request[v1.UpdateProjectAPIKeyRequest]) (*connect.Response[v1.UpdateProjectAPIKeyResponse], error) {
	return c.updateProjectAPIKey.CallUnary(ctx, req)
}

// DeleteProjectAPIKey calls openauth.backend.v1.BackendService.DeleteProjectAPIKey.
func (c *backendServiceClient) DeleteProjectAPIKey(ctx context.Context, req *connect.Request[v1.DeleteProjectAPIKeyRequest]) (*connect.Response[v1.DeleteProjectAPIKeyResponse], error) {
	return c.deleteProjectAPIKey.CallUnary(ctx, req)
}

// RevokeProjectAPIKey calls openauth.backend.v1.BackendService.RevokeProjectAPIKey.
func (c *backendServiceClient) RevokeProjectAPIKey(ctx context.Context, req *connect.Request[v1.RevokeProjectAPIKeyRequest]) (*connect.Response[v1.RevokeProjectAPIKeyResponse], error) {
	return c.revokeProjectAPIKey.CallUnary(ctx, req)
}

// BackendServiceHandler is an implementation of the openauth.backend.v1.BackendService service.
type BackendServiceHandler interface {
	GetProject(context.Context, *connect.Request[v1.GetProjectRequest]) (*connect.Response[v1.GetProjectResponse], error)
	ListOrganizations(context.Context, *connect.Request[v1.ListOrganizationsRequest]) (*connect.Response[v1.ListOrganizationsResponse], error)
	GetOrganization(context.Context, *connect.Request[v1.GetOrganizationRequest]) (*connect.Response[v1.GetOrganizationResponse], error)
	CreateOrganization(context.Context, *connect.Request[v1.CreateOrganizationRequest]) (*connect.Response[v1.CreateOrganizationResponse], error)
	UpdateOrganization(context.Context, *connect.Request[v1.UpdateOrganizationRequest]) (*connect.Response[v1.UpdateOrganizationResponse], error)
	DeleteOrganization(context.Context, *connect.Request[v1.DeleteOrganizationRequest]) (*connect.Response[v1.DeleteOrganizationResponse], error)
	ListSAMLConnections(context.Context, *connect.Request[v1.ListSAMLConnectionsRequest]) (*connect.Response[v1.ListSAMLConnectionsResponse], error)
	GetSAMLConnection(context.Context, *connect.Request[v1.GetSAMLConnectionRequest]) (*connect.Response[v1.GetSAMLConnectionResponse], error)
	CreateSAMLConnection(context.Context, *connect.Request[v1.CreateSAMLConnectionRequest]) (*connect.Response[v1.CreateSAMLConnectionResponse], error)
	UpdateSAMLConnection(context.Context, *connect.Request[v1.UpdateSAMLConnectionRequest]) (*connect.Response[v1.UpdateSAMLConnectionResponse], error)
	DeleteSAMLConnection(context.Context, *connect.Request[v1.DeleteSAMLConnectionRequest]) (*connect.Response[v1.DeleteSAMLConnectionResponse], error)
	ListSCIMAPIKeys(context.Context, *connect.Request[v1.ListSCIMAPIKeysRequest]) (*connect.Response[v1.ListSCIMAPIKeysResponse], error)
	GetSCIMAPIKey(context.Context, *connect.Request[v1.GetSCIMAPIKeyRequest]) (*connect.Response[v1.GetSCIMAPIKeyResponse], error)
	CreateSCIMAPIKey(context.Context, *connect.Request[v1.CreateSCIMAPIKeyRequest]) (*connect.Response[v1.CreateSCIMAPIKeyResponse], error)
	UpdateSCIMAPIKey(context.Context, *connect.Request[v1.UpdateSCIMAPIKeyRequest]) (*connect.Response[v1.UpdateSCIMAPIKeyResponse], error)
	DeleteSCIMAPIKey(context.Context, *connect.Request[v1.DeleteSCIMAPIKeyRequest]) (*connect.Response[v1.DeleteSCIMAPIKeyResponse], error)
	RevokeSCIMAPIKey(context.Context, *connect.Request[v1.RevokeSCIMAPIKeyRequest]) (*connect.Response[v1.RevokeSCIMAPIKeyResponse], error)
	ListUsers(context.Context, *connect.Request[v1.ListUsersRequest]) (*connect.Response[v1.ListUsersResponse], error)
	GetUser(context.Context, *connect.Request[v1.GetUserRequest]) (*connect.Response[v1.GetUserResponse], error)
	ListSessions(context.Context, *connect.Request[v1.ListSessionsRequest]) (*connect.Response[v1.ListSessionsResponse], error)
	GetSession(context.Context, *connect.Request[v1.GetSessionRequest]) (*connect.Response[v1.GetSessionResponse], error)
	ListIntermediateSessions(context.Context, *connect.Request[v1.ListIntermediateSessionsRequest]) (*connect.Response[v1.ListIntermediateSessionsResponse], error)
	GetIntermediateSession(context.Context, *connect.Request[v1.GetIntermediateSessionRequest]) (*connect.Response[v1.GetIntermediateSessionResponse], error)
	UpdateProject(context.Context, *connect.Request[v1.UpdateProjectRequest]) (*connect.Response[v1.UpdateProjectResponse], error)
	CreateProjectRedirectURI(context.Context, *connect.Request[v1.CreateProjectRedirectURIRequest]) (*connect.Response[v1.CreateProjectRedirectURIResponse], error)
	DeleteProjectRedirectURI(context.Context, *connect.Request[v1.DeleteProjectRedirectURIRequest]) (*connect.Response[v1.DeleteProjectRedirectURIResponse], error)
	GetProjectRedirectURI(context.Context, *connect.Request[v1.GetProjectRedirectURIRequest]) (*connect.Response[v1.GetProjectRedirectURIResponse], error)
	ListProjectRedirectURIs(context.Context, *connect.Request[v1.ListProjectRedirectURIsRequest]) (*connect.Response[v1.ListProjectRedirectURIsResponse], error)
	UpdateProjectRedirectURI(context.Context, *connect.Request[v1.UpdateProjectRedirectURIRequest]) (*connect.Response[v1.UpdateProjectRedirectURIResponse], error)
	ListProjectAPIKeys(context.Context, *connect.Request[v1.ListProjectAPIKeysRequest]) (*connect.Response[v1.ListProjectAPIKeysResponse], error)
	GetProjectAPIKey(context.Context, *connect.Request[v1.GetProjectAPIKeyRequest]) (*connect.Response[v1.GetProjectAPIKeyResponse], error)
	CreateProjectAPIKey(context.Context, *connect.Request[v1.CreateProjectAPIKeyRequest]) (*connect.Response[v1.CreateProjectAPIKeyResponse], error)
	UpdateProjectAPIKey(context.Context, *connect.Request[v1.UpdateProjectAPIKeyRequest]) (*connect.Response[v1.UpdateProjectAPIKeyResponse], error)
	DeleteProjectAPIKey(context.Context, *connect.Request[v1.DeleteProjectAPIKeyRequest]) (*connect.Response[v1.DeleteProjectAPIKeyResponse], error)
	RevokeProjectAPIKey(context.Context, *connect.Request[v1.RevokeProjectAPIKeyRequest]) (*connect.Response[v1.RevokeProjectAPIKeyResponse], error)
}

// NewBackendServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewBackendServiceHandler(svc BackendServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	backendServiceMethods := v1.File_openauth_backend_v1_backend_proto.Services().ByName("BackendService").Methods()
	backendServiceGetProjectHandler := connect.NewUnaryHandler(
		BackendServiceGetProjectProcedure,
		svc.GetProject,
		connect.WithSchema(backendServiceMethods.ByName("GetProject")),
		connect.WithHandlerOptions(opts...),
	)
	backendServiceListOrganizationsHandler := connect.NewUnaryHandler(
		BackendServiceListOrganizationsProcedure,
		svc.ListOrganizations,
		connect.WithSchema(backendServiceMethods.ByName("ListOrganizations")),
		connect.WithHandlerOptions(opts...),
	)
	backendServiceGetOrganizationHandler := connect.NewUnaryHandler(
		BackendServiceGetOrganizationProcedure,
		svc.GetOrganization,
		connect.WithSchema(backendServiceMethods.ByName("GetOrganization")),
		connect.WithHandlerOptions(opts...),
	)
	backendServiceCreateOrganizationHandler := connect.NewUnaryHandler(
		BackendServiceCreateOrganizationProcedure,
		svc.CreateOrganization,
		connect.WithSchema(backendServiceMethods.ByName("CreateOrganization")),
		connect.WithHandlerOptions(opts...),
	)
	backendServiceUpdateOrganizationHandler := connect.NewUnaryHandler(
		BackendServiceUpdateOrganizationProcedure,
		svc.UpdateOrganization,
		connect.WithSchema(backendServiceMethods.ByName("UpdateOrganization")),
		connect.WithHandlerOptions(opts...),
	)
	backendServiceDeleteOrganizationHandler := connect.NewUnaryHandler(
		BackendServiceDeleteOrganizationProcedure,
		svc.DeleteOrganization,
		connect.WithSchema(backendServiceMethods.ByName("DeleteOrganization")),
		connect.WithHandlerOptions(opts...),
	)
	backendServiceListSAMLConnectionsHandler := connect.NewUnaryHandler(
		BackendServiceListSAMLConnectionsProcedure,
		svc.ListSAMLConnections,
		connect.WithSchema(backendServiceMethods.ByName("ListSAMLConnections")),
		connect.WithHandlerOptions(opts...),
	)
	backendServiceGetSAMLConnectionHandler := connect.NewUnaryHandler(
		BackendServiceGetSAMLConnectionProcedure,
		svc.GetSAMLConnection,
		connect.WithSchema(backendServiceMethods.ByName("GetSAMLConnection")),
		connect.WithHandlerOptions(opts...),
	)
	backendServiceCreateSAMLConnectionHandler := connect.NewUnaryHandler(
		BackendServiceCreateSAMLConnectionProcedure,
		svc.CreateSAMLConnection,
		connect.WithSchema(backendServiceMethods.ByName("CreateSAMLConnection")),
		connect.WithHandlerOptions(opts...),
	)
	backendServiceUpdateSAMLConnectionHandler := connect.NewUnaryHandler(
		BackendServiceUpdateSAMLConnectionProcedure,
		svc.UpdateSAMLConnection,
		connect.WithSchema(backendServiceMethods.ByName("UpdateSAMLConnection")),
		connect.WithHandlerOptions(opts...),
	)
	backendServiceDeleteSAMLConnectionHandler := connect.NewUnaryHandler(
		BackendServiceDeleteSAMLConnectionProcedure,
		svc.DeleteSAMLConnection,
		connect.WithSchema(backendServiceMethods.ByName("DeleteSAMLConnection")),
		connect.WithHandlerOptions(opts...),
	)
	backendServiceListSCIMAPIKeysHandler := connect.NewUnaryHandler(
		BackendServiceListSCIMAPIKeysProcedure,
		svc.ListSCIMAPIKeys,
		connect.WithSchema(backendServiceMethods.ByName("ListSCIMAPIKeys")),
		connect.WithHandlerOptions(opts...),
	)
	backendServiceGetSCIMAPIKeyHandler := connect.NewUnaryHandler(
		BackendServiceGetSCIMAPIKeyProcedure,
		svc.GetSCIMAPIKey,
		connect.WithSchema(backendServiceMethods.ByName("GetSCIMAPIKey")),
		connect.WithHandlerOptions(opts...),
	)
	backendServiceCreateSCIMAPIKeyHandler := connect.NewUnaryHandler(
		BackendServiceCreateSCIMAPIKeyProcedure,
		svc.CreateSCIMAPIKey,
		connect.WithSchema(backendServiceMethods.ByName("CreateSCIMAPIKey")),
		connect.WithHandlerOptions(opts...),
	)
	backendServiceUpdateSCIMAPIKeyHandler := connect.NewUnaryHandler(
		BackendServiceUpdateSCIMAPIKeyProcedure,
		svc.UpdateSCIMAPIKey,
		connect.WithSchema(backendServiceMethods.ByName("UpdateSCIMAPIKey")),
		connect.WithHandlerOptions(opts...),
	)
	backendServiceDeleteSCIMAPIKeyHandler := connect.NewUnaryHandler(
		BackendServiceDeleteSCIMAPIKeyProcedure,
		svc.DeleteSCIMAPIKey,
		connect.WithSchema(backendServiceMethods.ByName("DeleteSCIMAPIKey")),
		connect.WithHandlerOptions(opts...),
	)
	backendServiceRevokeSCIMAPIKeyHandler := connect.NewUnaryHandler(
		BackendServiceRevokeSCIMAPIKeyProcedure,
		svc.RevokeSCIMAPIKey,
		connect.WithSchema(backendServiceMethods.ByName("RevokeSCIMAPIKey")),
		connect.WithHandlerOptions(opts...),
	)
	backendServiceListUsersHandler := connect.NewUnaryHandler(
		BackendServiceListUsersProcedure,
		svc.ListUsers,
		connect.WithSchema(backendServiceMethods.ByName("ListUsers")),
		connect.WithHandlerOptions(opts...),
	)
	backendServiceGetUserHandler := connect.NewUnaryHandler(
		BackendServiceGetUserProcedure,
		svc.GetUser,
		connect.WithSchema(backendServiceMethods.ByName("GetUser")),
		connect.WithHandlerOptions(opts...),
	)
	backendServiceListSessionsHandler := connect.NewUnaryHandler(
		BackendServiceListSessionsProcedure,
		svc.ListSessions,
		connect.WithSchema(backendServiceMethods.ByName("ListSessions")),
		connect.WithHandlerOptions(opts...),
	)
	backendServiceGetSessionHandler := connect.NewUnaryHandler(
		BackendServiceGetSessionProcedure,
		svc.GetSession,
		connect.WithSchema(backendServiceMethods.ByName("GetSession")),
		connect.WithHandlerOptions(opts...),
	)
	backendServiceListIntermediateSessionsHandler := connect.NewUnaryHandler(
		BackendServiceListIntermediateSessionsProcedure,
		svc.ListIntermediateSessions,
		connect.WithSchema(backendServiceMethods.ByName("ListIntermediateSessions")),
		connect.WithHandlerOptions(opts...),
	)
	backendServiceGetIntermediateSessionHandler := connect.NewUnaryHandler(
		BackendServiceGetIntermediateSessionProcedure,
		svc.GetIntermediateSession,
		connect.WithSchema(backendServiceMethods.ByName("GetIntermediateSession")),
		connect.WithHandlerOptions(opts...),
	)
	backendServiceUpdateProjectHandler := connect.NewUnaryHandler(
		BackendServiceUpdateProjectProcedure,
		svc.UpdateProject,
		connect.WithSchema(backendServiceMethods.ByName("UpdateProject")),
		connect.WithHandlerOptions(opts...),
	)
	backendServiceCreateProjectRedirectURIHandler := connect.NewUnaryHandler(
		BackendServiceCreateProjectRedirectURIProcedure,
		svc.CreateProjectRedirectURI,
		connect.WithSchema(backendServiceMethods.ByName("CreateProjectRedirectURI")),
		connect.WithHandlerOptions(opts...),
	)
	backendServiceDeleteProjectRedirectURIHandler := connect.NewUnaryHandler(
		BackendServiceDeleteProjectRedirectURIProcedure,
		svc.DeleteProjectRedirectURI,
		connect.WithSchema(backendServiceMethods.ByName("DeleteProjectRedirectURI")),
		connect.WithHandlerOptions(opts...),
	)
	backendServiceGetProjectRedirectURIHandler := connect.NewUnaryHandler(
		BackendServiceGetProjectRedirectURIProcedure,
		svc.GetProjectRedirectURI,
		connect.WithSchema(backendServiceMethods.ByName("GetProjectRedirectURI")),
		connect.WithHandlerOptions(opts...),
	)
	backendServiceListProjectRedirectURIsHandler := connect.NewUnaryHandler(
		BackendServiceListProjectRedirectURIsProcedure,
		svc.ListProjectRedirectURIs,
		connect.WithSchema(backendServiceMethods.ByName("ListProjectRedirectURIs")),
		connect.WithHandlerOptions(opts...),
	)
	backendServiceUpdateProjectRedirectURIHandler := connect.NewUnaryHandler(
		BackendServiceUpdateProjectRedirectURIProcedure,
		svc.UpdateProjectRedirectURI,
		connect.WithSchema(backendServiceMethods.ByName("UpdateProjectRedirectURI")),
		connect.WithHandlerOptions(opts...),
	)
	backendServiceListProjectAPIKeysHandler := connect.NewUnaryHandler(
		BackendServiceListProjectAPIKeysProcedure,
		svc.ListProjectAPIKeys,
		connect.WithSchema(backendServiceMethods.ByName("ListProjectAPIKeys")),
		connect.WithHandlerOptions(opts...),
	)
	backendServiceGetProjectAPIKeyHandler := connect.NewUnaryHandler(
		BackendServiceGetProjectAPIKeyProcedure,
		svc.GetProjectAPIKey,
		connect.WithSchema(backendServiceMethods.ByName("GetProjectAPIKey")),
		connect.WithHandlerOptions(opts...),
	)
	backendServiceCreateProjectAPIKeyHandler := connect.NewUnaryHandler(
		BackendServiceCreateProjectAPIKeyProcedure,
		svc.CreateProjectAPIKey,
		connect.WithSchema(backendServiceMethods.ByName("CreateProjectAPIKey")),
		connect.WithHandlerOptions(opts...),
	)
	backendServiceUpdateProjectAPIKeyHandler := connect.NewUnaryHandler(
		BackendServiceUpdateProjectAPIKeyProcedure,
		svc.UpdateProjectAPIKey,
		connect.WithSchema(backendServiceMethods.ByName("UpdateProjectAPIKey")),
		connect.WithHandlerOptions(opts...),
	)
	backendServiceDeleteProjectAPIKeyHandler := connect.NewUnaryHandler(
		BackendServiceDeleteProjectAPIKeyProcedure,
		svc.DeleteProjectAPIKey,
		connect.WithSchema(backendServiceMethods.ByName("DeleteProjectAPIKey")),
		connect.WithHandlerOptions(opts...),
	)
	backendServiceRevokeProjectAPIKeyHandler := connect.NewUnaryHandler(
		BackendServiceRevokeProjectAPIKeyProcedure,
		svc.RevokeProjectAPIKey,
		connect.WithSchema(backendServiceMethods.ByName("RevokeProjectAPIKey")),
		connect.WithHandlerOptions(opts...),
	)
	return "/openauth.backend.v1.BackendService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case BackendServiceGetProjectProcedure:
			backendServiceGetProjectHandler.ServeHTTP(w, r)
		case BackendServiceListOrganizationsProcedure:
			backendServiceListOrganizationsHandler.ServeHTTP(w, r)
		case BackendServiceGetOrganizationProcedure:
			backendServiceGetOrganizationHandler.ServeHTTP(w, r)
		case BackendServiceCreateOrganizationProcedure:
			backendServiceCreateOrganizationHandler.ServeHTTP(w, r)
		case BackendServiceUpdateOrganizationProcedure:
			backendServiceUpdateOrganizationHandler.ServeHTTP(w, r)
		case BackendServiceDeleteOrganizationProcedure:
			backendServiceDeleteOrganizationHandler.ServeHTTP(w, r)
		case BackendServiceListSAMLConnectionsProcedure:
			backendServiceListSAMLConnectionsHandler.ServeHTTP(w, r)
		case BackendServiceGetSAMLConnectionProcedure:
			backendServiceGetSAMLConnectionHandler.ServeHTTP(w, r)
		case BackendServiceCreateSAMLConnectionProcedure:
			backendServiceCreateSAMLConnectionHandler.ServeHTTP(w, r)
		case BackendServiceUpdateSAMLConnectionProcedure:
			backendServiceUpdateSAMLConnectionHandler.ServeHTTP(w, r)
		case BackendServiceDeleteSAMLConnectionProcedure:
			backendServiceDeleteSAMLConnectionHandler.ServeHTTP(w, r)
		case BackendServiceListSCIMAPIKeysProcedure:
			backendServiceListSCIMAPIKeysHandler.ServeHTTP(w, r)
		case BackendServiceGetSCIMAPIKeyProcedure:
			backendServiceGetSCIMAPIKeyHandler.ServeHTTP(w, r)
		case BackendServiceCreateSCIMAPIKeyProcedure:
			backendServiceCreateSCIMAPIKeyHandler.ServeHTTP(w, r)
		case BackendServiceUpdateSCIMAPIKeyProcedure:
			backendServiceUpdateSCIMAPIKeyHandler.ServeHTTP(w, r)
		case BackendServiceDeleteSCIMAPIKeyProcedure:
			backendServiceDeleteSCIMAPIKeyHandler.ServeHTTP(w, r)
		case BackendServiceRevokeSCIMAPIKeyProcedure:
			backendServiceRevokeSCIMAPIKeyHandler.ServeHTTP(w, r)
		case BackendServiceListUsersProcedure:
			backendServiceListUsersHandler.ServeHTTP(w, r)
		case BackendServiceGetUserProcedure:
			backendServiceGetUserHandler.ServeHTTP(w, r)
		case BackendServiceListSessionsProcedure:
			backendServiceListSessionsHandler.ServeHTTP(w, r)
		case BackendServiceGetSessionProcedure:
			backendServiceGetSessionHandler.ServeHTTP(w, r)
		case BackendServiceListIntermediateSessionsProcedure:
			backendServiceListIntermediateSessionsHandler.ServeHTTP(w, r)
		case BackendServiceGetIntermediateSessionProcedure:
			backendServiceGetIntermediateSessionHandler.ServeHTTP(w, r)
		case BackendServiceUpdateProjectProcedure:
			backendServiceUpdateProjectHandler.ServeHTTP(w, r)
		case BackendServiceCreateProjectRedirectURIProcedure:
			backendServiceCreateProjectRedirectURIHandler.ServeHTTP(w, r)
		case BackendServiceDeleteProjectRedirectURIProcedure:
			backendServiceDeleteProjectRedirectURIHandler.ServeHTTP(w, r)
		case BackendServiceGetProjectRedirectURIProcedure:
			backendServiceGetProjectRedirectURIHandler.ServeHTTP(w, r)
		case BackendServiceListProjectRedirectURIsProcedure:
			backendServiceListProjectRedirectURIsHandler.ServeHTTP(w, r)
		case BackendServiceUpdateProjectRedirectURIProcedure:
			backendServiceUpdateProjectRedirectURIHandler.ServeHTTP(w, r)
		case BackendServiceListProjectAPIKeysProcedure:
			backendServiceListProjectAPIKeysHandler.ServeHTTP(w, r)
		case BackendServiceGetProjectAPIKeyProcedure:
			backendServiceGetProjectAPIKeyHandler.ServeHTTP(w, r)
		case BackendServiceCreateProjectAPIKeyProcedure:
			backendServiceCreateProjectAPIKeyHandler.ServeHTTP(w, r)
		case BackendServiceUpdateProjectAPIKeyProcedure:
			backendServiceUpdateProjectAPIKeyHandler.ServeHTTP(w, r)
		case BackendServiceDeleteProjectAPIKeyProcedure:
			backendServiceDeleteProjectAPIKeyHandler.ServeHTTP(w, r)
		case BackendServiceRevokeProjectAPIKeyProcedure:
			backendServiceRevokeProjectAPIKeyHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedBackendServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedBackendServiceHandler struct{}

func (UnimplementedBackendServiceHandler) GetProject(context.Context, *connect.Request[v1.GetProjectRequest]) (*connect.Response[v1.GetProjectResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("openauth.backend.v1.BackendService.GetProject is not implemented"))
}

func (UnimplementedBackendServiceHandler) ListOrganizations(context.Context, *connect.Request[v1.ListOrganizationsRequest]) (*connect.Response[v1.ListOrganizationsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("openauth.backend.v1.BackendService.ListOrganizations is not implemented"))
}

func (UnimplementedBackendServiceHandler) GetOrganization(context.Context, *connect.Request[v1.GetOrganizationRequest]) (*connect.Response[v1.GetOrganizationResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("openauth.backend.v1.BackendService.GetOrganization is not implemented"))
}

func (UnimplementedBackendServiceHandler) CreateOrganization(context.Context, *connect.Request[v1.CreateOrganizationRequest]) (*connect.Response[v1.CreateOrganizationResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("openauth.backend.v1.BackendService.CreateOrganization is not implemented"))
}

func (UnimplementedBackendServiceHandler) UpdateOrganization(context.Context, *connect.Request[v1.UpdateOrganizationRequest]) (*connect.Response[v1.UpdateOrganizationResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("openauth.backend.v1.BackendService.UpdateOrganization is not implemented"))
}

func (UnimplementedBackendServiceHandler) DeleteOrganization(context.Context, *connect.Request[v1.DeleteOrganizationRequest]) (*connect.Response[v1.DeleteOrganizationResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("openauth.backend.v1.BackendService.DeleteOrganization is not implemented"))
}

func (UnimplementedBackendServiceHandler) ListSAMLConnections(context.Context, *connect.Request[v1.ListSAMLConnectionsRequest]) (*connect.Response[v1.ListSAMLConnectionsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("openauth.backend.v1.BackendService.ListSAMLConnections is not implemented"))
}

func (UnimplementedBackendServiceHandler) GetSAMLConnection(context.Context, *connect.Request[v1.GetSAMLConnectionRequest]) (*connect.Response[v1.GetSAMLConnectionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("openauth.backend.v1.BackendService.GetSAMLConnection is not implemented"))
}

func (UnimplementedBackendServiceHandler) CreateSAMLConnection(context.Context, *connect.Request[v1.CreateSAMLConnectionRequest]) (*connect.Response[v1.CreateSAMLConnectionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("openauth.backend.v1.BackendService.CreateSAMLConnection is not implemented"))
}

func (UnimplementedBackendServiceHandler) UpdateSAMLConnection(context.Context, *connect.Request[v1.UpdateSAMLConnectionRequest]) (*connect.Response[v1.UpdateSAMLConnectionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("openauth.backend.v1.BackendService.UpdateSAMLConnection is not implemented"))
}

func (UnimplementedBackendServiceHandler) DeleteSAMLConnection(context.Context, *connect.Request[v1.DeleteSAMLConnectionRequest]) (*connect.Response[v1.DeleteSAMLConnectionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("openauth.backend.v1.BackendService.DeleteSAMLConnection is not implemented"))
}

func (UnimplementedBackendServiceHandler) ListSCIMAPIKeys(context.Context, *connect.Request[v1.ListSCIMAPIKeysRequest]) (*connect.Response[v1.ListSCIMAPIKeysResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("openauth.backend.v1.BackendService.ListSCIMAPIKeys is not implemented"))
}

func (UnimplementedBackendServiceHandler) GetSCIMAPIKey(context.Context, *connect.Request[v1.GetSCIMAPIKeyRequest]) (*connect.Response[v1.GetSCIMAPIKeyResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("openauth.backend.v1.BackendService.GetSCIMAPIKey is not implemented"))
}

func (UnimplementedBackendServiceHandler) CreateSCIMAPIKey(context.Context, *connect.Request[v1.CreateSCIMAPIKeyRequest]) (*connect.Response[v1.CreateSCIMAPIKeyResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("openauth.backend.v1.BackendService.CreateSCIMAPIKey is not implemented"))
}

func (UnimplementedBackendServiceHandler) UpdateSCIMAPIKey(context.Context, *connect.Request[v1.UpdateSCIMAPIKeyRequest]) (*connect.Response[v1.UpdateSCIMAPIKeyResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("openauth.backend.v1.BackendService.UpdateSCIMAPIKey is not implemented"))
}

func (UnimplementedBackendServiceHandler) DeleteSCIMAPIKey(context.Context, *connect.Request[v1.DeleteSCIMAPIKeyRequest]) (*connect.Response[v1.DeleteSCIMAPIKeyResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("openauth.backend.v1.BackendService.DeleteSCIMAPIKey is not implemented"))
}

func (UnimplementedBackendServiceHandler) RevokeSCIMAPIKey(context.Context, *connect.Request[v1.RevokeSCIMAPIKeyRequest]) (*connect.Response[v1.RevokeSCIMAPIKeyResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("openauth.backend.v1.BackendService.RevokeSCIMAPIKey is not implemented"))
}

func (UnimplementedBackendServiceHandler) ListUsers(context.Context, *connect.Request[v1.ListUsersRequest]) (*connect.Response[v1.ListUsersResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("openauth.backend.v1.BackendService.ListUsers is not implemented"))
}

func (UnimplementedBackendServiceHandler) GetUser(context.Context, *connect.Request[v1.GetUserRequest]) (*connect.Response[v1.GetUserResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("openauth.backend.v1.BackendService.GetUser is not implemented"))
}

func (UnimplementedBackendServiceHandler) ListSessions(context.Context, *connect.Request[v1.ListSessionsRequest]) (*connect.Response[v1.ListSessionsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("openauth.backend.v1.BackendService.ListSessions is not implemented"))
}

func (UnimplementedBackendServiceHandler) GetSession(context.Context, *connect.Request[v1.GetSessionRequest]) (*connect.Response[v1.GetSessionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("openauth.backend.v1.BackendService.GetSession is not implemented"))
}

func (UnimplementedBackendServiceHandler) ListIntermediateSessions(context.Context, *connect.Request[v1.ListIntermediateSessionsRequest]) (*connect.Response[v1.ListIntermediateSessionsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("openauth.backend.v1.BackendService.ListIntermediateSessions is not implemented"))
}

func (UnimplementedBackendServiceHandler) GetIntermediateSession(context.Context, *connect.Request[v1.GetIntermediateSessionRequest]) (*connect.Response[v1.GetIntermediateSessionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("openauth.backend.v1.BackendService.GetIntermediateSession is not implemented"))
}

func (UnimplementedBackendServiceHandler) UpdateProject(context.Context, *connect.Request[v1.UpdateProjectRequest]) (*connect.Response[v1.UpdateProjectResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("openauth.backend.v1.BackendService.UpdateProject is not implemented"))
}

func (UnimplementedBackendServiceHandler) CreateProjectRedirectURI(context.Context, *connect.Request[v1.CreateProjectRedirectURIRequest]) (*connect.Response[v1.CreateProjectRedirectURIResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("openauth.backend.v1.BackendService.CreateProjectRedirectURI is not implemented"))
}

func (UnimplementedBackendServiceHandler) DeleteProjectRedirectURI(context.Context, *connect.Request[v1.DeleteProjectRedirectURIRequest]) (*connect.Response[v1.DeleteProjectRedirectURIResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("openauth.backend.v1.BackendService.DeleteProjectRedirectURI is not implemented"))
}

func (UnimplementedBackendServiceHandler) GetProjectRedirectURI(context.Context, *connect.Request[v1.GetProjectRedirectURIRequest]) (*connect.Response[v1.GetProjectRedirectURIResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("openauth.backend.v1.BackendService.GetProjectRedirectURI is not implemented"))
}

func (UnimplementedBackendServiceHandler) ListProjectRedirectURIs(context.Context, *connect.Request[v1.ListProjectRedirectURIsRequest]) (*connect.Response[v1.ListProjectRedirectURIsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("openauth.backend.v1.BackendService.ListProjectRedirectURIs is not implemented"))
}

func (UnimplementedBackendServiceHandler) UpdateProjectRedirectURI(context.Context, *connect.Request[v1.UpdateProjectRedirectURIRequest]) (*connect.Response[v1.UpdateProjectRedirectURIResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("openauth.backend.v1.BackendService.UpdateProjectRedirectURI is not implemented"))
}

func (UnimplementedBackendServiceHandler) ListProjectAPIKeys(context.Context, *connect.Request[v1.ListProjectAPIKeysRequest]) (*connect.Response[v1.ListProjectAPIKeysResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("openauth.backend.v1.BackendService.ListProjectAPIKeys is not implemented"))
}

func (UnimplementedBackendServiceHandler) GetProjectAPIKey(context.Context, *connect.Request[v1.GetProjectAPIKeyRequest]) (*connect.Response[v1.GetProjectAPIKeyResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("openauth.backend.v1.BackendService.GetProjectAPIKey is not implemented"))
}

func (UnimplementedBackendServiceHandler) CreateProjectAPIKey(context.Context, *connect.Request[v1.CreateProjectAPIKeyRequest]) (*connect.Response[v1.CreateProjectAPIKeyResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("openauth.backend.v1.BackendService.CreateProjectAPIKey is not implemented"))
}

func (UnimplementedBackendServiceHandler) UpdateProjectAPIKey(context.Context, *connect.Request[v1.UpdateProjectAPIKeyRequest]) (*connect.Response[v1.UpdateProjectAPIKeyResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("openauth.backend.v1.BackendService.UpdateProjectAPIKey is not implemented"))
}

func (UnimplementedBackendServiceHandler) DeleteProjectAPIKey(context.Context, *connect.Request[v1.DeleteProjectAPIKeyRequest]) (*connect.Response[v1.DeleteProjectAPIKeyResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("openauth.backend.v1.BackendService.DeleteProjectAPIKey is not implemented"))
}

func (UnimplementedBackendServiceHandler) RevokeProjectAPIKey(context.Context, *connect.Request[v1.RevokeProjectAPIKeyRequest]) (*connect.Response[v1.RevokeProjectAPIKeyResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("openauth.backend.v1.BackendService.RevokeProjectAPIKey is not implemented"))
}
