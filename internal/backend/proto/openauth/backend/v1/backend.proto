syntax = "proto3";

package openauth.backend.v1;

import "google/api/annotations.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/field_mask.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/struct.proto";

service BackendService {
  // Creates an organization.
  rpc CreateOrganization(CreateOrganizationRequest) returns (Organization) {
    option (google.api.http) = {
      post: "/backend/v1/organizations",
      body: "*"
    };
  }

  // Gets an organization.
  rpc GetOrganization(GetOrganizationRequest) returns (Organization) {
    option (google.api.http) = {
      get: "/backend/v1/organizations/{id}"
    };
  }

  // Gets a list of organizations.
  rpc ListOrganizations(ListOrganizationsRequest) returns (ListOrganizationsResponse) {
    option (google.api.http) = {
      get: "/backend/v1/organizations"
    };
  }

  // Updates an organization.
  rpc UpdateOrganization(UpdateOrganizationRequest) returns (Organization) {
    option (google.api.http) = {
      patch: "/backend/v1/organizations/{id}",
      body: "organization"
    };
  }

  // Creates a project.
  rpc CreateProject(CreateProjectRequest) returns (Project) {
    option (google.api.http) = {
      post: "/backend/v1/projects",
      body: "project"
    };
  }

  // Gets a project.
  rpc GetProject(GetProjectRequest) returns (Project) {
    option (google.api.http) = {
      get: "/backend/v1/projects/{id}"
    };
  }

  // Gets a list of projects.
  rpc ListProjects(ListProjectsRequest) returns (ListProjectsResponse) {
    option (google.api.http) = {
      get: "/backend/v1/projects"
    };
  }

  // Updates a project.
  rpc UpdateProject(UpdateProjectRequest) returns (Project) {
    option (google.api.http) = {
      patch: "/backend/v1/projects/{id}",
      body: "project"
    };
  }

  // Creates a user.
  rpc CreateUser(CreateUserRequest) returns (User) {
    option (google.api.http) = {
      post: "/backend/v1/users",
      body: "user"
    };
  }

  // Gets a user.
  rpc GetUser(GetUserRequest) returns (User) {
    option (google.api.http) = {
      get: "/backend/v1/users/{id}"
    };
  }

  // Gets a list of users.
  rpc ListUsers(ListUsersRequest) returns (ListUsersResponse) {
    option (google.api.http) = {
      get: "/backend/v1/users"
    };
  }

  // Updates a user.
  rpc UpdateUser(UpdateUserRequest) returns (User) {
    option (google.api.http) = {
      patch: "/backend/v1/users/{id}",
      body: "user"
    };
  }

  // Updates a user's password.
  rpc UpdateUserPassword(UpdateUserPasswordRequest) returns (User) {
    option (google.api.http) = {
      patch: "/backend/v1/users/{id}/password",
      body: "*"
    };
  }

  rpc CreateProjectAPIKey(CreateProjectAPIKeyRequest) returns (CreateProjectAPIKeyResponse);
}

message CreateOrganizationRequest {
  // The organization to create.
  Organization organization = 1;
}

message CreateProjectRequest {
  // The project to create.
  Project project = 1;
  // The display name of the associated organization to create.
  string display_name = 2;
}

message CreateUserRequest {
  // The user to create.
  User user = 1;
}

message GetOrganizationRequest {
  // The ID of the organization to get.
  string id = 1;
}

message GetProjectRequest {
  // The ID of the project to get.
  string id = 1;
}

message GetUserRequest {
  // The ID of the user to get.
  string id = 1;
}

message ListOrganizationsRequest {
  // The project ID to use for filtering.
  string project_id = 1;
  // The page token to use for pagination.
  string page_token = 2;
}

message ListOrganizationsResponse {
  // The organizations retrieved by the ListOrganizations request.
  repeated Organization organizations = 1;
  // The next page token to use for pagination.
  string next_page_token = 2;
}

message ListProjectsRequest {
  // The page token to use for pagination.
  string page_token = 1;
}

message ListProjectsResponse {
  // The projects retrieved by the ListProjects request.
  repeated Project projects = 1;
  // The next page token to use for pagination.
  string next_page_token = 2;
}

message ListUsersRequest {
  // The organization ID to use for filtering.
  string organization_id = 1;
  // The page token to use for pagination.
  string page_token = 2;
}

message ListUsersResponse {
  // The users retrieved by the ListUsers request.
  repeated User users = 1;
  // The next page token to use for pagination.
  string next_page_token = 2;
}

message UpdateOrganizationRequest {
  // The ID of the organization to update.
  string id = 1;
  // The organization updates to apply.
  Organization organization = 2;
}

message UpdateProjectRequest {
  // The ID of the project to update.
  string id = 1;
  // The project updates to apply.
  Project project = 2;
}

message UpdateUserPasswordRequest {
  // The ID of the user to update.
  string id = 1;
  // The new password for the user.
  string password = 2;
}

message UpdateUserRequest {
  // The ID of the user to update.
  string id = 1;
  // The user updates to apply.
  User user = 2;
}

message UpdateUserResponse {
  // The user updated by the UpdateUser request.
  User user = 1;
}

message ProjectAPIKey {
  string id = 1;
  string project_id = 2;
  google.protobuf.Timestamp create_time = 3;
  bool revoked = 4;
  string secret_token = 5;
}

message CreateProjectAPIKeyRequest {
  ProjectAPIKey project_api_key = 1;
}

message CreateProjectAPIKeyResponse {
  ProjectAPIKey project_api_key = 1;
}


message Organization {
  // Unique identifier for this organization.
  string id = 1;
  // The project this organization belongs to.
  string project_id = 2;
  // An optional human-friendly name for this organization.
  string display_name = 3;
  // Override setting for whether login with password is enabled.
  bool override_log_in_with_password_enabled = 4;
  // Override setting for whether login with Google is enabled.
  bool override_log_in_with_google_enabled = 5;
  // Override setting for whether login with Microsoft is enabled.
  bool override_log_in_with_microsoft_enabled = 6;
  // Google hosted domain.
  string google_hosted_domain = 7;
  // The tenant ID for Microsoft auth.
  string microsoft_tenant_id = 8;
}

message Project {
  // Unique identifier for this project.
  string id = 1;
  // The organization this project belongs to.
  string organization_id = 2;
  // Top-level setting for whether login with password is enabled (inherited by organizations by default).
  bool log_in_with_password_enabled = 3;
  // Top-level setting for whether login with Google is enabled (inherited by organizations by default).
  bool log_in_with_google_enabled = 4;
  // Top-level setting for whether login with Microsoft is enabled (inherited by organizations by default).
  bool log_in_with_microsoft_enabled = 5;
  // The oAuth Client ID to be used for Google Auth.
  string google_oauth_client_id = 6;
  // The oAuth Client secret to be used for Google Auth.
  string google_oauth_client_secret = 7;
  // The oAuth Client ID to be used for Microsoft Auth.
  string microsoft_oauth_client_id = 8;
  // The oAuth Client secret to be used for Microsoft Auth.
  string microsoft_oauth_client_secret = 9;
}

message SessionSigningKey {
  string id = 1;
  string project_id = 2;
  google.protobuf.Struct public_key_jwk = 3;
}

message User {
  // Unique identifier for this user.
  string id = 1;
  // The organization this user belongs to.
  string organization_id = 2;
  // The user's email (verified).
  string email = 3;
  // The hash of the user's password.
  string password_bcrypt = 4;
  // The user's Google User ID.
  string google_user_id = 5;
  // The user's Microsoft User ID.
  string microsoft_user_id = 6;
}

message Session {
  string id = 1;
  string user_id = 2;
  google.protobuf.Timestamp create_time = 3;
  google.protobuf.Timestamp expire_time = 4;
  bool revoked = 5;

  // TODO(ucarion): add session metadata like auth factors, etc here
}
