// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: queries-backend.sql

package queries

import (
	"context"

	"github.com/google/uuid"
)

const createOrganization = `-- name: CreateOrganization :one
INSERT INTO organizations (id, project_id, display_name, google_hosted_domain, microsoft_tenant_id, override_log_in_methods, override_log_in_with_google_enabled, override_log_in_with_microsoft_enabled, override_log_in_with_password_enabled, saml_enabled, scim_enabled)
    VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11)
RETURNING
    id, project_id, display_name, override_log_in_with_password_enabled, override_log_in_with_google_enabled, override_log_in_with_microsoft_enabled, google_hosted_domain, microsoft_tenant_id, override_log_in_methods, saml_enabled, scim_enabled, create_time, update_time
`

type CreateOrganizationParams struct {
	ID                                uuid.UUID
	ProjectID                         uuid.UUID
	DisplayName                       string
	GoogleHostedDomain                *string
	MicrosoftTenantID                 *string
	OverrideLogInMethods              bool
	OverrideLogInWithGoogleEnabled    *bool
	OverrideLogInWithMicrosoftEnabled *bool
	OverrideLogInWithPasswordEnabled  *bool
	SamlEnabled                       bool
	ScimEnabled                       bool
}

func (q *Queries) CreateOrganization(ctx context.Context, arg CreateOrganizationParams) (Organization, error) {
	row := q.db.QueryRow(ctx, createOrganization,
		arg.ID,
		arg.ProjectID,
		arg.DisplayName,
		arg.GoogleHostedDomain,
		arg.MicrosoftTenantID,
		arg.OverrideLogInMethods,
		arg.OverrideLogInWithGoogleEnabled,
		arg.OverrideLogInWithMicrosoftEnabled,
		arg.OverrideLogInWithPasswordEnabled,
		arg.SamlEnabled,
		arg.ScimEnabled,
	)
	var i Organization
	err := row.Scan(
		&i.ID,
		&i.ProjectID,
		&i.DisplayName,
		&i.OverrideLogInWithPasswordEnabled,
		&i.OverrideLogInWithGoogleEnabled,
		&i.OverrideLogInWithMicrosoftEnabled,
		&i.GoogleHostedDomain,
		&i.MicrosoftTenantID,
		&i.OverrideLogInMethods,
		&i.SamlEnabled,
		&i.ScimEnabled,
		&i.CreateTime,
		&i.UpdateTime,
	)
	return i, err
}

const createProjectAPIKey = `-- name: CreateProjectAPIKey :one
INSERT INTO project_api_keys (id, project_id, display_name, secret_token_sha256)
    VALUES ($1, $2, $3, $4)
RETURNING
    id, project_id, secret_token_sha256, display_name, create_time, update_time
`

type CreateProjectAPIKeyParams struct {
	ID                uuid.UUID
	ProjectID         uuid.UUID
	DisplayName       string
	SecretTokenSha256 []byte
}

func (q *Queries) CreateProjectAPIKey(ctx context.Context, arg CreateProjectAPIKeyParams) (ProjectApiKey, error) {
	row := q.db.QueryRow(ctx, createProjectAPIKey,
		arg.ID,
		arg.ProjectID,
		arg.DisplayName,
		arg.SecretTokenSha256,
	)
	var i ProjectApiKey
	err := row.Scan(
		&i.ID,
		&i.ProjectID,
		&i.SecretTokenSha256,
		&i.DisplayName,
		&i.CreateTime,
		&i.UpdateTime,
	)
	return i, err
}

const createProjectRedirectURI = `-- name: CreateProjectRedirectURI :one
INSERT INTO project_redirect_uris (id, project_id, uri, is_primary)
    VALUES ($1, $2, $3, COALESCE((
            SELECT
                FALSE
            FROM project_redirect_uris
            WHERE
                project_id = $2 LIMIT 1), TRUE))
RETURNING
    id, project_id, uri, is_primary, created_at, updated_at
`

type CreateProjectRedirectURIParams struct {
	ID        uuid.UUID
	ProjectID uuid.UUID
	Uri       string
}

func (q *Queries) CreateProjectRedirectURI(ctx context.Context, arg CreateProjectRedirectURIParams) (ProjectRedirectUri, error) {
	row := q.db.QueryRow(ctx, createProjectRedirectURI, arg.ID, arg.ProjectID, arg.Uri)
	var i ProjectRedirectUri
	err := row.Scan(
		&i.ID,
		&i.ProjectID,
		&i.Uri,
		&i.IsPrimary,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const createSAMLConnection = `-- name: CreateSAMLConnection :one
INSERT INTO saml_connections (id, organization_id, is_primary, idp_redirect_url, idp_x509_certificate, idp_entity_id)
    VALUES ($1, $2, $3, $4, $5, $6)
RETURNING
    id, organization_id, create_time, is_primary, idp_redirect_url, idp_x509_certificate, idp_entity_id, update_time
`

type CreateSAMLConnectionParams struct {
	ID                 uuid.UUID
	OrganizationID     uuid.UUID
	IsPrimary          bool
	IdpRedirectUrl     *string
	IdpX509Certificate []byte
	IdpEntityID        *string
}

func (q *Queries) CreateSAMLConnection(ctx context.Context, arg CreateSAMLConnectionParams) (SamlConnection, error) {
	row := q.db.QueryRow(ctx, createSAMLConnection,
		arg.ID,
		arg.OrganizationID,
		arg.IsPrimary,
		arg.IdpRedirectUrl,
		arg.IdpX509Certificate,
		arg.IdpEntityID,
	)
	var i SamlConnection
	err := row.Scan(
		&i.ID,
		&i.OrganizationID,
		&i.CreateTime,
		&i.IsPrimary,
		&i.IdpRedirectUrl,
		&i.IdpX509Certificate,
		&i.IdpEntityID,
		&i.UpdateTime,
	)
	return i, err
}

const createSCIMAPIKey = `-- name: CreateSCIMAPIKey :one
INSERT INTO scim_api_keys (id, organization_id, display_name, secret_token_sha256)
    VALUES ($1, $2, $3, $4)
RETURNING
    id, organization_id, secret_token_sha256, display_name, create_time, update_time
`

type CreateSCIMAPIKeyParams struct {
	ID                uuid.UUID
	OrganizationID    uuid.UUID
	DisplayName       string
	SecretTokenSha256 []byte
}

func (q *Queries) CreateSCIMAPIKey(ctx context.Context, arg CreateSCIMAPIKeyParams) (ScimApiKey, error) {
	row := q.db.QueryRow(ctx, createSCIMAPIKey,
		arg.ID,
		arg.OrganizationID,
		arg.DisplayName,
		arg.SecretTokenSha256,
	)
	var i ScimApiKey
	err := row.Scan(
		&i.ID,
		&i.OrganizationID,
		&i.SecretTokenSha256,
		&i.DisplayName,
		&i.CreateTime,
		&i.UpdateTime,
	)
	return i, err
}

const deleteOrganization = `-- name: DeleteOrganization :exec
DELETE FROM organizations
WHERE id = $1
`

func (q *Queries) DeleteOrganization(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteOrganization, id)
	return err
}

const deleteProjectAPIKey = `-- name: DeleteProjectAPIKey :exec
DELETE FROM project_api_keys
WHERE id = $1
`

func (q *Queries) DeleteProjectAPIKey(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteProjectAPIKey, id)
	return err
}

const deleteProjectRedirectURI = `-- name: DeleteProjectRedirectURI :exec
DELETE FROM project_redirect_uris
WHERE id = $1
    AND project_id = $2
`

type DeleteProjectRedirectURIParams struct {
	ID        uuid.UUID
	ProjectID uuid.UUID
}

func (q *Queries) DeleteProjectRedirectURI(ctx context.Context, arg DeleteProjectRedirectURIParams) error {
	_, err := q.db.Exec(ctx, deleteProjectRedirectURI, arg.ID, arg.ProjectID)
	return err
}

const deleteSAMLConnection = `-- name: DeleteSAMLConnection :exec
DELETE FROM saml_connections
WHERE id = $1
`

func (q *Queries) DeleteSAMLConnection(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteSAMLConnection, id)
	return err
}

const deleteSCIMAPIKey = `-- name: DeleteSCIMAPIKey :exec
DELETE FROM scim_api_keys
WHERE id = $1
`

func (q *Queries) DeleteSCIMAPIKey(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteSCIMAPIKey, id)
	return err
}

const getIntermediateSession = `-- name: GetIntermediateSession :one
SELECT
    intermediate_sessions.id, intermediate_sessions.project_id, intermediate_sessions.create_time, intermediate_sessions.expire_time, intermediate_sessions.token_sha256, intermediate_sessions.revoked, intermediate_sessions.email, intermediate_sessions.google_oauth_state_sha256, intermediate_sessions.microsoft_oauth_state_sha256, intermediate_sessions.google_hosted_domain, intermediate_sessions.google_user_id, intermediate_sessions.microsoft_tenant_id, intermediate_sessions.microsoft_user_id, intermediate_sessions.password_verified, intermediate_sessions.organization_id
FROM
    intermediate_sessions
WHERE
    id = $1
    AND project_id = $2
`

type GetIntermediateSessionParams struct {
	ID        uuid.UUID
	ProjectID uuid.UUID
}

func (q *Queries) GetIntermediateSession(ctx context.Context, arg GetIntermediateSessionParams) (IntermediateSession, error) {
	row := q.db.QueryRow(ctx, getIntermediateSession, arg.ID, arg.ProjectID)
	var i IntermediateSession
	err := row.Scan(
		&i.ID,
		&i.ProjectID,
		&i.CreateTime,
		&i.ExpireTime,
		&i.TokenSha256,
		&i.Revoked,
		&i.Email,
		&i.GoogleOauthStateSha256,
		&i.MicrosoftOauthStateSha256,
		&i.GoogleHostedDomain,
		&i.GoogleUserID,
		&i.MicrosoftTenantID,
		&i.MicrosoftUserID,
		&i.PasswordVerified,
		&i.OrganizationID,
	)
	return i, err
}

const getOrganizationByProjectIDAndID = `-- name: GetOrganizationByProjectIDAndID :one
SELECT
    id, project_id, display_name, override_log_in_with_password_enabled, override_log_in_with_google_enabled, override_log_in_with_microsoft_enabled, google_hosted_domain, microsoft_tenant_id, override_log_in_methods, saml_enabled, scim_enabled, create_time, update_time
FROM
    organizations
WHERE
    id = $1
    AND project_id = $2
`

type GetOrganizationByProjectIDAndIDParams struct {
	ID        uuid.UUID
	ProjectID uuid.UUID
}

func (q *Queries) GetOrganizationByProjectIDAndID(ctx context.Context, arg GetOrganizationByProjectIDAndIDParams) (Organization, error) {
	row := q.db.QueryRow(ctx, getOrganizationByProjectIDAndID, arg.ID, arg.ProjectID)
	var i Organization
	err := row.Scan(
		&i.ID,
		&i.ProjectID,
		&i.DisplayName,
		&i.OverrideLogInWithPasswordEnabled,
		&i.OverrideLogInWithGoogleEnabled,
		&i.OverrideLogInWithMicrosoftEnabled,
		&i.GoogleHostedDomain,
		&i.MicrosoftTenantID,
		&i.OverrideLogInMethods,
		&i.SamlEnabled,
		&i.ScimEnabled,
		&i.CreateTime,
		&i.UpdateTime,
	)
	return i, err
}

const getProjectAPIKey = `-- name: GetProjectAPIKey :one
SELECT
    id, project_id, secret_token_sha256, display_name, create_time, update_time
FROM
    project_api_keys
WHERE
    id = $1
    AND project_id = $2
`

type GetProjectAPIKeyParams struct {
	ID        uuid.UUID
	ProjectID uuid.UUID
}

func (q *Queries) GetProjectAPIKey(ctx context.Context, arg GetProjectAPIKeyParams) (ProjectApiKey, error) {
	row := q.db.QueryRow(ctx, getProjectAPIKey, arg.ID, arg.ProjectID)
	var i ProjectApiKey
	err := row.Scan(
		&i.ID,
		&i.ProjectID,
		&i.SecretTokenSha256,
		&i.DisplayName,
		&i.CreateTime,
		&i.UpdateTime,
	)
	return i, err
}

const getProjectAPIKeyBySecretTokenSHA256 = `-- name: GetProjectAPIKeyBySecretTokenSHA256 :one
SELECT
    id, project_id, secret_token_sha256, display_name, create_time, update_time
FROM
    project_api_keys
WHERE
    secret_token_sha256 = $1
`

func (q *Queries) GetProjectAPIKeyBySecretTokenSHA256(ctx context.Context, secretTokenSha256 []byte) (ProjectApiKey, error) {
	row := q.db.QueryRow(ctx, getProjectAPIKeyBySecretTokenSHA256, secretTokenSha256)
	var i ProjectApiKey
	err := row.Scan(
		&i.ID,
		&i.ProjectID,
		&i.SecretTokenSha256,
		&i.DisplayName,
		&i.CreateTime,
		&i.UpdateTime,
	)
	return i, err
}

const getProjectByID = `-- name: GetProjectByID :one
SELECT
    id, organization_id, log_in_with_password_enabled, log_in_with_google_enabled, log_in_with_microsoft_enabled, google_oauth_client_id, microsoft_oauth_client_id, google_oauth_client_secret_ciphertext, microsoft_oauth_client_secret_ciphertext, display_name, create_time, update_time, custom_auth_domain, auth_domain
FROM
    projects
WHERE
    id = $1
`

func (q *Queries) GetProjectByID(ctx context.Context, id uuid.UUID) (Project, error) {
	row := q.db.QueryRow(ctx, getProjectByID, id)
	var i Project
	err := row.Scan(
		&i.ID,
		&i.OrganizationID,
		&i.LogInWithPasswordEnabled,
		&i.LogInWithGoogleEnabled,
		&i.LogInWithMicrosoftEnabled,
		&i.GoogleOauthClientID,
		&i.MicrosoftOauthClientID,
		&i.GoogleOauthClientSecretCiphertext,
		&i.MicrosoftOauthClientSecretCiphertext,
		&i.DisplayName,
		&i.CreateTime,
		&i.UpdateTime,
		&i.CustomAuthDomain,
		&i.AuthDomain,
	)
	return i, err
}

const getProjectRedirectURI = `-- name: GetProjectRedirectURI :one
SELECT
    id, project_id, uri, is_primary, created_at, updated_at
FROM
    project_redirect_uris
WHERE
    id = $1
    AND project_id = $2
`

type GetProjectRedirectURIParams struct {
	ID        uuid.UUID
	ProjectID uuid.UUID
}

func (q *Queries) GetProjectRedirectURI(ctx context.Context, arg GetProjectRedirectURIParams) (ProjectRedirectUri, error) {
	row := q.db.QueryRow(ctx, getProjectRedirectURI, arg.ID, arg.ProjectID)
	var i ProjectRedirectUri
	err := row.Scan(
		&i.ID,
		&i.ProjectID,
		&i.Uri,
		&i.IsPrimary,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getProjectUISettings = `-- name: GetProjectUISettings :one
SELECT
    id, project_id, primary_color, detect_dark_mode_enabled, dark_mode_primary_color, create_time, update_time
FROM
    project_ui_settings
WHERE
    project_id = $1
`

func (q *Queries) GetProjectUISettings(ctx context.Context, projectID uuid.UUID) (ProjectUiSetting, error) {
	row := q.db.QueryRow(ctx, getProjectUISettings, projectID)
	var i ProjectUiSetting
	err := row.Scan(
		&i.ID,
		&i.ProjectID,
		&i.PrimaryColor,
		&i.DetectDarkModeEnabled,
		&i.DarkModePrimaryColor,
		&i.CreateTime,
		&i.UpdateTime,
	)
	return i, err
}

const getSAMLConnection = `-- name: GetSAMLConnection :one
SELECT
    saml_connections.id, saml_connections.organization_id, saml_connections.create_time, saml_connections.is_primary, saml_connections.idp_redirect_url, saml_connections.idp_x509_certificate, saml_connections.idp_entity_id, saml_connections.update_time
FROM
    saml_connections
    JOIN organizations ON saml_connections.organization_id = organizations.id
WHERE
    saml_connections.id = $1
    AND organizations.project_id = $2
`

type GetSAMLConnectionParams struct {
	ID        uuid.UUID
	ProjectID uuid.UUID
}

func (q *Queries) GetSAMLConnection(ctx context.Context, arg GetSAMLConnectionParams) (SamlConnection, error) {
	row := q.db.QueryRow(ctx, getSAMLConnection, arg.ID, arg.ProjectID)
	var i SamlConnection
	err := row.Scan(
		&i.ID,
		&i.OrganizationID,
		&i.CreateTime,
		&i.IsPrimary,
		&i.IdpRedirectUrl,
		&i.IdpX509Certificate,
		&i.IdpEntityID,
		&i.UpdateTime,
	)
	return i, err
}

const getSCIMAPIKey = `-- name: GetSCIMAPIKey :one
SELECT
    scim_api_keys.id, scim_api_keys.organization_id, scim_api_keys.secret_token_sha256, scim_api_keys.display_name, scim_api_keys.create_time, scim_api_keys.update_time
FROM
    scim_api_keys
    JOIN organizations ON scim_api_keys.organization_id = organizations.id
WHERE
    scim_api_keys.id = $1
    AND organizations.project_id = $2
`

type GetSCIMAPIKeyParams struct {
	ID        uuid.UUID
	ProjectID uuid.UUID
}

func (q *Queries) GetSCIMAPIKey(ctx context.Context, arg GetSCIMAPIKeyParams) (ScimApiKey, error) {
	row := q.db.QueryRow(ctx, getSCIMAPIKey, arg.ID, arg.ProjectID)
	var i ScimApiKey
	err := row.Scan(
		&i.ID,
		&i.OrganizationID,
		&i.SecretTokenSha256,
		&i.DisplayName,
		&i.CreateTime,
		&i.UpdateTime,
	)
	return i, err
}

const getSession = `-- name: GetSession :one
SELECT
    sessions.id, sessions.user_id, sessions.create_time, sessions.expire_time, sessions.revoked, sessions.refresh_token_sha256
FROM
    sessions
    JOIN users ON sessions.user_id = users.id
    JOIN organizations ON users.organization_id = organizations.id
WHERE
    sessions.id = $1
    AND organizations.project_id = $2
`

type GetSessionParams struct {
	ID        uuid.UUID
	ProjectID uuid.UUID
}

func (q *Queries) GetSession(ctx context.Context, arg GetSessionParams) (Session, error) {
	row := q.db.QueryRow(ctx, getSession, arg.ID, arg.ProjectID)
	var i Session
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.CreateTime,
		&i.ExpireTime,
		&i.Revoked,
		&i.RefreshTokenSha256,
	)
	return i, err
}

const getSessionSigningKeysByProjectID = `-- name: GetSessionSigningKeysByProjectID :many
SELECT
    id, project_id, public_key, private_key_cipher_text, create_time, expire_time
FROM
    session_signing_keys
WHERE
    project_id = $1
`

func (q *Queries) GetSessionSigningKeysByProjectID(ctx context.Context, projectID uuid.UUID) ([]SessionSigningKey, error) {
	rows, err := q.db.Query(ctx, getSessionSigningKeysByProjectID, projectID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SessionSigningKey
	for rows.Next() {
		var i SessionSigningKey
		if err := rows.Scan(
			&i.ID,
			&i.ProjectID,
			&i.PublicKey,
			&i.PrivateKeyCipherText,
			&i.CreateTime,
			&i.ExpireTime,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUser = `-- name: GetUser :one
SELECT
    users.id, users.organization_id, users.password_bcrypt, users.google_user_id, users.microsoft_user_id, users.email, users.create_time, users.update_time, users.deactivate_time, users.is_owner
FROM
    users
    JOIN organizations ON users.organization_id = organizations.id
WHERE
    users.id = $1
    AND organizations.project_id = $2
`

type GetUserParams struct {
	ID        uuid.UUID
	ProjectID uuid.UUID
}

func (q *Queries) GetUser(ctx context.Context, arg GetUserParams) (User, error) {
	row := q.db.QueryRow(ctx, getUser, arg.ID, arg.ProjectID)
	var i User
	err := row.Scan(
		&i.ID,
		&i.OrganizationID,
		&i.PasswordBcrypt,
		&i.GoogleUserID,
		&i.MicrosoftUserID,
		&i.Email,
		&i.CreateTime,
		&i.UpdateTime,
		&i.DeactivateTime,
		&i.IsOwner,
	)
	return i, err
}

const listIntermediateSessions = `-- name: ListIntermediateSessions :many
SELECT
    id, project_id, create_time, expire_time, token_sha256, revoked, email, google_oauth_state_sha256, microsoft_oauth_state_sha256, google_hosted_domain, google_user_id, microsoft_tenant_id, microsoft_user_id, password_verified, organization_id
FROM
    intermediate_sessions
WHERE
    project_id = $1
    AND id >= $2
ORDER BY
    id
LIMIT $3
`

type ListIntermediateSessionsParams struct {
	ProjectID uuid.UUID
	ID        uuid.UUID
	Limit     int32
}

func (q *Queries) ListIntermediateSessions(ctx context.Context, arg ListIntermediateSessionsParams) ([]IntermediateSession, error) {
	rows, err := q.db.Query(ctx, listIntermediateSessions, arg.ProjectID, arg.ID, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []IntermediateSession
	for rows.Next() {
		var i IntermediateSession
		if err := rows.Scan(
			&i.ID,
			&i.ProjectID,
			&i.CreateTime,
			&i.ExpireTime,
			&i.TokenSha256,
			&i.Revoked,
			&i.Email,
			&i.GoogleOauthStateSha256,
			&i.MicrosoftOauthStateSha256,
			&i.GoogleHostedDomain,
			&i.GoogleUserID,
			&i.MicrosoftTenantID,
			&i.MicrosoftUserID,
			&i.PasswordVerified,
			&i.OrganizationID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listOrganizationsByProjectId = `-- name: ListOrganizationsByProjectId :many
SELECT
    id, project_id, display_name, override_log_in_with_password_enabled, override_log_in_with_google_enabled, override_log_in_with_microsoft_enabled, google_hosted_domain, microsoft_tenant_id, override_log_in_methods, saml_enabled, scim_enabled, create_time, update_time
FROM
    organizations
WHERE
    project_id = $1
ORDER BY
    id
LIMIT $2
`

type ListOrganizationsByProjectIdParams struct {
	ProjectID uuid.UUID
	Limit     int32
}

func (q *Queries) ListOrganizationsByProjectId(ctx context.Context, arg ListOrganizationsByProjectIdParams) ([]Organization, error) {
	rows, err := q.db.Query(ctx, listOrganizationsByProjectId, arg.ProjectID, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Organization
	for rows.Next() {
		var i Organization
		if err := rows.Scan(
			&i.ID,
			&i.ProjectID,
			&i.DisplayName,
			&i.OverrideLogInWithPasswordEnabled,
			&i.OverrideLogInWithGoogleEnabled,
			&i.OverrideLogInWithMicrosoftEnabled,
			&i.GoogleHostedDomain,
			&i.MicrosoftTenantID,
			&i.OverrideLogInMethods,
			&i.SamlEnabled,
			&i.ScimEnabled,
			&i.CreateTime,
			&i.UpdateTime,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listProjectAPIKeys = `-- name: ListProjectAPIKeys :many
SELECT
    id, project_id, secret_token_sha256, display_name, create_time, update_time
FROM
    project_api_keys
WHERE
    project_id = $1
    AND id >= $2
ORDER BY
    id
LIMIT $3
`

type ListProjectAPIKeysParams struct {
	ProjectID uuid.UUID
	ID        uuid.UUID
	Limit     int32
}

func (q *Queries) ListProjectAPIKeys(ctx context.Context, arg ListProjectAPIKeysParams) ([]ProjectApiKey, error) {
	rows, err := q.db.Query(ctx, listProjectAPIKeys, arg.ProjectID, arg.ID, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ProjectApiKey
	for rows.Next() {
		var i ProjectApiKey
		if err := rows.Scan(
			&i.ID,
			&i.ProjectID,
			&i.SecretTokenSha256,
			&i.DisplayName,
			&i.CreateTime,
			&i.UpdateTime,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listProjectRedirectURIs = `-- name: ListProjectRedirectURIs :many
SELECT
    id, project_id, uri, is_primary, created_at, updated_at
FROM
    project_redirect_uris
WHERE
    project_id = $1
`

func (q *Queries) ListProjectRedirectURIs(ctx context.Context, projectID uuid.UUID) ([]ProjectRedirectUri, error) {
	rows, err := q.db.Query(ctx, listProjectRedirectURIs, projectID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ProjectRedirectUri
	for rows.Next() {
		var i ProjectRedirectUri
		if err := rows.Scan(
			&i.ID,
			&i.ProjectID,
			&i.Uri,
			&i.IsPrimary,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listProjects = `-- name: ListProjects :many
SELECT
    id, organization_id, log_in_with_password_enabled, log_in_with_google_enabled, log_in_with_microsoft_enabled, google_oauth_client_id, microsoft_oauth_client_id, google_oauth_client_secret_ciphertext, microsoft_oauth_client_secret_ciphertext, display_name, create_time, update_time, custom_auth_domain, auth_domain
FROM
    projects
ORDER BY
    id
LIMIT $1
`

func (q *Queries) ListProjects(ctx context.Context, limit int32) ([]Project, error) {
	rows, err := q.db.Query(ctx, listProjects, limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Project
	for rows.Next() {
		var i Project
		if err := rows.Scan(
			&i.ID,
			&i.OrganizationID,
			&i.LogInWithPasswordEnabled,
			&i.LogInWithGoogleEnabled,
			&i.LogInWithMicrosoftEnabled,
			&i.GoogleOauthClientID,
			&i.MicrosoftOauthClientID,
			&i.GoogleOauthClientSecretCiphertext,
			&i.MicrosoftOauthClientSecretCiphertext,
			&i.DisplayName,
			&i.CreateTime,
			&i.UpdateTime,
			&i.CustomAuthDomain,
			&i.AuthDomain,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listSAMLConnections = `-- name: ListSAMLConnections :many
SELECT
    id, organization_id, create_time, is_primary, idp_redirect_url, idp_x509_certificate, idp_entity_id, update_time
FROM
    saml_connections
WHERE
    organization_id = $1
    AND id >= $2
ORDER BY
    id
LIMIT $3
`

type ListSAMLConnectionsParams struct {
	OrganizationID uuid.UUID
	ID             uuid.UUID
	Limit          int32
}

func (q *Queries) ListSAMLConnections(ctx context.Context, arg ListSAMLConnectionsParams) ([]SamlConnection, error) {
	rows, err := q.db.Query(ctx, listSAMLConnections, arg.OrganizationID, arg.ID, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SamlConnection
	for rows.Next() {
		var i SamlConnection
		if err := rows.Scan(
			&i.ID,
			&i.OrganizationID,
			&i.CreateTime,
			&i.IsPrimary,
			&i.IdpRedirectUrl,
			&i.IdpX509Certificate,
			&i.IdpEntityID,
			&i.UpdateTime,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listSCIMAPIKeys = `-- name: ListSCIMAPIKeys :many
SELECT
    id, organization_id, secret_token_sha256, display_name, create_time, update_time
FROM
    scim_api_keys
WHERE
    organization_id = $1
    AND id >= $2
ORDER BY
    id
LIMIT $3
`

type ListSCIMAPIKeysParams struct {
	OrganizationID uuid.UUID
	ID             uuid.UUID
	Limit          int32
}

func (q *Queries) ListSCIMAPIKeys(ctx context.Context, arg ListSCIMAPIKeysParams) ([]ScimApiKey, error) {
	rows, err := q.db.Query(ctx, listSCIMAPIKeys, arg.OrganizationID, arg.ID, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ScimApiKey
	for rows.Next() {
		var i ScimApiKey
		if err := rows.Scan(
			&i.ID,
			&i.OrganizationID,
			&i.SecretTokenSha256,
			&i.DisplayName,
			&i.CreateTime,
			&i.UpdateTime,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listSessions = `-- name: ListSessions :many
SELECT
    id, user_id, create_time, expire_time, revoked, refresh_token_sha256
FROM
    sessions
WHERE
    user_id = $1
    AND id >= $2
ORDER BY
    id
LIMIT $3
`

type ListSessionsParams struct {
	UserID uuid.UUID
	ID     uuid.UUID
	Limit  int32
}

func (q *Queries) ListSessions(ctx context.Context, arg ListSessionsParams) ([]Session, error) {
	rows, err := q.db.Query(ctx, listSessions, arg.UserID, arg.ID, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Session
	for rows.Next() {
		var i Session
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.CreateTime,
			&i.ExpireTime,
			&i.Revoked,
			&i.RefreshTokenSha256,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listUsers = `-- name: ListUsers :many
SELECT
    id, organization_id, password_bcrypt, google_user_id, microsoft_user_id, email, create_time, update_time, deactivate_time, is_owner
FROM
    users
WHERE
    organization_id = $1
    AND id >= $2
ORDER BY
    id
LIMIT $3
`

type ListUsersParams struct {
	OrganizationID uuid.UUID
	ID             uuid.UUID
	Limit          int32
}

func (q *Queries) ListUsers(ctx context.Context, arg ListUsersParams) ([]User, error) {
	rows, err := q.db.Query(ctx, listUsers, arg.OrganizationID, arg.ID, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.OrganizationID,
			&i.PasswordBcrypt,
			&i.GoogleUserID,
			&i.MicrosoftUserID,
			&i.Email,
			&i.CreateTime,
			&i.UpdateTime,
			&i.DeactivateTime,
			&i.IsOwner,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const revokeProjectAPIKey = `-- name: RevokeProjectAPIKey :one
UPDATE
    project_api_keys
SET
    update_time = now(),
    secret_token_sha256 = NULL
WHERE
    id = $1
RETURNING
    id, project_id, secret_token_sha256, display_name, create_time, update_time
`

func (q *Queries) RevokeProjectAPIKey(ctx context.Context, id uuid.UUID) (ProjectApiKey, error) {
	row := q.db.QueryRow(ctx, revokeProjectAPIKey, id)
	var i ProjectApiKey
	err := row.Scan(
		&i.ID,
		&i.ProjectID,
		&i.SecretTokenSha256,
		&i.DisplayName,
		&i.CreateTime,
		&i.UpdateTime,
	)
	return i, err
}

const revokeSCIMAPIKey = `-- name: RevokeSCIMAPIKey :one
UPDATE
    scim_api_keys
SET
    update_time = now(),
    secret_token_sha256 = NULL
WHERE
    id = $1
RETURNING
    id, organization_id, secret_token_sha256, display_name, create_time, update_time
`

func (q *Queries) RevokeSCIMAPIKey(ctx context.Context, id uuid.UUID) (ScimApiKey, error) {
	row := q.db.QueryRow(ctx, revokeSCIMAPIKey, id)
	var i ScimApiKey
	err := row.Scan(
		&i.ID,
		&i.OrganizationID,
		&i.SecretTokenSha256,
		&i.DisplayName,
		&i.CreateTime,
		&i.UpdateTime,
	)
	return i, err
}

const updateOrganization = `-- name: UpdateOrganization :one
UPDATE
    organizations
SET
    update_time = now(),
    display_name = $2,
    google_hosted_domain = $3,
    microsoft_tenant_id = $4,
    override_log_in_methods = $5,
    override_log_in_with_password_enabled = $6,
    override_log_in_with_google_enabled = $7,
    override_log_in_with_microsoft_enabled = $8,
    saml_enabled = $9,
    scim_enabled = $10
WHERE
    id = $1
RETURNING
    id, project_id, display_name, override_log_in_with_password_enabled, override_log_in_with_google_enabled, override_log_in_with_microsoft_enabled, google_hosted_domain, microsoft_tenant_id, override_log_in_methods, saml_enabled, scim_enabled, create_time, update_time
`

type UpdateOrganizationParams struct {
	ID                                uuid.UUID
	DisplayName                       string
	GoogleHostedDomain                *string
	MicrosoftTenantID                 *string
	OverrideLogInMethods              bool
	OverrideLogInWithPasswordEnabled  *bool
	OverrideLogInWithGoogleEnabled    *bool
	OverrideLogInWithMicrosoftEnabled *bool
	SamlEnabled                       bool
	ScimEnabled                       bool
}

func (q *Queries) UpdateOrganization(ctx context.Context, arg UpdateOrganizationParams) (Organization, error) {
	row := q.db.QueryRow(ctx, updateOrganization,
		arg.ID,
		arg.DisplayName,
		arg.GoogleHostedDomain,
		arg.MicrosoftTenantID,
		arg.OverrideLogInMethods,
		arg.OverrideLogInWithPasswordEnabled,
		arg.OverrideLogInWithGoogleEnabled,
		arg.OverrideLogInWithMicrosoftEnabled,
		arg.SamlEnabled,
		arg.ScimEnabled,
	)
	var i Organization
	err := row.Scan(
		&i.ID,
		&i.ProjectID,
		&i.DisplayName,
		&i.OverrideLogInWithPasswordEnabled,
		&i.OverrideLogInWithGoogleEnabled,
		&i.OverrideLogInWithMicrosoftEnabled,
		&i.GoogleHostedDomain,
		&i.MicrosoftTenantID,
		&i.OverrideLogInMethods,
		&i.SamlEnabled,
		&i.ScimEnabled,
		&i.CreateTime,
		&i.UpdateTime,
	)
	return i, err
}

const updatePrimarySAMLConnection = `-- name: UpdatePrimarySAMLConnection :exec
UPDATE
    saml_connections
SET
    is_primary = (id = $1)
WHERE
    organization_id = $2
`

type UpdatePrimarySAMLConnectionParams struct {
	ID             uuid.UUID
	OrganizationID uuid.UUID
}

func (q *Queries) UpdatePrimarySAMLConnection(ctx context.Context, arg UpdatePrimarySAMLConnectionParams) error {
	_, err := q.db.Exec(ctx, updatePrimarySAMLConnection, arg.ID, arg.OrganizationID)
	return err
}

const updateProject = `-- name: UpdateProject :one
UPDATE
    projects
SET
    update_time = now(),
    display_name = $2,
    log_in_with_password_enabled = $3,
    log_in_with_google_enabled = $4,
    log_in_with_microsoft_enabled = $5,
    google_oauth_client_id = $6,
    google_oauth_client_secret_ciphertext = $7,
    microsoft_oauth_client_id = $8,
    microsoft_oauth_client_secret_ciphertext = $9,
    custom_auth_domain = $10,
    auth_domain = $11
WHERE
    id = $1
RETURNING
    id, organization_id, log_in_with_password_enabled, log_in_with_google_enabled, log_in_with_microsoft_enabled, google_oauth_client_id, microsoft_oauth_client_id, google_oauth_client_secret_ciphertext, microsoft_oauth_client_secret_ciphertext, display_name, create_time, update_time, custom_auth_domain, auth_domain
`

type UpdateProjectParams struct {
	ID                                   uuid.UUID
	DisplayName                          string
	LogInWithPasswordEnabled             bool
	LogInWithGoogleEnabled               bool
	LogInWithMicrosoftEnabled            bool
	GoogleOauthClientID                  *string
	GoogleOauthClientSecretCiphertext    []byte
	MicrosoftOauthClientID               *string
	MicrosoftOauthClientSecretCiphertext []byte
	CustomAuthDomain                     *string
	AuthDomain                           *string
}

func (q *Queries) UpdateProject(ctx context.Context, arg UpdateProjectParams) (Project, error) {
	row := q.db.QueryRow(ctx, updateProject,
		arg.ID,
		arg.DisplayName,
		arg.LogInWithPasswordEnabled,
		arg.LogInWithGoogleEnabled,
		arg.LogInWithMicrosoftEnabled,
		arg.GoogleOauthClientID,
		arg.GoogleOauthClientSecretCiphertext,
		arg.MicrosoftOauthClientID,
		arg.MicrosoftOauthClientSecretCiphertext,
		arg.CustomAuthDomain,
		arg.AuthDomain,
	)
	var i Project
	err := row.Scan(
		&i.ID,
		&i.OrganizationID,
		&i.LogInWithPasswordEnabled,
		&i.LogInWithGoogleEnabled,
		&i.LogInWithMicrosoftEnabled,
		&i.GoogleOauthClientID,
		&i.MicrosoftOauthClientID,
		&i.GoogleOauthClientSecretCiphertext,
		&i.MicrosoftOauthClientSecretCiphertext,
		&i.DisplayName,
		&i.CreateTime,
		&i.UpdateTime,
		&i.CustomAuthDomain,
		&i.AuthDomain,
	)
	return i, err
}

const updateProjectAPIKey = `-- name: UpdateProjectAPIKey :one
UPDATE
    project_api_keys
SET
    update_time = now(),
    display_name = $1
WHERE
    id = $2
RETURNING
    id, project_id, secret_token_sha256, display_name, create_time, update_time
`

type UpdateProjectAPIKeyParams struct {
	DisplayName string
	ID          uuid.UUID
}

func (q *Queries) UpdateProjectAPIKey(ctx context.Context, arg UpdateProjectAPIKeyParams) (ProjectApiKey, error) {
	row := q.db.QueryRow(ctx, updateProjectAPIKey, arg.DisplayName, arg.ID)
	var i ProjectApiKey
	err := row.Scan(
		&i.ID,
		&i.ProjectID,
		&i.SecretTokenSha256,
		&i.DisplayName,
		&i.CreateTime,
		&i.UpdateTime,
	)
	return i, err
}

const updateProjectOrganizationID = `-- name: UpdateProjectOrganizationID :one
UPDATE
    projects
SET
    organization_id = $2
WHERE
    id = $1
RETURNING
    id, organization_id, log_in_with_password_enabled, log_in_with_google_enabled, log_in_with_microsoft_enabled, google_oauth_client_id, microsoft_oauth_client_id, google_oauth_client_secret_ciphertext, microsoft_oauth_client_secret_ciphertext, display_name, create_time, update_time, custom_auth_domain, auth_domain
`

type UpdateProjectOrganizationIDParams struct {
	ID             uuid.UUID
	OrganizationID *uuid.UUID
}

func (q *Queries) UpdateProjectOrganizationID(ctx context.Context, arg UpdateProjectOrganizationIDParams) (Project, error) {
	row := q.db.QueryRow(ctx, updateProjectOrganizationID, arg.ID, arg.OrganizationID)
	var i Project
	err := row.Scan(
		&i.ID,
		&i.OrganizationID,
		&i.LogInWithPasswordEnabled,
		&i.LogInWithGoogleEnabled,
		&i.LogInWithMicrosoftEnabled,
		&i.GoogleOauthClientID,
		&i.MicrosoftOauthClientID,
		&i.GoogleOauthClientSecretCiphertext,
		&i.MicrosoftOauthClientSecretCiphertext,
		&i.DisplayName,
		&i.CreateTime,
		&i.UpdateTime,
		&i.CustomAuthDomain,
		&i.AuthDomain,
	)
	return i, err
}

const updateProjectRedirectURI = `-- name: UpdateProjectRedirectURI :one
UPDATE
    project_redirect_uris
SET
    uri = $2,
    is_primary = $3
WHERE
    id = $1
    AND project_id = $4
RETURNING
    id, project_id, uri, is_primary, created_at, updated_at
`

type UpdateProjectRedirectURIParams struct {
	ID        uuid.UUID
	Uri       string
	IsPrimary bool
	ProjectID uuid.UUID
}

func (q *Queries) UpdateProjectRedirectURI(ctx context.Context, arg UpdateProjectRedirectURIParams) (ProjectRedirectUri, error) {
	row := q.db.QueryRow(ctx, updateProjectRedirectURI,
		arg.ID,
		arg.Uri,
		arg.IsPrimary,
		arg.ProjectID,
	)
	var i ProjectRedirectUri
	err := row.Scan(
		&i.ID,
		&i.ProjectID,
		&i.Uri,
		&i.IsPrimary,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateProjectUISettings = `-- name: UpdateProjectUISettings :one
UPDATE
    project_ui_settings
SET
    update_time = now(),
    primary_color = $3,
    detect_dark_mode_enabled = $4,
    dark_mode_primary_color = $5
WHERE
    id = $1
    AND project_id = $2
RETURNING
    id, project_id, primary_color, detect_dark_mode_enabled, dark_mode_primary_color, create_time, update_time
`

type UpdateProjectUISettingsParams struct {
	ID                    uuid.UUID
	ProjectID             uuid.UUID
	PrimaryColor          *string
	DetectDarkModeEnabled bool
	DarkModePrimaryColor  *string
}

func (q *Queries) UpdateProjectUISettings(ctx context.Context, arg UpdateProjectUISettingsParams) (ProjectUiSetting, error) {
	row := q.db.QueryRow(ctx, updateProjectUISettings,
		arg.ID,
		arg.ProjectID,
		arg.PrimaryColor,
		arg.DetectDarkModeEnabled,
		arg.DarkModePrimaryColor,
	)
	var i ProjectUiSetting
	err := row.Scan(
		&i.ID,
		&i.ProjectID,
		&i.PrimaryColor,
		&i.DetectDarkModeEnabled,
		&i.DarkModePrimaryColor,
		&i.CreateTime,
		&i.UpdateTime,
	)
	return i, err
}

const updateSAMLConnection = `-- name: UpdateSAMLConnection :one
UPDATE
    saml_connections
SET
    update_time = now(),
    is_primary = $1,
    idp_redirect_url = $2,
    idp_x509_certificate = $3,
    idp_entity_id = $4
WHERE
    id = $5
RETURNING
    id, organization_id, create_time, is_primary, idp_redirect_url, idp_x509_certificate, idp_entity_id, update_time
`

type UpdateSAMLConnectionParams struct {
	IsPrimary          bool
	IdpRedirectUrl     *string
	IdpX509Certificate []byte
	IdpEntityID        *string
	ID                 uuid.UUID
}

func (q *Queries) UpdateSAMLConnection(ctx context.Context, arg UpdateSAMLConnectionParams) (SamlConnection, error) {
	row := q.db.QueryRow(ctx, updateSAMLConnection,
		arg.IsPrimary,
		arg.IdpRedirectUrl,
		arg.IdpX509Certificate,
		arg.IdpEntityID,
		arg.ID,
	)
	var i SamlConnection
	err := row.Scan(
		&i.ID,
		&i.OrganizationID,
		&i.CreateTime,
		&i.IsPrimary,
		&i.IdpRedirectUrl,
		&i.IdpX509Certificate,
		&i.IdpEntityID,
		&i.UpdateTime,
	)
	return i, err
}

const updateSCIMAPIKey = `-- name: UpdateSCIMAPIKey :one
UPDATE
    scim_api_keys
SET
    update_time = now(),
    display_name = $1
WHERE
    id = $2
RETURNING
    id, organization_id, secret_token_sha256, display_name, create_time, update_time
`

type UpdateSCIMAPIKeyParams struct {
	DisplayName string
	ID          uuid.UUID
}

func (q *Queries) UpdateSCIMAPIKey(ctx context.Context, arg UpdateSCIMAPIKeyParams) (ScimApiKey, error) {
	row := q.db.QueryRow(ctx, updateSCIMAPIKey, arg.DisplayName, arg.ID)
	var i ScimApiKey
	err := row.Scan(
		&i.ID,
		&i.OrganizationID,
		&i.SecretTokenSha256,
		&i.DisplayName,
		&i.CreateTime,
		&i.UpdateTime,
	)
	return i, err
}

const updateUser = `-- name: UpdateUser :one
UPDATE
    users
SET
    update_time = now(),
    organization_id = $2,
    email = $3,
    password_bcrypt = $4,
    google_user_id = $5,
    microsoft_user_id = $6
WHERE
    id = $1
RETURNING
    id, organization_id, password_bcrypt, google_user_id, microsoft_user_id, email, create_time, update_time, deactivate_time, is_owner
`

type UpdateUserParams struct {
	ID              uuid.UUID
	OrganizationID  uuid.UUID
	Email           string
	PasswordBcrypt  *string
	GoogleUserID    *string
	MicrosoftUserID *string
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, updateUser,
		arg.ID,
		arg.OrganizationID,
		arg.Email,
		arg.PasswordBcrypt,
		arg.GoogleUserID,
		arg.MicrosoftUserID,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.OrganizationID,
		&i.PasswordBcrypt,
		&i.GoogleUserID,
		&i.MicrosoftUserID,
		&i.Email,
		&i.CreateTime,
		&i.UpdateTime,
		&i.DeactivateTime,
		&i.IsOwner,
	)
	return i, err
}

const updateUserPassword = `-- name: UpdateUserPassword :one
UPDATE
    users
SET
    update_time = now(),
    password_bcrypt = $2
WHERE
    id = $1
RETURNING
    id, organization_id, password_bcrypt, google_user_id, microsoft_user_id, email, create_time, update_time, deactivate_time, is_owner
`

type UpdateUserPasswordParams struct {
	ID             uuid.UUID
	PasswordBcrypt *string
}

func (q *Queries) UpdateUserPassword(ctx context.Context, arg UpdateUserPasswordParams) (User, error) {
	row := q.db.QueryRow(ctx, updateUserPassword, arg.ID, arg.PasswordBcrypt)
	var i User
	err := row.Scan(
		&i.ID,
		&i.OrganizationID,
		&i.PasswordBcrypt,
		&i.GoogleUserID,
		&i.MicrosoftUserID,
		&i.Email,
		&i.CreateTime,
		&i.UpdateTime,
		&i.DeactivateTime,
		&i.IsOwner,
	)
	return i, err
}
