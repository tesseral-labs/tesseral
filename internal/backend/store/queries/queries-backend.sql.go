// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: queries-backend.sql

package queries

import (
	"context"
	"time"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const batchGetRoleActionsByRoleID = `-- name: BatchGetRoleActionsByRoleID :many
SELECT
    id, role_id, action_id
FROM
    role_actions
WHERE
    role_id = ANY ($1::uuid[])
`

func (q *Queries) BatchGetRoleActionsByRoleID(ctx context.Context, dollar_1 []uuid.UUID) ([]RoleAction, error) {
	rows, err := q.db.Query(ctx, batchGetRoleActionsByRoleID, dollar_1)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []RoleAction
	for rows.Next() {
		var i RoleAction
		if err := rows.Scan(&i.ID, &i.RoleID, &i.ActionID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const createAPIKey = `-- name: CreateAPIKey :one
INSERT INTO api_keys (id, organization_id, display_name, secret_token_sha256, secret_token_suffix, expire_time)
    VALUES ($1, $2, $3, $4, $5, $6)
RETURNING
    id, organization_id, display_name, secret_token_sha256, secret_token_suffix, expire_time, create_time, update_time
`

type CreateAPIKeyParams struct {
	ID                uuid.UUID
	OrganizationID    uuid.UUID
	DisplayName       string
	SecretTokenSha256 []byte
	SecretTokenSuffix *string
	ExpireTime        *time.Time
}

func (q *Queries) CreateAPIKey(ctx context.Context, arg CreateAPIKeyParams) (ApiKey, error) {
	row := q.db.QueryRow(ctx, createAPIKey,
		arg.ID,
		arg.OrganizationID,
		arg.DisplayName,
		arg.SecretTokenSha256,
		arg.SecretTokenSuffix,
		arg.ExpireTime,
	)
	var i ApiKey
	err := row.Scan(
		&i.ID,
		&i.OrganizationID,
		&i.DisplayName,
		&i.SecretTokenSha256,
		&i.SecretTokenSuffix,
		&i.ExpireTime,
		&i.CreateTime,
		&i.UpdateTime,
	)
	return i, err
}

const createAPIKeyRoleAssignment = `-- name: CreateAPIKeyRoleAssignment :one
INSERT INTO api_key_role_assignments (id, api_key_id, role_id)
    VALUES ($1, $2, $3)
RETURNING
    id, api_key_id, role_id, create_time
`

type CreateAPIKeyRoleAssignmentParams struct {
	ID       uuid.UUID
	ApiKeyID uuid.UUID
	RoleID   uuid.UUID
}

func (q *Queries) CreateAPIKeyRoleAssignment(ctx context.Context, arg CreateAPIKeyRoleAssignmentParams) (ApiKeyRoleAssignment, error) {
	row := q.db.QueryRow(ctx, createAPIKeyRoleAssignment, arg.ID, arg.ApiKeyID, arg.RoleID)
	var i ApiKeyRoleAssignment
	err := row.Scan(
		&i.ID,
		&i.ApiKeyID,
		&i.RoleID,
		&i.CreateTime,
	)
	return i, err
}

const createAuditLogEvent = `-- name: CreateAuditLogEvent :one
INSERT INTO audit_log_events (id, project_id, organization_id, user_id, session_id, api_key_id, dogfood_user_id, dogfood_session_id, backend_api_key_id, intermediate_session_id, resource_type, resource_id, event_name, event_time, event_details)
    VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, coalesce($15, '{}'::jsonb))
RETURNING
    id, project_id, organization_id, user_id, session_id, api_key_id, dogfood_user_id, dogfood_session_id, backend_api_key_id, intermediate_session_id, resource_type, resource_id, event_name, event_time, event_details
`

type CreateAuditLogEventParams struct {
	ID                    uuid.UUID
	ProjectID             uuid.UUID
	OrganizationID        *uuid.UUID
	UserID                *uuid.UUID
	SessionID             *uuid.UUID
	ApiKeyID              *uuid.UUID
	DogfoodUserID         *uuid.UUID
	DogfoodSessionID      *uuid.UUID
	BackendApiKeyID       *uuid.UUID
	IntermediateSessionID *uuid.UUID
	ResourceType          *AuditLogEventResourceType
	ResourceID            *uuid.UUID
	EventName             string
	EventTime             *time.Time
	EventDetails          interface{}
}

func (q *Queries) CreateAuditLogEvent(ctx context.Context, arg CreateAuditLogEventParams) (AuditLogEvent, error) {
	row := q.db.QueryRow(ctx, createAuditLogEvent,
		arg.ID,
		arg.ProjectID,
		arg.OrganizationID,
		arg.UserID,
		arg.SessionID,
		arg.ApiKeyID,
		arg.DogfoodUserID,
		arg.DogfoodSessionID,
		arg.BackendApiKeyID,
		arg.IntermediateSessionID,
		arg.ResourceType,
		arg.ResourceID,
		arg.EventName,
		arg.EventTime,
		arg.EventDetails,
	)
	var i AuditLogEvent
	err := row.Scan(
		&i.ID,
		&i.ProjectID,
		&i.OrganizationID,
		&i.UserID,
		&i.SessionID,
		&i.ApiKeyID,
		&i.DogfoodUserID,
		&i.DogfoodSessionID,
		&i.BackendApiKeyID,
		&i.IntermediateSessionID,
		&i.ResourceType,
		&i.ResourceID,
		&i.EventName,
		&i.EventTime,
		&i.EventDetails,
	)
	return i, err
}

const createBackendAPIKey = `-- name: CreateBackendAPIKey :one
INSERT INTO backend_api_keys (id, project_id, display_name, secret_token_sha256)
    VALUES ($1, $2, $3, $4)
RETURNING
    id, project_id, secret_token_sha256, display_name, create_time, update_time
`

type CreateBackendAPIKeyParams struct {
	ID                uuid.UUID
	ProjectID         uuid.UUID
	DisplayName       string
	SecretTokenSha256 []byte
}

func (q *Queries) CreateBackendAPIKey(ctx context.Context, arg CreateBackendAPIKeyParams) (BackendApiKey, error) {
	row := q.db.QueryRow(ctx, createBackendAPIKey,
		arg.ID,
		arg.ProjectID,
		arg.DisplayName,
		arg.SecretTokenSha256,
	)
	var i BackendApiKey
	err := row.Scan(
		&i.ID,
		&i.ProjectID,
		&i.SecretTokenSha256,
		&i.DisplayName,
		&i.CreateTime,
		&i.UpdateTime,
	)
	return i, err
}

const createOrganization = `-- name: CreateOrganization :one
INSERT INTO organizations (id, project_id, display_name, log_in_with_google, log_in_with_microsoft, log_in_with_github, log_in_with_email, log_in_with_password, log_in_with_saml, log_in_with_authenticator_app, log_in_with_passkey, scim_enabled)
    VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12)
RETURNING
    id, project_id, display_name, scim_enabled, create_time, update_time, logins_disabled, log_in_with_google, log_in_with_microsoft, log_in_with_password, log_in_with_authenticator_app, log_in_with_passkey, require_mfa, log_in_with_email, log_in_with_saml, custom_roles_enabled, log_in_with_github, api_keys_enabled
`

type CreateOrganizationParams struct {
	ID                        uuid.UUID
	ProjectID                 uuid.UUID
	DisplayName               string
	LogInWithGoogle           bool
	LogInWithMicrosoft        bool
	LogInWithGithub           bool
	LogInWithEmail            bool
	LogInWithPassword         bool
	LogInWithSaml             bool
	LogInWithAuthenticatorApp bool
	LogInWithPasskey          bool
	ScimEnabled               bool
}

func (q *Queries) CreateOrganization(ctx context.Context, arg CreateOrganizationParams) (Organization, error) {
	row := q.db.QueryRow(ctx, createOrganization,
		arg.ID,
		arg.ProjectID,
		arg.DisplayName,
		arg.LogInWithGoogle,
		arg.LogInWithMicrosoft,
		arg.LogInWithGithub,
		arg.LogInWithEmail,
		arg.LogInWithPassword,
		arg.LogInWithSaml,
		arg.LogInWithAuthenticatorApp,
		arg.LogInWithPasskey,
		arg.ScimEnabled,
	)
	var i Organization
	err := row.Scan(
		&i.ID,
		&i.ProjectID,
		&i.DisplayName,
		&i.ScimEnabled,
		&i.CreateTime,
		&i.UpdateTime,
		&i.LoginsDisabled,
		&i.LogInWithGoogle,
		&i.LogInWithMicrosoft,
		&i.LogInWithPassword,
		&i.LogInWithAuthenticatorApp,
		&i.LogInWithPasskey,
		&i.RequireMfa,
		&i.LogInWithEmail,
		&i.LogInWithSaml,
		&i.CustomRolesEnabled,
		&i.LogInWithGithub,
		&i.ApiKeysEnabled,
	)
	return i, err
}

const createOrganizationDomain = `-- name: CreateOrganizationDomain :one
INSERT INTO organization_domains (id, organization_id, DOMAIN)
    VALUES ($1, $2, $3)
RETURNING
    id, organization_id, domain
`

type CreateOrganizationDomainParams struct {
	ID             uuid.UUID
	OrganizationID uuid.UUID
	Domain         string
}

func (q *Queries) CreateOrganizationDomain(ctx context.Context, arg CreateOrganizationDomainParams) (OrganizationDomain, error) {
	row := q.db.QueryRow(ctx, createOrganizationDomain, arg.ID, arg.OrganizationID, arg.Domain)
	var i OrganizationDomain
	err := row.Scan(&i.ID, &i.OrganizationID, &i.Domain)
	return i, err
}

const createOrganizationGoogleHostedDomain = `-- name: CreateOrganizationGoogleHostedDomain :one
INSERT INTO organization_google_hosted_domains (id, organization_id, google_hosted_domain)
    VALUES ($1, $2, $3)
RETURNING
    id, organization_id, google_hosted_domain
`

type CreateOrganizationGoogleHostedDomainParams struct {
	ID                 uuid.UUID
	OrganizationID     uuid.UUID
	GoogleHostedDomain string
}

func (q *Queries) CreateOrganizationGoogleHostedDomain(ctx context.Context, arg CreateOrganizationGoogleHostedDomainParams) (OrganizationGoogleHostedDomain, error) {
	row := q.db.QueryRow(ctx, createOrganizationGoogleHostedDomain, arg.ID, arg.OrganizationID, arg.GoogleHostedDomain)
	var i OrganizationGoogleHostedDomain
	err := row.Scan(&i.ID, &i.OrganizationID, &i.GoogleHostedDomain)
	return i, err
}

const createOrganizationMicrosoftTenantID = `-- name: CreateOrganizationMicrosoftTenantID :one
INSERT INTO organization_microsoft_tenant_ids (id, organization_id, microsoft_tenant_id)
    VALUES ($1, $2, $3)
RETURNING
    id, organization_id, microsoft_tenant_id
`

type CreateOrganizationMicrosoftTenantIDParams struct {
	ID                uuid.UUID
	OrganizationID    uuid.UUID
	MicrosoftTenantID string
}

func (q *Queries) CreateOrganizationMicrosoftTenantID(ctx context.Context, arg CreateOrganizationMicrosoftTenantIDParams) (OrganizationMicrosoftTenantID, error) {
	row := q.db.QueryRow(ctx, createOrganizationMicrosoftTenantID, arg.ID, arg.OrganizationID, arg.MicrosoftTenantID)
	var i OrganizationMicrosoftTenantID
	err := row.Scan(&i.ID, &i.OrganizationID, &i.MicrosoftTenantID)
	return i, err
}

const createProjectTrustedDomain = `-- name: CreateProjectTrustedDomain :one
INSERT INTO project_trusted_domains (id, project_id, DOMAIN)
    VALUES ($1, $2, $3)
RETURNING
    id, project_id, domain
`

type CreateProjectTrustedDomainParams struct {
	ID        uuid.UUID
	ProjectID uuid.UUID
	Domain    string
}

func (q *Queries) CreateProjectTrustedDomain(ctx context.Context, arg CreateProjectTrustedDomainParams) (ProjectTrustedDomain, error) {
	row := q.db.QueryRow(ctx, createProjectTrustedDomain, arg.ID, arg.ProjectID, arg.Domain)
	var i ProjectTrustedDomain
	err := row.Scan(&i.ID, &i.ProjectID, &i.Domain)
	return i, err
}

const createPublishableKey = `-- name: CreatePublishableKey :one
INSERT INTO publishable_keys (id, project_id, display_name, dev_mode)
    VALUES ($1, $2, $3, $4)
RETURNING
    id, project_id, create_time, update_time, display_name, dev_mode
`

type CreatePublishableKeyParams struct {
	ID          uuid.UUID
	ProjectID   uuid.UUID
	DisplayName string
	DevMode     bool
}

func (q *Queries) CreatePublishableKey(ctx context.Context, arg CreatePublishableKeyParams) (PublishableKey, error) {
	row := q.db.QueryRow(ctx, createPublishableKey,
		arg.ID,
		arg.ProjectID,
		arg.DisplayName,
		arg.DevMode,
	)
	var i PublishableKey
	err := row.Scan(
		&i.ID,
		&i.ProjectID,
		&i.CreateTime,
		&i.UpdateTime,
		&i.DisplayName,
		&i.DevMode,
	)
	return i, err
}

const createRole = `-- name: CreateRole :one
INSERT INTO roles (id, project_id, organization_id, display_name, description)
    VALUES ($1, $2, $3, $4, $5)
RETURNING
    id, project_id, organization_id, create_time, update_time, display_name, description
`

type CreateRoleParams struct {
	ID             uuid.UUID
	ProjectID      uuid.UUID
	OrganizationID *uuid.UUID
	DisplayName    string
	Description    string
}

func (q *Queries) CreateRole(ctx context.Context, arg CreateRoleParams) (Role, error) {
	row := q.db.QueryRow(ctx, createRole,
		arg.ID,
		arg.ProjectID,
		arg.OrganizationID,
		arg.DisplayName,
		arg.Description,
	)
	var i Role
	err := row.Scan(
		&i.ID,
		&i.ProjectID,
		&i.OrganizationID,
		&i.CreateTime,
		&i.UpdateTime,
		&i.DisplayName,
		&i.Description,
	)
	return i, err
}

const createSAMLConnection = `-- name: CreateSAMLConnection :one
INSERT INTO saml_connections (id, organization_id, is_primary, idp_redirect_url, idp_x509_certificate, idp_entity_id)
    VALUES ($1, $2, $3, $4, $5, $6)
RETURNING
    id, organization_id, create_time, is_primary, idp_redirect_url, idp_x509_certificate, idp_entity_id, update_time
`

type CreateSAMLConnectionParams struct {
	ID                 uuid.UUID
	OrganizationID     uuid.UUID
	IsPrimary          bool
	IdpRedirectUrl     *string
	IdpX509Certificate []byte
	IdpEntityID        *string
}

func (q *Queries) CreateSAMLConnection(ctx context.Context, arg CreateSAMLConnectionParams) (SamlConnection, error) {
	row := q.db.QueryRow(ctx, createSAMLConnection,
		arg.ID,
		arg.OrganizationID,
		arg.IsPrimary,
		arg.IdpRedirectUrl,
		arg.IdpX509Certificate,
		arg.IdpEntityID,
	)
	var i SamlConnection
	err := row.Scan(
		&i.ID,
		&i.OrganizationID,
		&i.CreateTime,
		&i.IsPrimary,
		&i.IdpRedirectUrl,
		&i.IdpX509Certificate,
		&i.IdpEntityID,
		&i.UpdateTime,
	)
	return i, err
}

const createSCIMAPIKey = `-- name: CreateSCIMAPIKey :one
INSERT INTO scim_api_keys (id, organization_id, display_name, secret_token_sha256)
    VALUES ($1, $2, $3, $4)
RETURNING
    id, organization_id, secret_token_sha256, display_name, create_time, update_time
`

type CreateSCIMAPIKeyParams struct {
	ID                uuid.UUID
	OrganizationID    uuid.UUID
	DisplayName       string
	SecretTokenSha256 []byte
}

func (q *Queries) CreateSCIMAPIKey(ctx context.Context, arg CreateSCIMAPIKeyParams) (ScimApiKey, error) {
	row := q.db.QueryRow(ctx, createSCIMAPIKey,
		arg.ID,
		arg.OrganizationID,
		arg.DisplayName,
		arg.SecretTokenSha256,
	)
	var i ScimApiKey
	err := row.Scan(
		&i.ID,
		&i.OrganizationID,
		&i.SecretTokenSha256,
		&i.DisplayName,
		&i.CreateTime,
		&i.UpdateTime,
	)
	return i, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users (id, organization_id, google_user_id, microsoft_user_id, github_user_id, email, is_owner)
    VALUES ($1, $2, $3, $4, $5, $6, $7)
RETURNING
    id, organization_id, password_bcrypt, google_user_id, microsoft_user_id, email, create_time, update_time, deactivate_time, is_owner, failed_password_attempts, password_lockout_expire_time, authenticator_app_secret_ciphertext, failed_authenticator_app_attempts, authenticator_app_lockout_expire_time, authenticator_app_recovery_code_sha256s, display_name, profile_picture_url, github_user_id
`

type CreateUserParams struct {
	ID              uuid.UUID
	OrganizationID  uuid.UUID
	GoogleUserID    *string
	MicrosoftUserID *string
	GithubUserID    *string
	Email           string
	IsOwner         bool
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.ID,
		arg.OrganizationID,
		arg.GoogleUserID,
		arg.MicrosoftUserID,
		arg.GithubUserID,
		arg.Email,
		arg.IsOwner,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.OrganizationID,
		&i.PasswordBcrypt,
		&i.GoogleUserID,
		&i.MicrosoftUserID,
		&i.Email,
		&i.CreateTime,
		&i.UpdateTime,
		&i.DeactivateTime,
		&i.IsOwner,
		&i.FailedPasswordAttempts,
		&i.PasswordLockoutExpireTime,
		&i.AuthenticatorAppSecretCiphertext,
		&i.FailedAuthenticatorAppAttempts,
		&i.AuthenticatorAppLockoutExpireTime,
		&i.AuthenticatorAppRecoveryCodeSha256s,
		&i.DisplayName,
		&i.ProfilePictureUrl,
		&i.GithubUserID,
	)
	return i, err
}

const createUserImpersonationToken = `-- name: CreateUserImpersonationToken :one
INSERT INTO user_impersonation_tokens (id, impersonator_id, impersonated_id, expire_time, secret_token_sha256)
    VALUES ($1, $2, $3, $4, $5)
RETURNING
    id, impersonator_id, create_time, expire_time, impersonated_id, secret_token_sha256
`

type CreateUserImpersonationTokenParams struct {
	ID                uuid.UUID
	ImpersonatorID    uuid.UUID
	ImpersonatedID    uuid.UUID
	ExpireTime        *time.Time
	SecretTokenSha256 []byte
}

func (q *Queries) CreateUserImpersonationToken(ctx context.Context, arg CreateUserImpersonationTokenParams) (UserImpersonationToken, error) {
	row := q.db.QueryRow(ctx, createUserImpersonationToken,
		arg.ID,
		arg.ImpersonatorID,
		arg.ImpersonatedID,
		arg.ExpireTime,
		arg.SecretTokenSha256,
	)
	var i UserImpersonationToken
	err := row.Scan(
		&i.ID,
		&i.ImpersonatorID,
		&i.CreateTime,
		&i.ExpireTime,
		&i.ImpersonatedID,
		&i.SecretTokenSha256,
	)
	return i, err
}

const createUserInvite = `-- name: CreateUserInvite :one
INSERT INTO user_invites (id, organization_id, email, is_owner)
    VALUES ($1, $2, $3, $4)
ON CONFLICT (organization_id, email)
    DO UPDATE SET
        email = excluded.email,
        is_owner = excluded.is_owner
    RETURNING
        id, organization_id, create_time, update_time, email, is_owner, role_id
`

type CreateUserInviteParams struct {
	ID             uuid.UUID
	OrganizationID uuid.UUID
	Email          string
	IsOwner        bool
}

func (q *Queries) CreateUserInvite(ctx context.Context, arg CreateUserInviteParams) (UserInvite, error) {
	row := q.db.QueryRow(ctx, createUserInvite,
		arg.ID,
		arg.OrganizationID,
		arg.Email,
		arg.IsOwner,
	)
	var i UserInvite
	err := row.Scan(
		&i.ID,
		&i.OrganizationID,
		&i.CreateTime,
		&i.UpdateTime,
		&i.Email,
		&i.IsOwner,
		&i.RoleID,
	)
	return i, err
}

const deleteAPIKey = `-- name: DeleteAPIKey :exec
DELETE FROM api_keys USING organizations
WHERE api_keys.organization_id = organizations.id
    AND api_keys.id = $1
    AND organizations.project_id = $2
    AND api_keys.secret_token_sha256 IS NULL
`

type DeleteAPIKeyParams struct {
	ID        uuid.UUID
	ProjectID uuid.UUID
}

func (q *Queries) DeleteAPIKey(ctx context.Context, arg DeleteAPIKeyParams) error {
	_, err := q.db.Exec(ctx, deleteAPIKey, arg.ID, arg.ProjectID)
	return err
}

const deleteAPIKeyRoleAssignment = `-- name: DeleteAPIKeyRoleAssignment :exec
DELETE FROM api_key_role_assignments USING api_keys, organizations
WHERE api_key_role_assignments.api_key_id = api_keys.id
    AND api_keys.organization_id = organizations.id
    AND api_key_role_assignments.id = $1
    AND organizations.project_id = $2
`

type DeleteAPIKeyRoleAssignmentParams struct {
	ID        uuid.UUID
	ProjectID uuid.UUID
}

func (q *Queries) DeleteAPIKeyRoleAssignment(ctx context.Context, arg DeleteAPIKeyRoleAssignmentParams) error {
	_, err := q.db.Exec(ctx, deleteAPIKeyRoleAssignment, arg.ID, arg.ProjectID)
	return err
}

const deleteActionsByNameNotInList = `-- name: DeleteActionsByNameNotInList :many
DELETE FROM actions
WHERE project_id = $1
    AND NOT (name = ANY ($2::varchar[]))
RETURNING
    id, project_id, name, description
`

type DeleteActionsByNameNotInListParams struct {
	ProjectID uuid.UUID
	Names     []string
}

func (q *Queries) DeleteActionsByNameNotInList(ctx context.Context, arg DeleteActionsByNameNotInListParams) ([]Action, error) {
	rows, err := q.db.Query(ctx, deleteActionsByNameNotInList, arg.ProjectID, arg.Names)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Action
	for rows.Next() {
		var i Action
		if err := rows.Scan(
			&i.ID,
			&i.ProjectID,
			&i.Name,
			&i.Description,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const deleteBackendAPIKey = `-- name: DeleteBackendAPIKey :exec
DELETE FROM backend_api_keys
WHERE id = $1
`

func (q *Queries) DeleteBackendAPIKey(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteBackendAPIKey, id)
	return err
}

const deleteOrganization = `-- name: DeleteOrganization :exec
DELETE FROM organizations
WHERE id = $1
`

func (q *Queries) DeleteOrganization(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteOrganization, id)
	return err
}

const deleteOrganizationDomains = `-- name: DeleteOrganizationDomains :exec
DELETE FROM organization_domains
WHERE organization_id = $1
`

func (q *Queries) DeleteOrganizationDomains(ctx context.Context, organizationID uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteOrganizationDomains, organizationID)
	return err
}

const deleteOrganizationGoogleHostedDomains = `-- name: DeleteOrganizationGoogleHostedDomains :exec
DELETE FROM organization_google_hosted_domains
WHERE organization_id = $1
`

func (q *Queries) DeleteOrganizationGoogleHostedDomains(ctx context.Context, organizationID uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteOrganizationGoogleHostedDomains, organizationID)
	return err
}

const deleteOrganizationMicrosoftTenantIDs = `-- name: DeleteOrganizationMicrosoftTenantIDs :exec
DELETE FROM organization_microsoft_tenant_ids
WHERE organization_id = $1
`

func (q *Queries) DeleteOrganizationMicrosoftTenantIDs(ctx context.Context, organizationID uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteOrganizationMicrosoftTenantIDs, organizationID)
	return err
}

const deletePasskey = `-- name: DeletePasskey :exec
DELETE FROM passkeys
WHERE id = $1
`

func (q *Queries) DeletePasskey(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deletePasskey, id)
	return err
}

const deleteProjectTrustedDomainsByProjectID = `-- name: DeleteProjectTrustedDomainsByProjectID :exec
DELETE FROM project_trusted_domains
WHERE project_id = $1
`

func (q *Queries) DeleteProjectTrustedDomainsByProjectID(ctx context.Context, projectID uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteProjectTrustedDomainsByProjectID, projectID)
	return err
}

const deletePublishableKey = `-- name: DeletePublishableKey :exec
DELETE FROM publishable_keys
WHERE id = $1
`

func (q *Queries) DeletePublishableKey(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deletePublishableKey, id)
	return err
}

const deleteRole = `-- name: DeleteRole :exec
DELETE FROM roles
WHERE id = $1
`

func (q *Queries) DeleteRole(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteRole, id)
	return err
}

const deleteRoleActionsByActionIDNotInList = `-- name: DeleteRoleActionsByActionIDNotInList :exec
DELETE FROM role_actions
WHERE role_id = $1
    AND NOT (action_id = ANY ($2::uuid[]))
`

type DeleteRoleActionsByActionIDNotInListParams struct {
	RoleID    uuid.UUID
	ActionIds []uuid.UUID
}

func (q *Queries) DeleteRoleActionsByActionIDNotInList(ctx context.Context, arg DeleteRoleActionsByActionIDNotInListParams) error {
	_, err := q.db.Exec(ctx, deleteRoleActionsByActionIDNotInList, arg.RoleID, arg.ActionIds)
	return err
}

const deleteSAMLConnection = `-- name: DeleteSAMLConnection :exec
DELETE FROM saml_connections
WHERE id = $1
`

func (q *Queries) DeleteSAMLConnection(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteSAMLConnection, id)
	return err
}

const deleteSCIMAPIKey = `-- name: DeleteSCIMAPIKey :exec
DELETE FROM scim_api_keys
WHERE id = $1
`

func (q *Queries) DeleteSCIMAPIKey(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteSCIMAPIKey, id)
	return err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users
WHERE id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteUser, id)
	return err
}

const deleteUserInvite = `-- name: DeleteUserInvite :exec
DELETE FROM user_invites
WHERE id = $1
`

func (q *Queries) DeleteUserInvite(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteUserInvite, id)
	return err
}

const deleteUserRoleAssignment = `-- name: DeleteUserRoleAssignment :exec
DELETE FROM user_role_assignments
WHERE id = $1
`

func (q *Queries) DeleteUserRoleAssignment(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteUserRoleAssignment, id)
	return err
}

const deleteVaultDomainSettings = `-- name: DeleteVaultDomainSettings :exec
DELETE FROM vault_domain_settings
WHERE project_id = $1
`

func (q *Queries) DeleteVaultDomainSettings(ctx context.Context, projectID uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteVaultDomainSettings, projectID)
	return err
}

const disableOrganizationLogins = `-- name: DisableOrganizationLogins :exec
UPDATE
    organizations
SET
    logins_disabled = TRUE
WHERE
    id = $1
`

func (q *Queries) DisableOrganizationLogins(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, disableOrganizationLogins, id)
	return err
}

const disablePasskeysWithOldRPID = `-- name: DisablePasskeysWithOldRPID :exec
UPDATE
    passkeys
SET
    disabled = TRUE,
    update_time = now()
FROM
    users,
    organizations,
    projects
WHERE
    passkeys.rp_id != projects.vault_domain
    AND passkeys.user_id = users.id
    AND users.organization_id = organizations.id
    AND organizations.project_id = projects.id
    AND projects.id = $1
`

func (q *Queries) DisablePasskeysWithOldRPID(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, disablePasskeysWithOldRPID, id)
	return err
}

const disableProjectLogins = `-- name: DisableProjectLogins :exec
UPDATE
    projects
SET
    logins_disabled = TRUE
WHERE
    id = $1
`

func (q *Queries) DisableProjectLogins(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, disableProjectLogins, id)
	return err
}

const disableProjectOrganizationsLogInWithAuthenticatorApp = `-- name: DisableProjectOrganizationsLogInWithAuthenticatorApp :exec
UPDATE
    organizations
SET
    log_in_with_authenticator_app = FALSE
WHERE
    project_id = $1
`

func (q *Queries) DisableProjectOrganizationsLogInWithAuthenticatorApp(ctx context.Context, projectID uuid.UUID) error {
	_, err := q.db.Exec(ctx, disableProjectOrganizationsLogInWithAuthenticatorApp, projectID)
	return err
}

const disableProjectOrganizationsLogInWithEmail = `-- name: DisableProjectOrganizationsLogInWithEmail :exec
UPDATE
    organizations
SET
    log_in_with_email = FALSE
WHERE
    project_id = $1
`

func (q *Queries) DisableProjectOrganizationsLogInWithEmail(ctx context.Context, projectID uuid.UUID) error {
	_, err := q.db.Exec(ctx, disableProjectOrganizationsLogInWithEmail, projectID)
	return err
}

const disableProjectOrganizationsLogInWithGithub = `-- name: DisableProjectOrganizationsLogInWithGithub :exec
UPDATE
    organizations
SET
    log_in_with_github = FALSE
WHERE
    project_id = $1
`

func (q *Queries) DisableProjectOrganizationsLogInWithGithub(ctx context.Context, projectID uuid.UUID) error {
	_, err := q.db.Exec(ctx, disableProjectOrganizationsLogInWithGithub, projectID)
	return err
}

const disableProjectOrganizationsLogInWithGoogle = `-- name: DisableProjectOrganizationsLogInWithGoogle :exec
UPDATE
    organizations
SET
    log_in_with_google = FALSE
WHERE
    project_id = $1
`

func (q *Queries) DisableProjectOrganizationsLogInWithGoogle(ctx context.Context, projectID uuid.UUID) error {
	_, err := q.db.Exec(ctx, disableProjectOrganizationsLogInWithGoogle, projectID)
	return err
}

const disableProjectOrganizationsLogInWithMicrosoft = `-- name: DisableProjectOrganizationsLogInWithMicrosoft :exec
UPDATE
    organizations
SET
    log_in_with_microsoft = FALSE
WHERE
    project_id = $1
`

func (q *Queries) DisableProjectOrganizationsLogInWithMicrosoft(ctx context.Context, projectID uuid.UUID) error {
	_, err := q.db.Exec(ctx, disableProjectOrganizationsLogInWithMicrosoft, projectID)
	return err
}

const disableProjectOrganizationsLogInWithPasskey = `-- name: DisableProjectOrganizationsLogInWithPasskey :exec
UPDATE
    organizations
SET
    log_in_with_passkey = FALSE
WHERE
    project_id = $1
`

func (q *Queries) DisableProjectOrganizationsLogInWithPasskey(ctx context.Context, projectID uuid.UUID) error {
	_, err := q.db.Exec(ctx, disableProjectOrganizationsLogInWithPasskey, projectID)
	return err
}

const disableProjectOrganizationsLogInWithPassword = `-- name: DisableProjectOrganizationsLogInWithPassword :exec
UPDATE
    organizations
SET
    log_in_with_password = FALSE
WHERE
    project_id = $1
`

func (q *Queries) DisableProjectOrganizationsLogInWithPassword(ctx context.Context, projectID uuid.UUID) error {
	_, err := q.db.Exec(ctx, disableProjectOrganizationsLogInWithPassword, projectID)
	return err
}

const disableProjectOrganizationsLogInWithSAML = `-- name: DisableProjectOrganizationsLogInWithSAML :exec
UPDATE
    organizations
SET
    log_in_with_saml = FALSE
WHERE
    project_id = $1
`

func (q *Queries) DisableProjectOrganizationsLogInWithSAML(ctx context.Context, projectID uuid.UUID) error {
	_, err := q.db.Exec(ctx, disableProjectOrganizationsLogInWithSAML, projectID)
	return err
}

const enableOrganizationLogins = `-- name: EnableOrganizationLogins :exec
UPDATE
    organizations
SET
    logins_disabled = FALSE
WHERE
    id = $1
`

func (q *Queries) EnableOrganizationLogins(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, enableOrganizationLogins, id)
	return err
}

const enableProjectLogins = `-- name: EnableProjectLogins :exec
UPDATE
    projects
SET
    logins_disabled = FALSE
WHERE
    id = $1
`

func (q *Queries) EnableProjectLogins(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, enableProjectLogins, id)
	return err
}

const existsUserWithEmailInOrganization = `-- name: ExistsUserWithEmailInOrganization :one
SELECT
    EXISTS (
        SELECT
            id, organization_id, password_bcrypt, google_user_id, microsoft_user_id, email, create_time, update_time, deactivate_time, is_owner, failed_password_attempts, password_lockout_expire_time, authenticator_app_secret_ciphertext, failed_authenticator_app_attempts, authenticator_app_lockout_expire_time, authenticator_app_recovery_code_sha256s, display_name, profile_picture_url, github_user_id
        FROM
            users
        WHERE
            organization_id = $1
            AND email = $2)
`

type ExistsUserWithEmailInOrganizationParams struct {
	OrganizationID uuid.UUID
	Email          string
}

func (q *Queries) ExistsUserWithEmailInOrganization(ctx context.Context, arg ExistsUserWithEmailInOrganizationParams) (bool, error) {
	row := q.db.QueryRow(ctx, existsUserWithEmailInOrganization, arg.OrganizationID, arg.Email)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const getAPIKeyActions = `-- name: GetAPIKeyActions :many
SELECT DISTINCT
    (actions.name)
FROM
    api_keys
    JOIN api_key_role_assignments ON api_keys.id = api_key_role_assignments.api_key_id
    JOIN roles ON api_key_role_assignments.role_id = roles.id
    JOIN role_actions ON roles.id = role_actions.role_id
    JOIN actions ON role_actions.action_id = actions.id
WHERE
    api_keys.id = $1
`

func (q *Queries) GetAPIKeyActions(ctx context.Context, id uuid.UUID) ([]string, error) {
	rows, err := q.db.Query(ctx, getAPIKeyActions, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var name string
		if err := rows.Scan(&name); err != nil {
			return nil, err
		}
		items = append(items, name)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAPIKeyByID = `-- name: GetAPIKeyByID :one
SELECT
    api_keys.id, api_keys.organization_id, api_keys.display_name, api_keys.secret_token_sha256, api_keys.secret_token_suffix, api_keys.expire_time, api_keys.create_time, api_keys.update_time
FROM
    api_keys
    JOIN organizations AS organization ON api_keys.organization_id = organization.id
WHERE
    api_keys.id = $1
    AND organization.project_id = $2
`

type GetAPIKeyByIDParams struct {
	ID        uuid.UUID
	ProjectID uuid.UUID
}

func (q *Queries) GetAPIKeyByID(ctx context.Context, arg GetAPIKeyByIDParams) (ApiKey, error) {
	row := q.db.QueryRow(ctx, getAPIKeyByID, arg.ID, arg.ProjectID)
	var i ApiKey
	err := row.Scan(
		&i.ID,
		&i.OrganizationID,
		&i.DisplayName,
		&i.SecretTokenSha256,
		&i.SecretTokenSuffix,
		&i.ExpireTime,
		&i.CreateTime,
		&i.UpdateTime,
	)
	return i, err
}

const getAPIKeyDetailsBySecretTokenSHA256 = `-- name: GetAPIKeyDetailsBySecretTokenSHA256 :one
SELECT
    api_keys.id,
    api_keys.organization_id
FROM
    api_keys
    JOIN organizations AS organization ON api_keys.organization_id = organization.id
WHERE
    api_keys.secret_token_sha256 = $1
    AND organization.project_id = $2
    AND (api_keys.expire_time > now()
        OR api_keys.expire_time IS NULL)
`

type GetAPIKeyDetailsBySecretTokenSHA256Params struct {
	SecretTokenSha256 []byte
	ProjectID         uuid.UUID
}

type GetAPIKeyDetailsBySecretTokenSHA256Row struct {
	ID             uuid.UUID
	OrganizationID uuid.UUID
}

func (q *Queries) GetAPIKeyDetailsBySecretTokenSHA256(ctx context.Context, arg GetAPIKeyDetailsBySecretTokenSHA256Params) (GetAPIKeyDetailsBySecretTokenSHA256Row, error) {
	row := q.db.QueryRow(ctx, getAPIKeyDetailsBySecretTokenSHA256, arg.SecretTokenSha256, arg.ProjectID)
	var i GetAPIKeyDetailsBySecretTokenSHA256Row
	err := row.Scan(&i.ID, &i.OrganizationID)
	return i, err
}

const getAPIKeyRoleAssignment = `-- name: GetAPIKeyRoleAssignment :one
SELECT
    api_key_role_assignments.id, api_key_role_assignments.api_key_id, api_key_role_assignments.role_id, api_key_role_assignments.create_time
FROM
    api_key_role_assignments
    JOIN api_keys ON api_key_role_assignments.api_key_id = api_keys.id
    JOIN organizations AS organization ON api_keys.organization_id = organization.id
WHERE
    api_key_role_assignments.id = $1
    AND organization.project_id = $2
`

type GetAPIKeyRoleAssignmentParams struct {
	ID        uuid.UUID
	ProjectID uuid.UUID
}

func (q *Queries) GetAPIKeyRoleAssignment(ctx context.Context, arg GetAPIKeyRoleAssignmentParams) (ApiKeyRoleAssignment, error) {
	row := q.db.QueryRow(ctx, getAPIKeyRoleAssignment, arg.ID, arg.ProjectID)
	var i ApiKeyRoleAssignment
	err := row.Scan(
		&i.ID,
		&i.ApiKeyID,
		&i.RoleID,
		&i.CreateTime,
	)
	return i, err
}

const getActions = `-- name: GetActions :many
SELECT
    id, project_id, name, description
FROM
    actions
WHERE
    project_id = $1
`

func (q *Queries) GetActions(ctx context.Context, projectID uuid.UUID) ([]Action, error) {
	rows, err := q.db.Query(ctx, getActions, projectID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Action
	for rows.Next() {
		var i Action
		if err := rows.Scan(
			&i.ID,
			&i.ProjectID,
			&i.Name,
			&i.Description,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getBackendAPIKey = `-- name: GetBackendAPIKey :one
SELECT
    id, project_id, secret_token_sha256, display_name, create_time, update_time
FROM
    backend_api_keys
WHERE
    id = $1
    AND project_id = $2
`

type GetBackendAPIKeyParams struct {
	ID        uuid.UUID
	ProjectID uuid.UUID
}

func (q *Queries) GetBackendAPIKey(ctx context.Context, arg GetBackendAPIKeyParams) (BackendApiKey, error) {
	row := q.db.QueryRow(ctx, getBackendAPIKey, arg.ID, arg.ProjectID)
	var i BackendApiKey
	err := row.Scan(
		&i.ID,
		&i.ProjectID,
		&i.SecretTokenSha256,
		&i.DisplayName,
		&i.CreateTime,
		&i.UpdateTime,
	)
	return i, err
}

const getBackendAPIKeyBySecretTokenSHA256 = `-- name: GetBackendAPIKeyBySecretTokenSHA256 :one
SELECT
    id, project_id, secret_token_sha256, display_name, create_time, update_time
FROM
    backend_api_keys
WHERE
    secret_token_sha256 = $1
`

func (q *Queries) GetBackendAPIKeyBySecretTokenSHA256(ctx context.Context, secretTokenSha256 []byte) (BackendApiKey, error) {
	row := q.db.QueryRow(ctx, getBackendAPIKeyBySecretTokenSHA256, secretTokenSha256)
	var i BackendApiKey
	err := row.Scan(
		&i.ID,
		&i.ProjectID,
		&i.SecretTokenSha256,
		&i.DisplayName,
		&i.CreateTime,
		&i.UpdateTime,
	)
	return i, err
}

const getOrganizationByProjectIDAndID = `-- name: GetOrganizationByProjectIDAndID :one
SELECT
    id, project_id, display_name, scim_enabled, create_time, update_time, logins_disabled, log_in_with_google, log_in_with_microsoft, log_in_with_password, log_in_with_authenticator_app, log_in_with_passkey, require_mfa, log_in_with_email, log_in_with_saml, custom_roles_enabled, log_in_with_github, api_keys_enabled
FROM
    organizations
WHERE
    id = $1
    AND project_id = $2
`

type GetOrganizationByProjectIDAndIDParams struct {
	ID        uuid.UUID
	ProjectID uuid.UUID
}

func (q *Queries) GetOrganizationByProjectIDAndID(ctx context.Context, arg GetOrganizationByProjectIDAndIDParams) (Organization, error) {
	row := q.db.QueryRow(ctx, getOrganizationByProjectIDAndID, arg.ID, arg.ProjectID)
	var i Organization
	err := row.Scan(
		&i.ID,
		&i.ProjectID,
		&i.DisplayName,
		&i.ScimEnabled,
		&i.CreateTime,
		&i.UpdateTime,
		&i.LoginsDisabled,
		&i.LogInWithGoogle,
		&i.LogInWithMicrosoft,
		&i.LogInWithPassword,
		&i.LogInWithAuthenticatorApp,
		&i.LogInWithPasskey,
		&i.RequireMfa,
		&i.LogInWithEmail,
		&i.LogInWithSaml,
		&i.CustomRolesEnabled,
		&i.LogInWithGithub,
		&i.ApiKeysEnabled,
	)
	return i, err
}

const getOrganizationDomains = `-- name: GetOrganizationDomains :many
SELECT
    organization_domains.id, organization_domains.organization_id, organization_domains.domain
FROM
    organization_domains
    JOIN organizations ON organization_domains.organization_id = organizations.id
WHERE
    public.organization_domains.organization_id = $1
    AND organizations.project_id = $2
`

type GetOrganizationDomainsParams struct {
	OrganizationID uuid.UUID
	ProjectID      uuid.UUID
}

func (q *Queries) GetOrganizationDomains(ctx context.Context, arg GetOrganizationDomainsParams) ([]OrganizationDomain, error) {
	rows, err := q.db.Query(ctx, getOrganizationDomains, arg.OrganizationID, arg.ProjectID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []OrganizationDomain
	for rows.Next() {
		var i OrganizationDomain
		if err := rows.Scan(&i.ID, &i.OrganizationID, &i.Domain); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getOrganizationGoogleHostedDomains = `-- name: GetOrganizationGoogleHostedDomains :many
SELECT
    organization_google_hosted_domains.id, organization_google_hosted_domains.organization_id, organization_google_hosted_domains.google_hosted_domain
FROM
    organization_google_hosted_domains
    JOIN organizations ON organization_google_hosted_domains.organization_id = organizations.id
WHERE
    public.organization_google_hosted_domains.organization_id = $1
    AND organizations.project_id = $2
`

type GetOrganizationGoogleHostedDomainsParams struct {
	OrganizationID uuid.UUID
	ProjectID      uuid.UUID
}

func (q *Queries) GetOrganizationGoogleHostedDomains(ctx context.Context, arg GetOrganizationGoogleHostedDomainsParams) ([]OrganizationGoogleHostedDomain, error) {
	rows, err := q.db.Query(ctx, getOrganizationGoogleHostedDomains, arg.OrganizationID, arg.ProjectID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []OrganizationGoogleHostedDomain
	for rows.Next() {
		var i OrganizationGoogleHostedDomain
		if err := rows.Scan(&i.ID, &i.OrganizationID, &i.GoogleHostedDomain); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getOrganizationMicrosoftTenantIDs = `-- name: GetOrganizationMicrosoftTenantIDs :many
SELECT
    organization_microsoft_tenant_ids.id, organization_microsoft_tenant_ids.organization_id, organization_microsoft_tenant_ids.microsoft_tenant_id
FROM
    organization_microsoft_tenant_ids
    JOIN organizations ON organization_microsoft_tenant_ids.organization_id = organizations.id
WHERE
    public.organization_microsoft_tenant_ids.organization_id = $1
    AND organizations.project_id = $2
`

type GetOrganizationMicrosoftTenantIDsParams struct {
	OrganizationID uuid.UUID
	ProjectID      uuid.UUID
}

func (q *Queries) GetOrganizationMicrosoftTenantIDs(ctx context.Context, arg GetOrganizationMicrosoftTenantIDsParams) ([]OrganizationMicrosoftTenantID, error) {
	rows, err := q.db.Query(ctx, getOrganizationMicrosoftTenantIDs, arg.OrganizationID, arg.ProjectID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []OrganizationMicrosoftTenantID
	for rows.Next() {
		var i OrganizationMicrosoftTenantID
		if err := rows.Scan(&i.ID, &i.OrganizationID, &i.MicrosoftTenantID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPasskey = `-- name: GetPasskey :one
SELECT
    passkeys.id, passkeys.user_id, passkeys.create_time, passkeys.update_time, passkeys.credential_id, passkeys.public_key, passkeys.aaguid, passkeys.disabled, passkeys.rp_id
FROM
    passkeys
    JOIN users ON passkeys.user_id = users.id
    JOIN organizations ON users.organization_id = organizations.id
WHERE
    passkeys.id = $1
    AND organizations.project_id = $2
`

type GetPasskeyParams struct {
	ID        uuid.UUID
	ProjectID uuid.UUID
}

func (q *Queries) GetPasskey(ctx context.Context, arg GetPasskeyParams) (Passkey, error) {
	row := q.db.QueryRow(ctx, getPasskey, arg.ID, arg.ProjectID)
	var i Passkey
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.CreateTime,
		&i.UpdateTime,
		&i.CredentialID,
		&i.PublicKey,
		&i.Aaguid,
		&i.Disabled,
		&i.RpID,
	)
	return i, err
}

const getProjectByID = `-- name: GetProjectByID :one
SELECT
    id, organization_id, log_in_with_password, log_in_with_google, log_in_with_microsoft, google_oauth_client_id, microsoft_oauth_client_id, google_oauth_client_secret_ciphertext, microsoft_oauth_client_secret_ciphertext, display_name, create_time, update_time, logins_disabled, log_in_with_authenticator_app, log_in_with_passkey, log_in_with_email, log_in_with_saml, redirect_uri, after_login_redirect_uri, after_signup_redirect_uri, vault_domain, email_send_from_domain, cookie_domain, email_quota_daily, stripe_customer_id, entitled_custom_vault_domains, entitled_backend_api_keys, log_in_with_github, github_oauth_client_id, github_oauth_client_secret_ciphertext, api_keys_enabled, api_key_secret_token_prefix
FROM
    projects
WHERE
    id = $1
`

func (q *Queries) GetProjectByID(ctx context.Context, id uuid.UUID) (Project, error) {
	row := q.db.QueryRow(ctx, getProjectByID, id)
	var i Project
	err := row.Scan(
		&i.ID,
		&i.OrganizationID,
		&i.LogInWithPassword,
		&i.LogInWithGoogle,
		&i.LogInWithMicrosoft,
		&i.GoogleOauthClientID,
		&i.MicrosoftOauthClientID,
		&i.GoogleOauthClientSecretCiphertext,
		&i.MicrosoftOauthClientSecretCiphertext,
		&i.DisplayName,
		&i.CreateTime,
		&i.UpdateTime,
		&i.LoginsDisabled,
		&i.LogInWithAuthenticatorApp,
		&i.LogInWithPasskey,
		&i.LogInWithEmail,
		&i.LogInWithSaml,
		&i.RedirectUri,
		&i.AfterLoginRedirectUri,
		&i.AfterSignupRedirectUri,
		&i.VaultDomain,
		&i.EmailSendFromDomain,
		&i.CookieDomain,
		&i.EmailQuotaDaily,
		&i.StripeCustomerID,
		&i.EntitledCustomVaultDomains,
		&i.EntitledBackendApiKeys,
		&i.LogInWithGithub,
		&i.GithubOauthClientID,
		&i.GithubOauthClientSecretCiphertext,
		&i.ApiKeysEnabled,
		&i.ApiKeySecretTokenPrefix,
	)
	return i, err
}

const getProjectIDOrganizationBacks = `-- name: GetProjectIDOrganizationBacks :one
SELECT
    projects.id
FROM
    organizations
    JOIN projects ON projects.organization_id = organizations.id
WHERE
    organization_id = $1
`

func (q *Queries) GetProjectIDOrganizationBacks(ctx context.Context, organizationID *uuid.UUID) (uuid.UUID, error) {
	row := q.db.QueryRow(ctx, getProjectIDOrganizationBacks, organizationID)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const getProjectTrustedDomains = `-- name: GetProjectTrustedDomains :many
SELECT
    id, project_id, domain
FROM
    project_trusted_domains
WHERE
    project_id = $1
`

func (q *Queries) GetProjectTrustedDomains(ctx context.Context, projectID uuid.UUID) ([]ProjectTrustedDomain, error) {
	rows, err := q.db.Query(ctx, getProjectTrustedDomains, projectID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ProjectTrustedDomain
	for rows.Next() {
		var i ProjectTrustedDomain
		if err := rows.Scan(&i.ID, &i.ProjectID, &i.Domain); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getProjectUISettings = `-- name: GetProjectUISettings :one
SELECT
    id, project_id, primary_color, detect_dark_mode_enabled, dark_mode_primary_color, create_time, update_time, log_in_layout, auto_create_organizations
FROM
    project_ui_settings
WHERE
    project_id = $1
`

func (q *Queries) GetProjectUISettings(ctx context.Context, projectID uuid.UUID) (ProjectUiSetting, error) {
	row := q.db.QueryRow(ctx, getProjectUISettings, projectID)
	var i ProjectUiSetting
	err := row.Scan(
		&i.ID,
		&i.ProjectID,
		&i.PrimaryColor,
		&i.DetectDarkModeEnabled,
		&i.DarkModePrimaryColor,
		&i.CreateTime,
		&i.UpdateTime,
		&i.LogInLayout,
		&i.AutoCreateOrganizations,
	)
	return i, err
}

const getProjectWebhookSettings = `-- name: GetProjectWebhookSettings :one
SELECT
    id, project_id, app_id, create_time, update_time
FROM
    project_webhook_settings
WHERE
    project_id = $1
`

func (q *Queries) GetProjectWebhookSettings(ctx context.Context, projectID uuid.UUID) (ProjectWebhookSetting, error) {
	row := q.db.QueryRow(ctx, getProjectWebhookSettings, projectID)
	var i ProjectWebhookSetting
	err := row.Scan(
		&i.ID,
		&i.ProjectID,
		&i.AppID,
		&i.CreateTime,
		&i.UpdateTime,
	)
	return i, err
}

const getPublishableKey = `-- name: GetPublishableKey :one
SELECT
    id, project_id, create_time, update_time, display_name, dev_mode
FROM
    publishable_keys
WHERE
    id = $1
    AND project_id = $2
`

type GetPublishableKeyParams struct {
	ID        uuid.UUID
	ProjectID uuid.UUID
}

func (q *Queries) GetPublishableKey(ctx context.Context, arg GetPublishableKeyParams) (PublishableKey, error) {
	row := q.db.QueryRow(ctx, getPublishableKey, arg.ID, arg.ProjectID)
	var i PublishableKey
	err := row.Scan(
		&i.ID,
		&i.ProjectID,
		&i.CreateTime,
		&i.UpdateTime,
		&i.DisplayName,
		&i.DevMode,
	)
	return i, err
}

const getRole = `-- name: GetRole :one
SELECT
    id, project_id, organization_id, create_time, update_time, display_name, description
FROM
    roles
WHERE
    id = $1
    AND project_id = $2
`

type GetRoleParams struct {
	ID        uuid.UUID
	ProjectID uuid.UUID
}

func (q *Queries) GetRole(ctx context.Context, arg GetRoleParams) (Role, error) {
	row := q.db.QueryRow(ctx, getRole, arg.ID, arg.ProjectID)
	var i Role
	err := row.Scan(
		&i.ID,
		&i.ProjectID,
		&i.OrganizationID,
		&i.CreateTime,
		&i.UpdateTime,
		&i.DisplayName,
		&i.Description,
	)
	return i, err
}

const getSAMLConnection = `-- name: GetSAMLConnection :one
SELECT
    saml_connections.id, saml_connections.organization_id, saml_connections.create_time, saml_connections.is_primary, saml_connections.idp_redirect_url, saml_connections.idp_x509_certificate, saml_connections.idp_entity_id, saml_connections.update_time
FROM
    saml_connections
    JOIN organizations ON saml_connections.organization_id = organizations.id
WHERE
    saml_connections.id = $1
    AND organizations.project_id = $2
`

type GetSAMLConnectionParams struct {
	ID        uuid.UUID
	ProjectID uuid.UUID
}

func (q *Queries) GetSAMLConnection(ctx context.Context, arg GetSAMLConnectionParams) (SamlConnection, error) {
	row := q.db.QueryRow(ctx, getSAMLConnection, arg.ID, arg.ProjectID)
	var i SamlConnection
	err := row.Scan(
		&i.ID,
		&i.OrganizationID,
		&i.CreateTime,
		&i.IsPrimary,
		&i.IdpRedirectUrl,
		&i.IdpX509Certificate,
		&i.IdpEntityID,
		&i.UpdateTime,
	)
	return i, err
}

const getSCIMAPIKey = `-- name: GetSCIMAPIKey :one
SELECT
    scim_api_keys.id, scim_api_keys.organization_id, scim_api_keys.secret_token_sha256, scim_api_keys.display_name, scim_api_keys.create_time, scim_api_keys.update_time
FROM
    scim_api_keys
    JOIN organizations ON scim_api_keys.organization_id = organizations.id
WHERE
    scim_api_keys.id = $1
    AND organizations.project_id = $2
`

type GetSCIMAPIKeyParams struct {
	ID        uuid.UUID
	ProjectID uuid.UUID
}

func (q *Queries) GetSCIMAPIKey(ctx context.Context, arg GetSCIMAPIKeyParams) (ScimApiKey, error) {
	row := q.db.QueryRow(ctx, getSCIMAPIKey, arg.ID, arg.ProjectID)
	var i ScimApiKey
	err := row.Scan(
		&i.ID,
		&i.OrganizationID,
		&i.SecretTokenSha256,
		&i.DisplayName,
		&i.CreateTime,
		&i.UpdateTime,
	)
	return i, err
}

const getSession = `-- name: GetSession :one
SELECT
    sessions.id, sessions.user_id, sessions.create_time, sessions.expire_time, sessions.refresh_token_sha256, sessions.impersonator_user_id, sessions.last_active_time, sessions.primary_auth_factor
FROM
    sessions
    JOIN users ON sessions.user_id = users.id
    JOIN organizations ON users.organization_id = organizations.id
WHERE
    sessions.id = $1
    AND organizations.project_id = $2
`

type GetSessionParams struct {
	ID        uuid.UUID
	ProjectID uuid.UUID
}

func (q *Queries) GetSession(ctx context.Context, arg GetSessionParams) (Session, error) {
	row := q.db.QueryRow(ctx, getSession, arg.ID, arg.ProjectID)
	var i Session
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.CreateTime,
		&i.ExpireTime,
		&i.RefreshTokenSha256,
		&i.ImpersonatorUserID,
		&i.LastActiveTime,
		&i.PrimaryAuthFactor,
	)
	return i, err
}

const getSessionSigningKeysByProjectID = `-- name: GetSessionSigningKeysByProjectID :many
SELECT
    id, project_id, public_key, private_key_cipher_text, create_time, expire_time
FROM
    session_signing_keys
WHERE
    project_id = $1
`

func (q *Queries) GetSessionSigningKeysByProjectID(ctx context.Context, projectID uuid.UUID) ([]SessionSigningKey, error) {
	rows, err := q.db.Query(ctx, getSessionSigningKeysByProjectID, projectID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SessionSigningKey
	for rows.Next() {
		var i SessionSigningKey
		if err := rows.Scan(
			&i.ID,
			&i.ProjectID,
			&i.PublicKey,
			&i.PrivateKeyCipherText,
			&i.CreateTime,
			&i.ExpireTime,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUser = `-- name: GetUser :one
SELECT
    users.id, users.organization_id, users.password_bcrypt, users.google_user_id, users.microsoft_user_id, users.email, users.create_time, users.update_time, users.deactivate_time, users.is_owner, users.failed_password_attempts, users.password_lockout_expire_time, users.authenticator_app_secret_ciphertext, users.failed_authenticator_app_attempts, users.authenticator_app_lockout_expire_time, users.authenticator_app_recovery_code_sha256s, users.display_name, users.profile_picture_url, users.github_user_id
FROM
    users
    JOIN organizations ON users.organization_id = organizations.id
WHERE
    users.id = $1
    AND organizations.project_id = $2
`

type GetUserParams struct {
	ID        uuid.UUID
	ProjectID uuid.UUID
}

func (q *Queries) GetUser(ctx context.Context, arg GetUserParams) (User, error) {
	row := q.db.QueryRow(ctx, getUser, arg.ID, arg.ProjectID)
	var i User
	err := row.Scan(
		&i.ID,
		&i.OrganizationID,
		&i.PasswordBcrypt,
		&i.GoogleUserID,
		&i.MicrosoftUserID,
		&i.Email,
		&i.CreateTime,
		&i.UpdateTime,
		&i.DeactivateTime,
		&i.IsOwner,
		&i.FailedPasswordAttempts,
		&i.PasswordLockoutExpireTime,
		&i.AuthenticatorAppSecretCiphertext,
		&i.FailedAuthenticatorAppAttempts,
		&i.AuthenticatorAppLockoutExpireTime,
		&i.AuthenticatorAppRecoveryCodeSha256s,
		&i.DisplayName,
		&i.ProfilePictureUrl,
		&i.GithubUserID,
	)
	return i, err
}

const getUserForImpersonation = `-- name: GetUserForImpersonation :one
SELECT
    users.id, users.organization_id, users.password_bcrypt, users.google_user_id, users.microsoft_user_id, users.email, users.create_time, users.update_time, users.deactivate_time, users.is_owner, users.failed_password_attempts, users.password_lockout_expire_time, users.authenticator_app_secret_ciphertext, users.failed_authenticator_app_attempts, users.authenticator_app_lockout_expire_time, users.authenticator_app_recovery_code_sha256s, users.display_name, users.profile_picture_url, users.github_user_id
FROM
    users
    JOIN organizations ON users.organization_id = organizations.id
    JOIN projects ON organizations.id = projects.organization_id
WHERE
    users.id = $1
    AND projects.organization_id = $2
`

type GetUserForImpersonationParams struct {
	ID                         uuid.UUID
	ImpersonatorOrganizationID *uuid.UUID
}

func (q *Queries) GetUserForImpersonation(ctx context.Context, arg GetUserForImpersonationParams) (User, error) {
	row := q.db.QueryRow(ctx, getUserForImpersonation, arg.ID, arg.ImpersonatorOrganizationID)
	var i User
	err := row.Scan(
		&i.ID,
		&i.OrganizationID,
		&i.PasswordBcrypt,
		&i.GoogleUserID,
		&i.MicrosoftUserID,
		&i.Email,
		&i.CreateTime,
		&i.UpdateTime,
		&i.DeactivateTime,
		&i.IsOwner,
		&i.FailedPasswordAttempts,
		&i.PasswordLockoutExpireTime,
		&i.AuthenticatorAppSecretCiphertext,
		&i.FailedAuthenticatorAppAttempts,
		&i.AuthenticatorAppLockoutExpireTime,
		&i.AuthenticatorAppRecoveryCodeSha256s,
		&i.DisplayName,
		&i.ProfilePictureUrl,
		&i.GithubUserID,
	)
	return i, err
}

const getUserInvite = `-- name: GetUserInvite :one
SELECT
    user_invites.id, user_invites.organization_id, user_invites.create_time, user_invites.update_time, user_invites.email, user_invites.is_owner, user_invites.role_id
FROM
    user_invites
    JOIN organizations ON user_invites.organization_id = organizations.id
WHERE
    user_invites.id = $1
    AND organizations.project_id = $2
`

type GetUserInviteParams struct {
	ID        uuid.UUID
	ProjectID uuid.UUID
}

func (q *Queries) GetUserInvite(ctx context.Context, arg GetUserInviteParams) (UserInvite, error) {
	row := q.db.QueryRow(ctx, getUserInvite, arg.ID, arg.ProjectID)
	var i UserInvite
	err := row.Scan(
		&i.ID,
		&i.OrganizationID,
		&i.CreateTime,
		&i.UpdateTime,
		&i.Email,
		&i.IsOwner,
		&i.RoleID,
	)
	return i, err
}

const getUserRoleAssignment = `-- name: GetUserRoleAssignment :one
SELECT
    user_role_assignments.id, user_role_assignments.role_id, user_role_assignments.user_id
FROM
    user_role_assignments
    JOIN roles ON user_role_assignments.role_id = roles.id
WHERE
    public.user_role_assignments.id = $1
    AND roles.project_id = $2
`

type GetUserRoleAssignmentParams struct {
	ID        uuid.UUID
	ProjectID uuid.UUID
}

func (q *Queries) GetUserRoleAssignment(ctx context.Context, arg GetUserRoleAssignmentParams) (UserRoleAssignment, error) {
	row := q.db.QueryRow(ctx, getUserRoleAssignment, arg.ID, arg.ProjectID)
	var i UserRoleAssignment
	err := row.Scan(&i.ID, &i.RoleID, &i.UserID)
	return i, err
}

const getUserRoleAssignmentByUserAndRole = `-- name: GetUserRoleAssignmentByUserAndRole :one
SELECT
    id, role_id, user_id
FROM
    user_role_assignments
WHERE
    user_id = $1
    AND role_id = $2
`

type GetUserRoleAssignmentByUserAndRoleParams struct {
	UserID uuid.UUID
	RoleID uuid.UUID
}

func (q *Queries) GetUserRoleAssignmentByUserAndRole(ctx context.Context, arg GetUserRoleAssignmentByUserAndRoleParams) (UserRoleAssignment, error) {
	row := q.db.QueryRow(ctx, getUserRoleAssignmentByUserAndRole, arg.UserID, arg.RoleID)
	var i UserRoleAssignment
	err := row.Scan(&i.ID, &i.RoleID, &i.UserID)
	return i, err
}

const getVaultDomainInActiveOrPendingUse = `-- name: GetVaultDomainInActiveOrPendingUse :one
SELECT
    EXISTS (
        SELECT
            1
        FROM
            projects
        WHERE
            vault_domain = $1)
    OR EXISTS (
        SELECT
            1
        FROM
            vault_domain_settings
        WHERE
            pending_domain = $1)
`

func (q *Queries) GetVaultDomainInActiveOrPendingUse(ctx context.Context, vaultDomain string) (pgtype.Bool, error) {
	row := q.db.QueryRow(ctx, getVaultDomainInActiveOrPendingUse, vaultDomain)
	var column_1 pgtype.Bool
	err := row.Scan(&column_1)
	return column_1, err
}

const getVaultDomainSettings = `-- name: GetVaultDomainSettings :one
SELECT
    project_id, pending_domain
FROM
    vault_domain_settings
WHERE
    project_id = $1
`

func (q *Queries) GetVaultDomainSettings(ctx context.Context, projectID uuid.UUID) (VaultDomainSetting, error) {
	row := q.db.QueryRow(ctx, getVaultDomainSettings, projectID)
	var i VaultDomainSetting
	err := row.Scan(&i.ProjectID, &i.PendingDomain)
	return i, err
}

const incrementProjectEmailDailyQuotaUsage = `-- name: IncrementProjectEmailDailyQuotaUsage :one
INSERT INTO project_email_quota_daily_usage (project_id, date, quota_usage)
    VALUES ($1, CURRENT_DATE, 1)
ON CONFLICT (project_id, date)
    DO UPDATE SET
        quota_usage = project_email_quota_daily_usage.quota_usage + 1
    RETURNING
        project_id, date, quota_usage
`

func (q *Queries) IncrementProjectEmailDailyQuotaUsage(ctx context.Context, projectID uuid.UUID) (ProjectEmailQuotaDailyUsage, error) {
	row := q.db.QueryRow(ctx, incrementProjectEmailDailyQuotaUsage, projectID)
	var i ProjectEmailQuotaDailyUsage
	err := row.Scan(&i.ProjectID, &i.Date, &i.QuotaUsage)
	return i, err
}

const listAPIKeyRoleAssignments = `-- name: ListAPIKeyRoleAssignments :many
SELECT
    api_key_role_assignments.id, api_key_role_assignments.api_key_id, api_key_role_assignments.role_id, api_key_role_assignments.create_time
FROM
    api_key_role_assignments
    JOIN api_keys ON api_key_role_assignments.api_key_id = api_keys.id
    JOIN organizations AS organization ON api_keys.organization_id = organization.id
WHERE
    api_key_role_assignments.api_key_id = $1
    AND organization.project_id = $2
    AND api_key_role_assignments.id > $3
ORDER BY
    api_key_role_assignments.id
LIMIT $4
`

type ListAPIKeyRoleAssignmentsParams struct {
	ApiKeyID  uuid.UUID
	ProjectID uuid.UUID
	ID        uuid.UUID
	Limit     int32
}

func (q *Queries) ListAPIKeyRoleAssignments(ctx context.Context, arg ListAPIKeyRoleAssignmentsParams) ([]ApiKeyRoleAssignment, error) {
	rows, err := q.db.Query(ctx, listAPIKeyRoleAssignments,
		arg.ApiKeyID,
		arg.ProjectID,
		arg.ID,
		arg.Limit,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ApiKeyRoleAssignment
	for rows.Next() {
		var i ApiKeyRoleAssignment
		if err := rows.Scan(
			&i.ID,
			&i.ApiKeyID,
			&i.RoleID,
			&i.CreateTime,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listAPIKeys = `-- name: ListAPIKeys :many
SELECT
    api_keys.id, api_keys.organization_id, api_keys.display_name, api_keys.secret_token_sha256, api_keys.secret_token_suffix, api_keys.expire_time, api_keys.create_time, api_keys.update_time
FROM
    api_keys
    JOIN organizations AS organization ON api_keys.organization_id = organization.id
WHERE
    organization.id = $1
    AND organization.project_id = $2
    AND api_keys.id > $3
ORDER BY
    api_keys.id
LIMIT $4
`

type ListAPIKeysParams struct {
	ID        uuid.UUID
	ProjectID uuid.UUID
	ID_2      uuid.UUID
	Limit     int32
}

func (q *Queries) ListAPIKeys(ctx context.Context, arg ListAPIKeysParams) ([]ApiKey, error) {
	rows, err := q.db.Query(ctx, listAPIKeys,
		arg.ID,
		arg.ProjectID,
		arg.ID_2,
		arg.Limit,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ApiKey
	for rows.Next() {
		var i ApiKey
		if err := rows.Scan(
			&i.ID,
			&i.OrganizationID,
			&i.DisplayName,
			&i.SecretTokenSha256,
			&i.SecretTokenSuffix,
			&i.ExpireTime,
			&i.CreateTime,
			&i.UpdateTime,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listAllAPIKeyRoleAssignments = `-- name: ListAllAPIKeyRoleAssignments :many
SELECT
    api_key_role_assignments.id, api_key_role_assignments.api_key_id, api_key_role_assignments.role_id, api_key_role_assignments.create_time
FROM
    api_key_role_assignments
    JOIN api_keys ON api_key_role_assignments.api_key_id = api_keys.id
    JOIN organizations AS organization ON api_keys.organization_id = organization.id
WHERE
    api_key_role_assignments.api_key_id = $1
    AND organization.project_id = $2
`

type ListAllAPIKeyRoleAssignmentsParams struct {
	ApiKeyID  uuid.UUID
	ProjectID uuid.UUID
}

func (q *Queries) ListAllAPIKeyRoleAssignments(ctx context.Context, arg ListAllAPIKeyRoleAssignmentsParams) ([]ApiKeyRoleAssignment, error) {
	rows, err := q.db.Query(ctx, listAllAPIKeyRoleAssignments, arg.ApiKeyID, arg.ProjectID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ApiKeyRoleAssignment
	for rows.Next() {
		var i ApiKeyRoleAssignment
		if err := rows.Scan(
			&i.ID,
			&i.ApiKeyID,
			&i.RoleID,
			&i.CreateTime,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listBackendAPIKeys = `-- name: ListBackendAPIKeys :many
SELECT
    id, project_id, secret_token_sha256, display_name, create_time, update_time
FROM
    backend_api_keys
WHERE
    project_id = $1
    AND id >= $2
ORDER BY
    id
LIMIT $3
`

type ListBackendAPIKeysParams struct {
	ProjectID uuid.UUID
	ID        uuid.UUID
	Limit     int32
}

func (q *Queries) ListBackendAPIKeys(ctx context.Context, arg ListBackendAPIKeysParams) ([]BackendApiKey, error) {
	rows, err := q.db.Query(ctx, listBackendAPIKeys, arg.ProjectID, arg.ID, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []BackendApiKey
	for rows.Next() {
		var i BackendApiKey
		if err := rows.Scan(
			&i.ID,
			&i.ProjectID,
			&i.SecretTokenSha256,
			&i.DisplayName,
			&i.CreateTime,
			&i.UpdateTime,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listOrganizationsByProjectId = `-- name: ListOrganizationsByProjectId :many
SELECT
    id, project_id, display_name, scim_enabled, create_time, update_time, logins_disabled, log_in_with_google, log_in_with_microsoft, log_in_with_password, log_in_with_authenticator_app, log_in_with_passkey, require_mfa, log_in_with_email, log_in_with_saml, custom_roles_enabled, log_in_with_github, api_keys_enabled
FROM
    organizations
WHERE
    project_id = $1
    AND id > $2
ORDER BY
    id
LIMIT $3
`

type ListOrganizationsByProjectIdParams struct {
	ProjectID uuid.UUID
	ID        uuid.UUID
	Limit     int32
}

func (q *Queries) ListOrganizationsByProjectId(ctx context.Context, arg ListOrganizationsByProjectIdParams) ([]Organization, error) {
	rows, err := q.db.Query(ctx, listOrganizationsByProjectId, arg.ProjectID, arg.ID, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Organization
	for rows.Next() {
		var i Organization
		if err := rows.Scan(
			&i.ID,
			&i.ProjectID,
			&i.DisplayName,
			&i.ScimEnabled,
			&i.CreateTime,
			&i.UpdateTime,
			&i.LoginsDisabled,
			&i.LogInWithGoogle,
			&i.LogInWithMicrosoft,
			&i.LogInWithPassword,
			&i.LogInWithAuthenticatorApp,
			&i.LogInWithPasskey,
			&i.RequireMfa,
			&i.LogInWithEmail,
			&i.LogInWithSaml,
			&i.CustomRolesEnabled,
			&i.LogInWithGithub,
			&i.ApiKeysEnabled,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listPasskeys = `-- name: ListPasskeys :many
SELECT
    id, user_id, create_time, update_time, credential_id, public_key, aaguid, disabled, rp_id
FROM
    passkeys
WHERE
    user_id = $1
    AND id >= $2
ORDER BY
    id
LIMIT $3
`

type ListPasskeysParams struct {
	UserID uuid.UUID
	ID     uuid.UUID
	Limit  int32
}

func (q *Queries) ListPasskeys(ctx context.Context, arg ListPasskeysParams) ([]Passkey, error) {
	rows, err := q.db.Query(ctx, listPasskeys, arg.UserID, arg.ID, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Passkey
	for rows.Next() {
		var i Passkey
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.CreateTime,
			&i.UpdateTime,
			&i.CredentialID,
			&i.PublicKey,
			&i.Aaguid,
			&i.Disabled,
			&i.RpID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listProjects = `-- name: ListProjects :many
SELECT
    id, organization_id, log_in_with_password, log_in_with_google, log_in_with_microsoft, google_oauth_client_id, microsoft_oauth_client_id, google_oauth_client_secret_ciphertext, microsoft_oauth_client_secret_ciphertext, display_name, create_time, update_time, logins_disabled, log_in_with_authenticator_app, log_in_with_passkey, log_in_with_email, log_in_with_saml, redirect_uri, after_login_redirect_uri, after_signup_redirect_uri, vault_domain, email_send_from_domain, cookie_domain, email_quota_daily, stripe_customer_id, entitled_custom_vault_domains, entitled_backend_api_keys, log_in_with_github, github_oauth_client_id, github_oauth_client_secret_ciphertext, api_keys_enabled, api_key_secret_token_prefix
FROM
    projects
ORDER BY
    id
LIMIT $1
`

func (q *Queries) ListProjects(ctx context.Context, limit int32) ([]Project, error) {
	rows, err := q.db.Query(ctx, listProjects, limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Project
	for rows.Next() {
		var i Project
		if err := rows.Scan(
			&i.ID,
			&i.OrganizationID,
			&i.LogInWithPassword,
			&i.LogInWithGoogle,
			&i.LogInWithMicrosoft,
			&i.GoogleOauthClientID,
			&i.MicrosoftOauthClientID,
			&i.GoogleOauthClientSecretCiphertext,
			&i.MicrosoftOauthClientSecretCiphertext,
			&i.DisplayName,
			&i.CreateTime,
			&i.UpdateTime,
			&i.LoginsDisabled,
			&i.LogInWithAuthenticatorApp,
			&i.LogInWithPasskey,
			&i.LogInWithEmail,
			&i.LogInWithSaml,
			&i.RedirectUri,
			&i.AfterLoginRedirectUri,
			&i.AfterSignupRedirectUri,
			&i.VaultDomain,
			&i.EmailSendFromDomain,
			&i.CookieDomain,
			&i.EmailQuotaDaily,
			&i.StripeCustomerID,
			&i.EntitledCustomVaultDomains,
			&i.EntitledBackendApiKeys,
			&i.LogInWithGithub,
			&i.GithubOauthClientID,
			&i.GithubOauthClientSecretCiphertext,
			&i.ApiKeysEnabled,
			&i.ApiKeySecretTokenPrefix,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listPublishableKeys = `-- name: ListPublishableKeys :many
SELECT
    id, project_id, create_time, update_time, display_name, dev_mode
FROM
    publishable_keys
WHERE
    project_id = $1
    AND id >= $2
ORDER BY
    id
LIMIT $3
`

type ListPublishableKeysParams struct {
	ProjectID uuid.UUID
	ID        uuid.UUID
	Limit     int32
}

func (q *Queries) ListPublishableKeys(ctx context.Context, arg ListPublishableKeysParams) ([]PublishableKey, error) {
	rows, err := q.db.Query(ctx, listPublishableKeys, arg.ProjectID, arg.ID, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []PublishableKey
	for rows.Next() {
		var i PublishableKey
		if err := rows.Scan(
			&i.ID,
			&i.ProjectID,
			&i.CreateTime,
			&i.UpdateTime,
			&i.DisplayName,
			&i.DevMode,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listRoles = `-- name: ListRoles :many
SELECT
    id, project_id, organization_id, create_time, update_time, display_name, description
FROM
    roles
WHERE
    project_id = $1
    AND organization_id IS NOT DISTINCT FROM $2
    AND id >= $3
ORDER BY
    id
LIMIT $4
`

type ListRolesParams struct {
	ProjectID      uuid.UUID
	OrganizationID *uuid.UUID
	ID             uuid.UUID
	Limit          int32
}

func (q *Queries) ListRoles(ctx context.Context, arg ListRolesParams) ([]Role, error) {
	rows, err := q.db.Query(ctx, listRoles,
		arg.ProjectID,
		arg.OrganizationID,
		arg.ID,
		arg.Limit,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Role
	for rows.Next() {
		var i Role
		if err := rows.Scan(
			&i.ID,
			&i.ProjectID,
			&i.OrganizationID,
			&i.CreateTime,
			&i.UpdateTime,
			&i.DisplayName,
			&i.Description,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listSAMLConnections = `-- name: ListSAMLConnections :many
SELECT
    id, organization_id, create_time, is_primary, idp_redirect_url, idp_x509_certificate, idp_entity_id, update_time
FROM
    saml_connections
WHERE
    organization_id = $1
    AND id >= $2
ORDER BY
    id
LIMIT $3
`

type ListSAMLConnectionsParams struct {
	OrganizationID uuid.UUID
	ID             uuid.UUID
	Limit          int32
}

func (q *Queries) ListSAMLConnections(ctx context.Context, arg ListSAMLConnectionsParams) ([]SamlConnection, error) {
	rows, err := q.db.Query(ctx, listSAMLConnections, arg.OrganizationID, arg.ID, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SamlConnection
	for rows.Next() {
		var i SamlConnection
		if err := rows.Scan(
			&i.ID,
			&i.OrganizationID,
			&i.CreateTime,
			&i.IsPrimary,
			&i.IdpRedirectUrl,
			&i.IdpX509Certificate,
			&i.IdpEntityID,
			&i.UpdateTime,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listSCIMAPIKeys = `-- name: ListSCIMAPIKeys :many
SELECT
    id, organization_id, secret_token_sha256, display_name, create_time, update_time
FROM
    scim_api_keys
WHERE
    organization_id = $1
    AND id >= $2
ORDER BY
    id
LIMIT $3
`

type ListSCIMAPIKeysParams struct {
	OrganizationID uuid.UUID
	ID             uuid.UUID
	Limit          int32
}

func (q *Queries) ListSCIMAPIKeys(ctx context.Context, arg ListSCIMAPIKeysParams) ([]ScimApiKey, error) {
	rows, err := q.db.Query(ctx, listSCIMAPIKeys, arg.OrganizationID, arg.ID, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ScimApiKey
	for rows.Next() {
		var i ScimApiKey
		if err := rows.Scan(
			&i.ID,
			&i.OrganizationID,
			&i.SecretTokenSha256,
			&i.DisplayName,
			&i.CreateTime,
			&i.UpdateTime,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listSessions = `-- name: ListSessions :many
SELECT
    id, user_id, create_time, expire_time, refresh_token_sha256, impersonator_user_id, last_active_time, primary_auth_factor
FROM
    sessions
WHERE
    user_id = $1
    AND id <= $2
ORDER BY
    id DESC
LIMIT $3
`

type ListSessionsParams struct {
	UserID uuid.UUID
	ID     uuid.UUID
	Limit  int32
}

func (q *Queries) ListSessions(ctx context.Context, arg ListSessionsParams) ([]Session, error) {
	rows, err := q.db.Query(ctx, listSessions, arg.UserID, arg.ID, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Session
	for rows.Next() {
		var i Session
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.CreateTime,
			&i.ExpireTime,
			&i.RefreshTokenSha256,
			&i.ImpersonatorUserID,
			&i.LastActiveTime,
			&i.PrimaryAuthFactor,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listUserInvites = `-- name: ListUserInvites :many
SELECT
    id, organization_id, create_time, update_time, email, is_owner, role_id
FROM
    user_invites
WHERE
    organization_id = $1
    AND id >= $2
ORDER BY
    id
LIMIT $3
`

type ListUserInvitesParams struct {
	OrganizationID uuid.UUID
	ID             uuid.UUID
	Limit          int32
}

func (q *Queries) ListUserInvites(ctx context.Context, arg ListUserInvitesParams) ([]UserInvite, error) {
	rows, err := q.db.Query(ctx, listUserInvites, arg.OrganizationID, arg.ID, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []UserInvite
	for rows.Next() {
		var i UserInvite
		if err := rows.Scan(
			&i.ID,
			&i.OrganizationID,
			&i.CreateTime,
			&i.UpdateTime,
			&i.Email,
			&i.IsOwner,
			&i.RoleID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listUserRoleAssignmentsByRole = `-- name: ListUserRoleAssignmentsByRole :many
SELECT
    id, role_id, user_id
FROM
    user_role_assignments
WHERE
    role_id = $1
    AND id >= $2
ORDER BY
    id
LIMIT $3
`

type ListUserRoleAssignmentsByRoleParams struct {
	RoleID uuid.UUID
	ID     uuid.UUID
	Limit  int32
}

func (q *Queries) ListUserRoleAssignmentsByRole(ctx context.Context, arg ListUserRoleAssignmentsByRoleParams) ([]UserRoleAssignment, error) {
	rows, err := q.db.Query(ctx, listUserRoleAssignmentsByRole, arg.RoleID, arg.ID, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []UserRoleAssignment
	for rows.Next() {
		var i UserRoleAssignment
		if err := rows.Scan(&i.ID, &i.RoleID, &i.UserID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listUserRoleAssignmentsByUser = `-- name: ListUserRoleAssignmentsByUser :many
SELECT
    id, role_id, user_id
FROM
    user_role_assignments
WHERE
    user_id = $1
    AND id >= $2
ORDER BY
    id
LIMIT $3
`

type ListUserRoleAssignmentsByUserParams struct {
	UserID uuid.UUID
	ID     uuid.UUID
	Limit  int32
}

func (q *Queries) ListUserRoleAssignmentsByUser(ctx context.Context, arg ListUserRoleAssignmentsByUserParams) ([]UserRoleAssignment, error) {
	rows, err := q.db.Query(ctx, listUserRoleAssignmentsByUser, arg.UserID, arg.ID, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []UserRoleAssignment
	for rows.Next() {
		var i UserRoleAssignment
		if err := rows.Scan(&i.ID, &i.RoleID, &i.UserID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listUsers = `-- name: ListUsers :many
SELECT
    id, organization_id, password_bcrypt, google_user_id, microsoft_user_id, email, create_time, update_time, deactivate_time, is_owner, failed_password_attempts, password_lockout_expire_time, authenticator_app_secret_ciphertext, failed_authenticator_app_attempts, authenticator_app_lockout_expire_time, authenticator_app_recovery_code_sha256s, display_name, profile_picture_url, github_user_id
FROM
    users
WHERE
    organization_id = $1
    AND id >= $2
ORDER BY
    id
LIMIT $3
`

type ListUsersParams struct {
	OrganizationID uuid.UUID
	ID             uuid.UUID
	Limit          int32
}

func (q *Queries) ListUsers(ctx context.Context, arg ListUsersParams) ([]User, error) {
	rows, err := q.db.Query(ctx, listUsers, arg.OrganizationID, arg.ID, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.OrganizationID,
			&i.PasswordBcrypt,
			&i.GoogleUserID,
			&i.MicrosoftUserID,
			&i.Email,
			&i.CreateTime,
			&i.UpdateTime,
			&i.DeactivateTime,
			&i.IsOwner,
			&i.FailedPasswordAttempts,
			&i.PasswordLockoutExpireTime,
			&i.AuthenticatorAppSecretCiphertext,
			&i.FailedAuthenticatorAppAttempts,
			&i.AuthenticatorAppLockoutExpireTime,
			&i.AuthenticatorAppRecoveryCodeSha256s,
			&i.DisplayName,
			&i.ProfilePictureUrl,
			&i.GithubUserID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const revokeAPIKey = `-- name: RevokeAPIKey :exec
UPDATE
    api_keys
SET
    update_time = now(),
    secret_token_sha256 = NULL,
    secret_token_suffix = NULL
FROM
    organizations AS organization
WHERE
    api_keys.id = $1
    AND organization.project_id = $2
`

type RevokeAPIKeyParams struct {
	ID        uuid.UUID
	ProjectID uuid.UUID
}

func (q *Queries) RevokeAPIKey(ctx context.Context, arg RevokeAPIKeyParams) error {
	_, err := q.db.Exec(ctx, revokeAPIKey, arg.ID, arg.ProjectID)
	return err
}

const revokeAllOrganizationSessions = `-- name: RevokeAllOrganizationSessions :exec
UPDATE
    sessions
SET
    refresh_token_sha256 = NULL
WHERE
    user_id IN (
        SELECT
            id
        FROM
            users
        WHERE
            organization_id = $1)
`

func (q *Queries) RevokeAllOrganizationSessions(ctx context.Context, organizationID uuid.UUID) error {
	_, err := q.db.Exec(ctx, revokeAllOrganizationSessions, organizationID)
	return err
}

const revokeAllProjectSessions = `-- name: RevokeAllProjectSessions :exec
UPDATE
    sessions
SET
    refresh_token_sha256 = NULL
WHERE
    user_id IN (
        SELECT
            id
        FROM
            users
        WHERE
            organization_id IN (
                SELECT
                    id
                FROM
                    organizations
                WHERE
                    project_id = $1))
`

func (q *Queries) RevokeAllProjectSessions(ctx context.Context, projectID uuid.UUID) error {
	_, err := q.db.Exec(ctx, revokeAllProjectSessions, projectID)
	return err
}

const revokeBackendAPIKey = `-- name: RevokeBackendAPIKey :one
UPDATE
    backend_api_keys
SET
    update_time = now(),
    secret_token_sha256 = NULL
WHERE
    id = $1
RETURNING
    id, project_id, secret_token_sha256, display_name, create_time, update_time
`

func (q *Queries) RevokeBackendAPIKey(ctx context.Context, id uuid.UUID) (BackendApiKey, error) {
	row := q.db.QueryRow(ctx, revokeBackendAPIKey, id)
	var i BackendApiKey
	err := row.Scan(
		&i.ID,
		&i.ProjectID,
		&i.SecretTokenSha256,
		&i.DisplayName,
		&i.CreateTime,
		&i.UpdateTime,
	)
	return i, err
}

const revokeSCIMAPIKey = `-- name: RevokeSCIMAPIKey :one
UPDATE
    scim_api_keys
SET
    update_time = now(),
    secret_token_sha256 = NULL
WHERE
    id = $1
RETURNING
    id, organization_id, secret_token_sha256, display_name, create_time, update_time
`

func (q *Queries) RevokeSCIMAPIKey(ctx context.Context, id uuid.UUID) (ScimApiKey, error) {
	row := q.db.QueryRow(ctx, revokeSCIMAPIKey, id)
	var i ScimApiKey
	err := row.Scan(
		&i.ID,
		&i.OrganizationID,
		&i.SecretTokenSha256,
		&i.DisplayName,
		&i.CreateTime,
		&i.UpdateTime,
	)
	return i, err
}

const updateAPIKey = `-- name: UpdateAPIKey :one
UPDATE
    api_keys
SET
    update_time = now(),
    display_name = $2
FROM
    organizations AS organization
WHERE
    api_keys.id = $1
    AND organization.project_id = $3
RETURNING
    api_keys.id, api_keys.organization_id, api_keys.display_name, api_keys.secret_token_sha256, api_keys.secret_token_suffix, api_keys.expire_time, api_keys.create_time, api_keys.update_time
`

type UpdateAPIKeyParams struct {
	ID          uuid.UUID
	DisplayName string
	ProjectID   uuid.UUID
}

func (q *Queries) UpdateAPIKey(ctx context.Context, arg UpdateAPIKeyParams) (ApiKey, error) {
	row := q.db.QueryRow(ctx, updateAPIKey, arg.ID, arg.DisplayName, arg.ProjectID)
	var i ApiKey
	err := row.Scan(
		&i.ID,
		&i.OrganizationID,
		&i.DisplayName,
		&i.SecretTokenSha256,
		&i.SecretTokenSuffix,
		&i.ExpireTime,
		&i.CreateTime,
		&i.UpdateTime,
	)
	return i, err
}

const updateBackendAPIKey = `-- name: UpdateBackendAPIKey :one
UPDATE
    backend_api_keys
SET
    update_time = now(),
    display_name = $1
WHERE
    id = $2
RETURNING
    id, project_id, secret_token_sha256, display_name, create_time, update_time
`

type UpdateBackendAPIKeyParams struct {
	DisplayName string
	ID          uuid.UUID
}

func (q *Queries) UpdateBackendAPIKey(ctx context.Context, arg UpdateBackendAPIKeyParams) (BackendApiKey, error) {
	row := q.db.QueryRow(ctx, updateBackendAPIKey, arg.DisplayName, arg.ID)
	var i BackendApiKey
	err := row.Scan(
		&i.ID,
		&i.ProjectID,
		&i.SecretTokenSha256,
		&i.DisplayName,
		&i.CreateTime,
		&i.UpdateTime,
	)
	return i, err
}

const updateOrganization = `-- name: UpdateOrganization :one
UPDATE
    organizations
SET
    update_time = now(),
    display_name = $2,
    log_in_with_google = $3,
    log_in_with_microsoft = $4,
    log_in_with_github = $13,
    log_in_with_email = $5,
    log_in_with_password = $6,
    log_in_with_authenticator_app = $7,
    log_in_with_passkey = $8,
    log_in_with_saml = $9,
    scim_enabled = $10,
    require_mfa = $11,
    custom_roles_enabled = $12,
    api_keys_enabled = $14
WHERE
    id = $1
RETURNING
    id, project_id, display_name, scim_enabled, create_time, update_time, logins_disabled, log_in_with_google, log_in_with_microsoft, log_in_with_password, log_in_with_authenticator_app, log_in_with_passkey, require_mfa, log_in_with_email, log_in_with_saml, custom_roles_enabled, log_in_with_github, api_keys_enabled
`

type UpdateOrganizationParams struct {
	ID                        uuid.UUID
	DisplayName               string
	LogInWithGoogle           bool
	LogInWithMicrosoft        bool
	LogInWithEmail            bool
	LogInWithPassword         bool
	LogInWithAuthenticatorApp bool
	LogInWithPasskey          bool
	LogInWithSaml             bool
	ScimEnabled               bool
	RequireMfa                bool
	CustomRolesEnabled        bool
	LogInWithGithub           bool
	ApiKeysEnabled            bool
}

func (q *Queries) UpdateOrganization(ctx context.Context, arg UpdateOrganizationParams) (Organization, error) {
	row := q.db.QueryRow(ctx, updateOrganization,
		arg.ID,
		arg.DisplayName,
		arg.LogInWithGoogle,
		arg.LogInWithMicrosoft,
		arg.LogInWithEmail,
		arg.LogInWithPassword,
		arg.LogInWithAuthenticatorApp,
		arg.LogInWithPasskey,
		arg.LogInWithSaml,
		arg.ScimEnabled,
		arg.RequireMfa,
		arg.CustomRolesEnabled,
		arg.LogInWithGithub,
		arg.ApiKeysEnabled,
	)
	var i Organization
	err := row.Scan(
		&i.ID,
		&i.ProjectID,
		&i.DisplayName,
		&i.ScimEnabled,
		&i.CreateTime,
		&i.UpdateTime,
		&i.LoginsDisabled,
		&i.LogInWithGoogle,
		&i.LogInWithMicrosoft,
		&i.LogInWithPassword,
		&i.LogInWithAuthenticatorApp,
		&i.LogInWithPasskey,
		&i.RequireMfa,
		&i.LogInWithEmail,
		&i.LogInWithSaml,
		&i.CustomRolesEnabled,
		&i.LogInWithGithub,
		&i.ApiKeysEnabled,
	)
	return i, err
}

const updatePasskey = `-- name: UpdatePasskey :one
UPDATE
    passkeys
SET
    update_time = now(),
    disabled = $2
WHERE
    id = $1
RETURNING
    id, user_id, create_time, update_time, credential_id, public_key, aaguid, disabled, rp_id
`

type UpdatePasskeyParams struct {
	ID       uuid.UUID
	Disabled bool
}

func (q *Queries) UpdatePasskey(ctx context.Context, arg UpdatePasskeyParams) (Passkey, error) {
	row := q.db.QueryRow(ctx, updatePasskey, arg.ID, arg.Disabled)
	var i Passkey
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.CreateTime,
		&i.UpdateTime,
		&i.CredentialID,
		&i.PublicKey,
		&i.Aaguid,
		&i.Disabled,
		&i.RpID,
	)
	return i, err
}

const updatePrimarySAMLConnection = `-- name: UpdatePrimarySAMLConnection :exec
UPDATE
    saml_connections
SET
    is_primary = (id = $1)
WHERE
    organization_id = $2
`

type UpdatePrimarySAMLConnectionParams struct {
	ID             uuid.UUID
	OrganizationID uuid.UUID
}

func (q *Queries) UpdatePrimarySAMLConnection(ctx context.Context, arg UpdatePrimarySAMLConnectionParams) error {
	_, err := q.db.Exec(ctx, updatePrimarySAMLConnection, arg.ID, arg.OrganizationID)
	return err
}

const updateProject = `-- name: UpdateProject :one
UPDATE
    projects
SET
    update_time = now(),
    display_name = $2,
    log_in_with_google = $3,
    log_in_with_microsoft = $4,
    log_in_with_github = $18,
    log_in_with_email = $5,
    log_in_with_password = $6,
    log_in_with_saml = $7,
    log_in_with_authenticator_app = $8,
    log_in_with_passkey = $9,
    google_oauth_client_id = $10,
    google_oauth_client_secret_ciphertext = $11,
    microsoft_oauth_client_id = $12,
    microsoft_oauth_client_secret_ciphertext = $13,
    github_oauth_client_id = $19,
    github_oauth_client_secret_ciphertext = $20,
    redirect_uri = $14,
    after_login_redirect_uri = $15,
    after_signup_redirect_uri = $16,
    cookie_domain = $17,
    api_keys_enabled = $21,
    api_key_secret_token_prefix = $22
WHERE
    id = $1
RETURNING
    id, organization_id, log_in_with_password, log_in_with_google, log_in_with_microsoft, google_oauth_client_id, microsoft_oauth_client_id, google_oauth_client_secret_ciphertext, microsoft_oauth_client_secret_ciphertext, display_name, create_time, update_time, logins_disabled, log_in_with_authenticator_app, log_in_with_passkey, log_in_with_email, log_in_with_saml, redirect_uri, after_login_redirect_uri, after_signup_redirect_uri, vault_domain, email_send_from_domain, cookie_domain, email_quota_daily, stripe_customer_id, entitled_custom_vault_domains, entitled_backend_api_keys, log_in_with_github, github_oauth_client_id, github_oauth_client_secret_ciphertext, api_keys_enabled, api_key_secret_token_prefix
`

type UpdateProjectParams struct {
	ID                                   uuid.UUID
	DisplayName                          string
	LogInWithGoogle                      bool
	LogInWithMicrosoft                   bool
	LogInWithEmail                       bool
	LogInWithPassword                    bool
	LogInWithSaml                        bool
	LogInWithAuthenticatorApp            bool
	LogInWithPasskey                     bool
	GoogleOauthClientID                  *string
	GoogleOauthClientSecretCiphertext    []byte
	MicrosoftOauthClientID               *string
	MicrosoftOauthClientSecretCiphertext []byte
	RedirectUri                          string
	AfterLoginRedirectUri                *string
	AfterSignupRedirectUri               *string
	CookieDomain                         string
	LogInWithGithub                      bool
	GithubOauthClientID                  *string
	GithubOauthClientSecretCiphertext    []byte
	ApiKeysEnabled                       bool
	ApiKeySecretTokenPrefix              *string
}

func (q *Queries) UpdateProject(ctx context.Context, arg UpdateProjectParams) (Project, error) {
	row := q.db.QueryRow(ctx, updateProject,
		arg.ID,
		arg.DisplayName,
		arg.LogInWithGoogle,
		arg.LogInWithMicrosoft,
		arg.LogInWithEmail,
		arg.LogInWithPassword,
		arg.LogInWithSaml,
		arg.LogInWithAuthenticatorApp,
		arg.LogInWithPasskey,
		arg.GoogleOauthClientID,
		arg.GoogleOauthClientSecretCiphertext,
		arg.MicrosoftOauthClientID,
		arg.MicrosoftOauthClientSecretCiphertext,
		arg.RedirectUri,
		arg.AfterLoginRedirectUri,
		arg.AfterSignupRedirectUri,
		arg.CookieDomain,
		arg.LogInWithGithub,
		arg.GithubOauthClientID,
		arg.GithubOauthClientSecretCiphertext,
		arg.ApiKeysEnabled,
		arg.ApiKeySecretTokenPrefix,
	)
	var i Project
	err := row.Scan(
		&i.ID,
		&i.OrganizationID,
		&i.LogInWithPassword,
		&i.LogInWithGoogle,
		&i.LogInWithMicrosoft,
		&i.GoogleOauthClientID,
		&i.MicrosoftOauthClientID,
		&i.GoogleOauthClientSecretCiphertext,
		&i.MicrosoftOauthClientSecretCiphertext,
		&i.DisplayName,
		&i.CreateTime,
		&i.UpdateTime,
		&i.LoginsDisabled,
		&i.LogInWithAuthenticatorApp,
		&i.LogInWithPasskey,
		&i.LogInWithEmail,
		&i.LogInWithSaml,
		&i.RedirectUri,
		&i.AfterLoginRedirectUri,
		&i.AfterSignupRedirectUri,
		&i.VaultDomain,
		&i.EmailSendFromDomain,
		&i.CookieDomain,
		&i.EmailQuotaDaily,
		&i.StripeCustomerID,
		&i.EntitledCustomVaultDomains,
		&i.EntitledBackendApiKeys,
		&i.LogInWithGithub,
		&i.GithubOauthClientID,
		&i.GithubOauthClientSecretCiphertext,
		&i.ApiKeysEnabled,
		&i.ApiKeySecretTokenPrefix,
	)
	return i, err
}

const updateProjectEmailSendFromDomain = `-- name: UpdateProjectEmailSendFromDomain :one
UPDATE
    projects
SET
    email_send_from_domain = $2
WHERE
    id = $1
RETURNING
    id, organization_id, log_in_with_password, log_in_with_google, log_in_with_microsoft, google_oauth_client_id, microsoft_oauth_client_id, google_oauth_client_secret_ciphertext, microsoft_oauth_client_secret_ciphertext, display_name, create_time, update_time, logins_disabled, log_in_with_authenticator_app, log_in_with_passkey, log_in_with_email, log_in_with_saml, redirect_uri, after_login_redirect_uri, after_signup_redirect_uri, vault_domain, email_send_from_domain, cookie_domain, email_quota_daily, stripe_customer_id, entitled_custom_vault_domains, entitled_backend_api_keys, log_in_with_github, github_oauth_client_id, github_oauth_client_secret_ciphertext, api_keys_enabled, api_key_secret_token_prefix
`

type UpdateProjectEmailSendFromDomainParams struct {
	ID                  uuid.UUID
	EmailSendFromDomain string
}

func (q *Queries) UpdateProjectEmailSendFromDomain(ctx context.Context, arg UpdateProjectEmailSendFromDomainParams) (Project, error) {
	row := q.db.QueryRow(ctx, updateProjectEmailSendFromDomain, arg.ID, arg.EmailSendFromDomain)
	var i Project
	err := row.Scan(
		&i.ID,
		&i.OrganizationID,
		&i.LogInWithPassword,
		&i.LogInWithGoogle,
		&i.LogInWithMicrosoft,
		&i.GoogleOauthClientID,
		&i.MicrosoftOauthClientID,
		&i.GoogleOauthClientSecretCiphertext,
		&i.MicrosoftOauthClientSecretCiphertext,
		&i.DisplayName,
		&i.CreateTime,
		&i.UpdateTime,
		&i.LoginsDisabled,
		&i.LogInWithAuthenticatorApp,
		&i.LogInWithPasskey,
		&i.LogInWithEmail,
		&i.LogInWithSaml,
		&i.RedirectUri,
		&i.AfterLoginRedirectUri,
		&i.AfterSignupRedirectUri,
		&i.VaultDomain,
		&i.EmailSendFromDomain,
		&i.CookieDomain,
		&i.EmailQuotaDaily,
		&i.StripeCustomerID,
		&i.EntitledCustomVaultDomains,
		&i.EntitledBackendApiKeys,
		&i.LogInWithGithub,
		&i.GithubOauthClientID,
		&i.GithubOauthClientSecretCiphertext,
		&i.ApiKeysEnabled,
		&i.ApiKeySecretTokenPrefix,
	)
	return i, err
}

const updateProjectOrganizationID = `-- name: UpdateProjectOrganizationID :one
UPDATE
    projects
SET
    organization_id = $2
WHERE
    id = $1
RETURNING
    id, organization_id, log_in_with_password, log_in_with_google, log_in_with_microsoft, google_oauth_client_id, microsoft_oauth_client_id, google_oauth_client_secret_ciphertext, microsoft_oauth_client_secret_ciphertext, display_name, create_time, update_time, logins_disabled, log_in_with_authenticator_app, log_in_with_passkey, log_in_with_email, log_in_with_saml, redirect_uri, after_login_redirect_uri, after_signup_redirect_uri, vault_domain, email_send_from_domain, cookie_domain, email_quota_daily, stripe_customer_id, entitled_custom_vault_domains, entitled_backend_api_keys, log_in_with_github, github_oauth_client_id, github_oauth_client_secret_ciphertext, api_keys_enabled, api_key_secret_token_prefix
`

type UpdateProjectOrganizationIDParams struct {
	ID             uuid.UUID
	OrganizationID *uuid.UUID
}

func (q *Queries) UpdateProjectOrganizationID(ctx context.Context, arg UpdateProjectOrganizationIDParams) (Project, error) {
	row := q.db.QueryRow(ctx, updateProjectOrganizationID, arg.ID, arg.OrganizationID)
	var i Project
	err := row.Scan(
		&i.ID,
		&i.OrganizationID,
		&i.LogInWithPassword,
		&i.LogInWithGoogle,
		&i.LogInWithMicrosoft,
		&i.GoogleOauthClientID,
		&i.MicrosoftOauthClientID,
		&i.GoogleOauthClientSecretCiphertext,
		&i.MicrosoftOauthClientSecretCiphertext,
		&i.DisplayName,
		&i.CreateTime,
		&i.UpdateTime,
		&i.LoginsDisabled,
		&i.LogInWithAuthenticatorApp,
		&i.LogInWithPasskey,
		&i.LogInWithEmail,
		&i.LogInWithSaml,
		&i.RedirectUri,
		&i.AfterLoginRedirectUri,
		&i.AfterSignupRedirectUri,
		&i.VaultDomain,
		&i.EmailSendFromDomain,
		&i.CookieDomain,
		&i.EmailQuotaDaily,
		&i.StripeCustomerID,
		&i.EntitledCustomVaultDomains,
		&i.EntitledBackendApiKeys,
		&i.LogInWithGithub,
		&i.GithubOauthClientID,
		&i.GithubOauthClientSecretCiphertext,
		&i.ApiKeysEnabled,
		&i.ApiKeySecretTokenPrefix,
	)
	return i, err
}

const updateProjectUISettings = `-- name: UpdateProjectUISettings :one
UPDATE
    project_ui_settings
SET
    update_time = now(),
    primary_color = $3,
    detect_dark_mode_enabled = $4,
    dark_mode_primary_color = $5,
    log_in_layout = $6,
    auto_create_organizations = $7
WHERE
    id = $1
    AND project_id = $2
RETURNING
    id, project_id, primary_color, detect_dark_mode_enabled, dark_mode_primary_color, create_time, update_time, log_in_layout, auto_create_organizations
`

type UpdateProjectUISettingsParams struct {
	ID                      uuid.UUID
	ProjectID               uuid.UUID
	PrimaryColor            *string
	DetectDarkModeEnabled   bool
	DarkModePrimaryColor    *string
	LogInLayout             LogInLayout
	AutoCreateOrganizations bool
}

func (q *Queries) UpdateProjectUISettings(ctx context.Context, arg UpdateProjectUISettingsParams) (ProjectUiSetting, error) {
	row := q.db.QueryRow(ctx, updateProjectUISettings,
		arg.ID,
		arg.ProjectID,
		arg.PrimaryColor,
		arg.DetectDarkModeEnabled,
		arg.DarkModePrimaryColor,
		arg.LogInLayout,
		arg.AutoCreateOrganizations,
	)
	var i ProjectUiSetting
	err := row.Scan(
		&i.ID,
		&i.ProjectID,
		&i.PrimaryColor,
		&i.DetectDarkModeEnabled,
		&i.DarkModePrimaryColor,
		&i.CreateTime,
		&i.UpdateTime,
		&i.LogInLayout,
		&i.AutoCreateOrganizations,
	)
	return i, err
}

const updateProjectVaultDomain = `-- name: UpdateProjectVaultDomain :one
UPDATE
    projects
SET
    vault_domain = $2,
    cookie_domain = $3
WHERE
    id = $1
RETURNING
    id, organization_id, log_in_with_password, log_in_with_google, log_in_with_microsoft, google_oauth_client_id, microsoft_oauth_client_id, google_oauth_client_secret_ciphertext, microsoft_oauth_client_secret_ciphertext, display_name, create_time, update_time, logins_disabled, log_in_with_authenticator_app, log_in_with_passkey, log_in_with_email, log_in_with_saml, redirect_uri, after_login_redirect_uri, after_signup_redirect_uri, vault_domain, email_send_from_domain, cookie_domain, email_quota_daily, stripe_customer_id, entitled_custom_vault_domains, entitled_backend_api_keys, log_in_with_github, github_oauth_client_id, github_oauth_client_secret_ciphertext, api_keys_enabled, api_key_secret_token_prefix
`

type UpdateProjectVaultDomainParams struct {
	ID           uuid.UUID
	VaultDomain  string
	CookieDomain string
}

func (q *Queries) UpdateProjectVaultDomain(ctx context.Context, arg UpdateProjectVaultDomainParams) (Project, error) {
	row := q.db.QueryRow(ctx, updateProjectVaultDomain, arg.ID, arg.VaultDomain, arg.CookieDomain)
	var i Project
	err := row.Scan(
		&i.ID,
		&i.OrganizationID,
		&i.LogInWithPassword,
		&i.LogInWithGoogle,
		&i.LogInWithMicrosoft,
		&i.GoogleOauthClientID,
		&i.MicrosoftOauthClientID,
		&i.GoogleOauthClientSecretCiphertext,
		&i.MicrosoftOauthClientSecretCiphertext,
		&i.DisplayName,
		&i.CreateTime,
		&i.UpdateTime,
		&i.LoginsDisabled,
		&i.LogInWithAuthenticatorApp,
		&i.LogInWithPasskey,
		&i.LogInWithEmail,
		&i.LogInWithSaml,
		&i.RedirectUri,
		&i.AfterLoginRedirectUri,
		&i.AfterSignupRedirectUri,
		&i.VaultDomain,
		&i.EmailSendFromDomain,
		&i.CookieDomain,
		&i.EmailQuotaDaily,
		&i.StripeCustomerID,
		&i.EntitledCustomVaultDomains,
		&i.EntitledBackendApiKeys,
		&i.LogInWithGithub,
		&i.GithubOauthClientID,
		&i.GithubOauthClientSecretCiphertext,
		&i.ApiKeysEnabled,
		&i.ApiKeySecretTokenPrefix,
	)
	return i, err
}

const updatePublishableKey = `-- name: UpdatePublishableKey :one
UPDATE
    publishable_keys
SET
    update_time = now(),
    display_name = $2,
    dev_mode = $3
WHERE
    id = $1
RETURNING
    id, project_id, create_time, update_time, display_name, dev_mode
`

type UpdatePublishableKeyParams struct {
	ID          uuid.UUID
	DisplayName string
	DevMode     bool
}

func (q *Queries) UpdatePublishableKey(ctx context.Context, arg UpdatePublishableKeyParams) (PublishableKey, error) {
	row := q.db.QueryRow(ctx, updatePublishableKey, arg.ID, arg.DisplayName, arg.DevMode)
	var i PublishableKey
	err := row.Scan(
		&i.ID,
		&i.ProjectID,
		&i.CreateTime,
		&i.UpdateTime,
		&i.DisplayName,
		&i.DevMode,
	)
	return i, err
}

const updateRole = `-- name: UpdateRole :one
UPDATE
    roles
SET
    update_time = now(),
    display_name = $2,
    description = $3
WHERE
    id = $1
RETURNING
    id, project_id, organization_id, create_time, update_time, display_name, description
`

type UpdateRoleParams struct {
	ID          uuid.UUID
	DisplayName string
	Description string
}

func (q *Queries) UpdateRole(ctx context.Context, arg UpdateRoleParams) (Role, error) {
	row := q.db.QueryRow(ctx, updateRole, arg.ID, arg.DisplayName, arg.Description)
	var i Role
	err := row.Scan(
		&i.ID,
		&i.ProjectID,
		&i.OrganizationID,
		&i.CreateTime,
		&i.UpdateTime,
		&i.DisplayName,
		&i.Description,
	)
	return i, err
}

const updateSAMLConnection = `-- name: UpdateSAMLConnection :one
UPDATE
    saml_connections
SET
    update_time = now(),
    is_primary = $1,
    idp_redirect_url = $2,
    idp_x509_certificate = $3,
    idp_entity_id = $4
WHERE
    id = $5
RETURNING
    id, organization_id, create_time, is_primary, idp_redirect_url, idp_x509_certificate, idp_entity_id, update_time
`

type UpdateSAMLConnectionParams struct {
	IsPrimary          bool
	IdpRedirectUrl     *string
	IdpX509Certificate []byte
	IdpEntityID        *string
	ID                 uuid.UUID
}

func (q *Queries) UpdateSAMLConnection(ctx context.Context, arg UpdateSAMLConnectionParams) (SamlConnection, error) {
	row := q.db.QueryRow(ctx, updateSAMLConnection,
		arg.IsPrimary,
		arg.IdpRedirectUrl,
		arg.IdpX509Certificate,
		arg.IdpEntityID,
		arg.ID,
	)
	var i SamlConnection
	err := row.Scan(
		&i.ID,
		&i.OrganizationID,
		&i.CreateTime,
		&i.IsPrimary,
		&i.IdpRedirectUrl,
		&i.IdpX509Certificate,
		&i.IdpEntityID,
		&i.UpdateTime,
	)
	return i, err
}

const updateSCIMAPIKey = `-- name: UpdateSCIMAPIKey :one
UPDATE
    scim_api_keys
SET
    update_time = now(),
    display_name = $1
WHERE
    id = $2
RETURNING
    id, organization_id, secret_token_sha256, display_name, create_time, update_time
`

type UpdateSCIMAPIKeyParams struct {
	DisplayName string
	ID          uuid.UUID
}

func (q *Queries) UpdateSCIMAPIKey(ctx context.Context, arg UpdateSCIMAPIKeyParams) (ScimApiKey, error) {
	row := q.db.QueryRow(ctx, updateSCIMAPIKey, arg.DisplayName, arg.ID)
	var i ScimApiKey
	err := row.Scan(
		&i.ID,
		&i.OrganizationID,
		&i.SecretTokenSha256,
		&i.DisplayName,
		&i.CreateTime,
		&i.UpdateTime,
	)
	return i, err
}

const updateUser = `-- name: UpdateUser :one
UPDATE
    users
SET
    update_time = now(),
    email = $2,
    google_user_id = $3,
    microsoft_user_id = $4,
    github_user_id = $8,
    is_owner = $5,
    display_name = $6,
    profile_picture_url = $7
WHERE
    id = $1
RETURNING
    id, organization_id, password_bcrypt, google_user_id, microsoft_user_id, email, create_time, update_time, deactivate_time, is_owner, failed_password_attempts, password_lockout_expire_time, authenticator_app_secret_ciphertext, failed_authenticator_app_attempts, authenticator_app_lockout_expire_time, authenticator_app_recovery_code_sha256s, display_name, profile_picture_url, github_user_id
`

type UpdateUserParams struct {
	ID                uuid.UUID
	Email             string
	GoogleUserID      *string
	MicrosoftUserID   *string
	IsOwner           bool
	DisplayName       *string
	ProfilePictureUrl *string
	GithubUserID      *string
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, updateUser,
		arg.ID,
		arg.Email,
		arg.GoogleUserID,
		arg.MicrosoftUserID,
		arg.IsOwner,
		arg.DisplayName,
		arg.ProfilePictureUrl,
		arg.GithubUserID,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.OrganizationID,
		&i.PasswordBcrypt,
		&i.GoogleUserID,
		&i.MicrosoftUserID,
		&i.Email,
		&i.CreateTime,
		&i.UpdateTime,
		&i.DeactivateTime,
		&i.IsOwner,
		&i.FailedPasswordAttempts,
		&i.PasswordLockoutExpireTime,
		&i.AuthenticatorAppSecretCiphertext,
		&i.FailedAuthenticatorAppAttempts,
		&i.AuthenticatorAppLockoutExpireTime,
		&i.AuthenticatorAppRecoveryCodeSha256s,
		&i.DisplayName,
		&i.ProfilePictureUrl,
		&i.GithubUserID,
	)
	return i, err
}

const updateUserPassword = `-- name: UpdateUserPassword :one
UPDATE
    users
SET
    update_time = now(),
    password_bcrypt = $2
WHERE
    id = $1
RETURNING
    id, organization_id, password_bcrypt, google_user_id, microsoft_user_id, email, create_time, update_time, deactivate_time, is_owner, failed_password_attempts, password_lockout_expire_time, authenticator_app_secret_ciphertext, failed_authenticator_app_attempts, authenticator_app_lockout_expire_time, authenticator_app_recovery_code_sha256s, display_name, profile_picture_url, github_user_id
`

type UpdateUserPasswordParams struct {
	ID             uuid.UUID
	PasswordBcrypt *string
}

func (q *Queries) UpdateUserPassword(ctx context.Context, arg UpdateUserPasswordParams) (User, error) {
	row := q.db.QueryRow(ctx, updateUserPassword, arg.ID, arg.PasswordBcrypt)
	var i User
	err := row.Scan(
		&i.ID,
		&i.OrganizationID,
		&i.PasswordBcrypt,
		&i.GoogleUserID,
		&i.MicrosoftUserID,
		&i.Email,
		&i.CreateTime,
		&i.UpdateTime,
		&i.DeactivateTime,
		&i.IsOwner,
		&i.FailedPasswordAttempts,
		&i.PasswordLockoutExpireTime,
		&i.AuthenticatorAppSecretCiphertext,
		&i.FailedAuthenticatorAppAttempts,
		&i.AuthenticatorAppLockoutExpireTime,
		&i.AuthenticatorAppRecoveryCodeSha256s,
		&i.DisplayName,
		&i.ProfilePictureUrl,
		&i.GithubUserID,
	)
	return i, err
}

const upsertAction = `-- name: UpsertAction :exec
INSERT INTO actions (id, project_id, name, description)
    VALUES ($1, $2, $3, $4)
ON CONFLICT (project_id, name)
    DO NOTHING
`

type UpsertActionParams struct {
	ID          uuid.UUID
	ProjectID   uuid.UUID
	Name        string
	Description string
}

func (q *Queries) UpsertAction(ctx context.Context, arg UpsertActionParams) error {
	_, err := q.db.Exec(ctx, upsertAction,
		arg.ID,
		arg.ProjectID,
		arg.Name,
		arg.Description,
	)
	return err
}

const upsertProjectTrustedDomain = `-- name: UpsertProjectTrustedDomain :exec
INSERT INTO project_trusted_domains (id, project_id, DOMAIN)
    VALUES ($1, $2, $3)
ON CONFLICT (project_id, DOMAIN)
    DO NOTHING
`

type UpsertProjectTrustedDomainParams struct {
	ID        uuid.UUID
	ProjectID uuid.UUID
	Domain    string
}

func (q *Queries) UpsertProjectTrustedDomain(ctx context.Context, arg UpsertProjectTrustedDomainParams) error {
	_, err := q.db.Exec(ctx, upsertProjectTrustedDomain, arg.ID, arg.ProjectID, arg.Domain)
	return err
}

const upsertRoleAction = `-- name: UpsertRoleAction :exec
INSERT INTO role_actions (id, role_id, action_id)
    VALUES ($1, $2, $3)
ON CONFLICT (role_id, action_id)
    DO NOTHING
`

type UpsertRoleActionParams struct {
	ID       uuid.UUID
	RoleID   uuid.UUID
	ActionID uuid.UUID
}

func (q *Queries) UpsertRoleAction(ctx context.Context, arg UpsertRoleActionParams) error {
	_, err := q.db.Exec(ctx, upsertRoleAction, arg.ID, arg.RoleID, arg.ActionID)
	return err
}

const upsertUserRoleAssignment = `-- name: UpsertUserRoleAssignment :exec
INSERT INTO user_role_assignments (id, role_id, user_id)
    VALUES ($1, $2, $3)
ON CONFLICT (role_id, user_id)
    DO NOTHING
`

type UpsertUserRoleAssignmentParams struct {
	ID     uuid.UUID
	RoleID uuid.UUID
	UserID uuid.UUID
}

func (q *Queries) UpsertUserRoleAssignment(ctx context.Context, arg UpsertUserRoleAssignmentParams) error {
	_, err := q.db.Exec(ctx, upsertUserRoleAssignment, arg.ID, arg.RoleID, arg.UserID)
	return err
}

const upsertVaultDomainSettings = `-- name: UpsertVaultDomainSettings :one
INSERT INTO vault_domain_settings (project_id, pending_domain)
    VALUES ($1, $2)
ON CONFLICT (project_id)
    DO UPDATE SET
        pending_domain = excluded.pending_domain
    RETURNING
        project_id, pending_domain
`

type UpsertVaultDomainSettingsParams struct {
	ProjectID     uuid.UUID
	PendingDomain string
}

func (q *Queries) UpsertVaultDomainSettings(ctx context.Context, arg UpsertVaultDomainSettingsParams) (VaultDomainSetting, error) {
	row := q.db.QueryRow(ctx, upsertVaultDomainSettings, arg.ProjectID, arg.PendingDomain)
	var i VaultDomainSetting
	err := row.Scan(&i.ProjectID, &i.PendingDomain)
	return i, err
}
