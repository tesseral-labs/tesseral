// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0

package queries

import (
	"database/sql/driver"
	"fmt"
	"time"

	"github.com/google/uuid"
)

type AuthMethod string

const (
	AuthMethodEmail     AuthMethod = "email"
	AuthMethodGoogle    AuthMethod = "google"
	AuthMethodMicrosoft AuthMethod = "microsoft"
)

func (e *AuthMethod) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = AuthMethod(s)
	case string:
		*e = AuthMethod(s)
	default:
		return fmt.Errorf("unsupported scan type for AuthMethod: %T", src)
	}
	return nil
}

type NullAuthMethod struct {
	AuthMethod AuthMethod
	Valid      bool // Valid is true if AuthMethod is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullAuthMethod) Scan(value interface{}) error {
	if value == nil {
		ns.AuthMethod, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.AuthMethod.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullAuthMethod) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.AuthMethod), nil
}

type LogInLayout string

const (
	LogInLayoutCentered   LogInLayout = "centered"
	LogInLayoutSideBySide LogInLayout = "side_by_side"
)

func (e *LogInLayout) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = LogInLayout(s)
	case string:
		*e = LogInLayout(s)
	default:
		return fmt.Errorf("unsupported scan type for LogInLayout: %T", src)
	}
	return nil
}

type NullLogInLayout struct {
	LogInLayout LogInLayout
	Valid       bool // Valid is true if LogInLayout is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullLogInLayout) Scan(value interface{}) error {
	if value == nil {
		ns.LogInLayout, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.LogInLayout.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullLogInLayout) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.LogInLayout), nil
}

type PrimaryLoginFactor string

const (
	PrimaryLoginFactorEmail          PrimaryLoginFactor = "email"
	PrimaryLoginFactorGoogleOauth    PrimaryLoginFactor = "google_oauth"
	PrimaryLoginFactorMicrosoftOauth PrimaryLoginFactor = "microsoft_oauth"
)

func (e *PrimaryLoginFactor) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = PrimaryLoginFactor(s)
	case string:
		*e = PrimaryLoginFactor(s)
	default:
		return fmt.Errorf("unsupported scan type for PrimaryLoginFactor: %T", src)
	}
	return nil
}

type NullPrimaryLoginFactor struct {
	PrimaryLoginFactor PrimaryLoginFactor
	Valid              bool // Valid is true if PrimaryLoginFactor is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullPrimaryLoginFactor) Scan(value interface{}) error {
	if value == nil {
		ns.PrimaryLoginFactor, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.PrimaryLoginFactor.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullPrimaryLoginFactor) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.PrimaryLoginFactor), nil
}

type IntermediateSession struct {
	ID                                  uuid.UUID
	ProjectID                           uuid.UUID
	CreateTime                          *time.Time
	ExpireTime                          *time.Time
	Email                               *string
	GoogleOauthStateSha256              []byte
	MicrosoftOauthStateSha256           []byte
	GoogleHostedDomain                  *string
	GoogleUserID                        *string
	MicrosoftTenantID                   *string
	MicrosoftUserID                     *string
	PasswordVerified                    bool
	OrganizationID                      *uuid.UUID
	UpdateTime                          *time.Time
	SecretTokenSha256                   []byte
	NewUserPasswordBcrypt               *string
	EmailVerificationChallengeSha256    []byte
	EmailVerificationChallengeCompleted bool
	PasskeyCredentialID                 []byte
	PasskeyPublicKey                    []byte
	PasskeyAaguid                       *string
	PasskeyVerifyChallengeSha256        []byte
	PasskeyVerified                     bool
	AuthenticatorAppSecretCiphertext    []byte
	AuthenticatorAppVerified            bool
	AuthenticatorAppRecoveryCodeBcrypts [][]byte
	PrimaryLoginFactor                  *PrimaryLoginFactor
	PasskeyRpID                         *string
}

type OauthVerifiedEmail struct {
	ID              uuid.UUID
	ProjectID       uuid.UUID
	CreateTime      *time.Time
	Email           string
	GoogleUserID    *string
	MicrosoftUserID *string
}

type Organization struct {
	ID                        uuid.UUID
	ProjectID                 uuid.UUID
	DisplayName               string
	ScimEnabled               bool
	CreateTime                *time.Time
	UpdateTime                *time.Time
	LoginsDisabled            bool
	LogInWithGoogle           bool
	LogInWithMicrosoft        bool
	LogInWithPassword         bool
	LogInWithAuthenticatorApp bool
	LogInWithPasskey          bool
	RequireMfa                bool
	LogInWithEmail            bool
	LogInWithSaml             bool
}

type OrganizationDomain struct {
	ID             uuid.UUID
	OrganizationID uuid.UUID
	Domain         string
}

type OrganizationGoogleHostedDomain struct {
	ID                 uuid.UUID
	OrganizationID     uuid.UUID
	GoogleHostedDomain string
}

type OrganizationMicrosoftTenantID struct {
	ID                uuid.UUID
	OrganizationID    uuid.UUID
	MicrosoftTenantID string
}

type Passkey struct {
	ID           uuid.UUID
	UserID       uuid.UUID
	CreateTime   *time.Time
	UpdateTime   *time.Time
	CredentialID []byte
	PublicKey    []byte
	Aaguid       string
	Disabled     bool
	RpID         string
}

type Project struct {
	ID                                   uuid.UUID
	OrganizationID                       *uuid.UUID
	LogInWithPassword                    bool
	LogInWithGoogle                      bool
	LogInWithMicrosoft                   bool
	GoogleOauthClientID                  *string
	MicrosoftOauthClientID               *string
	GoogleOauthClientSecretCiphertext    []byte
	MicrosoftOauthClientSecretCiphertext []byte
	DisplayName                          string
	CreateTime                           *time.Time
	UpdateTime                           *time.Time
	LoginsDisabled                       bool
	LogInWithAuthenticatorApp            bool
	LogInWithPasskey                     bool
	LogInWithEmail                       bool
	LogInWithSaml                        bool
	RedirectUri                          string
	AfterLoginRedirectUri                *string
	AfterSignupRedirectUri               *string
	VaultDomain                          string
	EmailSendFromDomain                  string
}

type ProjectApiKey struct {
	ID                uuid.UUID
	ProjectID         uuid.UUID
	SecretTokenSha256 []byte
	DisplayName       string
	CreateTime        *time.Time
	UpdateTime        *time.Time
}

type ProjectTrustedDomain struct {
	ID        uuid.UUID
	ProjectID uuid.UUID
	Domain    string
}

type ProjectUiSetting struct {
	ID                    uuid.UUID
	ProjectID             uuid.UUID
	PrimaryColor          *string
	DetectDarkModeEnabled bool
	DarkModePrimaryColor  *string
	CreateTime            *time.Time
	UpdateTime            *time.Time
	LogInLayout           LogInLayout
}

type PublishableKey struct {
	ID          uuid.UUID
	ProjectID   uuid.UUID
	CreateTime  *time.Time
	UpdateTime  *time.Time
	DisplayName string
}

type SamlConnection struct {
	ID                 uuid.UUID
	OrganizationID     uuid.UUID
	CreateTime         *time.Time
	IsPrimary          bool
	IdpRedirectUrl     *string
	IdpX509Certificate []byte
	IdpEntityID        *string
	UpdateTime         *time.Time
}

type ScimApiKey struct {
	ID                uuid.UUID
	OrganizationID    uuid.UUID
	SecretTokenSha256 []byte
	DisplayName       string
	CreateTime        *time.Time
	UpdateTime        *time.Time
}

type Session struct {
	ID                 uuid.UUID
	UserID             uuid.UUID
	CreateTime         *time.Time
	ExpireTime         *time.Time
	RefreshTokenSha256 []byte
	ImpersonatorUserID *uuid.UUID
	LastActiveTime     *time.Time
}

type SessionSigningKey struct {
	ID                   uuid.UUID
	ProjectID            uuid.UUID
	PublicKey            []byte
	PrivateKeyCipherText []byte
	CreateTime           *time.Time
	ExpireTime           *time.Time
}

type User struct {
	ID                                  uuid.UUID
	OrganizationID                      uuid.UUID
	PasswordBcrypt                      *string
	GoogleUserID                        *string
	MicrosoftUserID                     *string
	Email                               string
	CreateTime                          *time.Time
	UpdateTime                          *time.Time
	DeactivateTime                      *time.Time
	IsOwner                             bool
	FailedPasswordAttempts              int32
	PasswordLockoutExpireTime           *time.Time
	AuthenticatorAppSecretCiphertext    []byte
	AuthenticatorAppRecoveryCodeBcrypts [][]byte
	FailedAuthenticatorAppAttempts      int32
	AuthenticatorAppLockoutExpireTime   *time.Time
}

type UserAuthenticatorAppChallenge struct {
	UserID                           uuid.UUID
	AuthenticatorAppSecretCiphertext []byte
}

type UserImpersonationToken struct {
	ID                uuid.UUID
	ImpersonatorID    uuid.UUID
	CreateTime        *time.Time
	ExpireTime        *time.Time
	ImpersonatedID    uuid.UUID
	SecretTokenSha256 []byte
}

type UserInvite struct {
	ID             uuid.UUID
	OrganizationID uuid.UUID
	CreateTime     *time.Time
	UpdateTime     *time.Time
	Email          string
	IsOwner        bool
}

type VaultDomainSetting struct {
	ProjectID     uuid.UUID
	PendingDomain string
}
