syntax = "proto3";

package tesseral.frontend.v1;

import "google/api/annotations.proto";
import "google/protobuf/timestamp.proto";
import "tesseral/frontend/v1/models.proto";

service FrontendService {
  rpc Logout(LogoutRequest) returns (LogoutResponse) {
    option (google.api.http) = {
      post: "/frontend/v1/logout"
      body: "*"
    };
  }

  rpc Refresh(RefreshRequest) returns (RefreshResponse) {
    option (google.api.http) = {
      post: "/frontend/v1/refresh"
      body: "*"
    };
  }

  rpc GetProject(GetProjectRequest) returns (GetProjectResponse) {
    option (google.api.http) = {get: "/frontend/v1/project"};
  }

  rpc GetOrganization(GetOrganizationRequest) returns (GetOrganizationResponse) {
    option (google.api.http) = {get: "/frontend/v1/organization"};
  }

  rpc UpdateOrganization(UpdateOrganizationRequest) returns (UpdateOrganizationResponse) {
    option (google.api.http) = {
      patch: "/frontend/v1/organization"
      body: "organization"
    };
  }

  rpc GetOrganizationGoogleHostedDomains(GetOrganizationGoogleHostedDomainsRequest) returns (GetOrganizationGoogleHostedDomainsResponse) {
    option (google.api.http) = {get: "/frontend/v1/google-hosted-domains"};
  }

  rpc UpdateOrganizationGoogleHostedDomains(UpdateOrganizationGoogleHostedDomainsRequest) returns (UpdateOrganizationGoogleHostedDomainsResponse) {
    option (google.api.http) = {
      patch: "/frontend/v1/google-hosted-domains"
      body: "organization_google_hosted_domains"
    };
  }

  rpc GetOrganizationMicrosoftTenantIDs(GetOrganizationMicrosoftTenantIDsRequest) returns (GetOrganizationMicrosoftTenantIDsResponse) {
    option (google.api.http) = {get: "/frontend/v1/microsoft-tenant-ids"};
  }

  rpc UpdateOrganizationMicrosoftTenantIDs(UpdateOrganizationMicrosoftTenantIDsRequest) returns (UpdateOrganizationMicrosoftTenantIDsResponse) {
    option (google.api.http) = {
      patch: "/frontend/v1/microsoft-tenant-ids"
      body: "organization_microsoft_tenant_ids"
    };
  }

  rpc ListUsers(ListUsersRequest) returns (ListUsersResponse) {
    option (google.api.http) = {get: "/frontend/v1/users"};
  }

  rpc GetUser(GetUserRequest) returns (GetUserResponse) {
    option (google.api.http) = {get: "/frontend/v1/users/{id}"};
  }

  rpc UpdateUser(UpdateUserRequest) returns (UpdateUserResponse) {
    option (google.api.http) = {
      patch: "/frontend/v1/users/{id}"
      body: "user"
    };
  }

  rpc DeleteUser(DeleteUserRequest) returns (DeleteUserResponse) {
    option (google.api.http) = {delete: "/frontend/v1/users/{id}"};
  }

  // Sets a user's password.
  rpc SetPassword(SetPasswordRequest) returns (SetPasswordResponse) {
    option (google.api.http) = {
      post: "/frontend/v1/set-user-password"
      body: "*"
    };
  }

  rpc ListSAMLConnections(ListSAMLConnectionsRequest) returns (ListSAMLConnectionsResponse) {
    option (google.api.http) = {get: "/frontend/v1/saml-connections"};
  }

  rpc GetSAMLConnection(GetSAMLConnectionRequest) returns (GetSAMLConnectionResponse) {
    option (google.api.http) = {get: "/frontend/v1/saml-connections/{id}"};
  }

  rpc CreateSAMLConnection(CreateSAMLConnectionRequest) returns (CreateSAMLConnectionResponse) {
    option (google.api.http) = {
      post: "/frontend/v1/saml-connections"
      body: "saml_connection"
    };
  }

  rpc UpdateSAMLConnection(UpdateSAMLConnectionRequest) returns (UpdateSAMLConnectionResponse) {
    option (google.api.http) = {
      patch: "/frontend/v1/saml-connections/{id}"
      body: "saml_connection"
    };
  }

  rpc DeleteSAMLConnection(DeleteSAMLConnectionRequest) returns (DeleteSAMLConnectionResponse) {
    option (google.api.http) = {delete: "/frontend/v1/saml-connections/{id}"};
  }

  rpc ListSCIMAPIKeys(ListSCIMAPIKeysRequest) returns (ListSCIMAPIKeysResponse) {
    option (google.api.http) = {get: "/frontend/v1/scim-api-keys"};
  }

  rpc GetSCIMAPIKey(GetSCIMAPIKeyRequest) returns (GetSCIMAPIKeyResponse) {
    option (google.api.http) = {get: "/frontend/v1/scim-api-keys/{id}"};
  }

  rpc CreateSCIMAPIKey(CreateSCIMAPIKeyRequest) returns (CreateSCIMAPIKeyResponse) {
    option (google.api.http) = {
      post: "/frontend/v1/scim-api-keys"
      body: "scim_api_key"
    };
  }

  rpc UpdateSCIMAPIKey(UpdateSCIMAPIKeyRequest) returns (UpdateSCIMAPIKeyResponse) {
    option (google.api.http) = {
      patch: "/frontend/v1/scim-api-keys/{id}"
      body: "scim_api_key"
    };
  }

  rpc DeleteSCIMAPIKey(DeleteSCIMAPIKeyRequest) returns (DeleteSCIMAPIKeyResponse) {
    option (google.api.http) = {delete: "/frontend/v1/scim-api-keys/{id}"};
  }

  rpc RevokeSCIMAPIKey(RevokeSCIMAPIKeyRequest) returns (RevokeSCIMAPIKeyResponse) {
    option (google.api.http) = {post: "/frontend/v1/scim-api-keys/{id}/revoke"};
  }

  rpc Whoami(WhoamiRequest) returns (WhoamiResponse) {
    option (google.api.http) = {get: "/frontend/v1/me"};
  }

  rpc ListMyPasskeys(ListMyPasskeysRequest) returns (ListMyPasskeysResponse) {
    option (google.api.http) = {get: "/frontend/v1/me/passkeys"};
  }

  rpc DeleteMyPasskey(DeleteMyPasskeyRequest) returns (DeleteMyPasskeyResponse) {
    option (google.api.http) = {delete: "/frontend/v1/me/passkeys/{id}"};
  }

  rpc GetPasskeyOptions(GetPasskeyOptionsRequest) returns (GetPasskeyOptionsResponse) {
    option (google.api.http) = {post: "/frontend/v1/me/passkeys/options"};
  }

  rpc RegisterPasskey(RegisterPasskeyRequest) returns (RegisterPasskeyResponse) {
    option (google.api.http) = {
      post: "/frontend/v1/me/passkeys/register"
      body: "*"
    };
  }

  rpc GetAuthenticatorAppOptions(GetAuthenticatorAppOptionsRequest) returns (GetAuthenticatorAppOptionsResponse) {
    option (google.api.http) = {post: "/frontend/v1/me/authenticator-app/options"};
  }

  rpc RegisterAuthenticatorApp(RegisterAuthenticatorAppRequest) returns (RegisterAuthenticatorAppResponse) {
    option (google.api.http) = {
      post: "/frontend/v1/me/authenticator-app/register"
      body: "*"
    };
  }

  rpc ListUserInvites(ListUserInvitesRequest) returns (ListUserInvitesResponse) {
    option (google.api.http) = {get: "/frontend/v1/user-invites"};
  }

  rpc GetUserInvite(GetUserInviteRequest) returns (GetUserInviteResponse) {
    option (google.api.http) = {get: "/frontend/v1/user-invites/{id}"};
  }

  rpc CreateUserInvite(CreateUserInviteRequest) returns (CreateUserInviteResponse) {
    option (google.api.http) = {
      post: "/frontend/v1/user-invites"
      body: "user_invite"
    };
  }

  rpc DeleteUserInvite(DeleteUserInviteRequest) returns (DeleteUserInviteResponse) {
    option (google.api.http) = {delete: "/frontend/v1/user-invites/{id}"};
  }

  rpc ListSwitchableOrganizations(ListSwitchableOrganizationsRequest) returns (ListSwitchableOrganizationsResponse) {
    option (google.api.http) = {get: "/frontend/v1/switch-organizations/organizations"};
  }

  // Get RBAC Policy.
  rpc GetRBACPolicy(GetRBACPolicyRequest) returns (GetRBACPolicyResponse);

  // List Roles.
  rpc ListRoles(ListRolesRequest) returns (ListRolesResponse) {
    option (google.api.http) = {get: "/frontend/v1/roles"};
  }

  // Get a Role.
  rpc GetRole(GetRoleRequest) returns (GetRoleResponse) {
    option (google.api.http) = {get: "/frontend/v1/roles/{id}"};
  }

  // Create a Role.
  rpc CreateRole(CreateRoleRequest) returns (CreateRoleResponse) {
    option (google.api.http) = {
      post: "/frontend/v1/roles"
      body: "role"
    };
  }

  // Update a Role.
  rpc UpdateRole(UpdateRoleRequest) returns (UpdateRoleResponse) {
    option (google.api.http) = {
      patch: "/frontend/v1/roles/{id}"
      body: "role"
    };
  }

  // Delete a Role.
  rpc DeleteRole(DeleteRoleRequest) returns (DeleteRoleResponse) {
    option (google.api.http) = {delete: "/frontend/v1/roles/{id}"};
  }

  // List User Role Assignments.
  rpc ListUserRoleAssignments(ListUserRoleAssignmentsRequest) returns (ListUserRoleAssignmentsResponse) {
    option (google.api.http) = {get: "/frontend/v1/user-role-assignments"};
  }

  // Get a User Role Assignment.
  rpc GetUserRoleAssignment(GetUserRoleAssignmentRequest) returns (GetUserRoleAssignmentResponse) {
    option (google.api.http) = {get: "/frontend/v1/user-role-assignments/{id}"};
  }

  // Create a User Role Assignment.
  rpc CreateUserRoleAssignment(CreateUserRoleAssignmentRequest) returns (CreateUserRoleAssignmentResponse) {
    option (google.api.http) = {
      post: "/frontend/v1/user-role-assignments"
      body: "user_role_assignment"
    };
  }

  // Delete a User Role Assignment.
  rpc DeleteUserRoleAssignment(DeleteUserRoleAssignmentRequest) returns (DeleteUserRoleAssignmentResponse) {
    option (google.api.http) = {delete: "/frontend/v1/user-role-assignments/{id}"};
  }

  // Create an API Key for an Organization.
  rpc CreateAPIKey(CreateAPIKeyRequest) returns (CreateAPIKeyResponse) {
    option (google.api.http) = {
      post: "/frontend/v1/api-keys"
      body: "*"
    };
  }

  // Delete an API Key.
  rpc DeleteAPIKey(DeleteAPIKeyRequest) returns (DeleteAPIKeyResponse) {
    option (google.api.http) = {delete: "/frontend/v1/api-keys/{id}"};
  }

  // Get an API Key.
  rpc GetAPIKey(GetAPIKeyRequest) returns (GetAPIKeyResponse) {
    option (google.api.http) = {get: "/frontend/v1/api-keys/{id}"};
  }

  // List API Keys.
  rpc ListAPIKeys(ListAPIKeysRequest) returns (ListAPIKeysResponse) {
    option (google.api.http) = {get: "/frontend/v1/api-keys"};
  }

  // Revoke an API Key.
  rpc RevokeAPIKey(RevokeAPIKeyRequest) returns (RevokeAPIKeyResponse) {
    option (google.api.http) = {post: "/frontend/v1/api-keys/{id}/revoke"};
  }

  // Update an API Key.
  rpc UpdateAPIKey(UpdateAPIKeyRequest) returns (UpdateAPIKeyResponse) {
    option (google.api.http) = {
      patch: "/frontend/v1/api-keys/{id}"
      body: "*"
    };
  }

  rpc CreateAPIKeyRoleAssignment(CreateAPIKeyRoleAssignmentRequest) returns (CreateAPIKeyRoleAssignmentResponse) {
    option (google.api.http) = {
      post: "/frontend/v1/api-key-role-assignments"
      body: "*"
    };
  }

  rpc DeleteAPIKeyRoleAssignment(DeleteAPIKeyRoleAssignmentRequest) returns (DeleteAPIKeyRoleAssignmentResponse) {
    option (google.api.http) = {delete: "/frontend/v1/api-key-role-assignments/{id}"};
  }

  rpc ListAPIKeyRoleAssignments(ListAPIKeyRoleAssignmentsRequest) returns (ListAPIKeyRoleAssignmentsResponse) {
    option (google.api.http) = {get: "/frontend/v1/api-key-role-assignments"};
  }

  rpc ListAuditLogEvents(ListAuditLogEventsRequest) returns (ListAuditLogEventsResponse) {
    option (google.api.http) = {get: "/frontend/v1/audit-log-events"};
  }
}

message LogoutRequest {}

message LogoutResponse {}

message RefreshRequest {
  string refresh_token = 1;
}

message RefreshResponse {
  string access_token = 2;
}

message GetProjectRequest {}

message GetProjectResponse {
  Project project = 1;
}

message GetOrganizationRequest {}

message GetOrganizationResponse {
  Organization organization = 1;
}

message UpdateOrganizationRequest {
  Organization organization = 1;
}

message UpdateOrganizationResponse {
  Organization organization = 1;
}

message GetOrganizationGoogleHostedDomainsRequest {
  string organization_id = 1;
}

message GetOrganizationGoogleHostedDomainsResponse {
  OrganizationGoogleHostedDomains organization_google_hosted_domains = 1;
}

message UpdateOrganizationGoogleHostedDomainsRequest {
  string organization_id = 1;
  OrganizationGoogleHostedDomains organization_google_hosted_domains = 2;
}

message UpdateOrganizationGoogleHostedDomainsResponse {
  OrganizationGoogleHostedDomains organization_google_hosted_domains = 1;
}

message GetOrganizationMicrosoftTenantIDsRequest {
  string organization_id = 1;
}

message GetOrganizationMicrosoftTenantIDsResponse {
  OrganizationMicrosoftTenantIDs organization_microsoft_tenant_ids = 1;
}

message UpdateOrganizationMicrosoftTenantIDsRequest {
  string organization_id = 1;
  OrganizationMicrosoftTenantIDs organization_microsoft_tenant_ids = 2;
}

message UpdateOrganizationMicrosoftTenantIDsResponse {
  OrganizationMicrosoftTenantIDs organization_microsoft_tenant_ids = 1;
}

message ListUsersRequest {
  string organization_id = 1;
  string page_token = 2;
}

message ListUsersResponse {
  repeated User users = 1;
  string next_page_token = 2;
}

message GetUserRequest {
  string id = 1;
}

message GetUserResponse {
  User user = 1;
}

message UpdateUserRequest {
  string id = 1;
  User user = 2;
}

message UpdateUserResponse {
  User user = 1;
}

message DeleteUserRequest {
  string id = 1;
}

message DeleteUserResponse {}

message ListSAMLConnectionsRequest {
  string page_token = 1;
}

message ListSAMLConnectionsResponse {
  repeated SAMLConnection saml_connections = 1;
  string next_page_token = 2;
}

message GetSAMLConnectionRequest {
  string id = 1;
}

message GetSAMLConnectionResponse {
  SAMLConnection saml_connection = 1;
}

message CreateSAMLConnectionRequest {
  SAMLConnection saml_connection = 1;
}

message CreateSAMLConnectionResponse {
  SAMLConnection saml_connection = 1;
}

message UpdateSAMLConnectionRequest {
  string id = 1;
  SAMLConnection saml_connection = 2;
}

message UpdateSAMLConnectionResponse {
  SAMLConnection saml_connection = 1;
}

message DeleteSAMLConnectionRequest {
  string id = 1;
}

message DeleteSAMLConnectionResponse {}

message ListSCIMAPIKeysRequest {
  string page_token = 1;
}

message ListSCIMAPIKeysResponse {
  repeated SCIMAPIKey scim_api_keys = 1;
  string next_page_token = 2;
}

message GetSCIMAPIKeyRequest {
  string id = 1;
}

message GetSCIMAPIKeyResponse {
  SCIMAPIKey scim_api_key = 1;
}

message CreateSCIMAPIKeyRequest {
  SCIMAPIKey scim_api_key = 1;
}

message CreateSCIMAPIKeyResponse {
  SCIMAPIKey scim_api_key = 1;
}

message UpdateSCIMAPIKeyRequest {
  string id = 1;
  SCIMAPIKey scim_api_key = 2;
}

message UpdateSCIMAPIKeyResponse {
  SCIMAPIKey scim_api_key = 1;
}

message DeleteSCIMAPIKeyRequest {
  string id = 1;
}

message DeleteSCIMAPIKeyResponse {}

message RevokeSCIMAPIKeyRequest {
  string id = 1;
}

message RevokeSCIMAPIKeyResponse {
  SCIMAPIKey scim_api_key = 1;
}

message WhoamiRequest {}

message WhoamiResponse {
  User user = 1;
}

message ListMyPasskeysRequest {
  string page_token = 1;
}

message ListMyPasskeysResponse {
  repeated Passkey passkeys = 1;
  string next_page_token = 2;
}

message DeleteMyPasskeyRequest {
  string id = 1;
}

message DeleteMyPasskeyResponse {}

message GetPasskeyOptionsRequest {}

message GetPasskeyOptionsResponse {
  string rp_id = 1;
  string rp_name = 2;
  string user_id = 3;
  string user_display_name = 4;
}

message RegisterPasskeyRequest {
  string attestation_object = 1;
  string rp_id = 2;
}

message RegisterPasskeyResponse {
  Passkey passkey = 1;
}

message GetAuthenticatorAppOptionsRequest {}

message GetAuthenticatorAppOptionsResponse {
  string otpauth_uri = 1;
}

message RegisterAuthenticatorAppRequest {
  string totp_code = 1;
}

message RegisterAuthenticatorAppResponse {
  repeated string recovery_codes = 1;
}

message ListUserInvitesRequest {
  string page_token = 1;
}

message ListUserInvitesResponse {
  repeated UserInvite user_invites = 1;
  string next_page_token = 2;
}

message GetUserInviteRequest {
  string id = 1;
}

message GetUserInviteResponse {
  UserInvite user_invite = 1;
}

message CreateUserInviteRequest {
  UserInvite user_invite = 1;
  bool send_email = 2;
}

message CreateUserInviteResponse {
  UserInvite user_invite = 1;
}

message DeleteUserInviteRequest {
  string id = 1;
}

message DeleteUserInviteResponse {}

message SetPasswordRequest {
  // The the user's new password.
  string password = 1;
}

message SetPasswordResponse {}

message ListSwitchableOrganizationsRequest {}

message ListSwitchableOrganizationsResponse {
  repeated SwitchableOrganization switchable_organizations = 1;
}

message GetRBACPolicyRequest {}

message GetRBACPolicyResponse {
  RBACPolicy rbac_policy = 1;
}

message ListRolesRequest {
  string organization_id = 1;
  string page_token = 2;
}

message ListRolesResponse {
  repeated Role roles = 1;
  string next_page_token = 2;
}

message GetRoleRequest {
  string id = 1;
}

message GetRoleResponse {
  Role role = 1;
}

message CreateRoleRequest {
  Role role = 1;
}

message CreateRoleResponse {
  Role role = 1;
}

message UpdateRoleRequest {
  string id = 1;
  Role role = 2;
}

message UpdateRoleResponse {
  Role role = 1;
}

message DeleteRoleRequest {
  string id = 1;
}

message DeleteRoleResponse {}

message ListUserRoleAssignmentsRequest {
  string user_id = 1;
  string role_id = 2;
  string page_token = 3;
}

message ListUserRoleAssignmentsResponse {
  repeated UserRoleAssignment user_role_assignments = 1;
  string next_page_token = 2;
}

message GetUserRoleAssignmentRequest {
  string id = 1;
}

message GetUserRoleAssignmentResponse {
  UserRoleAssignment user_role_assignment = 1;
}

message CreateUserRoleAssignmentRequest {
  UserRoleAssignment user_role_assignment = 1;
}

message CreateUserRoleAssignmentResponse {
  UserRoleAssignment user_role_assignment = 1;
}

message DeleteUserRoleAssignmentRequest {
  string id = 1;
}

message DeleteUserRoleAssignmentResponse {}

message CreateAPIKeyRequest {
  APIKey api_key = 1;
}

message CreateAPIKeyResponse {
  APIKey api_key = 1;
}

message DeleteAPIKeyRequest {
  string id = 1;
}

message DeleteAPIKeyResponse {}

message GetAPIKeyRequest {
  string id = 1;
}

message GetAPIKeyResponse {
  APIKey api_key = 1;
}

message ListAPIKeysRequest {
  string organization_id = 1;
  string page_token = 2;
}

message ListAPIKeysResponse {
  repeated APIKey api_keys = 1;
  string next_page_token = 2;
}

message RevokeAPIKeyRequest {
  string id = 1;
}

message RevokeAPIKeyResponse {}

message UpdateAPIKeyRequest {
  string id = 1;
  APIKey api_key = 2;
}

message UpdateAPIKeyResponse {
  string id = 1;
  APIKey api_key = 2;
}

message CreateAPIKeyRoleAssignmentRequest {
  APIKeyRoleAssignment api_key_role_assignment = 1;
}

message CreateAPIKeyRoleAssignmentResponse {
  APIKeyRoleAssignment api_key_role_assignment = 1;
}

message ListAPIKeyRoleAssignmentsRequest {
  string api_key_id = 1;
  string page_token = 2;
}

message ListAPIKeyRoleAssignmentsResponse {
  repeated APIKeyRoleAssignment api_key_role_assignments = 1;
  string next_page_token = 2;
}

message DeleteAPIKeyRoleAssignmentRequest {
  string id = 1;
  string api_key_id = 2;
}

message DeleteAPIKeyRoleAssignmentResponse {}

message ListAuditLogEventsRequest {
  string page_token = 1;
  google.protobuf.Timestamp filter_start_time = 2;
  google.protobuf.Timestamp filter_end_time = 3;
  string filter_event_name = 4;
  string filter_user_id = 5;
}

message ListAuditLogEventsResponse {
  repeated AuditLogEvent audit_log_events = 1;
  string next_page_token = 2;
}
