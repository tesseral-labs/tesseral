// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: queries-frontend.sql

package queries

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createPasskey = `-- name: CreatePasskey :one
INSERT INTO passkeys (id, user_id, credential_id, public_key, aaguid, rp_id)
    VALUES ($1, $2, $3, $4, $5, $6)
RETURNING
    id, user_id, create_time, update_time, credential_id, public_key, aaguid, disabled, rp_id
`

type CreatePasskeyParams struct {
	ID           uuid.UUID
	UserID       uuid.UUID
	CredentialID []byte
	PublicKey    []byte
	Aaguid       string
	RpID         string
}

func (q *Queries) CreatePasskey(ctx context.Context, arg CreatePasskeyParams) (Passkey, error) {
	row := q.db.QueryRow(ctx, createPasskey,
		arg.ID,
		arg.UserID,
		arg.CredentialID,
		arg.PublicKey,
		arg.Aaguid,
		arg.RpID,
	)
	var i Passkey
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.CreateTime,
		&i.UpdateTime,
		&i.CredentialID,
		&i.PublicKey,
		&i.Aaguid,
		&i.Disabled,
		&i.RpID,
	)
	return i, err
}

const createSAMLConnection = `-- name: CreateSAMLConnection :one
INSERT INTO saml_connections (id, organization_id, is_primary, idp_redirect_url, idp_x509_certificate, idp_entity_id)
    VALUES ($1, $2, $3, $4, $5, $6)
RETURNING
    id, organization_id, create_time, is_primary, idp_redirect_url, idp_x509_certificate, idp_entity_id, update_time
`

type CreateSAMLConnectionParams struct {
	ID                 uuid.UUID
	OrganizationID     uuid.UUID
	IsPrimary          bool
	IdpRedirectUrl     *string
	IdpX509Certificate []byte
	IdpEntityID        *string
}

func (q *Queries) CreateSAMLConnection(ctx context.Context, arg CreateSAMLConnectionParams) (SamlConnection, error) {
	row := q.db.QueryRow(ctx, createSAMLConnection,
		arg.ID,
		arg.OrganizationID,
		arg.IsPrimary,
		arg.IdpRedirectUrl,
		arg.IdpX509Certificate,
		arg.IdpEntityID,
	)
	var i SamlConnection
	err := row.Scan(
		&i.ID,
		&i.OrganizationID,
		&i.CreateTime,
		&i.IsPrimary,
		&i.IdpRedirectUrl,
		&i.IdpX509Certificate,
		&i.IdpEntityID,
		&i.UpdateTime,
	)
	return i, err
}

const createSCIMAPIKey = `-- name: CreateSCIMAPIKey :one
INSERT INTO scim_api_keys (id, organization_id, display_name, secret_token_sha256)
    VALUES ($1, $2, $3, $4)
RETURNING
    id, organization_id, secret_token_sha256, display_name, create_time, update_time
`

type CreateSCIMAPIKeyParams struct {
	ID                uuid.UUID
	OrganizationID    uuid.UUID
	DisplayName       string
	SecretTokenSha256 []byte
}

func (q *Queries) CreateSCIMAPIKey(ctx context.Context, arg CreateSCIMAPIKeyParams) (ScimApiKey, error) {
	row := q.db.QueryRow(ctx, createSCIMAPIKey,
		arg.ID,
		arg.OrganizationID,
		arg.DisplayName,
		arg.SecretTokenSha256,
	)
	var i ScimApiKey
	err := row.Scan(
		&i.ID,
		&i.OrganizationID,
		&i.SecretTokenSha256,
		&i.DisplayName,
		&i.CreateTime,
		&i.UpdateTime,
	)
	return i, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users (id, organization_id, email, password_bcrypt, google_user_id, microsoft_user_id)
    VALUES ($1, $2, $3, $4, $5, $6)
RETURNING
    id, organization_id, password_bcrypt, google_user_id, microsoft_user_id, email, create_time, update_time, deactivate_time, is_owner, failed_password_attempts, password_lockout_expire_time, authenticator_app_secret_ciphertext, authenticator_app_recovery_code_bcrypts, failed_authenticator_app_attempts, authenticator_app_lockout_expire_time
`

type CreateUserParams struct {
	ID              uuid.UUID
	OrganizationID  uuid.UUID
	Email           string
	PasswordBcrypt  *string
	GoogleUserID    *string
	MicrosoftUserID *string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.ID,
		arg.OrganizationID,
		arg.Email,
		arg.PasswordBcrypt,
		arg.GoogleUserID,
		arg.MicrosoftUserID,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.OrganizationID,
		&i.PasswordBcrypt,
		&i.GoogleUserID,
		&i.MicrosoftUserID,
		&i.Email,
		&i.CreateTime,
		&i.UpdateTime,
		&i.DeactivateTime,
		&i.IsOwner,
		&i.FailedPasswordAttempts,
		&i.PasswordLockoutExpireTime,
		&i.AuthenticatorAppSecretCiphertext,
		&i.AuthenticatorAppRecoveryCodeBcrypts,
		&i.FailedAuthenticatorAppAttempts,
		&i.AuthenticatorAppLockoutExpireTime,
	)
	return i, err
}

const createUserAuthenticatorAppChallenge = `-- name: CreateUserAuthenticatorAppChallenge :one
INSERT INTO user_authenticator_app_challenges (user_id, authenticator_app_secret_ciphertext)
    VALUES ($1, $2)
ON CONFLICT (user_id)
    DO UPDATE SET
        authenticator_app_secret_ciphertext = excluded.authenticator_app_secret_ciphertext
    RETURNING
        user_id, authenticator_app_secret_ciphertext
`

type CreateUserAuthenticatorAppChallengeParams struct {
	UserID                           uuid.UUID
	AuthenticatorAppSecretCiphertext []byte
}

func (q *Queries) CreateUserAuthenticatorAppChallenge(ctx context.Context, arg CreateUserAuthenticatorAppChallengeParams) (UserAuthenticatorAppChallenge, error) {
	row := q.db.QueryRow(ctx, createUserAuthenticatorAppChallenge, arg.UserID, arg.AuthenticatorAppSecretCiphertext)
	var i UserAuthenticatorAppChallenge
	err := row.Scan(&i.UserID, &i.AuthenticatorAppSecretCiphertext)
	return i, err
}

const createUserInvite = `-- name: CreateUserInvite :one
INSERT INTO user_invites (id, organization_id, email, is_owner)
    VALUES ($1, $2, $3, $4)
ON CONFLICT (organization_id, email)
    DO UPDATE SET
        email = excluded.email, is_owner = excluded.is_owner
    RETURNING
        id, organization_id, create_time, update_time, email, is_owner
`

type CreateUserInviteParams struct {
	ID             uuid.UUID
	OrganizationID uuid.UUID
	Email          string
	IsOwner        bool
}

func (q *Queries) CreateUserInvite(ctx context.Context, arg CreateUserInviteParams) (UserInvite, error) {
	row := q.db.QueryRow(ctx, createUserInvite,
		arg.ID,
		arg.OrganizationID,
		arg.Email,
		arg.IsOwner,
	)
	var i UserInvite
	err := row.Scan(
		&i.ID,
		&i.OrganizationID,
		&i.CreateTime,
		&i.UpdateTime,
		&i.Email,
		&i.IsOwner,
	)
	return i, err
}

const deletePasskey = `-- name: DeletePasskey :exec
DELETE FROM passkeys
WHERE id = $1
`

func (q *Queries) DeletePasskey(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deletePasskey, id)
	return err
}

const deleteSAMLConnection = `-- name: DeleteSAMLConnection :exec
DELETE FROM saml_connections
WHERE id = $1
`

func (q *Queries) DeleteSAMLConnection(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteSAMLConnection, id)
	return err
}

const deleteSCIMAPIKey = `-- name: DeleteSCIMAPIKey :exec
DELETE FROM scim_api_keys
WHERE id = $1
`

func (q *Queries) DeleteSCIMAPIKey(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteSCIMAPIKey, id)
	return err
}

const deleteUserAuthenticatorAppChallenge = `-- name: DeleteUserAuthenticatorAppChallenge :exec
DELETE FROM user_authenticator_app_challenges
WHERE user_id = $1
`

func (q *Queries) DeleteUserAuthenticatorAppChallenge(ctx context.Context, userID uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteUserAuthenticatorAppChallenge, userID)
	return err
}

const deleteUserInvite = `-- name: DeleteUserInvite :exec
DELETE FROM user_invites
WHERE id = $1
`

func (q *Queries) DeleteUserInvite(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteUserInvite, id)
	return err
}

const existsUserWithEmail = `-- name: ExistsUserWithEmail :one
SELECT
    EXISTS (
        SELECT
            id, organization_id, password_bcrypt, google_user_id, microsoft_user_id, email, create_time, update_time, deactivate_time, is_owner, failed_password_attempts, password_lockout_expire_time, authenticator_app_secret_ciphertext, authenticator_app_recovery_code_bcrypts, failed_authenticator_app_attempts, authenticator_app_lockout_expire_time
        FROM
            users
        WHERE
            organization_id = $1
            AND email = $2)
`

type ExistsUserWithEmailParams struct {
	OrganizationID uuid.UUID
	Email          string
}

func (q *Queries) ExistsUserWithEmail(ctx context.Context, arg ExistsUserWithEmailParams) (bool, error) {
	row := q.db.QueryRow(ctx, existsUserWithEmail, arg.OrganizationID, arg.Email)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const getCurrentSessionKeyByProjectID = `-- name: GetCurrentSessionKeyByProjectID :one
SELECT
    id, project_id, public_key, private_key_cipher_text, create_time, expire_time
FROM
    session_signing_keys
WHERE
    project_id = $1
ORDER BY
    create_time DESC
LIMIT 1
`

func (q *Queries) GetCurrentSessionKeyByProjectID(ctx context.Context, projectID uuid.UUID) (SessionSigningKey, error) {
	row := q.db.QueryRow(ctx, getCurrentSessionKeyByProjectID, projectID)
	var i SessionSigningKey
	err := row.Scan(
		&i.ID,
		&i.ProjectID,
		&i.PublicKey,
		&i.PrivateKeyCipherText,
		&i.CreateTime,
		&i.ExpireTime,
	)
	return i, err
}

const getOrganizationByID = `-- name: GetOrganizationByID :one
SELECT
    id, project_id, display_name, scim_enabled, create_time, update_time, logins_disabled, log_in_with_google, log_in_with_microsoft, log_in_with_password, log_in_with_authenticator_app, log_in_with_passkey, require_mfa, log_in_with_email, log_in_with_saml
FROM
    organizations
WHERE
    id = $1
`

func (q *Queries) GetOrganizationByID(ctx context.Context, id uuid.UUID) (Organization, error) {
	row := q.db.QueryRow(ctx, getOrganizationByID, id)
	var i Organization
	err := row.Scan(
		&i.ID,
		&i.ProjectID,
		&i.DisplayName,
		&i.ScimEnabled,
		&i.CreateTime,
		&i.UpdateTime,
		&i.LoginsDisabled,
		&i.LogInWithGoogle,
		&i.LogInWithMicrosoft,
		&i.LogInWithPassword,
		&i.LogInWithAuthenticatorApp,
		&i.LogInWithPasskey,
		&i.RequireMfa,
		&i.LogInWithEmail,
		&i.LogInWithSaml,
	)
	return i, err
}

const getProjectByID = `-- name: GetProjectByID :one
SELECT
    id, organization_id, log_in_with_password, log_in_with_google, log_in_with_microsoft, google_oauth_client_id, microsoft_oauth_client_id, google_oauth_client_secret_ciphertext, microsoft_oauth_client_secret_ciphertext, display_name, create_time, update_time, custom_auth_domain, auth_domain, logins_disabled, log_in_with_authenticator_app, log_in_with_passkey, log_in_with_email, log_in_with_saml
FROM
    projects
WHERE
    id = $1
`

func (q *Queries) GetProjectByID(ctx context.Context, id uuid.UUID) (Project, error) {
	row := q.db.QueryRow(ctx, getProjectByID, id)
	var i Project
	err := row.Scan(
		&i.ID,
		&i.OrganizationID,
		&i.LogInWithPassword,
		&i.LogInWithGoogle,
		&i.LogInWithMicrosoft,
		&i.GoogleOauthClientID,
		&i.MicrosoftOauthClientID,
		&i.GoogleOauthClientSecretCiphertext,
		&i.MicrosoftOauthClientSecretCiphertext,
		&i.DisplayName,
		&i.CreateTime,
		&i.UpdateTime,
		&i.CustomAuthDomain,
		&i.AuthDomain,
		&i.LoginsDisabled,
		&i.LogInWithAuthenticatorApp,
		&i.LogInWithPasskey,
		&i.LogInWithEmail,
		&i.LogInWithSaml,
	)
	return i, err
}

const getProjectPasskeyRPIDs = `-- name: GetProjectPasskeyRPIDs :many
SELECT
    project_id, rp_id
FROM
    project_passkey_rp_ids
WHERE
    project_id = $1
`

func (q *Queries) GetProjectPasskeyRPIDs(ctx context.Context, projectID uuid.UUID) ([]ProjectPasskeyRpID, error) {
	rows, err := q.db.Query(ctx, getProjectPasskeyRPIDs, projectID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ProjectPasskeyRpID
	for rows.Next() {
		var i ProjectPasskeyRpID
		if err := rows.Scan(&i.ProjectID, &i.RpID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getSAMLConnection = `-- name: GetSAMLConnection :one
SELECT
    id, organization_id, create_time, is_primary, idp_redirect_url, idp_x509_certificate, idp_entity_id, update_time
FROM
    saml_connections
WHERE
    id = $1
    AND organization_id = $2
`

type GetSAMLConnectionParams struct {
	ID             uuid.UUID
	OrganizationID uuid.UUID
}

func (q *Queries) GetSAMLConnection(ctx context.Context, arg GetSAMLConnectionParams) (SamlConnection, error) {
	row := q.db.QueryRow(ctx, getSAMLConnection, arg.ID, arg.OrganizationID)
	var i SamlConnection
	err := row.Scan(
		&i.ID,
		&i.OrganizationID,
		&i.CreateTime,
		&i.IsPrimary,
		&i.IdpRedirectUrl,
		&i.IdpX509Certificate,
		&i.IdpEntityID,
		&i.UpdateTime,
	)
	return i, err
}

const getSCIMAPIKey = `-- name: GetSCIMAPIKey :one
SELECT
    id, organization_id, secret_token_sha256, display_name, create_time, update_time
FROM
    scim_api_keys
WHERE
    id = $1
    AND organization_id = $2
`

type GetSCIMAPIKeyParams struct {
	ID             uuid.UUID
	OrganizationID uuid.UUID
}

func (q *Queries) GetSCIMAPIKey(ctx context.Context, arg GetSCIMAPIKeyParams) (ScimApiKey, error) {
	row := q.db.QueryRow(ctx, getSCIMAPIKey, arg.ID, arg.OrganizationID)
	var i ScimApiKey
	err := row.Scan(
		&i.ID,
		&i.OrganizationID,
		&i.SecretTokenSha256,
		&i.DisplayName,
		&i.CreateTime,
		&i.UpdateTime,
	)
	return i, err
}

const getSessionByID = `-- name: GetSessionByID :one
SELECT
    id, user_id, create_time, expire_time, refresh_token_sha256, impersonator_user_id, last_active_time
FROM
    sessions
WHERE
    id = $1
`

func (q *Queries) GetSessionByID(ctx context.Context, id uuid.UUID) (Session, error) {
	row := q.db.QueryRow(ctx, getSessionByID, id)
	var i Session
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.CreateTime,
		&i.ExpireTime,
		&i.RefreshTokenSha256,
		&i.ImpersonatorUserID,
		&i.LastActiveTime,
	)
	return i, err
}

const getSessionDetailsByRefreshTokenSHA256 = `-- name: GetSessionDetailsByRefreshTokenSHA256 :one
SELECT
    sessions.id AS session_id,
    users.id AS user_id,
    organizations.id AS organization_id,
    projects.id AS project_id
FROM
    sessions
    JOIN users ON sessions.user_id = users.id
    JOIN organizations ON users.organization_id = organizations.id
    JOIN projects ON projects.id = organizations.project_id
WHERE
    revoked = FALSE
    AND refresh_token_sha256 = $1
`

type GetSessionDetailsByRefreshTokenSHA256Row struct {
	SessionID      uuid.UUID
	UserID         uuid.UUID
	OrganizationID uuid.UUID
	ProjectID      uuid.UUID
}

func (q *Queries) GetSessionDetailsByRefreshTokenSHA256(ctx context.Context, refreshTokenSha256 []byte) (GetSessionDetailsByRefreshTokenSHA256Row, error) {
	row := q.db.QueryRow(ctx, getSessionDetailsByRefreshTokenSHA256, refreshTokenSha256)
	var i GetSessionDetailsByRefreshTokenSHA256Row
	err := row.Scan(
		&i.SessionID,
		&i.UserID,
		&i.OrganizationID,
		&i.ProjectID,
	)
	return i, err
}

const getSessionSigningKeyPublicKey = `-- name: GetSessionSigningKeyPublicKey :one
SELECT
    public_key
FROM
    session_signing_keys
WHERE
    project_id = $1
    AND id = $2
    AND expire_time > $3
`

type GetSessionSigningKeyPublicKeyParams struct {
	ProjectID uuid.UUID
	ID        uuid.UUID
	Now       *time.Time
}

func (q *Queries) GetSessionSigningKeyPublicKey(ctx context.Context, arg GetSessionSigningKeyPublicKeyParams) ([]byte, error) {
	row := q.db.QueryRow(ctx, getSessionSigningKeyPublicKey, arg.ProjectID, arg.ID, arg.Now)
	var public_key []byte
	err := row.Scan(&public_key)
	return public_key, err
}

const getUser = `-- name: GetUser :one
SELECT
    id, organization_id, password_bcrypt, google_user_id, microsoft_user_id, email, create_time, update_time, deactivate_time, is_owner, failed_password_attempts, password_lockout_expire_time, authenticator_app_secret_ciphertext, authenticator_app_recovery_code_bcrypts, failed_authenticator_app_attempts, authenticator_app_lockout_expire_time
FROM
    users
WHERE
    id = $1
    AND organization_id = $2
`

type GetUserParams struct {
	ID             uuid.UUID
	OrganizationID uuid.UUID
}

func (q *Queries) GetUser(ctx context.Context, arg GetUserParams) (User, error) {
	row := q.db.QueryRow(ctx, getUser, arg.ID, arg.OrganizationID)
	var i User
	err := row.Scan(
		&i.ID,
		&i.OrganizationID,
		&i.PasswordBcrypt,
		&i.GoogleUserID,
		&i.MicrosoftUserID,
		&i.Email,
		&i.CreateTime,
		&i.UpdateTime,
		&i.DeactivateTime,
		&i.IsOwner,
		&i.FailedPasswordAttempts,
		&i.PasswordLockoutExpireTime,
		&i.AuthenticatorAppSecretCiphertext,
		&i.AuthenticatorAppRecoveryCodeBcrypts,
		&i.FailedAuthenticatorAppAttempts,
		&i.AuthenticatorAppLockoutExpireTime,
	)
	return i, err
}

const getUserAuthenticatorAppChallenge = `-- name: GetUserAuthenticatorAppChallenge :one
SELECT
    user_id, authenticator_app_secret_ciphertext
FROM
    user_authenticator_app_challenges
WHERE
    user_id = $1
`

func (q *Queries) GetUserAuthenticatorAppChallenge(ctx context.Context, userID uuid.UUID) (UserAuthenticatorAppChallenge, error) {
	row := q.db.QueryRow(ctx, getUserAuthenticatorAppChallenge, userID)
	var i UserAuthenticatorAppChallenge
	err := row.Scan(&i.UserID, &i.AuthenticatorAppSecretCiphertext)
	return i, err
}

const getUserByID = `-- name: GetUserByID :one
SELECT
    id, organization_id, password_bcrypt, google_user_id, microsoft_user_id, email, create_time, update_time, deactivate_time, is_owner, failed_password_attempts, password_lockout_expire_time, authenticator_app_secret_ciphertext, authenticator_app_recovery_code_bcrypts, failed_authenticator_app_attempts, authenticator_app_lockout_expire_time
FROM
    users
WHERE
    id = $1
`

func (q *Queries) GetUserByID(ctx context.Context, id uuid.UUID) (User, error) {
	row := q.db.QueryRow(ctx, getUserByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.OrganizationID,
		&i.PasswordBcrypt,
		&i.GoogleUserID,
		&i.MicrosoftUserID,
		&i.Email,
		&i.CreateTime,
		&i.UpdateTime,
		&i.DeactivateTime,
		&i.IsOwner,
		&i.FailedPasswordAttempts,
		&i.PasswordLockoutExpireTime,
		&i.AuthenticatorAppSecretCiphertext,
		&i.AuthenticatorAppRecoveryCodeBcrypts,
		&i.FailedAuthenticatorAppAttempts,
		&i.AuthenticatorAppLockoutExpireTime,
	)
	return i, err
}

const getUserInvite = `-- name: GetUserInvite :one
SELECT
    id, organization_id, create_time, update_time, email, is_owner
FROM
    user_invites
WHERE
    id = $1
    AND organization_id = $2
`

type GetUserInviteParams struct {
	ID             uuid.UUID
	OrganizationID uuid.UUID
}

func (q *Queries) GetUserInvite(ctx context.Context, arg GetUserInviteParams) (UserInvite, error) {
	row := q.db.QueryRow(ctx, getUserInvite, arg.ID, arg.OrganizationID)
	var i UserInvite
	err := row.Scan(
		&i.ID,
		&i.OrganizationID,
		&i.CreateTime,
		&i.UpdateTime,
		&i.Email,
		&i.IsOwner,
	)
	return i, err
}

const getUserPasskey = `-- name: GetUserPasskey :one
SELECT
    id, user_id, create_time, update_time, credential_id, public_key, aaguid, disabled, rp_id
FROM
    passkeys
WHERE
    id = $1
    AND user_id = $2
`

type GetUserPasskeyParams struct {
	ID     uuid.UUID
	UserID uuid.UUID
}

func (q *Queries) GetUserPasskey(ctx context.Context, arg GetUserPasskeyParams) (Passkey, error) {
	row := q.db.QueryRow(ctx, getUserPasskey, arg.ID, arg.UserID)
	var i Passkey
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.CreateTime,
		&i.UpdateTime,
		&i.CredentialID,
		&i.PublicKey,
		&i.Aaguid,
		&i.Disabled,
		&i.RpID,
	)
	return i, err
}

const invalidateSession = `-- name: InvalidateSession :exec
UPDATE
    sessions
SET
    update_time = now(),
    refresh_token_sha256 = NULL
WHERE
    id = $1
`

func (q *Queries) InvalidateSession(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, invalidateSession, id)
	return err
}

const listPasskeys = `-- name: ListPasskeys :many
SELECT
    id, user_id, create_time, update_time, credential_id, public_key, aaguid, disabled, rp_id
FROM
    passkeys
WHERE
    user_id = $1
    AND id >= $2
ORDER BY
    id
LIMIT $3
`

type ListPasskeysParams struct {
	UserID uuid.UUID
	ID     uuid.UUID
	Limit  int32
}

func (q *Queries) ListPasskeys(ctx context.Context, arg ListPasskeysParams) ([]Passkey, error) {
	rows, err := q.db.Query(ctx, listPasskeys, arg.UserID, arg.ID, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Passkey
	for rows.Next() {
		var i Passkey
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.CreateTime,
			&i.UpdateTime,
			&i.CredentialID,
			&i.PublicKey,
			&i.Aaguid,
			&i.Disabled,
			&i.RpID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listSAMLConnections = `-- name: ListSAMLConnections :many
SELECT
    id, organization_id, create_time, is_primary, idp_redirect_url, idp_x509_certificate, idp_entity_id, update_time
FROM
    saml_connections
WHERE
    organization_id = $1
    AND id >= $2
ORDER BY
    id
LIMIT $3
`

type ListSAMLConnectionsParams struct {
	OrganizationID uuid.UUID
	ID             uuid.UUID
	Limit          int32
}

func (q *Queries) ListSAMLConnections(ctx context.Context, arg ListSAMLConnectionsParams) ([]SamlConnection, error) {
	rows, err := q.db.Query(ctx, listSAMLConnections, arg.OrganizationID, arg.ID, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SamlConnection
	for rows.Next() {
		var i SamlConnection
		if err := rows.Scan(
			&i.ID,
			&i.OrganizationID,
			&i.CreateTime,
			&i.IsPrimary,
			&i.IdpRedirectUrl,
			&i.IdpX509Certificate,
			&i.IdpEntityID,
			&i.UpdateTime,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listSCIMAPIKeys = `-- name: ListSCIMAPIKeys :many
SELECT
    id, organization_id, secret_token_sha256, display_name, create_time, update_time
FROM
    scim_api_keys
WHERE
    organization_id = $1
    AND id >= $2
ORDER BY
    id
LIMIT $3
`

type ListSCIMAPIKeysParams struct {
	OrganizationID uuid.UUID
	ID             uuid.UUID
	Limit          int32
}

func (q *Queries) ListSCIMAPIKeys(ctx context.Context, arg ListSCIMAPIKeysParams) ([]ScimApiKey, error) {
	rows, err := q.db.Query(ctx, listSCIMAPIKeys, arg.OrganizationID, arg.ID, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ScimApiKey
	for rows.Next() {
		var i ScimApiKey
		if err := rows.Scan(
			&i.ID,
			&i.OrganizationID,
			&i.SecretTokenSha256,
			&i.DisplayName,
			&i.CreateTime,
			&i.UpdateTime,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listUserInvites = `-- name: ListUserInvites :many
SELECT
    id, organization_id, create_time, update_time, email, is_owner
FROM
    user_invites
WHERE
    organization_id = $1
    AND id >= $2
ORDER BY
    id
LIMIT $3
`

type ListUserInvitesParams struct {
	OrganizationID uuid.UUID
	ID             uuid.UUID
	Limit          int32
}

func (q *Queries) ListUserInvites(ctx context.Context, arg ListUserInvitesParams) ([]UserInvite, error) {
	rows, err := q.db.Query(ctx, listUserInvites, arg.OrganizationID, arg.ID, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []UserInvite
	for rows.Next() {
		var i UserInvite
		if err := rows.Scan(
			&i.ID,
			&i.OrganizationID,
			&i.CreateTime,
			&i.UpdateTime,
			&i.Email,
			&i.IsOwner,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listUsers = `-- name: ListUsers :many
SELECT
    id, organization_id, password_bcrypt, google_user_id, microsoft_user_id, email, create_time, update_time, deactivate_time, is_owner, failed_password_attempts, password_lockout_expire_time, authenticator_app_secret_ciphertext, authenticator_app_recovery_code_bcrypts, failed_authenticator_app_attempts, authenticator_app_lockout_expire_time
FROM
    users
WHERE
    organization_id = $1
    AND id >= $2
ORDER BY
    id
LIMIT $3
`

type ListUsersParams struct {
	OrganizationID uuid.UUID
	ID             uuid.UUID
	Limit          int32
}

func (q *Queries) ListUsers(ctx context.Context, arg ListUsersParams) ([]User, error) {
	rows, err := q.db.Query(ctx, listUsers, arg.OrganizationID, arg.ID, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.OrganizationID,
			&i.PasswordBcrypt,
			&i.GoogleUserID,
			&i.MicrosoftUserID,
			&i.Email,
			&i.CreateTime,
			&i.UpdateTime,
			&i.DeactivateTime,
			&i.IsOwner,
			&i.FailedPasswordAttempts,
			&i.PasswordLockoutExpireTime,
			&i.AuthenticatorAppSecretCiphertext,
			&i.AuthenticatorAppRecoveryCodeBcrypts,
			&i.FailedAuthenticatorAppAttempts,
			&i.AuthenticatorAppLockoutExpireTime,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const revokeSCIMAPIKey = `-- name: RevokeSCIMAPIKey :one
UPDATE
    scim_api_keys
SET
    update_time = now(),
    secret_token_sha256 = NULL
WHERE
    id = $1
RETURNING
    id, organization_id, secret_token_sha256, display_name, create_time, update_time
`

func (q *Queries) RevokeSCIMAPIKey(ctx context.Context, id uuid.UUID) (ScimApiKey, error) {
	row := q.db.QueryRow(ctx, revokeSCIMAPIKey, id)
	var i ScimApiKey
	err := row.Scan(
		&i.ID,
		&i.OrganizationID,
		&i.SecretTokenSha256,
		&i.DisplayName,
		&i.CreateTime,
		&i.UpdateTime,
	)
	return i, err
}

const setPassword = `-- name: SetPassword :one
UPDATE
    users
SET
    update_time = now(),
    password_bcrypt = $2
WHERE
    id = $1
RETURNING
    id, organization_id, password_bcrypt, google_user_id, microsoft_user_id, email, create_time, update_time, deactivate_time, is_owner, failed_password_attempts, password_lockout_expire_time, authenticator_app_secret_ciphertext, authenticator_app_recovery_code_bcrypts, failed_authenticator_app_attempts, authenticator_app_lockout_expire_time
`

type SetPasswordParams struct {
	ID             uuid.UUID
	PasswordBcrypt *string
}

func (q *Queries) SetPassword(ctx context.Context, arg SetPasswordParams) (User, error) {
	row := q.db.QueryRow(ctx, setPassword, arg.ID, arg.PasswordBcrypt)
	var i User
	err := row.Scan(
		&i.ID,
		&i.OrganizationID,
		&i.PasswordBcrypt,
		&i.GoogleUserID,
		&i.MicrosoftUserID,
		&i.Email,
		&i.CreateTime,
		&i.UpdateTime,
		&i.DeactivateTime,
		&i.IsOwner,
		&i.FailedPasswordAttempts,
		&i.PasswordLockoutExpireTime,
		&i.AuthenticatorAppSecretCiphertext,
		&i.AuthenticatorAppRecoveryCodeBcrypts,
		&i.FailedAuthenticatorAppAttempts,
		&i.AuthenticatorAppLockoutExpireTime,
	)
	return i, err
}

const updateOrganization = `-- name: UpdateOrganization :one
UPDATE
    organizations
SET
    update_time = now(),
    display_name = $2,
    log_in_with_google = $3,
    log_in_with_microsoft = $4,
    log_in_with_email = $5,
    log_in_with_password = $6,
    log_in_with_authenticator_app = $7,
    log_in_with_passkey = $8
WHERE
    id = $1
RETURNING
    id, project_id, display_name, scim_enabled, create_time, update_time, logins_disabled, log_in_with_google, log_in_with_microsoft, log_in_with_password, log_in_with_authenticator_app, log_in_with_passkey, require_mfa, log_in_with_email, log_in_with_saml
`

type UpdateOrganizationParams struct {
	ID                        uuid.UUID
	DisplayName               string
	LogInWithGoogle           bool
	LogInWithMicrosoft        bool
	LogInWithEmail            bool
	LogInWithPassword         bool
	LogInWithAuthenticatorApp bool
	LogInWithPasskey          bool
}

func (q *Queries) UpdateOrganization(ctx context.Context, arg UpdateOrganizationParams) (Organization, error) {
	row := q.db.QueryRow(ctx, updateOrganization,
		arg.ID,
		arg.DisplayName,
		arg.LogInWithGoogle,
		arg.LogInWithMicrosoft,
		arg.LogInWithEmail,
		arg.LogInWithPassword,
		arg.LogInWithAuthenticatorApp,
		arg.LogInWithPasskey,
	)
	var i Organization
	err := row.Scan(
		&i.ID,
		&i.ProjectID,
		&i.DisplayName,
		&i.ScimEnabled,
		&i.CreateTime,
		&i.UpdateTime,
		&i.LoginsDisabled,
		&i.LogInWithGoogle,
		&i.LogInWithMicrosoft,
		&i.LogInWithPassword,
		&i.LogInWithAuthenticatorApp,
		&i.LogInWithPasskey,
		&i.RequireMfa,
		&i.LogInWithEmail,
		&i.LogInWithSaml,
	)
	return i, err
}

const updatePrimarySAMLConnection = `-- name: UpdatePrimarySAMLConnection :exec
UPDATE
    saml_connections
SET
    is_primary = (id = $1)
WHERE
    organization_id = $2
`

type UpdatePrimarySAMLConnectionParams struct {
	ID             uuid.UUID
	OrganizationID uuid.UUID
}

func (q *Queries) UpdatePrimarySAMLConnection(ctx context.Context, arg UpdatePrimarySAMLConnectionParams) error {
	_, err := q.db.Exec(ctx, updatePrimarySAMLConnection, arg.ID, arg.OrganizationID)
	return err
}

const updateSAMLConnection = `-- name: UpdateSAMLConnection :one
UPDATE
    saml_connections
SET
    update_time = now(),
    is_primary = $1,
    idp_redirect_url = $2,
    idp_x509_certificate = $3,
    idp_entity_id = $4
WHERE
    id = $5
RETURNING
    id, organization_id, create_time, is_primary, idp_redirect_url, idp_x509_certificate, idp_entity_id, update_time
`

type UpdateSAMLConnectionParams struct {
	IsPrimary          bool
	IdpRedirectUrl     *string
	IdpX509Certificate []byte
	IdpEntityID        *string
	ID                 uuid.UUID
}

func (q *Queries) UpdateSAMLConnection(ctx context.Context, arg UpdateSAMLConnectionParams) (SamlConnection, error) {
	row := q.db.QueryRow(ctx, updateSAMLConnection,
		arg.IsPrimary,
		arg.IdpRedirectUrl,
		arg.IdpX509Certificate,
		arg.IdpEntityID,
		arg.ID,
	)
	var i SamlConnection
	err := row.Scan(
		&i.ID,
		&i.OrganizationID,
		&i.CreateTime,
		&i.IsPrimary,
		&i.IdpRedirectUrl,
		&i.IdpX509Certificate,
		&i.IdpEntityID,
		&i.UpdateTime,
	)
	return i, err
}

const updateSCIMAPIKey = `-- name: UpdateSCIMAPIKey :one
UPDATE
    scim_api_keys
SET
    update_time = now(),
    display_name = $1
WHERE
    id = $2
RETURNING
    id, organization_id, secret_token_sha256, display_name, create_time, update_time
`

type UpdateSCIMAPIKeyParams struct {
	DisplayName string
	ID          uuid.UUID
}

func (q *Queries) UpdateSCIMAPIKey(ctx context.Context, arg UpdateSCIMAPIKeyParams) (ScimApiKey, error) {
	row := q.db.QueryRow(ctx, updateSCIMAPIKey, arg.DisplayName, arg.ID)
	var i ScimApiKey
	err := row.Scan(
		&i.ID,
		&i.OrganizationID,
		&i.SecretTokenSha256,
		&i.DisplayName,
		&i.CreateTime,
		&i.UpdateTime,
	)
	return i, err
}

const updateUser = `-- name: UpdateUser :one
UPDATE
    users
SET
    update_time = now(),
    is_owner = $1
WHERE
    id = $2
RETURNING
    id, organization_id, password_bcrypt, google_user_id, microsoft_user_id, email, create_time, update_time, deactivate_time, is_owner, failed_password_attempts, password_lockout_expire_time, authenticator_app_secret_ciphertext, authenticator_app_recovery_code_bcrypts, failed_authenticator_app_attempts, authenticator_app_lockout_expire_time
`

type UpdateUserParams struct {
	IsOwner bool
	ID      uuid.UUID
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, updateUser, arg.IsOwner, arg.ID)
	var i User
	err := row.Scan(
		&i.ID,
		&i.OrganizationID,
		&i.PasswordBcrypt,
		&i.GoogleUserID,
		&i.MicrosoftUserID,
		&i.Email,
		&i.CreateTime,
		&i.UpdateTime,
		&i.DeactivateTime,
		&i.IsOwner,
		&i.FailedPasswordAttempts,
		&i.PasswordLockoutExpireTime,
		&i.AuthenticatorAppSecretCiphertext,
		&i.AuthenticatorAppRecoveryCodeBcrypts,
		&i.FailedAuthenticatorAppAttempts,
		&i.AuthenticatorAppLockoutExpireTime,
	)
	return i, err
}

const updateUserAuthenticatorApp = `-- name: UpdateUserAuthenticatorApp :one
UPDATE
    users
SET
    authenticator_app_secret_ciphertext = $1,
    authenticator_app_recovery_code_bcrypts = $2
WHERE
    id = $3
RETURNING
    id, organization_id, password_bcrypt, google_user_id, microsoft_user_id, email, create_time, update_time, deactivate_time, is_owner, failed_password_attempts, password_lockout_expire_time, authenticator_app_secret_ciphertext, authenticator_app_recovery_code_bcrypts, failed_authenticator_app_attempts, authenticator_app_lockout_expire_time
`

type UpdateUserAuthenticatorAppParams struct {
	AuthenticatorAppSecretCiphertext    []byte
	AuthenticatorAppRecoveryCodeBcrypts [][]byte
	ID                                  uuid.UUID
}

func (q *Queries) UpdateUserAuthenticatorApp(ctx context.Context, arg UpdateUserAuthenticatorAppParams) (User, error) {
	row := q.db.QueryRow(ctx, updateUserAuthenticatorApp, arg.AuthenticatorAppSecretCiphertext, arg.AuthenticatorAppRecoveryCodeBcrypts, arg.ID)
	var i User
	err := row.Scan(
		&i.ID,
		&i.OrganizationID,
		&i.PasswordBcrypt,
		&i.GoogleUserID,
		&i.MicrosoftUserID,
		&i.Email,
		&i.CreateTime,
		&i.UpdateTime,
		&i.DeactivateTime,
		&i.IsOwner,
		&i.FailedPasswordAttempts,
		&i.PasswordLockoutExpireTime,
		&i.AuthenticatorAppSecretCiphertext,
		&i.AuthenticatorAppRecoveryCodeBcrypts,
		&i.FailedAuthenticatorAppAttempts,
		&i.AuthenticatorAppLockoutExpireTime,
	)
	return i, err
}
