// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        (unknown)
// source: openauth/frontend/v1/frontend.proto

package frontendv1

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type LogoutRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LogoutRequest) Reset() {
	*x = LogoutRequest{}
	mi := &file_openauth_frontend_v1_frontend_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LogoutRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogoutRequest) ProtoMessage() {}

func (x *LogoutRequest) ProtoReflect() protoreflect.Message {
	mi := &file_openauth_frontend_v1_frontend_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogoutRequest.ProtoReflect.Descriptor instead.
func (*LogoutRequest) Descriptor() ([]byte, []int) {
	return file_openauth_frontend_v1_frontend_proto_rawDescGZIP(), []int{0}
}

type LogoutResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LogoutResponse) Reset() {
	*x = LogoutResponse{}
	mi := &file_openauth_frontend_v1_frontend_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LogoutResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogoutResponse) ProtoMessage() {}

func (x *LogoutResponse) ProtoReflect() protoreflect.Message {
	mi := &file_openauth_frontend_v1_frontend_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogoutResponse.ProtoReflect.Descriptor instead.
func (*LogoutResponse) Descriptor() ([]byte, []int) {
	return file_openauth_frontend_v1_frontend_proto_rawDescGZIP(), []int{1}
}

type RefreshRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	RefreshToken  string                 `protobuf:"bytes,1,opt,name=refresh_token,json=refreshToken,proto3" json:"refresh_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RefreshRequest) Reset() {
	*x = RefreshRequest{}
	mi := &file_openauth_frontend_v1_frontend_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RefreshRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RefreshRequest) ProtoMessage() {}

func (x *RefreshRequest) ProtoReflect() protoreflect.Message {
	mi := &file_openauth_frontend_v1_frontend_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RefreshRequest.ProtoReflect.Descriptor instead.
func (*RefreshRequest) Descriptor() ([]byte, []int) {
	return file_openauth_frontend_v1_frontend_proto_rawDescGZIP(), []int{2}
}

func (x *RefreshRequest) GetRefreshToken() string {
	if x != nil {
		return x.RefreshToken
	}
	return ""
}

type RefreshResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	AccessToken   string                 `protobuf:"bytes,2,opt,name=access_token,json=accessToken,proto3" json:"access_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RefreshResponse) Reset() {
	*x = RefreshResponse{}
	mi := &file_openauth_frontend_v1_frontend_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RefreshResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RefreshResponse) ProtoMessage() {}

func (x *RefreshResponse) ProtoReflect() protoreflect.Message {
	mi := &file_openauth_frontend_v1_frontend_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RefreshResponse.ProtoReflect.Descriptor instead.
func (*RefreshResponse) Descriptor() ([]byte, []int) {
	return file_openauth_frontend_v1_frontend_proto_rawDescGZIP(), []int{3}
}

func (x *RefreshResponse) GetAccessToken() string {
	if x != nil {
		return x.AccessToken
	}
	return ""
}

type GetProjectRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetProjectRequest) Reset() {
	*x = GetProjectRequest{}
	mi := &file_openauth_frontend_v1_frontend_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetProjectRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProjectRequest) ProtoMessage() {}

func (x *GetProjectRequest) ProtoReflect() protoreflect.Message {
	mi := &file_openauth_frontend_v1_frontend_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProjectRequest.ProtoReflect.Descriptor instead.
func (*GetProjectRequest) Descriptor() ([]byte, []int) {
	return file_openauth_frontend_v1_frontend_proto_rawDescGZIP(), []int{4}
}

type GetProjectResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Project       *Project               `protobuf:"bytes,1,opt,name=project,proto3" json:"project,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetProjectResponse) Reset() {
	*x = GetProjectResponse{}
	mi := &file_openauth_frontend_v1_frontend_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetProjectResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProjectResponse) ProtoMessage() {}

func (x *GetProjectResponse) ProtoReflect() protoreflect.Message {
	mi := &file_openauth_frontend_v1_frontend_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProjectResponse.ProtoReflect.Descriptor instead.
func (*GetProjectResponse) Descriptor() ([]byte, []int) {
	return file_openauth_frontend_v1_frontend_proto_rawDescGZIP(), []int{5}
}

func (x *GetProjectResponse) GetProject() *Project {
	if x != nil {
		return x.Project
	}
	return nil
}

type GetOrganizationRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetOrganizationRequest) Reset() {
	*x = GetOrganizationRequest{}
	mi := &file_openauth_frontend_v1_frontend_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetOrganizationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOrganizationRequest) ProtoMessage() {}

func (x *GetOrganizationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_openauth_frontend_v1_frontend_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOrganizationRequest.ProtoReflect.Descriptor instead.
func (*GetOrganizationRequest) Descriptor() ([]byte, []int) {
	return file_openauth_frontend_v1_frontend_proto_rawDescGZIP(), []int{6}
}

type GetOrganizationResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Organization  *Organization          `protobuf:"bytes,1,opt,name=organization,proto3" json:"organization,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetOrganizationResponse) Reset() {
	*x = GetOrganizationResponse{}
	mi := &file_openauth_frontend_v1_frontend_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetOrganizationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOrganizationResponse) ProtoMessage() {}

func (x *GetOrganizationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_openauth_frontend_v1_frontend_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOrganizationResponse.ProtoReflect.Descriptor instead.
func (*GetOrganizationResponse) Descriptor() ([]byte, []int) {
	return file_openauth_frontend_v1_frontend_proto_rawDescGZIP(), []int{7}
}

func (x *GetOrganizationResponse) GetOrganization() *Organization {
	if x != nil {
		return x.Organization
	}
	return nil
}

type UpdateOrganizationRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Organization  *Organization          `protobuf:"bytes,1,opt,name=organization,proto3" json:"organization,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateOrganizationRequest) Reset() {
	*x = UpdateOrganizationRequest{}
	mi := &file_openauth_frontend_v1_frontend_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateOrganizationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateOrganizationRequest) ProtoMessage() {}

func (x *UpdateOrganizationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_openauth_frontend_v1_frontend_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateOrganizationRequest.ProtoReflect.Descriptor instead.
func (*UpdateOrganizationRequest) Descriptor() ([]byte, []int) {
	return file_openauth_frontend_v1_frontend_proto_rawDescGZIP(), []int{8}
}

func (x *UpdateOrganizationRequest) GetOrganization() *Organization {
	if x != nil {
		return x.Organization
	}
	return nil
}

type UpdateOrganizationResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Organization  *Organization          `protobuf:"bytes,1,opt,name=organization,proto3" json:"organization,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateOrganizationResponse) Reset() {
	*x = UpdateOrganizationResponse{}
	mi := &file_openauth_frontend_v1_frontend_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateOrganizationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateOrganizationResponse) ProtoMessage() {}

func (x *UpdateOrganizationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_openauth_frontend_v1_frontend_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateOrganizationResponse.ProtoReflect.Descriptor instead.
func (*UpdateOrganizationResponse) Descriptor() ([]byte, []int) {
	return file_openauth_frontend_v1_frontend_proto_rawDescGZIP(), []int{9}
}

func (x *UpdateOrganizationResponse) GetOrganization() *Organization {
	if x != nil {
		return x.Organization
	}
	return nil
}

type GetOrganizationGoogleHostedDomainsRequest struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	OrganizationId string                 `protobuf:"bytes,1,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *GetOrganizationGoogleHostedDomainsRequest) Reset() {
	*x = GetOrganizationGoogleHostedDomainsRequest{}
	mi := &file_openauth_frontend_v1_frontend_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetOrganizationGoogleHostedDomainsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOrganizationGoogleHostedDomainsRequest) ProtoMessage() {}

func (x *GetOrganizationGoogleHostedDomainsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_openauth_frontend_v1_frontend_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOrganizationGoogleHostedDomainsRequest.ProtoReflect.Descriptor instead.
func (*GetOrganizationGoogleHostedDomainsRequest) Descriptor() ([]byte, []int) {
	return file_openauth_frontend_v1_frontend_proto_rawDescGZIP(), []int{10}
}

func (x *GetOrganizationGoogleHostedDomainsRequest) GetOrganizationId() string {
	if x != nil {
		return x.OrganizationId
	}
	return ""
}

type GetOrganizationGoogleHostedDomainsResponse struct {
	state                           protoimpl.MessageState           `protogen:"open.v1"`
	OrganizationGoogleHostedDomains *OrganizationGoogleHostedDomains `protobuf:"bytes,1,opt,name=organization_google_hosted_domains,json=organizationGoogleHostedDomains,proto3" json:"organization_google_hosted_domains,omitempty"`
	unknownFields                   protoimpl.UnknownFields
	sizeCache                       protoimpl.SizeCache
}

func (x *GetOrganizationGoogleHostedDomainsResponse) Reset() {
	*x = GetOrganizationGoogleHostedDomainsResponse{}
	mi := &file_openauth_frontend_v1_frontend_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetOrganizationGoogleHostedDomainsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOrganizationGoogleHostedDomainsResponse) ProtoMessage() {}

func (x *GetOrganizationGoogleHostedDomainsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_openauth_frontend_v1_frontend_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOrganizationGoogleHostedDomainsResponse.ProtoReflect.Descriptor instead.
func (*GetOrganizationGoogleHostedDomainsResponse) Descriptor() ([]byte, []int) {
	return file_openauth_frontend_v1_frontend_proto_rawDescGZIP(), []int{11}
}

func (x *GetOrganizationGoogleHostedDomainsResponse) GetOrganizationGoogleHostedDomains() *OrganizationGoogleHostedDomains {
	if x != nil {
		return x.OrganizationGoogleHostedDomains
	}
	return nil
}

type UpdateOrganizationGoogleHostedDomainsRequest struct {
	state                           protoimpl.MessageState           `protogen:"open.v1"`
	OrganizationId                  string                           `protobuf:"bytes,1,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
	OrganizationGoogleHostedDomains *OrganizationGoogleHostedDomains `protobuf:"bytes,2,opt,name=organization_google_hosted_domains,json=organizationGoogleHostedDomains,proto3" json:"organization_google_hosted_domains,omitempty"`
	unknownFields                   protoimpl.UnknownFields
	sizeCache                       protoimpl.SizeCache
}

func (x *UpdateOrganizationGoogleHostedDomainsRequest) Reset() {
	*x = UpdateOrganizationGoogleHostedDomainsRequest{}
	mi := &file_openauth_frontend_v1_frontend_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateOrganizationGoogleHostedDomainsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateOrganizationGoogleHostedDomainsRequest) ProtoMessage() {}

func (x *UpdateOrganizationGoogleHostedDomainsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_openauth_frontend_v1_frontend_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateOrganizationGoogleHostedDomainsRequest.ProtoReflect.Descriptor instead.
func (*UpdateOrganizationGoogleHostedDomainsRequest) Descriptor() ([]byte, []int) {
	return file_openauth_frontend_v1_frontend_proto_rawDescGZIP(), []int{12}
}

func (x *UpdateOrganizationGoogleHostedDomainsRequest) GetOrganizationId() string {
	if x != nil {
		return x.OrganizationId
	}
	return ""
}

func (x *UpdateOrganizationGoogleHostedDomainsRequest) GetOrganizationGoogleHostedDomains() *OrganizationGoogleHostedDomains {
	if x != nil {
		return x.OrganizationGoogleHostedDomains
	}
	return nil
}

type UpdateOrganizationGoogleHostedDomainsResponse struct {
	state                           protoimpl.MessageState           `protogen:"open.v1"`
	OrganizationGoogleHostedDomains *OrganizationGoogleHostedDomains `protobuf:"bytes,1,opt,name=organization_google_hosted_domains,json=organizationGoogleHostedDomains,proto3" json:"organization_google_hosted_domains,omitempty"`
	unknownFields                   protoimpl.UnknownFields
	sizeCache                       protoimpl.SizeCache
}

func (x *UpdateOrganizationGoogleHostedDomainsResponse) Reset() {
	*x = UpdateOrganizationGoogleHostedDomainsResponse{}
	mi := &file_openauth_frontend_v1_frontend_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateOrganizationGoogleHostedDomainsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateOrganizationGoogleHostedDomainsResponse) ProtoMessage() {}

func (x *UpdateOrganizationGoogleHostedDomainsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_openauth_frontend_v1_frontend_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateOrganizationGoogleHostedDomainsResponse.ProtoReflect.Descriptor instead.
func (*UpdateOrganizationGoogleHostedDomainsResponse) Descriptor() ([]byte, []int) {
	return file_openauth_frontend_v1_frontend_proto_rawDescGZIP(), []int{13}
}

func (x *UpdateOrganizationGoogleHostedDomainsResponse) GetOrganizationGoogleHostedDomains() *OrganizationGoogleHostedDomains {
	if x != nil {
		return x.OrganizationGoogleHostedDomains
	}
	return nil
}

type GetOrganizationMicrosoftTenantIDsRequest struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	OrganizationId string                 `protobuf:"bytes,1,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *GetOrganizationMicrosoftTenantIDsRequest) Reset() {
	*x = GetOrganizationMicrosoftTenantIDsRequest{}
	mi := &file_openauth_frontend_v1_frontend_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetOrganizationMicrosoftTenantIDsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOrganizationMicrosoftTenantIDsRequest) ProtoMessage() {}

func (x *GetOrganizationMicrosoftTenantIDsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_openauth_frontend_v1_frontend_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOrganizationMicrosoftTenantIDsRequest.ProtoReflect.Descriptor instead.
func (*GetOrganizationMicrosoftTenantIDsRequest) Descriptor() ([]byte, []int) {
	return file_openauth_frontend_v1_frontend_proto_rawDescGZIP(), []int{14}
}

func (x *GetOrganizationMicrosoftTenantIDsRequest) GetOrganizationId() string {
	if x != nil {
		return x.OrganizationId
	}
	return ""
}

type GetOrganizationMicrosoftTenantIDsResponse struct {
	state                          protoimpl.MessageState          `protogen:"open.v1"`
	OrganizationMicrosoftTenantIds *OrganizationMicrosoftTenantIDs `protobuf:"bytes,1,opt,name=organization_microsoft_tenant_ids,json=organizationMicrosoftTenantIds,proto3" json:"organization_microsoft_tenant_ids,omitempty"`
	unknownFields                  protoimpl.UnknownFields
	sizeCache                      protoimpl.SizeCache
}

func (x *GetOrganizationMicrosoftTenantIDsResponse) Reset() {
	*x = GetOrganizationMicrosoftTenantIDsResponse{}
	mi := &file_openauth_frontend_v1_frontend_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetOrganizationMicrosoftTenantIDsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOrganizationMicrosoftTenantIDsResponse) ProtoMessage() {}

func (x *GetOrganizationMicrosoftTenantIDsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_openauth_frontend_v1_frontend_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOrganizationMicrosoftTenantIDsResponse.ProtoReflect.Descriptor instead.
func (*GetOrganizationMicrosoftTenantIDsResponse) Descriptor() ([]byte, []int) {
	return file_openauth_frontend_v1_frontend_proto_rawDescGZIP(), []int{15}
}

func (x *GetOrganizationMicrosoftTenantIDsResponse) GetOrganizationMicrosoftTenantIds() *OrganizationMicrosoftTenantIDs {
	if x != nil {
		return x.OrganizationMicrosoftTenantIds
	}
	return nil
}

type UpdateOrganizationMicrosoftTenantIDsRequest struct {
	state                          protoimpl.MessageState          `protogen:"open.v1"`
	OrganizationId                 string                          `protobuf:"bytes,1,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
	OrganizationMicrosoftTenantIds *OrganizationMicrosoftTenantIDs `protobuf:"bytes,2,opt,name=organization_microsoft_tenant_ids,json=organizationMicrosoftTenantIds,proto3" json:"organization_microsoft_tenant_ids,omitempty"`
	unknownFields                  protoimpl.UnknownFields
	sizeCache                      protoimpl.SizeCache
}

func (x *UpdateOrganizationMicrosoftTenantIDsRequest) Reset() {
	*x = UpdateOrganizationMicrosoftTenantIDsRequest{}
	mi := &file_openauth_frontend_v1_frontend_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateOrganizationMicrosoftTenantIDsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateOrganizationMicrosoftTenantIDsRequest) ProtoMessage() {}

func (x *UpdateOrganizationMicrosoftTenantIDsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_openauth_frontend_v1_frontend_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateOrganizationMicrosoftTenantIDsRequest.ProtoReflect.Descriptor instead.
func (*UpdateOrganizationMicrosoftTenantIDsRequest) Descriptor() ([]byte, []int) {
	return file_openauth_frontend_v1_frontend_proto_rawDescGZIP(), []int{16}
}

func (x *UpdateOrganizationMicrosoftTenantIDsRequest) GetOrganizationId() string {
	if x != nil {
		return x.OrganizationId
	}
	return ""
}

func (x *UpdateOrganizationMicrosoftTenantIDsRequest) GetOrganizationMicrosoftTenantIds() *OrganizationMicrosoftTenantIDs {
	if x != nil {
		return x.OrganizationMicrosoftTenantIds
	}
	return nil
}

type UpdateOrganizationMicrosoftTenantIDsResponse struct {
	state                          protoimpl.MessageState          `protogen:"open.v1"`
	OrganizationMicrosoftTenantIds *OrganizationMicrosoftTenantIDs `protobuf:"bytes,1,opt,name=organization_microsoft_tenant_ids,json=organizationMicrosoftTenantIds,proto3" json:"organization_microsoft_tenant_ids,omitempty"`
	unknownFields                  protoimpl.UnknownFields
	sizeCache                      protoimpl.SizeCache
}

func (x *UpdateOrganizationMicrosoftTenantIDsResponse) Reset() {
	*x = UpdateOrganizationMicrosoftTenantIDsResponse{}
	mi := &file_openauth_frontend_v1_frontend_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateOrganizationMicrosoftTenantIDsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateOrganizationMicrosoftTenantIDsResponse) ProtoMessage() {}

func (x *UpdateOrganizationMicrosoftTenantIDsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_openauth_frontend_v1_frontend_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateOrganizationMicrosoftTenantIDsResponse.ProtoReflect.Descriptor instead.
func (*UpdateOrganizationMicrosoftTenantIDsResponse) Descriptor() ([]byte, []int) {
	return file_openauth_frontend_v1_frontend_proto_rawDescGZIP(), []int{17}
}

func (x *UpdateOrganizationMicrosoftTenantIDsResponse) GetOrganizationMicrosoftTenantIds() *OrganizationMicrosoftTenantIDs {
	if x != nil {
		return x.OrganizationMicrosoftTenantIds
	}
	return nil
}

type ListUsersRequest struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	OrganizationId string                 `protobuf:"bytes,1,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
	PageToken      string                 `protobuf:"bytes,2,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *ListUsersRequest) Reset() {
	*x = ListUsersRequest{}
	mi := &file_openauth_frontend_v1_frontend_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListUsersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListUsersRequest) ProtoMessage() {}

func (x *ListUsersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_openauth_frontend_v1_frontend_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListUsersRequest.ProtoReflect.Descriptor instead.
func (*ListUsersRequest) Descriptor() ([]byte, []int) {
	return file_openauth_frontend_v1_frontend_proto_rawDescGZIP(), []int{18}
}

func (x *ListUsersRequest) GetOrganizationId() string {
	if x != nil {
		return x.OrganizationId
	}
	return ""
}

func (x *ListUsersRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

type ListUsersResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Users         []*User                `protobuf:"bytes,1,rep,name=users,proto3" json:"users,omitempty"`
	NextPageToken string                 `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListUsersResponse) Reset() {
	*x = ListUsersResponse{}
	mi := &file_openauth_frontend_v1_frontend_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListUsersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListUsersResponse) ProtoMessage() {}

func (x *ListUsersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_openauth_frontend_v1_frontend_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListUsersResponse.ProtoReflect.Descriptor instead.
func (*ListUsersResponse) Descriptor() ([]byte, []int) {
	return file_openauth_frontend_v1_frontend_proto_rawDescGZIP(), []int{19}
}

func (x *ListUsersResponse) GetUsers() []*User {
	if x != nil {
		return x.Users
	}
	return nil
}

func (x *ListUsersResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

type GetUserRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetUserRequest) Reset() {
	*x = GetUserRequest{}
	mi := &file_openauth_frontend_v1_frontend_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetUserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserRequest) ProtoMessage() {}

func (x *GetUserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_openauth_frontend_v1_frontend_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserRequest.ProtoReflect.Descriptor instead.
func (*GetUserRequest) Descriptor() ([]byte, []int) {
	return file_openauth_frontend_v1_frontend_proto_rawDescGZIP(), []int{20}
}

func (x *GetUserRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type GetUserResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	User          *User                  `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetUserResponse) Reset() {
	*x = GetUserResponse{}
	mi := &file_openauth_frontend_v1_frontend_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetUserResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserResponse) ProtoMessage() {}

func (x *GetUserResponse) ProtoReflect() protoreflect.Message {
	mi := &file_openauth_frontend_v1_frontend_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserResponse.ProtoReflect.Descriptor instead.
func (*GetUserResponse) Descriptor() ([]byte, []int) {
	return file_openauth_frontend_v1_frontend_proto_rawDescGZIP(), []int{21}
}

func (x *GetUserResponse) GetUser() *User {
	if x != nil {
		return x.User
	}
	return nil
}

type UpdateUserRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	User          *User                  `protobuf:"bytes,2,opt,name=user,proto3" json:"user,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateUserRequest) Reset() {
	*x = UpdateUserRequest{}
	mi := &file_openauth_frontend_v1_frontend_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateUserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateUserRequest) ProtoMessage() {}

func (x *UpdateUserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_openauth_frontend_v1_frontend_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateUserRequest.ProtoReflect.Descriptor instead.
func (*UpdateUserRequest) Descriptor() ([]byte, []int) {
	return file_openauth_frontend_v1_frontend_proto_rawDescGZIP(), []int{22}
}

func (x *UpdateUserRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateUserRequest) GetUser() *User {
	if x != nil {
		return x.User
	}
	return nil
}

type UpdateUserResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	User          *User                  `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateUserResponse) Reset() {
	*x = UpdateUserResponse{}
	mi := &file_openauth_frontend_v1_frontend_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateUserResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateUserResponse) ProtoMessage() {}

func (x *UpdateUserResponse) ProtoReflect() protoreflect.Message {
	mi := &file_openauth_frontend_v1_frontend_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateUserResponse.ProtoReflect.Descriptor instead.
func (*UpdateUserResponse) Descriptor() ([]byte, []int) {
	return file_openauth_frontend_v1_frontend_proto_rawDescGZIP(), []int{23}
}

func (x *UpdateUserResponse) GetUser() *User {
	if x != nil {
		return x.User
	}
	return nil
}

type DeleteUserRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteUserRequest) Reset() {
	*x = DeleteUserRequest{}
	mi := &file_openauth_frontend_v1_frontend_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteUserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteUserRequest) ProtoMessage() {}

func (x *DeleteUserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_openauth_frontend_v1_frontend_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteUserRequest.ProtoReflect.Descriptor instead.
func (*DeleteUserRequest) Descriptor() ([]byte, []int) {
	return file_openauth_frontend_v1_frontend_proto_rawDescGZIP(), []int{24}
}

func (x *DeleteUserRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type DeleteUserResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteUserResponse) Reset() {
	*x = DeleteUserResponse{}
	mi := &file_openauth_frontend_v1_frontend_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteUserResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteUserResponse) ProtoMessage() {}

func (x *DeleteUserResponse) ProtoReflect() protoreflect.Message {
	mi := &file_openauth_frontend_v1_frontend_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteUserResponse.ProtoReflect.Descriptor instead.
func (*DeleteUserResponse) Descriptor() ([]byte, []int) {
	return file_openauth_frontend_v1_frontend_proto_rawDescGZIP(), []int{25}
}

type ListSAMLConnectionsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PageToken     string                 `protobuf:"bytes,1,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListSAMLConnectionsRequest) Reset() {
	*x = ListSAMLConnectionsRequest{}
	mi := &file_openauth_frontend_v1_frontend_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListSAMLConnectionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSAMLConnectionsRequest) ProtoMessage() {}

func (x *ListSAMLConnectionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_openauth_frontend_v1_frontend_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSAMLConnectionsRequest.ProtoReflect.Descriptor instead.
func (*ListSAMLConnectionsRequest) Descriptor() ([]byte, []int) {
	return file_openauth_frontend_v1_frontend_proto_rawDescGZIP(), []int{26}
}

func (x *ListSAMLConnectionsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

type ListSAMLConnectionsResponse struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	SamlConnections []*SAMLConnection      `protobuf:"bytes,1,rep,name=saml_connections,json=samlConnections,proto3" json:"saml_connections,omitempty"`
	NextPageToken   string                 `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *ListSAMLConnectionsResponse) Reset() {
	*x = ListSAMLConnectionsResponse{}
	mi := &file_openauth_frontend_v1_frontend_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListSAMLConnectionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSAMLConnectionsResponse) ProtoMessage() {}

func (x *ListSAMLConnectionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_openauth_frontend_v1_frontend_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSAMLConnectionsResponse.ProtoReflect.Descriptor instead.
func (*ListSAMLConnectionsResponse) Descriptor() ([]byte, []int) {
	return file_openauth_frontend_v1_frontend_proto_rawDescGZIP(), []int{27}
}

func (x *ListSAMLConnectionsResponse) GetSamlConnections() []*SAMLConnection {
	if x != nil {
		return x.SamlConnections
	}
	return nil
}

func (x *ListSAMLConnectionsResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

type GetSAMLConnectionRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetSAMLConnectionRequest) Reset() {
	*x = GetSAMLConnectionRequest{}
	mi := &file_openauth_frontend_v1_frontend_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetSAMLConnectionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSAMLConnectionRequest) ProtoMessage() {}

func (x *GetSAMLConnectionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_openauth_frontend_v1_frontend_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSAMLConnectionRequest.ProtoReflect.Descriptor instead.
func (*GetSAMLConnectionRequest) Descriptor() ([]byte, []int) {
	return file_openauth_frontend_v1_frontend_proto_rawDescGZIP(), []int{28}
}

func (x *GetSAMLConnectionRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type GetSAMLConnectionResponse struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	SamlConnection *SAMLConnection        `protobuf:"bytes,1,opt,name=saml_connection,json=samlConnection,proto3" json:"saml_connection,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *GetSAMLConnectionResponse) Reset() {
	*x = GetSAMLConnectionResponse{}
	mi := &file_openauth_frontend_v1_frontend_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetSAMLConnectionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSAMLConnectionResponse) ProtoMessage() {}

func (x *GetSAMLConnectionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_openauth_frontend_v1_frontend_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSAMLConnectionResponse.ProtoReflect.Descriptor instead.
func (*GetSAMLConnectionResponse) Descriptor() ([]byte, []int) {
	return file_openauth_frontend_v1_frontend_proto_rawDescGZIP(), []int{29}
}

func (x *GetSAMLConnectionResponse) GetSamlConnection() *SAMLConnection {
	if x != nil {
		return x.SamlConnection
	}
	return nil
}

type CreateSAMLConnectionRequest struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	SamlConnection *SAMLConnection        `protobuf:"bytes,1,opt,name=saml_connection,json=samlConnection,proto3" json:"saml_connection,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *CreateSAMLConnectionRequest) Reset() {
	*x = CreateSAMLConnectionRequest{}
	mi := &file_openauth_frontend_v1_frontend_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateSAMLConnectionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSAMLConnectionRequest) ProtoMessage() {}

func (x *CreateSAMLConnectionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_openauth_frontend_v1_frontend_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSAMLConnectionRequest.ProtoReflect.Descriptor instead.
func (*CreateSAMLConnectionRequest) Descriptor() ([]byte, []int) {
	return file_openauth_frontend_v1_frontend_proto_rawDescGZIP(), []int{30}
}

func (x *CreateSAMLConnectionRequest) GetSamlConnection() *SAMLConnection {
	if x != nil {
		return x.SamlConnection
	}
	return nil
}

type CreateSAMLConnectionResponse struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	SamlConnection *SAMLConnection        `protobuf:"bytes,1,opt,name=saml_connection,json=samlConnection,proto3" json:"saml_connection,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *CreateSAMLConnectionResponse) Reset() {
	*x = CreateSAMLConnectionResponse{}
	mi := &file_openauth_frontend_v1_frontend_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateSAMLConnectionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSAMLConnectionResponse) ProtoMessage() {}

func (x *CreateSAMLConnectionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_openauth_frontend_v1_frontend_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSAMLConnectionResponse.ProtoReflect.Descriptor instead.
func (*CreateSAMLConnectionResponse) Descriptor() ([]byte, []int) {
	return file_openauth_frontend_v1_frontend_proto_rawDescGZIP(), []int{31}
}

func (x *CreateSAMLConnectionResponse) GetSamlConnection() *SAMLConnection {
	if x != nil {
		return x.SamlConnection
	}
	return nil
}

type UpdateSAMLConnectionRequest struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Id             string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	SamlConnection *SAMLConnection        `protobuf:"bytes,2,opt,name=saml_connection,json=samlConnection,proto3" json:"saml_connection,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *UpdateSAMLConnectionRequest) Reset() {
	*x = UpdateSAMLConnectionRequest{}
	mi := &file_openauth_frontend_v1_frontend_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateSAMLConnectionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSAMLConnectionRequest) ProtoMessage() {}

func (x *UpdateSAMLConnectionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_openauth_frontend_v1_frontend_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSAMLConnectionRequest.ProtoReflect.Descriptor instead.
func (*UpdateSAMLConnectionRequest) Descriptor() ([]byte, []int) {
	return file_openauth_frontend_v1_frontend_proto_rawDescGZIP(), []int{32}
}

func (x *UpdateSAMLConnectionRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateSAMLConnectionRequest) GetSamlConnection() *SAMLConnection {
	if x != nil {
		return x.SamlConnection
	}
	return nil
}

type UpdateSAMLConnectionResponse struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	SamlConnection *SAMLConnection        `protobuf:"bytes,1,opt,name=saml_connection,json=samlConnection,proto3" json:"saml_connection,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *UpdateSAMLConnectionResponse) Reset() {
	*x = UpdateSAMLConnectionResponse{}
	mi := &file_openauth_frontend_v1_frontend_proto_msgTypes[33]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateSAMLConnectionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSAMLConnectionResponse) ProtoMessage() {}

func (x *UpdateSAMLConnectionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_openauth_frontend_v1_frontend_proto_msgTypes[33]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSAMLConnectionResponse.ProtoReflect.Descriptor instead.
func (*UpdateSAMLConnectionResponse) Descriptor() ([]byte, []int) {
	return file_openauth_frontend_v1_frontend_proto_rawDescGZIP(), []int{33}
}

func (x *UpdateSAMLConnectionResponse) GetSamlConnection() *SAMLConnection {
	if x != nil {
		return x.SamlConnection
	}
	return nil
}

type DeleteSAMLConnectionRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteSAMLConnectionRequest) Reset() {
	*x = DeleteSAMLConnectionRequest{}
	mi := &file_openauth_frontend_v1_frontend_proto_msgTypes[34]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteSAMLConnectionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteSAMLConnectionRequest) ProtoMessage() {}

func (x *DeleteSAMLConnectionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_openauth_frontend_v1_frontend_proto_msgTypes[34]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteSAMLConnectionRequest.ProtoReflect.Descriptor instead.
func (*DeleteSAMLConnectionRequest) Descriptor() ([]byte, []int) {
	return file_openauth_frontend_v1_frontend_proto_rawDescGZIP(), []int{34}
}

func (x *DeleteSAMLConnectionRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type DeleteSAMLConnectionResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteSAMLConnectionResponse) Reset() {
	*x = DeleteSAMLConnectionResponse{}
	mi := &file_openauth_frontend_v1_frontend_proto_msgTypes[35]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteSAMLConnectionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteSAMLConnectionResponse) ProtoMessage() {}

func (x *DeleteSAMLConnectionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_openauth_frontend_v1_frontend_proto_msgTypes[35]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteSAMLConnectionResponse.ProtoReflect.Descriptor instead.
func (*DeleteSAMLConnectionResponse) Descriptor() ([]byte, []int) {
	return file_openauth_frontend_v1_frontend_proto_rawDescGZIP(), []int{35}
}

type ListSCIMAPIKeysRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PageToken     string                 `protobuf:"bytes,1,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListSCIMAPIKeysRequest) Reset() {
	*x = ListSCIMAPIKeysRequest{}
	mi := &file_openauth_frontend_v1_frontend_proto_msgTypes[36]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListSCIMAPIKeysRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSCIMAPIKeysRequest) ProtoMessage() {}

func (x *ListSCIMAPIKeysRequest) ProtoReflect() protoreflect.Message {
	mi := &file_openauth_frontend_v1_frontend_proto_msgTypes[36]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSCIMAPIKeysRequest.ProtoReflect.Descriptor instead.
func (*ListSCIMAPIKeysRequest) Descriptor() ([]byte, []int) {
	return file_openauth_frontend_v1_frontend_proto_rawDescGZIP(), []int{36}
}

func (x *ListSCIMAPIKeysRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

type ListSCIMAPIKeysResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ScimApiKeys   []*SCIMAPIKey          `protobuf:"bytes,1,rep,name=scim_api_keys,json=scimApiKeys,proto3" json:"scim_api_keys,omitempty"`
	NextPageToken string                 `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListSCIMAPIKeysResponse) Reset() {
	*x = ListSCIMAPIKeysResponse{}
	mi := &file_openauth_frontend_v1_frontend_proto_msgTypes[37]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListSCIMAPIKeysResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSCIMAPIKeysResponse) ProtoMessage() {}

func (x *ListSCIMAPIKeysResponse) ProtoReflect() protoreflect.Message {
	mi := &file_openauth_frontend_v1_frontend_proto_msgTypes[37]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSCIMAPIKeysResponse.ProtoReflect.Descriptor instead.
func (*ListSCIMAPIKeysResponse) Descriptor() ([]byte, []int) {
	return file_openauth_frontend_v1_frontend_proto_rawDescGZIP(), []int{37}
}

func (x *ListSCIMAPIKeysResponse) GetScimApiKeys() []*SCIMAPIKey {
	if x != nil {
		return x.ScimApiKeys
	}
	return nil
}

func (x *ListSCIMAPIKeysResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

type GetSCIMAPIKeyRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetSCIMAPIKeyRequest) Reset() {
	*x = GetSCIMAPIKeyRequest{}
	mi := &file_openauth_frontend_v1_frontend_proto_msgTypes[38]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetSCIMAPIKeyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSCIMAPIKeyRequest) ProtoMessage() {}

func (x *GetSCIMAPIKeyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_openauth_frontend_v1_frontend_proto_msgTypes[38]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSCIMAPIKeyRequest.ProtoReflect.Descriptor instead.
func (*GetSCIMAPIKeyRequest) Descriptor() ([]byte, []int) {
	return file_openauth_frontend_v1_frontend_proto_rawDescGZIP(), []int{38}
}

func (x *GetSCIMAPIKeyRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type GetSCIMAPIKeyResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ScimApiKey    *SCIMAPIKey            `protobuf:"bytes,1,opt,name=scim_api_key,json=scimApiKey,proto3" json:"scim_api_key,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetSCIMAPIKeyResponse) Reset() {
	*x = GetSCIMAPIKeyResponse{}
	mi := &file_openauth_frontend_v1_frontend_proto_msgTypes[39]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetSCIMAPIKeyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSCIMAPIKeyResponse) ProtoMessage() {}

func (x *GetSCIMAPIKeyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_openauth_frontend_v1_frontend_proto_msgTypes[39]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSCIMAPIKeyResponse.ProtoReflect.Descriptor instead.
func (*GetSCIMAPIKeyResponse) Descriptor() ([]byte, []int) {
	return file_openauth_frontend_v1_frontend_proto_rawDescGZIP(), []int{39}
}

func (x *GetSCIMAPIKeyResponse) GetScimApiKey() *SCIMAPIKey {
	if x != nil {
		return x.ScimApiKey
	}
	return nil
}

type CreateSCIMAPIKeyRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ScimApiKey    *SCIMAPIKey            `protobuf:"bytes,1,opt,name=scim_api_key,json=scimApiKey,proto3" json:"scim_api_key,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateSCIMAPIKeyRequest) Reset() {
	*x = CreateSCIMAPIKeyRequest{}
	mi := &file_openauth_frontend_v1_frontend_proto_msgTypes[40]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateSCIMAPIKeyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSCIMAPIKeyRequest) ProtoMessage() {}

func (x *CreateSCIMAPIKeyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_openauth_frontend_v1_frontend_proto_msgTypes[40]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSCIMAPIKeyRequest.ProtoReflect.Descriptor instead.
func (*CreateSCIMAPIKeyRequest) Descriptor() ([]byte, []int) {
	return file_openauth_frontend_v1_frontend_proto_rawDescGZIP(), []int{40}
}

func (x *CreateSCIMAPIKeyRequest) GetScimApiKey() *SCIMAPIKey {
	if x != nil {
		return x.ScimApiKey
	}
	return nil
}

type CreateSCIMAPIKeyResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ScimApiKey    *SCIMAPIKey            `protobuf:"bytes,1,opt,name=scim_api_key,json=scimApiKey,proto3" json:"scim_api_key,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateSCIMAPIKeyResponse) Reset() {
	*x = CreateSCIMAPIKeyResponse{}
	mi := &file_openauth_frontend_v1_frontend_proto_msgTypes[41]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateSCIMAPIKeyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSCIMAPIKeyResponse) ProtoMessage() {}

func (x *CreateSCIMAPIKeyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_openauth_frontend_v1_frontend_proto_msgTypes[41]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSCIMAPIKeyResponse.ProtoReflect.Descriptor instead.
func (*CreateSCIMAPIKeyResponse) Descriptor() ([]byte, []int) {
	return file_openauth_frontend_v1_frontend_proto_rawDescGZIP(), []int{41}
}

func (x *CreateSCIMAPIKeyResponse) GetScimApiKey() *SCIMAPIKey {
	if x != nil {
		return x.ScimApiKey
	}
	return nil
}

type UpdateSCIMAPIKeyRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	ScimApiKey    *SCIMAPIKey            `protobuf:"bytes,2,opt,name=scim_api_key,json=scimApiKey,proto3" json:"scim_api_key,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateSCIMAPIKeyRequest) Reset() {
	*x = UpdateSCIMAPIKeyRequest{}
	mi := &file_openauth_frontend_v1_frontend_proto_msgTypes[42]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateSCIMAPIKeyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSCIMAPIKeyRequest) ProtoMessage() {}

func (x *UpdateSCIMAPIKeyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_openauth_frontend_v1_frontend_proto_msgTypes[42]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSCIMAPIKeyRequest.ProtoReflect.Descriptor instead.
func (*UpdateSCIMAPIKeyRequest) Descriptor() ([]byte, []int) {
	return file_openauth_frontend_v1_frontend_proto_rawDescGZIP(), []int{42}
}

func (x *UpdateSCIMAPIKeyRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateSCIMAPIKeyRequest) GetScimApiKey() *SCIMAPIKey {
	if x != nil {
		return x.ScimApiKey
	}
	return nil
}

type UpdateSCIMAPIKeyResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ScimApiKey    *SCIMAPIKey            `protobuf:"bytes,1,opt,name=scim_api_key,json=scimApiKey,proto3" json:"scim_api_key,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateSCIMAPIKeyResponse) Reset() {
	*x = UpdateSCIMAPIKeyResponse{}
	mi := &file_openauth_frontend_v1_frontend_proto_msgTypes[43]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateSCIMAPIKeyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSCIMAPIKeyResponse) ProtoMessage() {}

func (x *UpdateSCIMAPIKeyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_openauth_frontend_v1_frontend_proto_msgTypes[43]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSCIMAPIKeyResponse.ProtoReflect.Descriptor instead.
func (*UpdateSCIMAPIKeyResponse) Descriptor() ([]byte, []int) {
	return file_openauth_frontend_v1_frontend_proto_rawDescGZIP(), []int{43}
}

func (x *UpdateSCIMAPIKeyResponse) GetScimApiKey() *SCIMAPIKey {
	if x != nil {
		return x.ScimApiKey
	}
	return nil
}

type DeleteSCIMAPIKeyRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteSCIMAPIKeyRequest) Reset() {
	*x = DeleteSCIMAPIKeyRequest{}
	mi := &file_openauth_frontend_v1_frontend_proto_msgTypes[44]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteSCIMAPIKeyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteSCIMAPIKeyRequest) ProtoMessage() {}

func (x *DeleteSCIMAPIKeyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_openauth_frontend_v1_frontend_proto_msgTypes[44]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteSCIMAPIKeyRequest.ProtoReflect.Descriptor instead.
func (*DeleteSCIMAPIKeyRequest) Descriptor() ([]byte, []int) {
	return file_openauth_frontend_v1_frontend_proto_rawDescGZIP(), []int{44}
}

func (x *DeleteSCIMAPIKeyRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type DeleteSCIMAPIKeyResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteSCIMAPIKeyResponse) Reset() {
	*x = DeleteSCIMAPIKeyResponse{}
	mi := &file_openauth_frontend_v1_frontend_proto_msgTypes[45]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteSCIMAPIKeyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteSCIMAPIKeyResponse) ProtoMessage() {}

func (x *DeleteSCIMAPIKeyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_openauth_frontend_v1_frontend_proto_msgTypes[45]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteSCIMAPIKeyResponse.ProtoReflect.Descriptor instead.
func (*DeleteSCIMAPIKeyResponse) Descriptor() ([]byte, []int) {
	return file_openauth_frontend_v1_frontend_proto_rawDescGZIP(), []int{45}
}

type RevokeSCIMAPIKeyRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RevokeSCIMAPIKeyRequest) Reset() {
	*x = RevokeSCIMAPIKeyRequest{}
	mi := &file_openauth_frontend_v1_frontend_proto_msgTypes[46]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RevokeSCIMAPIKeyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RevokeSCIMAPIKeyRequest) ProtoMessage() {}

func (x *RevokeSCIMAPIKeyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_openauth_frontend_v1_frontend_proto_msgTypes[46]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RevokeSCIMAPIKeyRequest.ProtoReflect.Descriptor instead.
func (*RevokeSCIMAPIKeyRequest) Descriptor() ([]byte, []int) {
	return file_openauth_frontend_v1_frontend_proto_rawDescGZIP(), []int{46}
}

func (x *RevokeSCIMAPIKeyRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type RevokeSCIMAPIKeyResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ScimApiKey    *SCIMAPIKey            `protobuf:"bytes,1,opt,name=scim_api_key,json=scimApiKey,proto3" json:"scim_api_key,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RevokeSCIMAPIKeyResponse) Reset() {
	*x = RevokeSCIMAPIKeyResponse{}
	mi := &file_openauth_frontend_v1_frontend_proto_msgTypes[47]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RevokeSCIMAPIKeyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RevokeSCIMAPIKeyResponse) ProtoMessage() {}

func (x *RevokeSCIMAPIKeyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_openauth_frontend_v1_frontend_proto_msgTypes[47]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RevokeSCIMAPIKeyResponse.ProtoReflect.Descriptor instead.
func (*RevokeSCIMAPIKeyResponse) Descriptor() ([]byte, []int) {
	return file_openauth_frontend_v1_frontend_proto_rawDescGZIP(), []int{47}
}

func (x *RevokeSCIMAPIKeyResponse) GetScimApiKey() *SCIMAPIKey {
	if x != nil {
		return x.ScimApiKey
	}
	return nil
}

type WhoamiRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WhoamiRequest) Reset() {
	*x = WhoamiRequest{}
	mi := &file_openauth_frontend_v1_frontend_proto_msgTypes[48]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WhoamiRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WhoamiRequest) ProtoMessage() {}

func (x *WhoamiRequest) ProtoReflect() protoreflect.Message {
	mi := &file_openauth_frontend_v1_frontend_proto_msgTypes[48]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WhoamiRequest.ProtoReflect.Descriptor instead.
func (*WhoamiRequest) Descriptor() ([]byte, []int) {
	return file_openauth_frontend_v1_frontend_proto_rawDescGZIP(), []int{48}
}

type WhoamiResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	User          *User                  `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WhoamiResponse) Reset() {
	*x = WhoamiResponse{}
	mi := &file_openauth_frontend_v1_frontend_proto_msgTypes[49]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WhoamiResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WhoamiResponse) ProtoMessage() {}

func (x *WhoamiResponse) ProtoReflect() protoreflect.Message {
	mi := &file_openauth_frontend_v1_frontend_proto_msgTypes[49]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WhoamiResponse.ProtoReflect.Descriptor instead.
func (*WhoamiResponse) Descriptor() ([]byte, []int) {
	return file_openauth_frontend_v1_frontend_proto_rawDescGZIP(), []int{49}
}

func (x *WhoamiResponse) GetUser() *User {
	if x != nil {
		return x.User
	}
	return nil
}

type ListMyPasskeysRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PageToken     string                 `protobuf:"bytes,1,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListMyPasskeysRequest) Reset() {
	*x = ListMyPasskeysRequest{}
	mi := &file_openauth_frontend_v1_frontend_proto_msgTypes[50]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListMyPasskeysRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListMyPasskeysRequest) ProtoMessage() {}

func (x *ListMyPasskeysRequest) ProtoReflect() protoreflect.Message {
	mi := &file_openauth_frontend_v1_frontend_proto_msgTypes[50]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListMyPasskeysRequest.ProtoReflect.Descriptor instead.
func (*ListMyPasskeysRequest) Descriptor() ([]byte, []int) {
	return file_openauth_frontend_v1_frontend_proto_rawDescGZIP(), []int{50}
}

func (x *ListMyPasskeysRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

type ListMyPasskeysResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Passkeys      []*Passkey             `protobuf:"bytes,1,rep,name=passkeys,proto3" json:"passkeys,omitempty"`
	NextPageToken string                 `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListMyPasskeysResponse) Reset() {
	*x = ListMyPasskeysResponse{}
	mi := &file_openauth_frontend_v1_frontend_proto_msgTypes[51]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListMyPasskeysResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListMyPasskeysResponse) ProtoMessage() {}

func (x *ListMyPasskeysResponse) ProtoReflect() protoreflect.Message {
	mi := &file_openauth_frontend_v1_frontend_proto_msgTypes[51]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListMyPasskeysResponse.ProtoReflect.Descriptor instead.
func (*ListMyPasskeysResponse) Descriptor() ([]byte, []int) {
	return file_openauth_frontend_v1_frontend_proto_rawDescGZIP(), []int{51}
}

func (x *ListMyPasskeysResponse) GetPasskeys() []*Passkey {
	if x != nil {
		return x.Passkeys
	}
	return nil
}

func (x *ListMyPasskeysResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

type DeleteMyPasskeyRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteMyPasskeyRequest) Reset() {
	*x = DeleteMyPasskeyRequest{}
	mi := &file_openauth_frontend_v1_frontend_proto_msgTypes[52]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteMyPasskeyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteMyPasskeyRequest) ProtoMessage() {}

func (x *DeleteMyPasskeyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_openauth_frontend_v1_frontend_proto_msgTypes[52]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteMyPasskeyRequest.ProtoReflect.Descriptor instead.
func (*DeleteMyPasskeyRequest) Descriptor() ([]byte, []int) {
	return file_openauth_frontend_v1_frontend_proto_rawDescGZIP(), []int{52}
}

func (x *DeleteMyPasskeyRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type DeleteMyPasskeyResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteMyPasskeyResponse) Reset() {
	*x = DeleteMyPasskeyResponse{}
	mi := &file_openauth_frontend_v1_frontend_proto_msgTypes[53]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteMyPasskeyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteMyPasskeyResponse) ProtoMessage() {}

func (x *DeleteMyPasskeyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_openauth_frontend_v1_frontend_proto_msgTypes[53]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteMyPasskeyResponse.ProtoReflect.Descriptor instead.
func (*DeleteMyPasskeyResponse) Descriptor() ([]byte, []int) {
	return file_openauth_frontend_v1_frontend_proto_rawDescGZIP(), []int{53}
}

type GetPasskeyOptionsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetPasskeyOptionsRequest) Reset() {
	*x = GetPasskeyOptionsRequest{}
	mi := &file_openauth_frontend_v1_frontend_proto_msgTypes[54]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetPasskeyOptionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPasskeyOptionsRequest) ProtoMessage() {}

func (x *GetPasskeyOptionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_openauth_frontend_v1_frontend_proto_msgTypes[54]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPasskeyOptionsRequest.ProtoReflect.Descriptor instead.
func (*GetPasskeyOptionsRequest) Descriptor() ([]byte, []int) {
	return file_openauth_frontend_v1_frontend_proto_rawDescGZIP(), []int{54}
}

type GetPasskeyOptionsResponse struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	RpId            string                 `protobuf:"bytes,1,opt,name=rp_id,json=rpId,proto3" json:"rp_id,omitempty"`
	RpName          string                 `protobuf:"bytes,2,opt,name=rp_name,json=rpName,proto3" json:"rp_name,omitempty"`
	UserId          string                 `protobuf:"bytes,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	UserDisplayName string                 `protobuf:"bytes,4,opt,name=user_display_name,json=userDisplayName,proto3" json:"user_display_name,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *GetPasskeyOptionsResponse) Reset() {
	*x = GetPasskeyOptionsResponse{}
	mi := &file_openauth_frontend_v1_frontend_proto_msgTypes[55]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetPasskeyOptionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPasskeyOptionsResponse) ProtoMessage() {}

func (x *GetPasskeyOptionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_openauth_frontend_v1_frontend_proto_msgTypes[55]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPasskeyOptionsResponse.ProtoReflect.Descriptor instead.
func (*GetPasskeyOptionsResponse) Descriptor() ([]byte, []int) {
	return file_openauth_frontend_v1_frontend_proto_rawDescGZIP(), []int{55}
}

func (x *GetPasskeyOptionsResponse) GetRpId() string {
	if x != nil {
		return x.RpId
	}
	return ""
}

func (x *GetPasskeyOptionsResponse) GetRpName() string {
	if x != nil {
		return x.RpName
	}
	return ""
}

func (x *GetPasskeyOptionsResponse) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *GetPasskeyOptionsResponse) GetUserDisplayName() string {
	if x != nil {
		return x.UserDisplayName
	}
	return ""
}

type RegisterPasskeyRequest struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	AttestationObject string                 `protobuf:"bytes,1,opt,name=attestation_object,json=attestationObject,proto3" json:"attestation_object,omitempty"`
	RpId              string                 `protobuf:"bytes,2,opt,name=rp_id,json=rpId,proto3" json:"rp_id,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *RegisterPasskeyRequest) Reset() {
	*x = RegisterPasskeyRequest{}
	mi := &file_openauth_frontend_v1_frontend_proto_msgTypes[56]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RegisterPasskeyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterPasskeyRequest) ProtoMessage() {}

func (x *RegisterPasskeyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_openauth_frontend_v1_frontend_proto_msgTypes[56]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterPasskeyRequest.ProtoReflect.Descriptor instead.
func (*RegisterPasskeyRequest) Descriptor() ([]byte, []int) {
	return file_openauth_frontend_v1_frontend_proto_rawDescGZIP(), []int{56}
}

func (x *RegisterPasskeyRequest) GetAttestationObject() string {
	if x != nil {
		return x.AttestationObject
	}
	return ""
}

func (x *RegisterPasskeyRequest) GetRpId() string {
	if x != nil {
		return x.RpId
	}
	return ""
}

type RegisterPasskeyResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Passkey       *Passkey               `protobuf:"bytes,1,opt,name=passkey,proto3" json:"passkey,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RegisterPasskeyResponse) Reset() {
	*x = RegisterPasskeyResponse{}
	mi := &file_openauth_frontend_v1_frontend_proto_msgTypes[57]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RegisterPasskeyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterPasskeyResponse) ProtoMessage() {}

func (x *RegisterPasskeyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_openauth_frontend_v1_frontend_proto_msgTypes[57]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterPasskeyResponse.ProtoReflect.Descriptor instead.
func (*RegisterPasskeyResponse) Descriptor() ([]byte, []int) {
	return file_openauth_frontend_v1_frontend_proto_rawDescGZIP(), []int{57}
}

func (x *RegisterPasskeyResponse) GetPasskey() *Passkey {
	if x != nil {
		return x.Passkey
	}
	return nil
}

type GetAuthenticatorAppOptionsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetAuthenticatorAppOptionsRequest) Reset() {
	*x = GetAuthenticatorAppOptionsRequest{}
	mi := &file_openauth_frontend_v1_frontend_proto_msgTypes[58]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetAuthenticatorAppOptionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAuthenticatorAppOptionsRequest) ProtoMessage() {}

func (x *GetAuthenticatorAppOptionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_openauth_frontend_v1_frontend_proto_msgTypes[58]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAuthenticatorAppOptionsRequest.ProtoReflect.Descriptor instead.
func (*GetAuthenticatorAppOptionsRequest) Descriptor() ([]byte, []int) {
	return file_openauth_frontend_v1_frontend_proto_rawDescGZIP(), []int{58}
}

type GetAuthenticatorAppOptionsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	OtpauthUri    string                 `protobuf:"bytes,1,opt,name=otpauth_uri,json=otpauthUri,proto3" json:"otpauth_uri,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetAuthenticatorAppOptionsResponse) Reset() {
	*x = GetAuthenticatorAppOptionsResponse{}
	mi := &file_openauth_frontend_v1_frontend_proto_msgTypes[59]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetAuthenticatorAppOptionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAuthenticatorAppOptionsResponse) ProtoMessage() {}

func (x *GetAuthenticatorAppOptionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_openauth_frontend_v1_frontend_proto_msgTypes[59]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAuthenticatorAppOptionsResponse.ProtoReflect.Descriptor instead.
func (*GetAuthenticatorAppOptionsResponse) Descriptor() ([]byte, []int) {
	return file_openauth_frontend_v1_frontend_proto_rawDescGZIP(), []int{59}
}

func (x *GetAuthenticatorAppOptionsResponse) GetOtpauthUri() string {
	if x != nil {
		return x.OtpauthUri
	}
	return ""
}

type RegisterAuthenticatorAppRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TotpCode      string                 `protobuf:"bytes,1,opt,name=totp_code,json=totpCode,proto3" json:"totp_code,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RegisterAuthenticatorAppRequest) Reset() {
	*x = RegisterAuthenticatorAppRequest{}
	mi := &file_openauth_frontend_v1_frontend_proto_msgTypes[60]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RegisterAuthenticatorAppRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterAuthenticatorAppRequest) ProtoMessage() {}

func (x *RegisterAuthenticatorAppRequest) ProtoReflect() protoreflect.Message {
	mi := &file_openauth_frontend_v1_frontend_proto_msgTypes[60]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterAuthenticatorAppRequest.ProtoReflect.Descriptor instead.
func (*RegisterAuthenticatorAppRequest) Descriptor() ([]byte, []int) {
	return file_openauth_frontend_v1_frontend_proto_rawDescGZIP(), []int{60}
}

func (x *RegisterAuthenticatorAppRequest) GetTotpCode() string {
	if x != nil {
		return x.TotpCode
	}
	return ""
}

type RegisterAuthenticatorAppResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	RecoveryCodes []string               `protobuf:"bytes,1,rep,name=recovery_codes,json=recoveryCodes,proto3" json:"recovery_codes,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RegisterAuthenticatorAppResponse) Reset() {
	*x = RegisterAuthenticatorAppResponse{}
	mi := &file_openauth_frontend_v1_frontend_proto_msgTypes[61]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RegisterAuthenticatorAppResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterAuthenticatorAppResponse) ProtoMessage() {}

func (x *RegisterAuthenticatorAppResponse) ProtoReflect() protoreflect.Message {
	mi := &file_openauth_frontend_v1_frontend_proto_msgTypes[61]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterAuthenticatorAppResponse.ProtoReflect.Descriptor instead.
func (*RegisterAuthenticatorAppResponse) Descriptor() ([]byte, []int) {
	return file_openauth_frontend_v1_frontend_proto_rawDescGZIP(), []int{61}
}

func (x *RegisterAuthenticatorAppResponse) GetRecoveryCodes() []string {
	if x != nil {
		return x.RecoveryCodes
	}
	return nil
}

type ListUserInvitesRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PageToken     string                 `protobuf:"bytes,1,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListUserInvitesRequest) Reset() {
	*x = ListUserInvitesRequest{}
	mi := &file_openauth_frontend_v1_frontend_proto_msgTypes[62]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListUserInvitesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListUserInvitesRequest) ProtoMessage() {}

func (x *ListUserInvitesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_openauth_frontend_v1_frontend_proto_msgTypes[62]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListUserInvitesRequest.ProtoReflect.Descriptor instead.
func (*ListUserInvitesRequest) Descriptor() ([]byte, []int) {
	return file_openauth_frontend_v1_frontend_proto_rawDescGZIP(), []int{62}
}

func (x *ListUserInvitesRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

type ListUserInvitesResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserInvites   []*UserInvite          `protobuf:"bytes,1,rep,name=user_invites,json=userInvites,proto3" json:"user_invites,omitempty"`
	NextPageToken string                 `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListUserInvitesResponse) Reset() {
	*x = ListUserInvitesResponse{}
	mi := &file_openauth_frontend_v1_frontend_proto_msgTypes[63]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListUserInvitesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListUserInvitesResponse) ProtoMessage() {}

func (x *ListUserInvitesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_openauth_frontend_v1_frontend_proto_msgTypes[63]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListUserInvitesResponse.ProtoReflect.Descriptor instead.
func (*ListUserInvitesResponse) Descriptor() ([]byte, []int) {
	return file_openauth_frontend_v1_frontend_proto_rawDescGZIP(), []int{63}
}

func (x *ListUserInvitesResponse) GetUserInvites() []*UserInvite {
	if x != nil {
		return x.UserInvites
	}
	return nil
}

func (x *ListUserInvitesResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

type GetUserInviteRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetUserInviteRequest) Reset() {
	*x = GetUserInviteRequest{}
	mi := &file_openauth_frontend_v1_frontend_proto_msgTypes[64]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetUserInviteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserInviteRequest) ProtoMessage() {}

func (x *GetUserInviteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_openauth_frontend_v1_frontend_proto_msgTypes[64]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserInviteRequest.ProtoReflect.Descriptor instead.
func (*GetUserInviteRequest) Descriptor() ([]byte, []int) {
	return file_openauth_frontend_v1_frontend_proto_rawDescGZIP(), []int{64}
}

func (x *GetUserInviteRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type GetUserInviteResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserInvite    *UserInvite            `protobuf:"bytes,1,opt,name=user_invite,json=userInvite,proto3" json:"user_invite,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetUserInviteResponse) Reset() {
	*x = GetUserInviteResponse{}
	mi := &file_openauth_frontend_v1_frontend_proto_msgTypes[65]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetUserInviteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserInviteResponse) ProtoMessage() {}

func (x *GetUserInviteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_openauth_frontend_v1_frontend_proto_msgTypes[65]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserInviteResponse.ProtoReflect.Descriptor instead.
func (*GetUserInviteResponse) Descriptor() ([]byte, []int) {
	return file_openauth_frontend_v1_frontend_proto_rawDescGZIP(), []int{65}
}

func (x *GetUserInviteResponse) GetUserInvite() *UserInvite {
	if x != nil {
		return x.UserInvite
	}
	return nil
}

type CreateUserInviteRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserInvite    *UserInvite            `protobuf:"bytes,1,opt,name=user_invite,json=userInvite,proto3" json:"user_invite,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateUserInviteRequest) Reset() {
	*x = CreateUserInviteRequest{}
	mi := &file_openauth_frontend_v1_frontend_proto_msgTypes[66]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateUserInviteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateUserInviteRequest) ProtoMessage() {}

func (x *CreateUserInviteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_openauth_frontend_v1_frontend_proto_msgTypes[66]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateUserInviteRequest.ProtoReflect.Descriptor instead.
func (*CreateUserInviteRequest) Descriptor() ([]byte, []int) {
	return file_openauth_frontend_v1_frontend_proto_rawDescGZIP(), []int{66}
}

func (x *CreateUserInviteRequest) GetUserInvite() *UserInvite {
	if x != nil {
		return x.UserInvite
	}
	return nil
}

type CreateUserInviteResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserInvite    *UserInvite            `protobuf:"bytes,1,opt,name=user_invite,json=userInvite,proto3" json:"user_invite,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateUserInviteResponse) Reset() {
	*x = CreateUserInviteResponse{}
	mi := &file_openauth_frontend_v1_frontend_proto_msgTypes[67]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateUserInviteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateUserInviteResponse) ProtoMessage() {}

func (x *CreateUserInviteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_openauth_frontend_v1_frontend_proto_msgTypes[67]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateUserInviteResponse.ProtoReflect.Descriptor instead.
func (*CreateUserInviteResponse) Descriptor() ([]byte, []int) {
	return file_openauth_frontend_v1_frontend_proto_rawDescGZIP(), []int{67}
}

func (x *CreateUserInviteResponse) GetUserInvite() *UserInvite {
	if x != nil {
		return x.UserInvite
	}
	return nil
}

type DeleteUserInviteRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteUserInviteRequest) Reset() {
	*x = DeleteUserInviteRequest{}
	mi := &file_openauth_frontend_v1_frontend_proto_msgTypes[68]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteUserInviteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteUserInviteRequest) ProtoMessage() {}

func (x *DeleteUserInviteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_openauth_frontend_v1_frontend_proto_msgTypes[68]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteUserInviteRequest.ProtoReflect.Descriptor instead.
func (*DeleteUserInviteRequest) Descriptor() ([]byte, []int) {
	return file_openauth_frontend_v1_frontend_proto_rawDescGZIP(), []int{68}
}

func (x *DeleteUserInviteRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type DeleteUserInviteResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteUserInviteResponse) Reset() {
	*x = DeleteUserInviteResponse{}
	mi := &file_openauth_frontend_v1_frontend_proto_msgTypes[69]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteUserInviteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteUserInviteResponse) ProtoMessage() {}

func (x *DeleteUserInviteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_openauth_frontend_v1_frontend_proto_msgTypes[69]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteUserInviteResponse.ProtoReflect.Descriptor instead.
func (*DeleteUserInviteResponse) Descriptor() ([]byte, []int) {
	return file_openauth_frontend_v1_frontend_proto_rawDescGZIP(), []int{69}
}

type SetPasswordRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The the user's new password.
	Password      string `protobuf:"bytes,1,opt,name=password,proto3" json:"password,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SetPasswordRequest) Reset() {
	*x = SetPasswordRequest{}
	mi := &file_openauth_frontend_v1_frontend_proto_msgTypes[70]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetPasswordRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetPasswordRequest) ProtoMessage() {}

func (x *SetPasswordRequest) ProtoReflect() protoreflect.Message {
	mi := &file_openauth_frontend_v1_frontend_proto_msgTypes[70]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetPasswordRequest.ProtoReflect.Descriptor instead.
func (*SetPasswordRequest) Descriptor() ([]byte, []int) {
	return file_openauth_frontend_v1_frontend_proto_rawDescGZIP(), []int{70}
}

func (x *SetPasswordRequest) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

type SetPasswordResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SetPasswordResponse) Reset() {
	*x = SetPasswordResponse{}
	mi := &file_openauth_frontend_v1_frontend_proto_msgTypes[71]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetPasswordResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetPasswordResponse) ProtoMessage() {}

func (x *SetPasswordResponse) ProtoReflect() protoreflect.Message {
	mi := &file_openauth_frontend_v1_frontend_proto_msgTypes[71]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetPasswordResponse.ProtoReflect.Descriptor instead.
func (*SetPasswordResponse) Descriptor() ([]byte, []int) {
	return file_openauth_frontend_v1_frontend_proto_rawDescGZIP(), []int{71}
}

var File_openauth_frontend_v1_frontend_proto protoreflect.FileDescriptor

var file_openauth_frontend_v1_frontend_proto_rawDesc = string([]byte{
	0x0a, 0x23, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x75, 0x74, 0x68, 0x2f, 0x66, 0x72, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x64, 0x2f, 0x76, 0x31, 0x2f, 0x66, 0x72, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x64, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x14, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x75, 0x74, 0x68, 0x2e,
	0x66, 0x72, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x1a, 0x1c, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x21, 0x6f, 0x70, 0x65, 0x6e, 0x61,
	0x75, 0x74, 0x68, 0x2f, 0x66, 0x72, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x64, 0x2f, 0x76, 0x31, 0x2f,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x0f, 0x0a, 0x0d,
	0x4c, 0x6f, 0x67, 0x6f, 0x75, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x10, 0x0a,
	0x0e, 0x4c, 0x6f, 0x67, 0x6f, 0x75, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x35, 0x0a, 0x0e, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x5f, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73,
	0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x34, 0x0a, 0x0f, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73,
	0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x13, 0x0a, 0x11,
	0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x22, 0x4d, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61,
	0x75, 0x74, 0x68, 0x2e, 0x66, 0x72, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e,
	0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x22, 0x18, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x61, 0x0a, 0x17, 0x47, 0x65,
	0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x46, 0x0a, 0x0c, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x66, 0x72, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x64, 0x2e,
	0x76, 0x31, 0x2e, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x0c, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x63, 0x0a,
	0x19, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x46, 0x0a, 0x0c, 0x6f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x22, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x66, 0x72, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x22, 0x64, 0x0a, 0x1a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x46, 0x0a, 0x0c, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x75, 0x74,
	0x68, 0x2e, 0x66, 0x72, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x6f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x54, 0x0a, 0x29, 0x47, 0x65, 0x74, 0x4f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x48, 0x6f, 0x73, 0x74, 0x65, 0x64, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0xb1,
	0x01, 0x0a, 0x2a, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x48, 0x6f, 0x73, 0x74, 0x65, 0x64, 0x44, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x82, 0x01,
	0x0a, 0x22, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x5f, 0x68, 0x6f, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x64, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x66, 0x72, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x64, 0x2e, 0x76,
	0x31, 0x2e, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x48, 0x6f, 0x73, 0x74, 0x65, 0x64, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x73, 0x52, 0x1f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x48, 0x6f, 0x73, 0x74, 0x65, 0x64, 0x44, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x73, 0x22, 0xdc, 0x01, 0x0a, 0x2c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x48,
	0x6f, 0x73, 0x74, 0x65, 0x64, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x82, 0x01, 0x0a,
	0x22, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x5f, 0x68, 0x6f, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x64, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x61, 0x75, 0x74, 0x68, 0x2e, 0x66, 0x72, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31,
	0x2e, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x48, 0x6f, 0x73, 0x74, 0x65, 0x64, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73,
	0x52, 0x1f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x48, 0x6f, 0x73, 0x74, 0x65, 0x64, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x73, 0x22, 0xb4, 0x01, 0x0a, 0x2d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x48, 0x6f,
	0x73, 0x74, 0x65, 0x64, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x82, 0x01, 0x0a, 0x22, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x5f, 0x68, 0x6f, 0x73, 0x74,
	0x65, 0x64, 0x5f, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x35, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x66, 0x72, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x48, 0x6f, 0x73, 0x74, 0x65, 0x64,
	0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x52, 0x1f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x48, 0x6f, 0x73, 0x74, 0x65,
	0x64, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x22, 0x53, 0x0a, 0x28, 0x47, 0x65, 0x74, 0x4f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x69, 0x63, 0x72, 0x6f,
	0x73, 0x6f, 0x66, 0x74, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x44, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0xac, 0x01,
	0x0a, 0x29, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x4d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x6f, 0x66, 0x74, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74,
	0x49, 0x44, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x7f, 0x0a, 0x21, 0x6f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x69, 0x63, 0x72,
	0x6f, 0x73, 0x6f, 0x66, 0x74, 0x5f, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x75, 0x74,
	0x68, 0x2e, 0x66, 0x72, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x69, 0x63, 0x72, 0x6f, 0x73,
	0x6f, 0x66, 0x74, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x44, 0x73, 0x52, 0x1e, 0x6f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x69, 0x63, 0x72, 0x6f, 0x73,
	0x6f, 0x66, 0x74, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x73, 0x22, 0xd7, 0x01, 0x0a,
	0x2b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x4d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x6f, 0x66, 0x74, 0x54, 0x65, 0x6e, 0x61,
	0x6e, 0x74, 0x49, 0x44, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x0f,
	0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x7f, 0x0a, 0x21, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x6f, 0x66, 0x74, 0x5f,
	0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x34, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x66, 0x72, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x6f, 0x66, 0x74, 0x54, 0x65, 0x6e,
	0x61, 0x6e, 0x74, 0x49, 0x44, 0x73, 0x52, 0x1e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x6f, 0x66, 0x74, 0x54, 0x65, 0x6e,
	0x61, 0x6e, 0x74, 0x49, 0x64, 0x73, 0x22, 0xaf, 0x01, 0x0a, 0x2c, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x69, 0x63,
	0x72, 0x6f, 0x73, 0x6f, 0x66, 0x74, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x44, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x7f, 0x0a, 0x21, 0x6f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x6f, 0x66,
	0x74, 0x5f, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x34, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x66, 0x72,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x6f, 0x66, 0x74, 0x54,
	0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x44, 0x73, 0x52, 0x1e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x6f, 0x66, 0x74, 0x54,
	0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x73, 0x22, 0x5a, 0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74,
	0x55, 0x73, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x0f,
	0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x6d, 0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x30, 0x0a, 0x05, 0x75, 0x73, 0x65,
	0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61,
	0x75, 0x74, 0x68, 0x2e, 0x66, 0x72, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e,
	0x55, 0x73, 0x65, 0x72, 0x52, 0x05, 0x75, 0x73, 0x65, 0x72, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6e,
	0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x22, 0x20, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x41, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x75, 0x74,
	0x68, 0x2e, 0x66, 0x72, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x22, 0x53, 0x0a, 0x11, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2e, 0x0a,
	0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x66, 0x72, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x64, 0x2e,
	0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x22, 0x44, 0x0a,
	0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x66, 0x72, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x04, 0x75,
	0x73, 0x65, 0x72, 0x22, 0x23, 0x0a, 0x11, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x55, 0x73, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x14, 0x0a, 0x12, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3b,
	0x0a, 0x1a, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x41, 0x4d, 0x4c, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a,
	0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x96, 0x01, 0x0a, 0x1b,
	0x4c, 0x69, 0x73, 0x74, 0x53, 0x41, 0x4d, 0x4c, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4f, 0x0a, 0x10, 0x73,
	0x61, 0x6d, 0x6c, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x75, 0x74, 0x68,
	0x2e, 0x66, 0x72, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x41, 0x4d,
	0x4c, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x73, 0x61, 0x6d,
	0x6c, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x26, 0x0a, 0x0f,
	0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x2a, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x53, 0x41, 0x4d, 0x4c, 0x43,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x22, 0x6a, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x53, 0x41, 0x4d, 0x4c, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4d, 0x0a,
	0x0f, 0x73, 0x61, 0x6d, 0x6c, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x75, 0x74,
	0x68, 0x2e, 0x66, 0x72, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x41,
	0x4d, 0x4c, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x73, 0x61,
	0x6d, 0x6c, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x6c, 0x0a, 0x1b,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x41, 0x4d, 0x4c, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4d, 0x0a, 0x0f, 0x73,
	0x61, 0x6d, 0x6c, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x75, 0x74, 0x68, 0x2e,
	0x66, 0x72, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x41, 0x4d, 0x4c,
	0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x73, 0x61, 0x6d, 0x6c,
	0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x6d, 0x0a, 0x1c, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x53, 0x41, 0x4d, 0x4c, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4d, 0x0a, 0x0f, 0x73, 0x61,
	0x6d, 0x6c, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x66,
	0x72, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x41, 0x4d, 0x4c, 0x43,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x73, 0x61, 0x6d, 0x6c, 0x43,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x7c, 0x0a, 0x1b, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x53, 0x41, 0x4d, 0x4c, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x4d, 0x0a, 0x0f, 0x73, 0x61, 0x6d, 0x6c,
	0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x66, 0x72, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x41, 0x4d, 0x4c, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x73, 0x61, 0x6d, 0x6c, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x6d, 0x0a, 0x1c, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x53, 0x41, 0x4d, 0x4c, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4d, 0x0a, 0x0f, 0x73, 0x61, 0x6d, 0x6c, 0x5f,
	0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x66, 0x72, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x41, 0x4d, 0x4c, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x73, 0x61, 0x6d, 0x6c, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x2d, 0x0a, 0x1b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x53, 0x41, 0x4d, 0x4c, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x1e, 0x0a, 0x1c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53,
	0x41, 0x4d, 0x4c, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x37, 0x0a, 0x16, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x43, 0x49,
	0x4d, 0x41, 0x50, 0x49, 0x4b, 0x65, 0x79, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x87,
	0x01, 0x0a, 0x17, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x43, 0x49, 0x4d, 0x41, 0x50, 0x49, 0x4b, 0x65,
	0x79, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x44, 0x0a, 0x0d, 0x73, 0x63,
	0x69, 0x6d, 0x5f, 0x61, 0x70, 0x69, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x66, 0x72, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x43, 0x49, 0x4d, 0x41, 0x50, 0x49,
	0x4b, 0x65, 0x79, 0x52, 0x0b, 0x73, 0x63, 0x69, 0x6d, 0x41, 0x70, 0x69, 0x4b, 0x65, 0x79, 0x73,
	0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50,
	0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x26, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x53,
	0x43, 0x49, 0x4d, 0x41, 0x50, 0x49, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x22, 0x5b, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x53, 0x43, 0x49, 0x4d, 0x41, 0x50, 0x49, 0x4b, 0x65,
	0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x42, 0x0a, 0x0c, 0x73, 0x63, 0x69,
	0x6d, 0x5f, 0x61, 0x70, 0x69, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x20, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x66, 0x72, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x43, 0x49, 0x4d, 0x41, 0x50, 0x49, 0x4b, 0x65,
	0x79, 0x52, 0x0a, 0x73, 0x63, 0x69, 0x6d, 0x41, 0x70, 0x69, 0x4b, 0x65, 0x79, 0x22, 0x5d, 0x0a,
	0x17, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x43, 0x49, 0x4d, 0x41, 0x50, 0x49, 0x4b, 0x65,
	0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x42, 0x0a, 0x0c, 0x73, 0x63, 0x69, 0x6d,
	0x5f, 0x61, 0x70, 0x69, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x66, 0x72, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x43, 0x49, 0x4d, 0x41, 0x50, 0x49, 0x4b, 0x65, 0x79,
	0x52, 0x0a, 0x73, 0x63, 0x69, 0x6d, 0x41, 0x70, 0x69, 0x4b, 0x65, 0x79, 0x22, 0x5e, 0x0a, 0x18,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x43, 0x49, 0x4d, 0x41, 0x50, 0x49, 0x4b, 0x65, 0x79,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x42, 0x0a, 0x0c, 0x73, 0x63, 0x69, 0x6d,
	0x5f, 0x61, 0x70, 0x69, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x66, 0x72, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x43, 0x49, 0x4d, 0x41, 0x50, 0x49, 0x4b, 0x65, 0x79,
	0x52, 0x0a, 0x73, 0x63, 0x69, 0x6d, 0x41, 0x70, 0x69, 0x4b, 0x65, 0x79, 0x22, 0x6d, 0x0a, 0x17,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x43, 0x49, 0x4d, 0x41, 0x50, 0x49, 0x4b, 0x65, 0x79,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x42, 0x0a, 0x0c, 0x73, 0x63, 0x69, 0x6d, 0x5f,
	0x61, 0x70, 0x69, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x66, 0x72, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x64, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x43, 0x49, 0x4d, 0x41, 0x50, 0x49, 0x4b, 0x65, 0x79, 0x52,
	0x0a, 0x73, 0x63, 0x69, 0x6d, 0x41, 0x70, 0x69, 0x4b, 0x65, 0x79, 0x22, 0x5e, 0x0a, 0x18, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x43, 0x49, 0x4d, 0x41, 0x50, 0x49, 0x4b, 0x65, 0x79, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x42, 0x0a, 0x0c, 0x73, 0x63, 0x69, 0x6d, 0x5f,
	0x61, 0x70, 0x69, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x66, 0x72, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x64, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x43, 0x49, 0x4d, 0x41, 0x50, 0x49, 0x4b, 0x65, 0x79, 0x52,
	0x0a, 0x73, 0x63, 0x69, 0x6d, 0x41, 0x70, 0x69, 0x4b, 0x65, 0x79, 0x22, 0x29, 0x0a, 0x17, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x43, 0x49, 0x4d, 0x41, 0x50, 0x49, 0x4b, 0x65, 0x79, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x1a, 0x0a, 0x18, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x53, 0x43, 0x49, 0x4d, 0x41, 0x50, 0x49, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x29, 0x0a, 0x17, 0x52, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x53, 0x43, 0x49, 0x4d,
	0x41, 0x50, 0x49, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x5e, 0x0a,
	0x18, 0x52, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x53, 0x43, 0x49, 0x4d, 0x41, 0x50, 0x49, 0x4b, 0x65,
	0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x42, 0x0a, 0x0c, 0x73, 0x63, 0x69,
	0x6d, 0x5f, 0x61, 0x70, 0x69, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x20, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x66, 0x72, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x43, 0x49, 0x4d, 0x41, 0x50, 0x49, 0x4b, 0x65,
	0x79, 0x52, 0x0a, 0x73, 0x63, 0x69, 0x6d, 0x41, 0x70, 0x69, 0x4b, 0x65, 0x79, 0x22, 0x0f, 0x0a,
	0x0d, 0x57, 0x68, 0x6f, 0x61, 0x6d, 0x69, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x40,
	0x0a, 0x0e, 0x57, 0x68, 0x6f, 0x61, 0x6d, 0x69, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x2e, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x66, 0x72, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72,
	0x22, 0x36, 0x0a, 0x15, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x79, 0x50, 0x61, 0x73, 0x73, 0x6b, 0x65,
	0x79, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67,
	0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70,
	0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x7b, 0x0a, 0x16, 0x4c, 0x69, 0x73, 0x74,
	0x4d, 0x79, 0x50, 0x61, 0x73, 0x73, 0x6b, 0x65, 0x79, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x39, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x75, 0x74, 0x68, 0x2e,
	0x66, 0x72, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x73, 0x73,
	0x6b, 0x65, 0x79, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x6b, 0x65, 0x79, 0x73, 0x12, 0x26, 0x0a,
	0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x28, 0x0a, 0x16, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d,
	0x79, 0x50, 0x61, 0x73, 0x73, 0x6b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22,
	0x19, 0x0a, 0x17, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x79, 0x50, 0x61, 0x73, 0x73, 0x6b,
	0x65, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1a, 0x0a, 0x18, 0x47, 0x65,
	0x74, 0x50, 0x61, 0x73, 0x73, 0x6b, 0x65, 0x79, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x8e, 0x01, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x50, 0x61,
	0x73, 0x73, 0x6b, 0x65, 0x79, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x13, 0x0a, 0x05, 0x72, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x72, 0x70, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x72, 0x70, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x70, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x75, 0x73, 0x65, 0x72, 0x44, 0x69, 0x73, 0x70,
	0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x5c, 0x0a, 0x16, 0x52, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x65, 0x72, 0x50, 0x61, 0x73, 0x73, 0x6b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x2d, 0x0a, 0x12, 0x61, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x61,
	0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x12, 0x13, 0x0a, 0x05, 0x72, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x72, 0x70, 0x49, 0x64, 0x22, 0x52, 0x0a, 0x17, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65,
	0x72, 0x50, 0x61, 0x73, 0x73, 0x6b, 0x65, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x37, 0x0a, 0x07, 0x70, 0x61, 0x73, 0x73, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x66, 0x72, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x73, 0x73, 0x6b, 0x65, 0x79,
	0x52, 0x07, 0x70, 0x61, 0x73, 0x73, 0x6b, 0x65, 0x79, 0x22, 0x23, 0x0a, 0x21, 0x47, 0x65, 0x74,
	0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x41, 0x70, 0x70,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x45,
	0x0a, 0x22, 0x47, 0x65, 0x74, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74,
	0x6f, 0x72, 0x41, 0x70, 0x70, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6f, 0x74, 0x70, 0x61, 0x75, 0x74, 0x68, 0x5f,
	0x75, 0x72, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6f, 0x74, 0x70, 0x61, 0x75,
	0x74, 0x68, 0x55, 0x72, 0x69, 0x22, 0x3e, 0x0a, 0x1f, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65,
	0x72, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x41, 0x70,
	0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x6f, 0x74, 0x70,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x6f, 0x74,
	0x70, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x49, 0x0a, 0x20, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65,
	0x72, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x41, 0x70,
	0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x65, 0x63,
	0x6f, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x0d, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x73,
	0x22, 0x37, 0x0a, 0x16, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x76, 0x69,
	0x74, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61,
	0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x86, 0x01, 0x0a, 0x17, 0x4c, 0x69,
	0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x43, 0x0a, 0x0c, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x6e,
	0x76, 0x69, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x66, 0x72, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x64, 0x2e,
	0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x52, 0x0b, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65,
	0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x22, 0x26, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x76,
	0x69, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x5a, 0x0a, 0x15, 0x47, 0x65,
	0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x41, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x76, 0x69,
	0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61,
	0x75, 0x74, 0x68, 0x2e, 0x66, 0x72, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x52, 0x0a, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x22, 0x5c, 0x0a, 0x17, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x41, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x75, 0x74,
	0x68, 0x2e, 0x66, 0x72, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x52, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x49, 0x6e,
	0x76, 0x69, 0x74, 0x65, 0x22, 0x5d, 0x0a, 0x18, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x41, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x75, 0x74, 0x68,
	0x2e, 0x66, 0x72, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x52, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x76,
	0x69, 0x74, 0x65, 0x22, 0x29, 0x0a, 0x17, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x1a,
	0x0a, 0x18, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x76, 0x69,
	0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x30, 0x0a, 0x12, 0x53, 0x65,
	0x74, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x22, 0x15, 0x0a, 0x13,
	0x53, 0x65, 0x74, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x32, 0xdd, 0x2d, 0x0a, 0x0f, 0x46, 0x72, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x64,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x73, 0x0a, 0x06, 0x4c, 0x6f, 0x67, 0x6f, 0x75,
	0x74, 0x12, 0x23, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x66, 0x72, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x67, 0x6f, 0x75, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x75, 0x74,
	0x68, 0x2e, 0x66, 0x72, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f,
	0x67, 0x6f, 0x75, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1e, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x18, 0x3a, 0x01, 0x2a, 0x22, 0x13, 0x2f, 0x66, 0x72, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x64, 0x2f, 0x76, 0x31, 0x2f, 0x6c, 0x6f, 0x67, 0x6f, 0x75, 0x74, 0x12, 0x77, 0x0a, 0x07,
	0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x12, 0x24, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x75,
	0x74, 0x68, 0x2e, 0x66, 0x72, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x52,
	0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x66, 0x72, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x64, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x19, 0x3a, 0x01, 0x2a, 0x22,
	0x14, 0x2f, 0x66, 0x72, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x64, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x65,
	0x66, 0x72, 0x65, 0x73, 0x68, 0x12, 0x7d, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x12, 0x27, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x66,
	0x72, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x66, 0x72, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x64,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x16, 0x12, 0x14,
	0x2f, 0x66, 0x72, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x64, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x12, 0x91, 0x01, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2c, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61,
	0x75, 0x74, 0x68, 0x2e, 0x66, 0x72, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x75, 0x74,
	0x68, 0x2e, 0x66, 0x72, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65,
	0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x21, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1b, 0x12, 0x19, 0x2f,
	0x66, 0x72, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x64, 0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0xa8, 0x01, 0x0a, 0x12, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x2f, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x66, 0x72, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x30, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x66, 0x72, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x2f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x29, 0x3a, 0x0c, 0x6f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x32, 0x19, 0x2f, 0x66, 0x72, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x64, 0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0xd3, 0x01, 0x0a, 0x22, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x48, 0x6f, 0x73,
	0x74, 0x65, 0x64, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x12, 0x3f, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x66, 0x72, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x64, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x48, 0x6f, 0x73, 0x74, 0x65, 0x64, 0x44, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x40, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x66, 0x72, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x64, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x48, 0x6f, 0x73, 0x74, 0x65, 0x64, 0x44, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2a, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x24, 0x12, 0x22, 0x2f, 0x66, 0x72, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x64,
	0x2f, 0x76, 0x31, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2d, 0x68, 0x6f, 0x73, 0x74, 0x65,
	0x64, 0x2d, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x12, 0x80, 0x02, 0x0a, 0x25, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x48, 0x6f, 0x73, 0x74, 0x65, 0x64, 0x44, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x73, 0x12, 0x42, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x66,
	0x72, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x48, 0x6f, 0x73, 0x74, 0x65, 0x64, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x43, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x75,
	0x74, 0x68, 0x2e, 0x66, 0x72, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x48, 0x6f, 0x73, 0x74, 0x65, 0x64, 0x44, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x4e, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x48, 0x3a, 0x22, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x5f, 0x68, 0x6f, 0x73, 0x74, 0x65, 0x64,
	0x5f, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x32, 0x22, 0x2f, 0x66, 0x72, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x64, 0x2f, 0x76, 0x31, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2d, 0x68, 0x6f,
	0x73, 0x74, 0x65, 0x64, 0x2d, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x12, 0xcf, 0x01, 0x0a,
	0x21, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x4d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x6f, 0x66, 0x74, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49,
	0x44, 0x73, 0x12, 0x3e, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x66, 0x72,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x6f,
	0x66, 0x74, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x44, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x3f, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x66, 0x72,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x6f,
	0x66, 0x74, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x44, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x29, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x23, 0x12, 0x21, 0x2f, 0x66, 0x72,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x64, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73,
	0x6f, 0x66, 0x74, 0x2d, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x2d, 0x69, 0x64, 0x73, 0x12, 0xfb,
	0x01, 0x0a, 0x24, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x6f, 0x66, 0x74, 0x54, 0x65,
	0x6e, 0x61, 0x6e, 0x74, 0x49, 0x44, 0x73, 0x12, 0x41, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x75,
	0x74, 0x68, 0x2e, 0x66, 0x72, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x4d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x6f, 0x66, 0x74, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74,
	0x49, 0x44, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x42, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x66, 0x72, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x64, 0x2e, 0x76,
	0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x6f, 0x66, 0x74, 0x54, 0x65, 0x6e,
	0x61, 0x6e, 0x74, 0x49, 0x44, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x4c,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x46, 0x3a, 0x21, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x6f, 0x66, 0x74, 0x5f, 0x74,
	0x65, 0x6e, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x32, 0x21, 0x2f, 0x66, 0x72, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x64, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x6f, 0x66,
	0x74, 0x2d, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x2d, 0x69, 0x64, 0x73, 0x12, 0x78, 0x0a, 0x09,
	0x4c, 0x69, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x73, 0x12, 0x26, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x61, 0x75, 0x74, 0x68, 0x2e, 0x66, 0x72, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x27, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x66, 0x72, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x73, 0x65,
	0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1a, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x14, 0x12, 0x12, 0x2f, 0x66, 0x72, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x64, 0x2f, 0x76, 0x31,
	0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x12, 0x77, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65,
	0x72, 0x12, 0x24, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x66, 0x72, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x75,
	0x74, 0x68, 0x2e, 0x66, 0x72, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1f,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x19, 0x12, 0x17, 0x2f, 0x66, 0x72, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x64, 0x2f, 0x76, 0x31, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12,
	0x86, 0x01, 0x0a, 0x0a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x12, 0x27,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x66, 0x72, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x75,
	0x74, 0x68, 0x2e, 0x66, 0x72, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x25, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1f, 0x3a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x32,
	0x17, 0x2f, 0x66, 0x72, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x64, 0x2f, 0x76, 0x31, 0x2f, 0x75, 0x73,
	0x65, 0x72, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0x80, 0x01, 0x0a, 0x0a, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x12, 0x27, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x75,
	0x74, 0x68, 0x2e, 0x66, 0x72, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x28, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x66, 0x72, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x55, 0x73,
	0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1f, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x19, 0x2a, 0x17, 0x2f, 0x66, 0x72, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x64, 0x2f, 0x76, 0x31,
	0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0x8d, 0x01, 0x0a, 0x0b,
	0x53, 0x65, 0x74, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x28, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x66, 0x72, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x64, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x75, 0x74, 0x68,
	0x2e, 0x66, 0x72, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74,
	0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x29, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x23, 0x3a, 0x01, 0x2a, 0x22, 0x1e, 0x2f, 0x66, 0x72,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x64, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x65, 0x74, 0x2d, 0x75, 0x73,
	0x65, 0x72, 0x2d, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0xa1, 0x01, 0x0a, 0x13,
	0x4c, 0x69, 0x73, 0x74, 0x53, 0x41, 0x4d, 0x4c, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x30, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x66,
	0x72, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53,
	0x41, 0x4d, 0x4c, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x75, 0x74, 0x68,
	0x2e, 0x66, 0x72, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x53, 0x41, 0x4d, 0x4c, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x25, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1f,
	0x12, 0x1d, 0x2f, 0x66, 0x72, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x64, 0x2f, 0x76, 0x31, 0x2f, 0x73,
	0x61, 0x6d, 0x6c, 0x2d, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0xa0, 0x01, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x53, 0x41, 0x4d, 0x4c, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x75, 0x74, 0x68,
	0x2e, 0x66, 0x72, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74,
	0x53, 0x41, 0x4d, 0x4c, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x75, 0x74, 0x68,
	0x2e, 0x66, 0x72, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74,
	0x53, 0x41, 0x4d, 0x4c, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x24, 0x12, 0x22,
	0x2f, 0x66, 0x72, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x64, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x61, 0x6d,
	0x6c, 0x2d, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x69,
	0x64, 0x7d, 0x12, 0xb5, 0x01, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x41, 0x4d,
	0x4c, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x31, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x66, 0x72, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x64, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x41, 0x4d, 0x4c, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x66, 0x72, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x41, 0x4d, 0x4c,
	0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x36, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x30, 0x3a, 0x0f, 0x73, 0x61, 0x6d, 0x6c,
	0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x1d, 0x2f, 0x66, 0x72,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x64, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x61, 0x6d, 0x6c, 0x2d, 0x63,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0xba, 0x01, 0x0a, 0x14, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x41, 0x4d, 0x4c, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x31, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x66,
	0x72, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x53, 0x41, 0x4d, 0x4c, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x75, 0x74,
	0x68, 0x2e, 0x66, 0x72, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x53, 0x41, 0x4d, 0x4c, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3b, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x35, 0x3a, 0x0f, 0x73, 0x61, 0x6d, 0x6c, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x32, 0x22, 0x2f, 0x66, 0x72, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x64, 0x2f, 0x76,
	0x31, 0x2f, 0x73, 0x61, 0x6d, 0x6c, 0x2d, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0xa9, 0x01, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x53, 0x41, 0x4d, 0x4c, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x31, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x66, 0x72, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x41,
	0x4d, 0x4c, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x66,
	0x72, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x53, 0x41, 0x4d, 0x4c, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x24, 0x2a,
	0x22, 0x2f, 0x66, 0x72, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x64, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x61,
	0x6d, 0x6c, 0x2d, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b,
	0x69, 0x64, 0x7d, 0x12, 0x92, 0x01, 0x0a, 0x0f, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x43, 0x49, 0x4d,
	0x41, 0x50, 0x49, 0x4b, 0x65, 0x79, 0x73, 0x12, 0x2c, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x75,
	0x74, 0x68, 0x2e, 0x66, 0x72, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x53, 0x43, 0x49, 0x4d, 0x41, 0x50, 0x49, 0x4b, 0x65, 0x79, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x75, 0x74, 0x68,
	0x2e, 0x66, 0x72, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x53, 0x43, 0x49, 0x4d, 0x41, 0x50, 0x49, 0x4b, 0x65, 0x79, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x22, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1c, 0x12, 0x1a, 0x2f, 0x66,
	0x72, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x64, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x63, 0x69, 0x6d, 0x2d,
	0x61, 0x70, 0x69, 0x2d, 0x6b, 0x65, 0x79, 0x73, 0x12, 0x91, 0x01, 0x0a, 0x0d, 0x47, 0x65, 0x74,
	0x53, 0x43, 0x49, 0x4d, 0x41, 0x50, 0x49, 0x4b, 0x65, 0x79, 0x12, 0x2a, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x66, 0x72, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x64, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x43, 0x49, 0x4d, 0x41, 0x50, 0x49, 0x4b, 0x65, 0x79, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x75, 0x74,
	0x68, 0x2e, 0x66, 0x72, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65,
	0x74, 0x53, 0x43, 0x49, 0x4d, 0x41, 0x50, 0x49, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x27, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x21, 0x12, 0x1f, 0x2f, 0x66, 0x72,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x64, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x63, 0x69, 0x6d, 0x2d, 0x61,
	0x70, 0x69, 0x2d, 0x6b, 0x65, 0x79, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0xa3, 0x01, 0x0a,
	0x10, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x43, 0x49, 0x4d, 0x41, 0x50, 0x49, 0x4b, 0x65,
	0x79, 0x12, 0x2d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x66, 0x72, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53,
	0x43, 0x49, 0x4d, 0x41, 0x50, 0x49, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x2e, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x66, 0x72, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x43,
	0x49, 0x4d, 0x41, 0x50, 0x49, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x30, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2a, 0x3a, 0x0c, 0x73, 0x63, 0x69, 0x6d, 0x5f, 0x61,
	0x70, 0x69, 0x5f, 0x6b, 0x65, 0x79, 0x22, 0x1a, 0x2f, 0x66, 0x72, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x64, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x63, 0x69, 0x6d, 0x2d, 0x61, 0x70, 0x69, 0x2d, 0x6b, 0x65,
	0x79, 0x73, 0x12, 0xa8, 0x01, 0x0a, 0x10, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x43, 0x49,
	0x4d, 0x41, 0x50, 0x49, 0x4b, 0x65, 0x79, 0x12, 0x2d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x75,
	0x74, 0x68, 0x2e, 0x66, 0x72, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x43, 0x49, 0x4d, 0x41, 0x50, 0x49, 0x4b, 0x65, 0x79, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x75, 0x74,
	0x68, 0x2e, 0x66, 0x72, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x53, 0x43, 0x49, 0x4d, 0x41, 0x50, 0x49, 0x4b, 0x65, 0x79, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x35, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2f, 0x3a, 0x0c,
	0x73, 0x63, 0x69, 0x6d, 0x5f, 0x61, 0x70, 0x69, 0x5f, 0x6b, 0x65, 0x79, 0x32, 0x1f, 0x2f, 0x66,
	0x72, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x64, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x63, 0x69, 0x6d, 0x2d,
	0x61, 0x70, 0x69, 0x2d, 0x6b, 0x65, 0x79, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0x9a, 0x01,
	0x0a, 0x10, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x43, 0x49, 0x4d, 0x41, 0x50, 0x49, 0x4b,
	0x65, 0x79, 0x12, 0x2d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x66, 0x72,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x53, 0x43, 0x49, 0x4d, 0x41, 0x50, 0x49, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x2e, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x66, 0x72, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53,
	0x43, 0x49, 0x4d, 0x41, 0x50, 0x49, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x27, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x21, 0x2a, 0x1f, 0x2f, 0x66, 0x72, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x64, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x63, 0x69, 0x6d, 0x2d, 0x61, 0x70, 0x69,
	0x2d, 0x6b, 0x65, 0x79, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0xa1, 0x01, 0x0a, 0x10, 0x52,
	0x65, 0x76, 0x6f, 0x6b, 0x65, 0x53, 0x43, 0x49, 0x4d, 0x41, 0x50, 0x49, 0x4b, 0x65, 0x79, 0x12,
	0x2d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x66, 0x72, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x53, 0x43, 0x49,
	0x4d, 0x41, 0x50, 0x49, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x66, 0x72, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x53, 0x43, 0x49, 0x4d,
	0x41, 0x50, 0x49, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2e,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x28, 0x22, 0x26, 0x2f, 0x66, 0x72, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x64, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x63, 0x69, 0x6d, 0x2d, 0x61, 0x70, 0x69, 0x2d, 0x6b, 0x65,
	0x79, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x2f, 0x72, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x12, 0x6c,
	0x0a, 0x06, 0x57, 0x68, 0x6f, 0x61, 0x6d, 0x69, 0x12, 0x23, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61,
	0x75, 0x74, 0x68, 0x2e, 0x66, 0x72, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e,
	0x57, 0x68, 0x6f, 0x61, 0x6d, 0x69, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x66, 0x72, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x64, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x68, 0x6f, 0x61, 0x6d, 0x69, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x17, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x11, 0x12, 0x0f, 0x2f, 0x66, 0x72,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x64, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x65, 0x12, 0x8d, 0x01, 0x0a,
	0x0e, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x79, 0x50, 0x61, 0x73, 0x73, 0x6b, 0x65, 0x79, 0x73, 0x12,
	0x2b, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x66, 0x72, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x79, 0x50, 0x61, 0x73,
	0x73, 0x6b, 0x65, 0x79, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x66, 0x72, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x64,
	0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x79, 0x50, 0x61, 0x73, 0x73, 0x6b, 0x65,
	0x79, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x20, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x1a, 0x12, 0x18, 0x2f, 0x66, 0x72, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x64, 0x2f, 0x76, 0x31,
	0x2f, 0x6d, 0x65, 0x2f, 0x70, 0x61, 0x73, 0x73, 0x6b, 0x65, 0x79, 0x73, 0x12, 0x95, 0x01, 0x0a,
	0x0f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x79, 0x50, 0x61, 0x73, 0x73, 0x6b, 0x65, 0x79,
	0x12, 0x2c, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x66, 0x72, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x79,
	0x50, 0x61, 0x73, 0x73, 0x6b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x66, 0x72, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x79, 0x50, 0x61,
	0x73, 0x73, 0x6b, 0x65, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x25, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x1f, 0x2a, 0x1d, 0x2f, 0x66, 0x72, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x64,
	0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x65, 0x2f, 0x70, 0x61, 0x73, 0x73, 0x6b, 0x65, 0x79, 0x73, 0x2f,
	0x7b, 0x69, 0x64, 0x7d, 0x12, 0x9e, 0x01, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x50, 0x61, 0x73, 0x73,
	0x6b, 0x65, 0x79, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2e, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x66, 0x72, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x64, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x61, 0x73, 0x73, 0x6b, 0x65, 0x79, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x66, 0x72, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x64, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x61, 0x73, 0x73, 0x6b, 0x65, 0x79, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x28, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x22, 0x22, 0x20, 0x2f, 0x66, 0x72, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x64, 0x2f, 0x76,
	0x31, 0x2f, 0x6d, 0x65, 0x2f, 0x70, 0x61, 0x73, 0x73, 0x6b, 0x65, 0x79, 0x73, 0x2f, 0x6f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x9c, 0x01, 0x0a, 0x0f, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x65, 0x72, 0x50, 0x61, 0x73, 0x73, 0x6b, 0x65, 0x79, 0x12, 0x2c, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x61, 0x75, 0x74, 0x68, 0x2e, 0x66, 0x72, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31,
	0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x50, 0x61, 0x73, 0x73, 0x6b, 0x65, 0x79,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x75,
	0x74, 0x68, 0x2e, 0x66, 0x72, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x52,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x50, 0x61, 0x73, 0x73, 0x6b, 0x65, 0x79, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x26, 0x3a, 0x01,
	0x2a, 0x22, 0x21, 0x2f, 0x66, 0x72, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x64, 0x2f, 0x76, 0x31, 0x2f,
	0x6d, 0x65, 0x2f, 0x70, 0x61, 0x73, 0x73, 0x6b, 0x65, 0x79, 0x73, 0x2f, 0x72, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x65, 0x72, 0x12, 0xc2, 0x01, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x41, 0x75, 0x74, 0x68,
	0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x41, 0x70, 0x70, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x37, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x66,
	0x72, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x75,
	0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x41, 0x70, 0x70, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x38, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x66, 0x72, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x64,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63,
	0x61, 0x74, 0x6f, 0x72, 0x41, 0x70, 0x70, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x31, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2b, 0x22, 0x29,
	0x2f, 0x66, 0x72, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x64, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x65, 0x2f,
	0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x2d, 0x61, 0x70,
	0x70, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0xc0, 0x01, 0x0a, 0x18, 0x52, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61,
	0x74, 0x6f, 0x72, 0x41, 0x70, 0x70, 0x12, 0x35, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x75, 0x74,
	0x68, 0x2e, 0x66, 0x72, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61,
	0x74, 0x6f, 0x72, 0x41, 0x70, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x36, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x66, 0x72, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x64, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x41, 0x75, 0x74,
	0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x41, 0x70, 0x70, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x35, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2f, 0x3a, 0x01, 0x2a,
	0x22, 0x2a, 0x2f, 0x66, 0x72, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x64, 0x2f, 0x76, 0x31, 0x2f, 0x6d,
	0x65, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x2d,
	0x61, 0x70, 0x70, 0x2f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x12, 0x91, 0x01, 0x0a,
	0x0f, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x73,
	0x12, 0x2c, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x66, 0x72, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x66, 0x72, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e,
	0x76, 0x69, 0x74, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x21, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x1b, 0x12, 0x19, 0x2f, 0x66, 0x72, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x64,
	0x2f, 0x76, 0x31, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2d, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x73,
	0x12, 0x90, 0x01, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x76, 0x69,
	0x74, 0x65, 0x12, 0x2a, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x66, 0x72,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x66, 0x72, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x76,
	0x69, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x26, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x20, 0x12, 0x1e, 0x2f, 0x66, 0x72, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x64, 0x2f, 0x76,
	0x31, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2d, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x73, 0x2f, 0x7b,
	0x69, 0x64, 0x7d, 0x12, 0xa1, 0x01, 0x0a, 0x10, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x12, 0x2d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61,
	0x75, 0x74, 0x68, 0x2e, 0x66, 0x72, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x75,
	0x74, 0x68, 0x2e, 0x66, 0x72, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x28, 0x3a,
	0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x22, 0x19, 0x2f, 0x66,
	0x72, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x64, 0x2f, 0x76, 0x31, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2d,
	0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x73, 0x12, 0x99, 0x01, 0x0a, 0x10, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x12, 0x2d, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x66, 0x72, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x64,
	0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e,
	0x76, 0x69, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x66, 0x72, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x64, 0x2e,
	0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x76,
	0x69, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x26, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x20, 0x2a, 0x1e, 0x2f, 0x66, 0x72, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x64, 0x2f, 0x76,
	0x31, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2d, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x73, 0x2f, 0x7b,
	0x69, 0x64, 0x7d, 0x42, 0xef, 0x01, 0x0a, 0x18, 0x63, 0x6f, 0x6d, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x61, 0x75, 0x74, 0x68, 0x2e, 0x66, 0x72, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31,
	0x42, 0x0d, 0x46, 0x72, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50,
	0x01, 0x5a, 0x52, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6f, 0x70,
	0x65, 0x6e, 0x61, 0x75, 0x74, 0x68, 0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x75, 0x74, 0x68, 0x2f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x66, 0x72, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x64, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x75, 0x74, 0x68, 0x2f, 0x66,
	0x72, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x64, 0x2f, 0x76, 0x31, 0x3b, 0x66, 0x72, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x64, 0x76, 0x31, 0xa2, 0x02, 0x03, 0x4f, 0x46, 0x58, 0xaa, 0x02, 0x14, 0x4f, 0x70,
	0x65, 0x6e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x46, 0x72, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x64, 0x2e,
	0x56, 0x31, 0xca, 0x02, 0x14, 0x4f, 0x70, 0x65, 0x6e, 0x61, 0x75, 0x74, 0x68, 0x5c, 0x46, 0x72,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x64, 0x5c, 0x56, 0x31, 0xe2, 0x02, 0x20, 0x4f, 0x70, 0x65, 0x6e,
	0x61, 0x75, 0x74, 0x68, 0x5c, 0x46, 0x72, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x64, 0x5c, 0x56, 0x31,
	0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x16, 0x4f,
	0x70, 0x65, 0x6e, 0x61, 0x75, 0x74, 0x68, 0x3a, 0x3a, 0x46, 0x72, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x64, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_openauth_frontend_v1_frontend_proto_rawDescOnce sync.Once
	file_openauth_frontend_v1_frontend_proto_rawDescData []byte
)

func file_openauth_frontend_v1_frontend_proto_rawDescGZIP() []byte {
	file_openauth_frontend_v1_frontend_proto_rawDescOnce.Do(func() {
		file_openauth_frontend_v1_frontend_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_openauth_frontend_v1_frontend_proto_rawDesc), len(file_openauth_frontend_v1_frontend_proto_rawDesc)))
	})
	return file_openauth_frontend_v1_frontend_proto_rawDescData
}

var file_openauth_frontend_v1_frontend_proto_msgTypes = make([]protoimpl.MessageInfo, 72)
var file_openauth_frontend_v1_frontend_proto_goTypes = []any{
	(*LogoutRequest)(nil),                                 // 0: openauth.frontend.v1.LogoutRequest
	(*LogoutResponse)(nil),                                // 1: openauth.frontend.v1.LogoutResponse
	(*RefreshRequest)(nil),                                // 2: openauth.frontend.v1.RefreshRequest
	(*RefreshResponse)(nil),                               // 3: openauth.frontend.v1.RefreshResponse
	(*GetProjectRequest)(nil),                             // 4: openauth.frontend.v1.GetProjectRequest
	(*GetProjectResponse)(nil),                            // 5: openauth.frontend.v1.GetProjectResponse
	(*GetOrganizationRequest)(nil),                        // 6: openauth.frontend.v1.GetOrganizationRequest
	(*GetOrganizationResponse)(nil),                       // 7: openauth.frontend.v1.GetOrganizationResponse
	(*UpdateOrganizationRequest)(nil),                     // 8: openauth.frontend.v1.UpdateOrganizationRequest
	(*UpdateOrganizationResponse)(nil),                    // 9: openauth.frontend.v1.UpdateOrganizationResponse
	(*GetOrganizationGoogleHostedDomainsRequest)(nil),     // 10: openauth.frontend.v1.GetOrganizationGoogleHostedDomainsRequest
	(*GetOrganizationGoogleHostedDomainsResponse)(nil),    // 11: openauth.frontend.v1.GetOrganizationGoogleHostedDomainsResponse
	(*UpdateOrganizationGoogleHostedDomainsRequest)(nil),  // 12: openauth.frontend.v1.UpdateOrganizationGoogleHostedDomainsRequest
	(*UpdateOrganizationGoogleHostedDomainsResponse)(nil), // 13: openauth.frontend.v1.UpdateOrganizationGoogleHostedDomainsResponse
	(*GetOrganizationMicrosoftTenantIDsRequest)(nil),      // 14: openauth.frontend.v1.GetOrganizationMicrosoftTenantIDsRequest
	(*GetOrganizationMicrosoftTenantIDsResponse)(nil),     // 15: openauth.frontend.v1.GetOrganizationMicrosoftTenantIDsResponse
	(*UpdateOrganizationMicrosoftTenantIDsRequest)(nil),   // 16: openauth.frontend.v1.UpdateOrganizationMicrosoftTenantIDsRequest
	(*UpdateOrganizationMicrosoftTenantIDsResponse)(nil),  // 17: openauth.frontend.v1.UpdateOrganizationMicrosoftTenantIDsResponse
	(*ListUsersRequest)(nil),                              // 18: openauth.frontend.v1.ListUsersRequest
	(*ListUsersResponse)(nil),                             // 19: openauth.frontend.v1.ListUsersResponse
	(*GetUserRequest)(nil),                                // 20: openauth.frontend.v1.GetUserRequest
	(*GetUserResponse)(nil),                               // 21: openauth.frontend.v1.GetUserResponse
	(*UpdateUserRequest)(nil),                             // 22: openauth.frontend.v1.UpdateUserRequest
	(*UpdateUserResponse)(nil),                            // 23: openauth.frontend.v1.UpdateUserResponse
	(*DeleteUserRequest)(nil),                             // 24: openauth.frontend.v1.DeleteUserRequest
	(*DeleteUserResponse)(nil),                            // 25: openauth.frontend.v1.DeleteUserResponse
	(*ListSAMLConnectionsRequest)(nil),                    // 26: openauth.frontend.v1.ListSAMLConnectionsRequest
	(*ListSAMLConnectionsResponse)(nil),                   // 27: openauth.frontend.v1.ListSAMLConnectionsResponse
	(*GetSAMLConnectionRequest)(nil),                      // 28: openauth.frontend.v1.GetSAMLConnectionRequest
	(*GetSAMLConnectionResponse)(nil),                     // 29: openauth.frontend.v1.GetSAMLConnectionResponse
	(*CreateSAMLConnectionRequest)(nil),                   // 30: openauth.frontend.v1.CreateSAMLConnectionRequest
	(*CreateSAMLConnectionResponse)(nil),                  // 31: openauth.frontend.v1.CreateSAMLConnectionResponse
	(*UpdateSAMLConnectionRequest)(nil),                   // 32: openauth.frontend.v1.UpdateSAMLConnectionRequest
	(*UpdateSAMLConnectionResponse)(nil),                  // 33: openauth.frontend.v1.UpdateSAMLConnectionResponse
	(*DeleteSAMLConnectionRequest)(nil),                   // 34: openauth.frontend.v1.DeleteSAMLConnectionRequest
	(*DeleteSAMLConnectionResponse)(nil),                  // 35: openauth.frontend.v1.DeleteSAMLConnectionResponse
	(*ListSCIMAPIKeysRequest)(nil),                        // 36: openauth.frontend.v1.ListSCIMAPIKeysRequest
	(*ListSCIMAPIKeysResponse)(nil),                       // 37: openauth.frontend.v1.ListSCIMAPIKeysResponse
	(*GetSCIMAPIKeyRequest)(nil),                          // 38: openauth.frontend.v1.GetSCIMAPIKeyRequest
	(*GetSCIMAPIKeyResponse)(nil),                         // 39: openauth.frontend.v1.GetSCIMAPIKeyResponse
	(*CreateSCIMAPIKeyRequest)(nil),                       // 40: openauth.frontend.v1.CreateSCIMAPIKeyRequest
	(*CreateSCIMAPIKeyResponse)(nil),                      // 41: openauth.frontend.v1.CreateSCIMAPIKeyResponse
	(*UpdateSCIMAPIKeyRequest)(nil),                       // 42: openauth.frontend.v1.UpdateSCIMAPIKeyRequest
	(*UpdateSCIMAPIKeyResponse)(nil),                      // 43: openauth.frontend.v1.UpdateSCIMAPIKeyResponse
	(*DeleteSCIMAPIKeyRequest)(nil),                       // 44: openauth.frontend.v1.DeleteSCIMAPIKeyRequest
	(*DeleteSCIMAPIKeyResponse)(nil),                      // 45: openauth.frontend.v1.DeleteSCIMAPIKeyResponse
	(*RevokeSCIMAPIKeyRequest)(nil),                       // 46: openauth.frontend.v1.RevokeSCIMAPIKeyRequest
	(*RevokeSCIMAPIKeyResponse)(nil),                      // 47: openauth.frontend.v1.RevokeSCIMAPIKeyResponse
	(*WhoamiRequest)(nil),                                 // 48: openauth.frontend.v1.WhoamiRequest
	(*WhoamiResponse)(nil),                                // 49: openauth.frontend.v1.WhoamiResponse
	(*ListMyPasskeysRequest)(nil),                         // 50: openauth.frontend.v1.ListMyPasskeysRequest
	(*ListMyPasskeysResponse)(nil),                        // 51: openauth.frontend.v1.ListMyPasskeysResponse
	(*DeleteMyPasskeyRequest)(nil),                        // 52: openauth.frontend.v1.DeleteMyPasskeyRequest
	(*DeleteMyPasskeyResponse)(nil),                       // 53: openauth.frontend.v1.DeleteMyPasskeyResponse
	(*GetPasskeyOptionsRequest)(nil),                      // 54: openauth.frontend.v1.GetPasskeyOptionsRequest
	(*GetPasskeyOptionsResponse)(nil),                     // 55: openauth.frontend.v1.GetPasskeyOptionsResponse
	(*RegisterPasskeyRequest)(nil),                        // 56: openauth.frontend.v1.RegisterPasskeyRequest
	(*RegisterPasskeyResponse)(nil),                       // 57: openauth.frontend.v1.RegisterPasskeyResponse
	(*GetAuthenticatorAppOptionsRequest)(nil),             // 58: openauth.frontend.v1.GetAuthenticatorAppOptionsRequest
	(*GetAuthenticatorAppOptionsResponse)(nil),            // 59: openauth.frontend.v1.GetAuthenticatorAppOptionsResponse
	(*RegisterAuthenticatorAppRequest)(nil),               // 60: openauth.frontend.v1.RegisterAuthenticatorAppRequest
	(*RegisterAuthenticatorAppResponse)(nil),              // 61: openauth.frontend.v1.RegisterAuthenticatorAppResponse
	(*ListUserInvitesRequest)(nil),                        // 62: openauth.frontend.v1.ListUserInvitesRequest
	(*ListUserInvitesResponse)(nil),                       // 63: openauth.frontend.v1.ListUserInvitesResponse
	(*GetUserInviteRequest)(nil),                          // 64: openauth.frontend.v1.GetUserInviteRequest
	(*GetUserInviteResponse)(nil),                         // 65: openauth.frontend.v1.GetUserInviteResponse
	(*CreateUserInviteRequest)(nil),                       // 66: openauth.frontend.v1.CreateUserInviteRequest
	(*CreateUserInviteResponse)(nil),                      // 67: openauth.frontend.v1.CreateUserInviteResponse
	(*DeleteUserInviteRequest)(nil),                       // 68: openauth.frontend.v1.DeleteUserInviteRequest
	(*DeleteUserInviteResponse)(nil),                      // 69: openauth.frontend.v1.DeleteUserInviteResponse
	(*SetPasswordRequest)(nil),                            // 70: openauth.frontend.v1.SetPasswordRequest
	(*SetPasswordResponse)(nil),                           // 71: openauth.frontend.v1.SetPasswordResponse
	(*Project)(nil),                                       // 72: openauth.frontend.v1.Project
	(*Organization)(nil),                                  // 73: openauth.frontend.v1.Organization
	(*OrganizationGoogleHostedDomains)(nil),               // 74: openauth.frontend.v1.OrganizationGoogleHostedDomains
	(*OrganizationMicrosoftTenantIDs)(nil),                // 75: openauth.frontend.v1.OrganizationMicrosoftTenantIDs
	(*User)(nil),                                          // 76: openauth.frontend.v1.User
	(*SAMLConnection)(nil),                                // 77: openauth.frontend.v1.SAMLConnection
	(*SCIMAPIKey)(nil),                                    // 78: openauth.frontend.v1.SCIMAPIKey
	(*Passkey)(nil),                                       // 79: openauth.frontend.v1.Passkey
	(*UserInvite)(nil),                                    // 80: openauth.frontend.v1.UserInvite
}
var file_openauth_frontend_v1_frontend_proto_depIdxs = []int32{
	72, // 0: openauth.frontend.v1.GetProjectResponse.project:type_name -> openauth.frontend.v1.Project
	73, // 1: openauth.frontend.v1.GetOrganizationResponse.organization:type_name -> openauth.frontend.v1.Organization
	73, // 2: openauth.frontend.v1.UpdateOrganizationRequest.organization:type_name -> openauth.frontend.v1.Organization
	73, // 3: openauth.frontend.v1.UpdateOrganizationResponse.organization:type_name -> openauth.frontend.v1.Organization
	74, // 4: openauth.frontend.v1.GetOrganizationGoogleHostedDomainsResponse.organization_google_hosted_domains:type_name -> openauth.frontend.v1.OrganizationGoogleHostedDomains
	74, // 5: openauth.frontend.v1.UpdateOrganizationGoogleHostedDomainsRequest.organization_google_hosted_domains:type_name -> openauth.frontend.v1.OrganizationGoogleHostedDomains
	74, // 6: openauth.frontend.v1.UpdateOrganizationGoogleHostedDomainsResponse.organization_google_hosted_domains:type_name -> openauth.frontend.v1.OrganizationGoogleHostedDomains
	75, // 7: openauth.frontend.v1.GetOrganizationMicrosoftTenantIDsResponse.organization_microsoft_tenant_ids:type_name -> openauth.frontend.v1.OrganizationMicrosoftTenantIDs
	75, // 8: openauth.frontend.v1.UpdateOrganizationMicrosoftTenantIDsRequest.organization_microsoft_tenant_ids:type_name -> openauth.frontend.v1.OrganizationMicrosoftTenantIDs
	75, // 9: openauth.frontend.v1.UpdateOrganizationMicrosoftTenantIDsResponse.organization_microsoft_tenant_ids:type_name -> openauth.frontend.v1.OrganizationMicrosoftTenantIDs
	76, // 10: openauth.frontend.v1.ListUsersResponse.users:type_name -> openauth.frontend.v1.User
	76, // 11: openauth.frontend.v1.GetUserResponse.user:type_name -> openauth.frontend.v1.User
	76, // 12: openauth.frontend.v1.UpdateUserRequest.user:type_name -> openauth.frontend.v1.User
	76, // 13: openauth.frontend.v1.UpdateUserResponse.user:type_name -> openauth.frontend.v1.User
	77, // 14: openauth.frontend.v1.ListSAMLConnectionsResponse.saml_connections:type_name -> openauth.frontend.v1.SAMLConnection
	77, // 15: openauth.frontend.v1.GetSAMLConnectionResponse.saml_connection:type_name -> openauth.frontend.v1.SAMLConnection
	77, // 16: openauth.frontend.v1.CreateSAMLConnectionRequest.saml_connection:type_name -> openauth.frontend.v1.SAMLConnection
	77, // 17: openauth.frontend.v1.CreateSAMLConnectionResponse.saml_connection:type_name -> openauth.frontend.v1.SAMLConnection
	77, // 18: openauth.frontend.v1.UpdateSAMLConnectionRequest.saml_connection:type_name -> openauth.frontend.v1.SAMLConnection
	77, // 19: openauth.frontend.v1.UpdateSAMLConnectionResponse.saml_connection:type_name -> openauth.frontend.v1.SAMLConnection
	78, // 20: openauth.frontend.v1.ListSCIMAPIKeysResponse.scim_api_keys:type_name -> openauth.frontend.v1.SCIMAPIKey
	78, // 21: openauth.frontend.v1.GetSCIMAPIKeyResponse.scim_api_key:type_name -> openauth.frontend.v1.SCIMAPIKey
	78, // 22: openauth.frontend.v1.CreateSCIMAPIKeyRequest.scim_api_key:type_name -> openauth.frontend.v1.SCIMAPIKey
	78, // 23: openauth.frontend.v1.CreateSCIMAPIKeyResponse.scim_api_key:type_name -> openauth.frontend.v1.SCIMAPIKey
	78, // 24: openauth.frontend.v1.UpdateSCIMAPIKeyRequest.scim_api_key:type_name -> openauth.frontend.v1.SCIMAPIKey
	78, // 25: openauth.frontend.v1.UpdateSCIMAPIKeyResponse.scim_api_key:type_name -> openauth.frontend.v1.SCIMAPIKey
	78, // 26: openauth.frontend.v1.RevokeSCIMAPIKeyResponse.scim_api_key:type_name -> openauth.frontend.v1.SCIMAPIKey
	76, // 27: openauth.frontend.v1.WhoamiResponse.user:type_name -> openauth.frontend.v1.User
	79, // 28: openauth.frontend.v1.ListMyPasskeysResponse.passkeys:type_name -> openauth.frontend.v1.Passkey
	79, // 29: openauth.frontend.v1.RegisterPasskeyResponse.passkey:type_name -> openauth.frontend.v1.Passkey
	80, // 30: openauth.frontend.v1.ListUserInvitesResponse.user_invites:type_name -> openauth.frontend.v1.UserInvite
	80, // 31: openauth.frontend.v1.GetUserInviteResponse.user_invite:type_name -> openauth.frontend.v1.UserInvite
	80, // 32: openauth.frontend.v1.CreateUserInviteRequest.user_invite:type_name -> openauth.frontend.v1.UserInvite
	80, // 33: openauth.frontend.v1.CreateUserInviteResponse.user_invite:type_name -> openauth.frontend.v1.UserInvite
	0,  // 34: openauth.frontend.v1.FrontendService.Logout:input_type -> openauth.frontend.v1.LogoutRequest
	2,  // 35: openauth.frontend.v1.FrontendService.Refresh:input_type -> openauth.frontend.v1.RefreshRequest
	4,  // 36: openauth.frontend.v1.FrontendService.GetProject:input_type -> openauth.frontend.v1.GetProjectRequest
	6,  // 37: openauth.frontend.v1.FrontendService.GetOrganization:input_type -> openauth.frontend.v1.GetOrganizationRequest
	8,  // 38: openauth.frontend.v1.FrontendService.UpdateOrganization:input_type -> openauth.frontend.v1.UpdateOrganizationRequest
	10, // 39: openauth.frontend.v1.FrontendService.GetOrganizationGoogleHostedDomains:input_type -> openauth.frontend.v1.GetOrganizationGoogleHostedDomainsRequest
	12, // 40: openauth.frontend.v1.FrontendService.UpdateOrganizationGoogleHostedDomains:input_type -> openauth.frontend.v1.UpdateOrganizationGoogleHostedDomainsRequest
	14, // 41: openauth.frontend.v1.FrontendService.GetOrganizationMicrosoftTenantIDs:input_type -> openauth.frontend.v1.GetOrganizationMicrosoftTenantIDsRequest
	16, // 42: openauth.frontend.v1.FrontendService.UpdateOrganizationMicrosoftTenantIDs:input_type -> openauth.frontend.v1.UpdateOrganizationMicrosoftTenantIDsRequest
	18, // 43: openauth.frontend.v1.FrontendService.ListUsers:input_type -> openauth.frontend.v1.ListUsersRequest
	20, // 44: openauth.frontend.v1.FrontendService.GetUser:input_type -> openauth.frontend.v1.GetUserRequest
	22, // 45: openauth.frontend.v1.FrontendService.UpdateUser:input_type -> openauth.frontend.v1.UpdateUserRequest
	24, // 46: openauth.frontend.v1.FrontendService.DeleteUser:input_type -> openauth.frontend.v1.DeleteUserRequest
	70, // 47: openauth.frontend.v1.FrontendService.SetPassword:input_type -> openauth.frontend.v1.SetPasswordRequest
	26, // 48: openauth.frontend.v1.FrontendService.ListSAMLConnections:input_type -> openauth.frontend.v1.ListSAMLConnectionsRequest
	28, // 49: openauth.frontend.v1.FrontendService.GetSAMLConnection:input_type -> openauth.frontend.v1.GetSAMLConnectionRequest
	30, // 50: openauth.frontend.v1.FrontendService.CreateSAMLConnection:input_type -> openauth.frontend.v1.CreateSAMLConnectionRequest
	32, // 51: openauth.frontend.v1.FrontendService.UpdateSAMLConnection:input_type -> openauth.frontend.v1.UpdateSAMLConnectionRequest
	34, // 52: openauth.frontend.v1.FrontendService.DeleteSAMLConnection:input_type -> openauth.frontend.v1.DeleteSAMLConnectionRequest
	36, // 53: openauth.frontend.v1.FrontendService.ListSCIMAPIKeys:input_type -> openauth.frontend.v1.ListSCIMAPIKeysRequest
	38, // 54: openauth.frontend.v1.FrontendService.GetSCIMAPIKey:input_type -> openauth.frontend.v1.GetSCIMAPIKeyRequest
	40, // 55: openauth.frontend.v1.FrontendService.CreateSCIMAPIKey:input_type -> openauth.frontend.v1.CreateSCIMAPIKeyRequest
	42, // 56: openauth.frontend.v1.FrontendService.UpdateSCIMAPIKey:input_type -> openauth.frontend.v1.UpdateSCIMAPIKeyRequest
	44, // 57: openauth.frontend.v1.FrontendService.DeleteSCIMAPIKey:input_type -> openauth.frontend.v1.DeleteSCIMAPIKeyRequest
	46, // 58: openauth.frontend.v1.FrontendService.RevokeSCIMAPIKey:input_type -> openauth.frontend.v1.RevokeSCIMAPIKeyRequest
	48, // 59: openauth.frontend.v1.FrontendService.Whoami:input_type -> openauth.frontend.v1.WhoamiRequest
	50, // 60: openauth.frontend.v1.FrontendService.ListMyPasskeys:input_type -> openauth.frontend.v1.ListMyPasskeysRequest
	52, // 61: openauth.frontend.v1.FrontendService.DeleteMyPasskey:input_type -> openauth.frontend.v1.DeleteMyPasskeyRequest
	54, // 62: openauth.frontend.v1.FrontendService.GetPasskeyOptions:input_type -> openauth.frontend.v1.GetPasskeyOptionsRequest
	56, // 63: openauth.frontend.v1.FrontendService.RegisterPasskey:input_type -> openauth.frontend.v1.RegisterPasskeyRequest
	58, // 64: openauth.frontend.v1.FrontendService.GetAuthenticatorAppOptions:input_type -> openauth.frontend.v1.GetAuthenticatorAppOptionsRequest
	60, // 65: openauth.frontend.v1.FrontendService.RegisterAuthenticatorApp:input_type -> openauth.frontend.v1.RegisterAuthenticatorAppRequest
	62, // 66: openauth.frontend.v1.FrontendService.ListUserInvites:input_type -> openauth.frontend.v1.ListUserInvitesRequest
	64, // 67: openauth.frontend.v1.FrontendService.GetUserInvite:input_type -> openauth.frontend.v1.GetUserInviteRequest
	66, // 68: openauth.frontend.v1.FrontendService.CreateUserInvite:input_type -> openauth.frontend.v1.CreateUserInviteRequest
	68, // 69: openauth.frontend.v1.FrontendService.DeleteUserInvite:input_type -> openauth.frontend.v1.DeleteUserInviteRequest
	1,  // 70: openauth.frontend.v1.FrontendService.Logout:output_type -> openauth.frontend.v1.LogoutResponse
	3,  // 71: openauth.frontend.v1.FrontendService.Refresh:output_type -> openauth.frontend.v1.RefreshResponse
	5,  // 72: openauth.frontend.v1.FrontendService.GetProject:output_type -> openauth.frontend.v1.GetProjectResponse
	7,  // 73: openauth.frontend.v1.FrontendService.GetOrganization:output_type -> openauth.frontend.v1.GetOrganizationResponse
	9,  // 74: openauth.frontend.v1.FrontendService.UpdateOrganization:output_type -> openauth.frontend.v1.UpdateOrganizationResponse
	11, // 75: openauth.frontend.v1.FrontendService.GetOrganizationGoogleHostedDomains:output_type -> openauth.frontend.v1.GetOrganizationGoogleHostedDomainsResponse
	13, // 76: openauth.frontend.v1.FrontendService.UpdateOrganizationGoogleHostedDomains:output_type -> openauth.frontend.v1.UpdateOrganizationGoogleHostedDomainsResponse
	15, // 77: openauth.frontend.v1.FrontendService.GetOrganizationMicrosoftTenantIDs:output_type -> openauth.frontend.v1.GetOrganizationMicrosoftTenantIDsResponse
	17, // 78: openauth.frontend.v1.FrontendService.UpdateOrganizationMicrosoftTenantIDs:output_type -> openauth.frontend.v1.UpdateOrganizationMicrosoftTenantIDsResponse
	19, // 79: openauth.frontend.v1.FrontendService.ListUsers:output_type -> openauth.frontend.v1.ListUsersResponse
	21, // 80: openauth.frontend.v1.FrontendService.GetUser:output_type -> openauth.frontend.v1.GetUserResponse
	23, // 81: openauth.frontend.v1.FrontendService.UpdateUser:output_type -> openauth.frontend.v1.UpdateUserResponse
	25, // 82: openauth.frontend.v1.FrontendService.DeleteUser:output_type -> openauth.frontend.v1.DeleteUserResponse
	71, // 83: openauth.frontend.v1.FrontendService.SetPassword:output_type -> openauth.frontend.v1.SetPasswordResponse
	27, // 84: openauth.frontend.v1.FrontendService.ListSAMLConnections:output_type -> openauth.frontend.v1.ListSAMLConnectionsResponse
	29, // 85: openauth.frontend.v1.FrontendService.GetSAMLConnection:output_type -> openauth.frontend.v1.GetSAMLConnectionResponse
	31, // 86: openauth.frontend.v1.FrontendService.CreateSAMLConnection:output_type -> openauth.frontend.v1.CreateSAMLConnectionResponse
	33, // 87: openauth.frontend.v1.FrontendService.UpdateSAMLConnection:output_type -> openauth.frontend.v1.UpdateSAMLConnectionResponse
	35, // 88: openauth.frontend.v1.FrontendService.DeleteSAMLConnection:output_type -> openauth.frontend.v1.DeleteSAMLConnectionResponse
	37, // 89: openauth.frontend.v1.FrontendService.ListSCIMAPIKeys:output_type -> openauth.frontend.v1.ListSCIMAPIKeysResponse
	39, // 90: openauth.frontend.v1.FrontendService.GetSCIMAPIKey:output_type -> openauth.frontend.v1.GetSCIMAPIKeyResponse
	41, // 91: openauth.frontend.v1.FrontendService.CreateSCIMAPIKey:output_type -> openauth.frontend.v1.CreateSCIMAPIKeyResponse
	43, // 92: openauth.frontend.v1.FrontendService.UpdateSCIMAPIKey:output_type -> openauth.frontend.v1.UpdateSCIMAPIKeyResponse
	45, // 93: openauth.frontend.v1.FrontendService.DeleteSCIMAPIKey:output_type -> openauth.frontend.v1.DeleteSCIMAPIKeyResponse
	47, // 94: openauth.frontend.v1.FrontendService.RevokeSCIMAPIKey:output_type -> openauth.frontend.v1.RevokeSCIMAPIKeyResponse
	49, // 95: openauth.frontend.v1.FrontendService.Whoami:output_type -> openauth.frontend.v1.WhoamiResponse
	51, // 96: openauth.frontend.v1.FrontendService.ListMyPasskeys:output_type -> openauth.frontend.v1.ListMyPasskeysResponse
	53, // 97: openauth.frontend.v1.FrontendService.DeleteMyPasskey:output_type -> openauth.frontend.v1.DeleteMyPasskeyResponse
	55, // 98: openauth.frontend.v1.FrontendService.GetPasskeyOptions:output_type -> openauth.frontend.v1.GetPasskeyOptionsResponse
	57, // 99: openauth.frontend.v1.FrontendService.RegisterPasskey:output_type -> openauth.frontend.v1.RegisterPasskeyResponse
	59, // 100: openauth.frontend.v1.FrontendService.GetAuthenticatorAppOptions:output_type -> openauth.frontend.v1.GetAuthenticatorAppOptionsResponse
	61, // 101: openauth.frontend.v1.FrontendService.RegisterAuthenticatorApp:output_type -> openauth.frontend.v1.RegisterAuthenticatorAppResponse
	63, // 102: openauth.frontend.v1.FrontendService.ListUserInvites:output_type -> openauth.frontend.v1.ListUserInvitesResponse
	65, // 103: openauth.frontend.v1.FrontendService.GetUserInvite:output_type -> openauth.frontend.v1.GetUserInviteResponse
	67, // 104: openauth.frontend.v1.FrontendService.CreateUserInvite:output_type -> openauth.frontend.v1.CreateUserInviteResponse
	69, // 105: openauth.frontend.v1.FrontendService.DeleteUserInvite:output_type -> openauth.frontend.v1.DeleteUserInviteResponse
	70, // [70:106] is the sub-list for method output_type
	34, // [34:70] is the sub-list for method input_type
	34, // [34:34] is the sub-list for extension type_name
	34, // [34:34] is the sub-list for extension extendee
	0,  // [0:34] is the sub-list for field type_name
}

func init() { file_openauth_frontend_v1_frontend_proto_init() }
func file_openauth_frontend_v1_frontend_proto_init() {
	if File_openauth_frontend_v1_frontend_proto != nil {
		return
	}
	file_openauth_frontend_v1_models_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_openauth_frontend_v1_frontend_proto_rawDesc), len(file_openauth_frontend_v1_frontend_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   72,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_openauth_frontend_v1_frontend_proto_goTypes,
		DependencyIndexes: file_openauth_frontend_v1_frontend_proto_depIdxs,
		MessageInfos:      file_openauth_frontend_v1_frontend_proto_msgTypes,
	}.Build()
	File_openauth_frontend_v1_frontend_proto = out.File
	file_openauth_frontend_v1_frontend_proto_goTypes = nil
	file_openauth_frontend_v1_frontend_proto_depIdxs = nil
}
