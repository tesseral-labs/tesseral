// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: openauth/frontend/v1/frontend.proto

package frontendv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/openauth/openauth/internal/frontend/gen/openauth/frontend/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// FrontendServiceName is the fully-qualified name of the FrontendService service.
	FrontendServiceName = "openauth.frontend.v1.FrontendService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// FrontendServiceGetAccessTokenProcedure is the fully-qualified name of the FrontendService's
	// GetAccessToken RPC.
	FrontendServiceGetAccessTokenProcedure = "/openauth.frontend.v1.FrontendService/GetAccessToken"
	// FrontendServiceGetProjectProcedure is the fully-qualified name of the FrontendService's
	// GetProject RPC.
	FrontendServiceGetProjectProcedure = "/openauth.frontend.v1.FrontendService/GetProject"
	// FrontendServiceGetOrganizationProcedure is the fully-qualified name of the FrontendService's
	// GetOrganization RPC.
	FrontendServiceGetOrganizationProcedure = "/openauth.frontend.v1.FrontendService/GetOrganization"
	// FrontendServiceUpdateOrganizationProcedure is the fully-qualified name of the FrontendService's
	// UpdateOrganization RPC.
	FrontendServiceUpdateOrganizationProcedure = "/openauth.frontend.v1.FrontendService/UpdateOrganization"
	// FrontendServiceListUsersProcedure is the fully-qualified name of the FrontendService's ListUsers
	// RPC.
	FrontendServiceListUsersProcedure = "/openauth.frontend.v1.FrontendService/ListUsers"
	// FrontendServiceGetUserProcedure is the fully-qualified name of the FrontendService's GetUser RPC.
	FrontendServiceGetUserProcedure = "/openauth.frontend.v1.FrontendService/GetUser"
	// FrontendServiceUpdateUserProcedure is the fully-qualified name of the FrontendService's
	// UpdateUser RPC.
	FrontendServiceUpdateUserProcedure = "/openauth.frontend.v1.FrontendService/UpdateUser"
	// FrontendServiceListOrganizationsProcedure is the fully-qualified name of the FrontendService's
	// ListOrganizations RPC.
	FrontendServiceListOrganizationsProcedure = "/openauth.frontend.v1.FrontendService/ListOrganizations"
	// FrontendServiceWhoAmIProcedure is the fully-qualified name of the FrontendService's WhoAmI RPC.
	FrontendServiceWhoAmIProcedure = "/openauth.frontend.v1.FrontendService/WhoAmI"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	frontendServiceServiceDescriptor                  = v1.File_openauth_frontend_v1_frontend_proto.Services().ByName("FrontendService")
	frontendServiceGetAccessTokenMethodDescriptor     = frontendServiceServiceDescriptor.Methods().ByName("GetAccessToken")
	frontendServiceGetProjectMethodDescriptor         = frontendServiceServiceDescriptor.Methods().ByName("GetProject")
	frontendServiceGetOrganizationMethodDescriptor    = frontendServiceServiceDescriptor.Methods().ByName("GetOrganization")
	frontendServiceUpdateOrganizationMethodDescriptor = frontendServiceServiceDescriptor.Methods().ByName("UpdateOrganization")
	frontendServiceListUsersMethodDescriptor          = frontendServiceServiceDescriptor.Methods().ByName("ListUsers")
	frontendServiceGetUserMethodDescriptor            = frontendServiceServiceDescriptor.Methods().ByName("GetUser")
	frontendServiceUpdateUserMethodDescriptor         = frontendServiceServiceDescriptor.Methods().ByName("UpdateUser")
	frontendServiceListOrganizationsMethodDescriptor  = frontendServiceServiceDescriptor.Methods().ByName("ListOrganizations")
	frontendServiceWhoAmIMethodDescriptor             = frontendServiceServiceDescriptor.Methods().ByName("WhoAmI")
)

// FrontendServiceClient is a client for the openauth.frontend.v1.FrontendService service.
type FrontendServiceClient interface {
	GetAccessToken(context.Context, *connect.Request[v1.GetAccessTokenRequest]) (*connect.Response[v1.GetAccessTokenResponse], error)
	GetProject(context.Context, *connect.Request[v1.GetProjectRequest]) (*connect.Response[v1.GetProjectResponse], error)
	GetOrganization(context.Context, *connect.Request[v1.GetOrganizationRequest]) (*connect.Response[v1.GetOrganizationResponse], error)
	UpdateOrganization(context.Context, *connect.Request[v1.UpdateOrganizationRequest]) (*connect.Response[v1.UpdateOrganizationResponse], error)
	ListUsers(context.Context, *connect.Request[v1.ListUsersRequest]) (*connect.Response[v1.ListUsersResponse], error)
	GetUser(context.Context, *connect.Request[v1.GetUserRequest]) (*connect.Response[v1.GetUserResponse], error)
	UpdateUser(context.Context, *connect.Request[v1.UpdateUserRequest]) (*connect.Response[v1.UpdateUserResponse], error)
	// Gets a list of organizations.
	ListOrganizations(context.Context, *connect.Request[v1.ListOrganizationsRequest]) (*connect.Response[v1.ListOrganizationsResponse], error)
	// Who am I?
	WhoAmI(context.Context, *connect.Request[v1.WhoAmIRequest]) (*connect.Response[v1.WhoAmIResponse], error)
}

// NewFrontendServiceClient constructs a client for the openauth.frontend.v1.FrontendService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewFrontendServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) FrontendServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &frontendServiceClient{
		getAccessToken: connect.NewClient[v1.GetAccessTokenRequest, v1.GetAccessTokenResponse](
			httpClient,
			baseURL+FrontendServiceGetAccessTokenProcedure,
			connect.WithSchema(frontendServiceGetAccessTokenMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getProject: connect.NewClient[v1.GetProjectRequest, v1.GetProjectResponse](
			httpClient,
			baseURL+FrontendServiceGetProjectProcedure,
			connect.WithSchema(frontendServiceGetProjectMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getOrganization: connect.NewClient[v1.GetOrganizationRequest, v1.GetOrganizationResponse](
			httpClient,
			baseURL+FrontendServiceGetOrganizationProcedure,
			connect.WithSchema(frontendServiceGetOrganizationMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		updateOrganization: connect.NewClient[v1.UpdateOrganizationRequest, v1.UpdateOrganizationResponse](
			httpClient,
			baseURL+FrontendServiceUpdateOrganizationProcedure,
			connect.WithSchema(frontendServiceUpdateOrganizationMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		listUsers: connect.NewClient[v1.ListUsersRequest, v1.ListUsersResponse](
			httpClient,
			baseURL+FrontendServiceListUsersProcedure,
			connect.WithSchema(frontendServiceListUsersMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getUser: connect.NewClient[v1.GetUserRequest, v1.GetUserResponse](
			httpClient,
			baseURL+FrontendServiceGetUserProcedure,
			connect.WithSchema(frontendServiceGetUserMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		updateUser: connect.NewClient[v1.UpdateUserRequest, v1.UpdateUserResponse](
			httpClient,
			baseURL+FrontendServiceUpdateUserProcedure,
			connect.WithSchema(frontendServiceUpdateUserMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		listOrganizations: connect.NewClient[v1.ListOrganizationsRequest, v1.ListOrganizationsResponse](
			httpClient,
			baseURL+FrontendServiceListOrganizationsProcedure,
			connect.WithSchema(frontendServiceListOrganizationsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		whoAmI: connect.NewClient[v1.WhoAmIRequest, v1.WhoAmIResponse](
			httpClient,
			baseURL+FrontendServiceWhoAmIProcedure,
			connect.WithSchema(frontendServiceWhoAmIMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// frontendServiceClient implements FrontendServiceClient.
type frontendServiceClient struct {
	getAccessToken     *connect.Client[v1.GetAccessTokenRequest, v1.GetAccessTokenResponse]
	getProject         *connect.Client[v1.GetProjectRequest, v1.GetProjectResponse]
	getOrganization    *connect.Client[v1.GetOrganizationRequest, v1.GetOrganizationResponse]
	updateOrganization *connect.Client[v1.UpdateOrganizationRequest, v1.UpdateOrganizationResponse]
	listUsers          *connect.Client[v1.ListUsersRequest, v1.ListUsersResponse]
	getUser            *connect.Client[v1.GetUserRequest, v1.GetUserResponse]
	updateUser         *connect.Client[v1.UpdateUserRequest, v1.UpdateUserResponse]
	listOrganizations  *connect.Client[v1.ListOrganizationsRequest, v1.ListOrganizationsResponse]
	whoAmI             *connect.Client[v1.WhoAmIRequest, v1.WhoAmIResponse]
}

// GetAccessToken calls openauth.frontend.v1.FrontendService.GetAccessToken.
func (c *frontendServiceClient) GetAccessToken(ctx context.Context, req *connect.Request[v1.GetAccessTokenRequest]) (*connect.Response[v1.GetAccessTokenResponse], error) {
	return c.getAccessToken.CallUnary(ctx, req)
}

// GetProject calls openauth.frontend.v1.FrontendService.GetProject.
func (c *frontendServiceClient) GetProject(ctx context.Context, req *connect.Request[v1.GetProjectRequest]) (*connect.Response[v1.GetProjectResponse], error) {
	return c.getProject.CallUnary(ctx, req)
}

// GetOrganization calls openauth.frontend.v1.FrontendService.GetOrganization.
func (c *frontendServiceClient) GetOrganization(ctx context.Context, req *connect.Request[v1.GetOrganizationRequest]) (*connect.Response[v1.GetOrganizationResponse], error) {
	return c.getOrganization.CallUnary(ctx, req)
}

// UpdateOrganization calls openauth.frontend.v1.FrontendService.UpdateOrganization.
func (c *frontendServiceClient) UpdateOrganization(ctx context.Context, req *connect.Request[v1.UpdateOrganizationRequest]) (*connect.Response[v1.UpdateOrganizationResponse], error) {
	return c.updateOrganization.CallUnary(ctx, req)
}

// ListUsers calls openauth.frontend.v1.FrontendService.ListUsers.
func (c *frontendServiceClient) ListUsers(ctx context.Context, req *connect.Request[v1.ListUsersRequest]) (*connect.Response[v1.ListUsersResponse], error) {
	return c.listUsers.CallUnary(ctx, req)
}

// GetUser calls openauth.frontend.v1.FrontendService.GetUser.
func (c *frontendServiceClient) GetUser(ctx context.Context, req *connect.Request[v1.GetUserRequest]) (*connect.Response[v1.GetUserResponse], error) {
	return c.getUser.CallUnary(ctx, req)
}

// UpdateUser calls openauth.frontend.v1.FrontendService.UpdateUser.
func (c *frontendServiceClient) UpdateUser(ctx context.Context, req *connect.Request[v1.UpdateUserRequest]) (*connect.Response[v1.UpdateUserResponse], error) {
	return c.updateUser.CallUnary(ctx, req)
}

// ListOrganizations calls openauth.frontend.v1.FrontendService.ListOrganizations.
func (c *frontendServiceClient) ListOrganizations(ctx context.Context, req *connect.Request[v1.ListOrganizationsRequest]) (*connect.Response[v1.ListOrganizationsResponse], error) {
	return c.listOrganizations.CallUnary(ctx, req)
}

// WhoAmI calls openauth.frontend.v1.FrontendService.WhoAmI.
func (c *frontendServiceClient) WhoAmI(ctx context.Context, req *connect.Request[v1.WhoAmIRequest]) (*connect.Response[v1.WhoAmIResponse], error) {
	return c.whoAmI.CallUnary(ctx, req)
}

// FrontendServiceHandler is an implementation of the openauth.frontend.v1.FrontendService service.
type FrontendServiceHandler interface {
	GetAccessToken(context.Context, *connect.Request[v1.GetAccessTokenRequest]) (*connect.Response[v1.GetAccessTokenResponse], error)
	GetProject(context.Context, *connect.Request[v1.GetProjectRequest]) (*connect.Response[v1.GetProjectResponse], error)
	GetOrganization(context.Context, *connect.Request[v1.GetOrganizationRequest]) (*connect.Response[v1.GetOrganizationResponse], error)
	UpdateOrganization(context.Context, *connect.Request[v1.UpdateOrganizationRequest]) (*connect.Response[v1.UpdateOrganizationResponse], error)
	ListUsers(context.Context, *connect.Request[v1.ListUsersRequest]) (*connect.Response[v1.ListUsersResponse], error)
	GetUser(context.Context, *connect.Request[v1.GetUserRequest]) (*connect.Response[v1.GetUserResponse], error)
	UpdateUser(context.Context, *connect.Request[v1.UpdateUserRequest]) (*connect.Response[v1.UpdateUserResponse], error)
	// Gets a list of organizations.
	ListOrganizations(context.Context, *connect.Request[v1.ListOrganizationsRequest]) (*connect.Response[v1.ListOrganizationsResponse], error)
	// Who am I?
	WhoAmI(context.Context, *connect.Request[v1.WhoAmIRequest]) (*connect.Response[v1.WhoAmIResponse], error)
}

// NewFrontendServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewFrontendServiceHandler(svc FrontendServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	frontendServiceGetAccessTokenHandler := connect.NewUnaryHandler(
		FrontendServiceGetAccessTokenProcedure,
		svc.GetAccessToken,
		connect.WithSchema(frontendServiceGetAccessTokenMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	frontendServiceGetProjectHandler := connect.NewUnaryHandler(
		FrontendServiceGetProjectProcedure,
		svc.GetProject,
		connect.WithSchema(frontendServiceGetProjectMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	frontendServiceGetOrganizationHandler := connect.NewUnaryHandler(
		FrontendServiceGetOrganizationProcedure,
		svc.GetOrganization,
		connect.WithSchema(frontendServiceGetOrganizationMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	frontendServiceUpdateOrganizationHandler := connect.NewUnaryHandler(
		FrontendServiceUpdateOrganizationProcedure,
		svc.UpdateOrganization,
		connect.WithSchema(frontendServiceUpdateOrganizationMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	frontendServiceListUsersHandler := connect.NewUnaryHandler(
		FrontendServiceListUsersProcedure,
		svc.ListUsers,
		connect.WithSchema(frontendServiceListUsersMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	frontendServiceGetUserHandler := connect.NewUnaryHandler(
		FrontendServiceGetUserProcedure,
		svc.GetUser,
		connect.WithSchema(frontendServiceGetUserMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	frontendServiceUpdateUserHandler := connect.NewUnaryHandler(
		FrontendServiceUpdateUserProcedure,
		svc.UpdateUser,
		connect.WithSchema(frontendServiceUpdateUserMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	frontendServiceListOrganizationsHandler := connect.NewUnaryHandler(
		FrontendServiceListOrganizationsProcedure,
		svc.ListOrganizations,
		connect.WithSchema(frontendServiceListOrganizationsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	frontendServiceWhoAmIHandler := connect.NewUnaryHandler(
		FrontendServiceWhoAmIProcedure,
		svc.WhoAmI,
		connect.WithSchema(frontendServiceWhoAmIMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/openauth.frontend.v1.FrontendService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case FrontendServiceGetAccessTokenProcedure:
			frontendServiceGetAccessTokenHandler.ServeHTTP(w, r)
		case FrontendServiceGetProjectProcedure:
			frontendServiceGetProjectHandler.ServeHTTP(w, r)
		case FrontendServiceGetOrganizationProcedure:
			frontendServiceGetOrganizationHandler.ServeHTTP(w, r)
		case FrontendServiceUpdateOrganizationProcedure:
			frontendServiceUpdateOrganizationHandler.ServeHTTP(w, r)
		case FrontendServiceListUsersProcedure:
			frontendServiceListUsersHandler.ServeHTTP(w, r)
		case FrontendServiceGetUserProcedure:
			frontendServiceGetUserHandler.ServeHTTP(w, r)
		case FrontendServiceUpdateUserProcedure:
			frontendServiceUpdateUserHandler.ServeHTTP(w, r)
		case FrontendServiceListOrganizationsProcedure:
			frontendServiceListOrganizationsHandler.ServeHTTP(w, r)
		case FrontendServiceWhoAmIProcedure:
			frontendServiceWhoAmIHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedFrontendServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedFrontendServiceHandler struct{}

func (UnimplementedFrontendServiceHandler) GetAccessToken(context.Context, *connect.Request[v1.GetAccessTokenRequest]) (*connect.Response[v1.GetAccessTokenResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("openauth.frontend.v1.FrontendService.GetAccessToken is not implemented"))
}

func (UnimplementedFrontendServiceHandler) GetProject(context.Context, *connect.Request[v1.GetProjectRequest]) (*connect.Response[v1.GetProjectResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("openauth.frontend.v1.FrontendService.GetProject is not implemented"))
}

func (UnimplementedFrontendServiceHandler) GetOrganization(context.Context, *connect.Request[v1.GetOrganizationRequest]) (*connect.Response[v1.GetOrganizationResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("openauth.frontend.v1.FrontendService.GetOrganization is not implemented"))
}

func (UnimplementedFrontendServiceHandler) UpdateOrganization(context.Context, *connect.Request[v1.UpdateOrganizationRequest]) (*connect.Response[v1.UpdateOrganizationResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("openauth.frontend.v1.FrontendService.UpdateOrganization is not implemented"))
}

func (UnimplementedFrontendServiceHandler) ListUsers(context.Context, *connect.Request[v1.ListUsersRequest]) (*connect.Response[v1.ListUsersResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("openauth.frontend.v1.FrontendService.ListUsers is not implemented"))
}

func (UnimplementedFrontendServiceHandler) GetUser(context.Context, *connect.Request[v1.GetUserRequest]) (*connect.Response[v1.GetUserResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("openauth.frontend.v1.FrontendService.GetUser is not implemented"))
}

func (UnimplementedFrontendServiceHandler) UpdateUser(context.Context, *connect.Request[v1.UpdateUserRequest]) (*connect.Response[v1.UpdateUserResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("openauth.frontend.v1.FrontendService.UpdateUser is not implemented"))
}

func (UnimplementedFrontendServiceHandler) ListOrganizations(context.Context, *connect.Request[v1.ListOrganizationsRequest]) (*connect.Response[v1.ListOrganizationsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("openauth.frontend.v1.FrontendService.ListOrganizations is not implemented"))
}

func (UnimplementedFrontendServiceHandler) WhoAmI(context.Context, *connect.Request[v1.WhoAmIRequest]) (*connect.Response[v1.WhoAmIResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("openauth.frontend.v1.FrontendService.WhoAmI is not implemented"))
}
