// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: openauth/frontend/v1/frontend.proto

package frontendv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/openauth/openauth/internal/frontend/gen/openauth/frontend/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// FrontendServiceName is the fully-qualified name of the FrontendService service.
	FrontendServiceName = "openauth.frontend.v1.FrontendService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// FrontendServiceLogoutProcedure is the fully-qualified name of the FrontendService's Logout RPC.
	FrontendServiceLogoutProcedure = "/openauth.frontend.v1.FrontendService/Logout"
	// FrontendServiceRefreshProcedure is the fully-qualified name of the FrontendService's Refresh RPC.
	FrontendServiceRefreshProcedure = "/openauth.frontend.v1.FrontendService/Refresh"
	// FrontendServiceGetProjectProcedure is the fully-qualified name of the FrontendService's
	// GetProject RPC.
	FrontendServiceGetProjectProcedure = "/openauth.frontend.v1.FrontendService/GetProject"
	// FrontendServiceGetOrganizationProcedure is the fully-qualified name of the FrontendService's
	// GetOrganization RPC.
	FrontendServiceGetOrganizationProcedure = "/openauth.frontend.v1.FrontendService/GetOrganization"
	// FrontendServiceUpdateOrganizationProcedure is the fully-qualified name of the FrontendService's
	// UpdateOrganization RPC.
	FrontendServiceUpdateOrganizationProcedure = "/openauth.frontend.v1.FrontendService/UpdateOrganization"
	// FrontendServiceListUsersProcedure is the fully-qualified name of the FrontendService's ListUsers
	// RPC.
	FrontendServiceListUsersProcedure = "/openauth.frontend.v1.FrontendService/ListUsers"
	// FrontendServiceGetUserProcedure is the fully-qualified name of the FrontendService's GetUser RPC.
	FrontendServiceGetUserProcedure = "/openauth.frontend.v1.FrontendService/GetUser"
	// FrontendServiceUpdateUserProcedure is the fully-qualified name of the FrontendService's
	// UpdateUser RPC.
	FrontendServiceUpdateUserProcedure = "/openauth.frontend.v1.FrontendService/UpdateUser"
	// FrontendServiceListOrganizationsProcedure is the fully-qualified name of the FrontendService's
	// ListOrganizations RPC.
	FrontendServiceListOrganizationsProcedure = "/openauth.frontend.v1.FrontendService/ListOrganizations"
	// FrontendServiceSetPasswordProcedure is the fully-qualified name of the FrontendService's
	// SetPassword RPC.
	FrontendServiceSetPasswordProcedure = "/openauth.frontend.v1.FrontendService/SetPassword"
	// FrontendServiceWhoAmIProcedure is the fully-qualified name of the FrontendService's WhoAmI RPC.
	FrontendServiceWhoAmIProcedure = "/openauth.frontend.v1.FrontendService/WhoAmI"
	// FrontendServiceListSAMLConnectionsProcedure is the fully-qualified name of the FrontendService's
	// ListSAMLConnections RPC.
	FrontendServiceListSAMLConnectionsProcedure = "/openauth.frontend.v1.FrontendService/ListSAMLConnections"
	// FrontendServiceGetSAMLConnectionProcedure is the fully-qualified name of the FrontendService's
	// GetSAMLConnection RPC.
	FrontendServiceGetSAMLConnectionProcedure = "/openauth.frontend.v1.FrontendService/GetSAMLConnection"
	// FrontendServiceCreateSAMLConnectionProcedure is the fully-qualified name of the FrontendService's
	// CreateSAMLConnection RPC.
	FrontendServiceCreateSAMLConnectionProcedure = "/openauth.frontend.v1.FrontendService/CreateSAMLConnection"
	// FrontendServiceUpdateSAMLConnectionProcedure is the fully-qualified name of the FrontendService's
	// UpdateSAMLConnection RPC.
	FrontendServiceUpdateSAMLConnectionProcedure = "/openauth.frontend.v1.FrontendService/UpdateSAMLConnection"
	// FrontendServiceDeleteSAMLConnectionProcedure is the fully-qualified name of the FrontendService's
	// DeleteSAMLConnection RPC.
	FrontendServiceDeleteSAMLConnectionProcedure = "/openauth.frontend.v1.FrontendService/DeleteSAMLConnection"
	// FrontendServiceListSCIMAPIKeysProcedure is the fully-qualified name of the FrontendService's
	// ListSCIMAPIKeys RPC.
	FrontendServiceListSCIMAPIKeysProcedure = "/openauth.frontend.v1.FrontendService/ListSCIMAPIKeys"
	// FrontendServiceGetSCIMAPIKeyProcedure is the fully-qualified name of the FrontendService's
	// GetSCIMAPIKey RPC.
	FrontendServiceGetSCIMAPIKeyProcedure = "/openauth.frontend.v1.FrontendService/GetSCIMAPIKey"
	// FrontendServiceCreateSCIMAPIKeyProcedure is the fully-qualified name of the FrontendService's
	// CreateSCIMAPIKey RPC.
	FrontendServiceCreateSCIMAPIKeyProcedure = "/openauth.frontend.v1.FrontendService/CreateSCIMAPIKey"
	// FrontendServiceUpdateSCIMAPIKeyProcedure is the fully-qualified name of the FrontendService's
	// UpdateSCIMAPIKey RPC.
	FrontendServiceUpdateSCIMAPIKeyProcedure = "/openauth.frontend.v1.FrontendService/UpdateSCIMAPIKey"
	// FrontendServiceDeleteSCIMAPIKeyProcedure is the fully-qualified name of the FrontendService's
	// DeleteSCIMAPIKey RPC.
	FrontendServiceDeleteSCIMAPIKeyProcedure = "/openauth.frontend.v1.FrontendService/DeleteSCIMAPIKey"
	// FrontendServiceRevokeSCIMAPIKeyProcedure is the fully-qualified name of the FrontendService's
	// RevokeSCIMAPIKey RPC.
	FrontendServiceRevokeSCIMAPIKeyProcedure = "/openauth.frontend.v1.FrontendService/RevokeSCIMAPIKey"
	// FrontendServiceListMyPasskeysProcedure is the fully-qualified name of the FrontendService's
	// ListMyPasskeys RPC.
	FrontendServiceListMyPasskeysProcedure = "/openauth.frontend.v1.FrontendService/ListMyPasskeys"
	// FrontendServiceGetPasskeyOptionsProcedure is the fully-qualified name of the FrontendService's
	// GetPasskeyOptions RPC.
	FrontendServiceGetPasskeyOptionsProcedure = "/openauth.frontend.v1.FrontendService/GetPasskeyOptions"
	// FrontendServiceRegisterPasskeyProcedure is the fully-qualified name of the FrontendService's
	// RegisterPasskey RPC.
	FrontendServiceRegisterPasskeyProcedure = "/openauth.frontend.v1.FrontendService/RegisterPasskey"
)

// FrontendServiceClient is a client for the openauth.frontend.v1.FrontendService service.
type FrontendServiceClient interface {
	Logout(context.Context, *connect.Request[v1.LogoutRequest]) (*connect.Response[v1.LogoutResponse], error)
	Refresh(context.Context, *connect.Request[v1.RefreshRequest]) (*connect.Response[v1.RefreshResponse], error)
	GetProject(context.Context, *connect.Request[v1.GetProjectRequest]) (*connect.Response[v1.GetProjectResponse], error)
	GetOrganization(context.Context, *connect.Request[v1.GetOrganizationRequest]) (*connect.Response[v1.GetOrganizationResponse], error)
	UpdateOrganization(context.Context, *connect.Request[v1.UpdateOrganizationRequest]) (*connect.Response[v1.UpdateOrganizationResponse], error)
	ListUsers(context.Context, *connect.Request[v1.ListUsersRequest]) (*connect.Response[v1.ListUsersResponse], error)
	GetUser(context.Context, *connect.Request[v1.GetUserRequest]) (*connect.Response[v1.GetUserResponse], error)
	UpdateUser(context.Context, *connect.Request[v1.UpdateUserRequest]) (*connect.Response[v1.UpdateUserResponse], error)
	// Gets a list of organizations.
	ListOrganizations(context.Context, *connect.Request[v1.ListOrganizationsRequest]) (*connect.Response[v1.ListOrganizationsResponse], error)
	// Sets a user's password.
	SetPassword(context.Context, *connect.Request[v1.SetPasswordRequest]) (*connect.Response[v1.SetPasswordResponse], error)
	// Who am I?
	WhoAmI(context.Context, *connect.Request[v1.WhoAmIRequest]) (*connect.Response[v1.WhoAmIResponse], error)
	ListSAMLConnections(context.Context, *connect.Request[v1.ListSAMLConnectionsRequest]) (*connect.Response[v1.ListSAMLConnectionsResponse], error)
	GetSAMLConnection(context.Context, *connect.Request[v1.GetSAMLConnectionRequest]) (*connect.Response[v1.GetSAMLConnectionResponse], error)
	CreateSAMLConnection(context.Context, *connect.Request[v1.CreateSAMLConnectionRequest]) (*connect.Response[v1.CreateSAMLConnectionResponse], error)
	UpdateSAMLConnection(context.Context, *connect.Request[v1.UpdateSAMLConnectionRequest]) (*connect.Response[v1.UpdateSAMLConnectionResponse], error)
	DeleteSAMLConnection(context.Context, *connect.Request[v1.DeleteSAMLConnectionRequest]) (*connect.Response[v1.DeleteSAMLConnectionResponse], error)
	ListSCIMAPIKeys(context.Context, *connect.Request[v1.ListSCIMAPIKeysRequest]) (*connect.Response[v1.ListSCIMAPIKeysResponse], error)
	GetSCIMAPIKey(context.Context, *connect.Request[v1.GetSCIMAPIKeyRequest]) (*connect.Response[v1.GetSCIMAPIKeyResponse], error)
	CreateSCIMAPIKey(context.Context, *connect.Request[v1.CreateSCIMAPIKeyRequest]) (*connect.Response[v1.CreateSCIMAPIKeyResponse], error)
	UpdateSCIMAPIKey(context.Context, *connect.Request[v1.UpdateSCIMAPIKeyRequest]) (*connect.Response[v1.UpdateSCIMAPIKeyResponse], error)
	DeleteSCIMAPIKey(context.Context, *connect.Request[v1.DeleteSCIMAPIKeyRequest]) (*connect.Response[v1.DeleteSCIMAPIKeyResponse], error)
	RevokeSCIMAPIKey(context.Context, *connect.Request[v1.RevokeSCIMAPIKeyRequest]) (*connect.Response[v1.RevokeSCIMAPIKeyResponse], error)
	ListMyPasskeys(context.Context, *connect.Request[v1.ListMyPasskeysRequest]) (*connect.Response[v1.ListMyPasskeysResponse], error)
	GetPasskeyOptions(context.Context, *connect.Request[v1.GetPasskeyOptionsRequest]) (*connect.Response[v1.GetPasskeyOptionsResponse], error)
	RegisterPasskey(context.Context, *connect.Request[v1.RegisterPasskeyRequest]) (*connect.Response[v1.RegisterPasskeyResponse], error)
}

// NewFrontendServiceClient constructs a client for the openauth.frontend.v1.FrontendService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewFrontendServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) FrontendServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	frontendServiceMethods := v1.File_openauth_frontend_v1_frontend_proto.Services().ByName("FrontendService").Methods()
	return &frontendServiceClient{
		logout: connect.NewClient[v1.LogoutRequest, v1.LogoutResponse](
			httpClient,
			baseURL+FrontendServiceLogoutProcedure,
			connect.WithSchema(frontendServiceMethods.ByName("Logout")),
			connect.WithClientOptions(opts...),
		),
		refresh: connect.NewClient[v1.RefreshRequest, v1.RefreshResponse](
			httpClient,
			baseURL+FrontendServiceRefreshProcedure,
			connect.WithSchema(frontendServiceMethods.ByName("Refresh")),
			connect.WithClientOptions(opts...),
		),
		getProject: connect.NewClient[v1.GetProjectRequest, v1.GetProjectResponse](
			httpClient,
			baseURL+FrontendServiceGetProjectProcedure,
			connect.WithSchema(frontendServiceMethods.ByName("GetProject")),
			connect.WithClientOptions(opts...),
		),
		getOrganization: connect.NewClient[v1.GetOrganizationRequest, v1.GetOrganizationResponse](
			httpClient,
			baseURL+FrontendServiceGetOrganizationProcedure,
			connect.WithSchema(frontendServiceMethods.ByName("GetOrganization")),
			connect.WithClientOptions(opts...),
		),
		updateOrganization: connect.NewClient[v1.UpdateOrganizationRequest, v1.UpdateOrganizationResponse](
			httpClient,
			baseURL+FrontendServiceUpdateOrganizationProcedure,
			connect.WithSchema(frontendServiceMethods.ByName("UpdateOrganization")),
			connect.WithClientOptions(opts...),
		),
		listUsers: connect.NewClient[v1.ListUsersRequest, v1.ListUsersResponse](
			httpClient,
			baseURL+FrontendServiceListUsersProcedure,
			connect.WithSchema(frontendServiceMethods.ByName("ListUsers")),
			connect.WithClientOptions(opts...),
		),
		getUser: connect.NewClient[v1.GetUserRequest, v1.GetUserResponse](
			httpClient,
			baseURL+FrontendServiceGetUserProcedure,
			connect.WithSchema(frontendServiceMethods.ByName("GetUser")),
			connect.WithClientOptions(opts...),
		),
		updateUser: connect.NewClient[v1.UpdateUserRequest, v1.UpdateUserResponse](
			httpClient,
			baseURL+FrontendServiceUpdateUserProcedure,
			connect.WithSchema(frontendServiceMethods.ByName("UpdateUser")),
			connect.WithClientOptions(opts...),
		),
		listOrganizations: connect.NewClient[v1.ListOrganizationsRequest, v1.ListOrganizationsResponse](
			httpClient,
			baseURL+FrontendServiceListOrganizationsProcedure,
			connect.WithSchema(frontendServiceMethods.ByName("ListOrganizations")),
			connect.WithClientOptions(opts...),
		),
		setPassword: connect.NewClient[v1.SetPasswordRequest, v1.SetPasswordResponse](
			httpClient,
			baseURL+FrontendServiceSetPasswordProcedure,
			connect.WithSchema(frontendServiceMethods.ByName("SetPassword")),
			connect.WithClientOptions(opts...),
		),
		whoAmI: connect.NewClient[v1.WhoAmIRequest, v1.WhoAmIResponse](
			httpClient,
			baseURL+FrontendServiceWhoAmIProcedure,
			connect.WithSchema(frontendServiceMethods.ByName("WhoAmI")),
			connect.WithClientOptions(opts...),
		),
		listSAMLConnections: connect.NewClient[v1.ListSAMLConnectionsRequest, v1.ListSAMLConnectionsResponse](
			httpClient,
			baseURL+FrontendServiceListSAMLConnectionsProcedure,
			connect.WithSchema(frontendServiceMethods.ByName("ListSAMLConnections")),
			connect.WithClientOptions(opts...),
		),
		getSAMLConnection: connect.NewClient[v1.GetSAMLConnectionRequest, v1.GetSAMLConnectionResponse](
			httpClient,
			baseURL+FrontendServiceGetSAMLConnectionProcedure,
			connect.WithSchema(frontendServiceMethods.ByName("GetSAMLConnection")),
			connect.WithClientOptions(opts...),
		),
		createSAMLConnection: connect.NewClient[v1.CreateSAMLConnectionRequest, v1.CreateSAMLConnectionResponse](
			httpClient,
			baseURL+FrontendServiceCreateSAMLConnectionProcedure,
			connect.WithSchema(frontendServiceMethods.ByName("CreateSAMLConnection")),
			connect.WithClientOptions(opts...),
		),
		updateSAMLConnection: connect.NewClient[v1.UpdateSAMLConnectionRequest, v1.UpdateSAMLConnectionResponse](
			httpClient,
			baseURL+FrontendServiceUpdateSAMLConnectionProcedure,
			connect.WithSchema(frontendServiceMethods.ByName("UpdateSAMLConnection")),
			connect.WithClientOptions(opts...),
		),
		deleteSAMLConnection: connect.NewClient[v1.DeleteSAMLConnectionRequest, v1.DeleteSAMLConnectionResponse](
			httpClient,
			baseURL+FrontendServiceDeleteSAMLConnectionProcedure,
			connect.WithSchema(frontendServiceMethods.ByName("DeleteSAMLConnection")),
			connect.WithClientOptions(opts...),
		),
		listSCIMAPIKeys: connect.NewClient[v1.ListSCIMAPIKeysRequest, v1.ListSCIMAPIKeysResponse](
			httpClient,
			baseURL+FrontendServiceListSCIMAPIKeysProcedure,
			connect.WithSchema(frontendServiceMethods.ByName("ListSCIMAPIKeys")),
			connect.WithClientOptions(opts...),
		),
		getSCIMAPIKey: connect.NewClient[v1.GetSCIMAPIKeyRequest, v1.GetSCIMAPIKeyResponse](
			httpClient,
			baseURL+FrontendServiceGetSCIMAPIKeyProcedure,
			connect.WithSchema(frontendServiceMethods.ByName("GetSCIMAPIKey")),
			connect.WithClientOptions(opts...),
		),
		createSCIMAPIKey: connect.NewClient[v1.CreateSCIMAPIKeyRequest, v1.CreateSCIMAPIKeyResponse](
			httpClient,
			baseURL+FrontendServiceCreateSCIMAPIKeyProcedure,
			connect.WithSchema(frontendServiceMethods.ByName("CreateSCIMAPIKey")),
			connect.WithClientOptions(opts...),
		),
		updateSCIMAPIKey: connect.NewClient[v1.UpdateSCIMAPIKeyRequest, v1.UpdateSCIMAPIKeyResponse](
			httpClient,
			baseURL+FrontendServiceUpdateSCIMAPIKeyProcedure,
			connect.WithSchema(frontendServiceMethods.ByName("UpdateSCIMAPIKey")),
			connect.WithClientOptions(opts...),
		),
		deleteSCIMAPIKey: connect.NewClient[v1.DeleteSCIMAPIKeyRequest, v1.DeleteSCIMAPIKeyResponse](
			httpClient,
			baseURL+FrontendServiceDeleteSCIMAPIKeyProcedure,
			connect.WithSchema(frontendServiceMethods.ByName("DeleteSCIMAPIKey")),
			connect.WithClientOptions(opts...),
		),
		revokeSCIMAPIKey: connect.NewClient[v1.RevokeSCIMAPIKeyRequest, v1.RevokeSCIMAPIKeyResponse](
			httpClient,
			baseURL+FrontendServiceRevokeSCIMAPIKeyProcedure,
			connect.WithSchema(frontendServiceMethods.ByName("RevokeSCIMAPIKey")),
			connect.WithClientOptions(opts...),
		),
		listMyPasskeys: connect.NewClient[v1.ListMyPasskeysRequest, v1.ListMyPasskeysResponse](
			httpClient,
			baseURL+FrontendServiceListMyPasskeysProcedure,
			connect.WithSchema(frontendServiceMethods.ByName("ListMyPasskeys")),
			connect.WithClientOptions(opts...),
		),
		getPasskeyOptions: connect.NewClient[v1.GetPasskeyOptionsRequest, v1.GetPasskeyOptionsResponse](
			httpClient,
			baseURL+FrontendServiceGetPasskeyOptionsProcedure,
			connect.WithSchema(frontendServiceMethods.ByName("GetPasskeyOptions")),
			connect.WithClientOptions(opts...),
		),
		registerPasskey: connect.NewClient[v1.RegisterPasskeyRequest, v1.RegisterPasskeyResponse](
			httpClient,
			baseURL+FrontendServiceRegisterPasskeyProcedure,
			connect.WithSchema(frontendServiceMethods.ByName("RegisterPasskey")),
			connect.WithClientOptions(opts...),
		),
	}
}

// frontendServiceClient implements FrontendServiceClient.
type frontendServiceClient struct {
	logout               *connect.Client[v1.LogoutRequest, v1.LogoutResponse]
	refresh              *connect.Client[v1.RefreshRequest, v1.RefreshResponse]
	getProject           *connect.Client[v1.GetProjectRequest, v1.GetProjectResponse]
	getOrganization      *connect.Client[v1.GetOrganizationRequest, v1.GetOrganizationResponse]
	updateOrganization   *connect.Client[v1.UpdateOrganizationRequest, v1.UpdateOrganizationResponse]
	listUsers            *connect.Client[v1.ListUsersRequest, v1.ListUsersResponse]
	getUser              *connect.Client[v1.GetUserRequest, v1.GetUserResponse]
	updateUser           *connect.Client[v1.UpdateUserRequest, v1.UpdateUserResponse]
	listOrganizations    *connect.Client[v1.ListOrganizationsRequest, v1.ListOrganizationsResponse]
	setPassword          *connect.Client[v1.SetPasswordRequest, v1.SetPasswordResponse]
	whoAmI               *connect.Client[v1.WhoAmIRequest, v1.WhoAmIResponse]
	listSAMLConnections  *connect.Client[v1.ListSAMLConnectionsRequest, v1.ListSAMLConnectionsResponse]
	getSAMLConnection    *connect.Client[v1.GetSAMLConnectionRequest, v1.GetSAMLConnectionResponse]
	createSAMLConnection *connect.Client[v1.CreateSAMLConnectionRequest, v1.CreateSAMLConnectionResponse]
	updateSAMLConnection *connect.Client[v1.UpdateSAMLConnectionRequest, v1.UpdateSAMLConnectionResponse]
	deleteSAMLConnection *connect.Client[v1.DeleteSAMLConnectionRequest, v1.DeleteSAMLConnectionResponse]
	listSCIMAPIKeys      *connect.Client[v1.ListSCIMAPIKeysRequest, v1.ListSCIMAPIKeysResponse]
	getSCIMAPIKey        *connect.Client[v1.GetSCIMAPIKeyRequest, v1.GetSCIMAPIKeyResponse]
	createSCIMAPIKey     *connect.Client[v1.CreateSCIMAPIKeyRequest, v1.CreateSCIMAPIKeyResponse]
	updateSCIMAPIKey     *connect.Client[v1.UpdateSCIMAPIKeyRequest, v1.UpdateSCIMAPIKeyResponse]
	deleteSCIMAPIKey     *connect.Client[v1.DeleteSCIMAPIKeyRequest, v1.DeleteSCIMAPIKeyResponse]
	revokeSCIMAPIKey     *connect.Client[v1.RevokeSCIMAPIKeyRequest, v1.RevokeSCIMAPIKeyResponse]
	listMyPasskeys       *connect.Client[v1.ListMyPasskeysRequest, v1.ListMyPasskeysResponse]
	getPasskeyOptions    *connect.Client[v1.GetPasskeyOptionsRequest, v1.GetPasskeyOptionsResponse]
	registerPasskey      *connect.Client[v1.RegisterPasskeyRequest, v1.RegisterPasskeyResponse]
}

// Logout calls openauth.frontend.v1.FrontendService.Logout.
func (c *frontendServiceClient) Logout(ctx context.Context, req *connect.Request[v1.LogoutRequest]) (*connect.Response[v1.LogoutResponse], error) {
	return c.logout.CallUnary(ctx, req)
}

// Refresh calls openauth.frontend.v1.FrontendService.Refresh.
func (c *frontendServiceClient) Refresh(ctx context.Context, req *connect.Request[v1.RefreshRequest]) (*connect.Response[v1.RefreshResponse], error) {
	return c.refresh.CallUnary(ctx, req)
}

// GetProject calls openauth.frontend.v1.FrontendService.GetProject.
func (c *frontendServiceClient) GetProject(ctx context.Context, req *connect.Request[v1.GetProjectRequest]) (*connect.Response[v1.GetProjectResponse], error) {
	return c.getProject.CallUnary(ctx, req)
}

// GetOrganization calls openauth.frontend.v1.FrontendService.GetOrganization.
func (c *frontendServiceClient) GetOrganization(ctx context.Context, req *connect.Request[v1.GetOrganizationRequest]) (*connect.Response[v1.GetOrganizationResponse], error) {
	return c.getOrganization.CallUnary(ctx, req)
}

// UpdateOrganization calls openauth.frontend.v1.FrontendService.UpdateOrganization.
func (c *frontendServiceClient) UpdateOrganization(ctx context.Context, req *connect.Request[v1.UpdateOrganizationRequest]) (*connect.Response[v1.UpdateOrganizationResponse], error) {
	return c.updateOrganization.CallUnary(ctx, req)
}

// ListUsers calls openauth.frontend.v1.FrontendService.ListUsers.
func (c *frontendServiceClient) ListUsers(ctx context.Context, req *connect.Request[v1.ListUsersRequest]) (*connect.Response[v1.ListUsersResponse], error) {
	return c.listUsers.CallUnary(ctx, req)
}

// GetUser calls openauth.frontend.v1.FrontendService.GetUser.
func (c *frontendServiceClient) GetUser(ctx context.Context, req *connect.Request[v1.GetUserRequest]) (*connect.Response[v1.GetUserResponse], error) {
	return c.getUser.CallUnary(ctx, req)
}

// UpdateUser calls openauth.frontend.v1.FrontendService.UpdateUser.
func (c *frontendServiceClient) UpdateUser(ctx context.Context, req *connect.Request[v1.UpdateUserRequest]) (*connect.Response[v1.UpdateUserResponse], error) {
	return c.updateUser.CallUnary(ctx, req)
}

// ListOrganizations calls openauth.frontend.v1.FrontendService.ListOrganizations.
func (c *frontendServiceClient) ListOrganizations(ctx context.Context, req *connect.Request[v1.ListOrganizationsRequest]) (*connect.Response[v1.ListOrganizationsResponse], error) {
	return c.listOrganizations.CallUnary(ctx, req)
}

// SetPassword calls openauth.frontend.v1.FrontendService.SetPassword.
func (c *frontendServiceClient) SetPassword(ctx context.Context, req *connect.Request[v1.SetPasswordRequest]) (*connect.Response[v1.SetPasswordResponse], error) {
	return c.setPassword.CallUnary(ctx, req)
}

// WhoAmI calls openauth.frontend.v1.FrontendService.WhoAmI.
func (c *frontendServiceClient) WhoAmI(ctx context.Context, req *connect.Request[v1.WhoAmIRequest]) (*connect.Response[v1.WhoAmIResponse], error) {
	return c.whoAmI.CallUnary(ctx, req)
}

// ListSAMLConnections calls openauth.frontend.v1.FrontendService.ListSAMLConnections.
func (c *frontendServiceClient) ListSAMLConnections(ctx context.Context, req *connect.Request[v1.ListSAMLConnectionsRequest]) (*connect.Response[v1.ListSAMLConnectionsResponse], error) {
	return c.listSAMLConnections.CallUnary(ctx, req)
}

// GetSAMLConnection calls openauth.frontend.v1.FrontendService.GetSAMLConnection.
func (c *frontendServiceClient) GetSAMLConnection(ctx context.Context, req *connect.Request[v1.GetSAMLConnectionRequest]) (*connect.Response[v1.GetSAMLConnectionResponse], error) {
	return c.getSAMLConnection.CallUnary(ctx, req)
}

// CreateSAMLConnection calls openauth.frontend.v1.FrontendService.CreateSAMLConnection.
func (c *frontendServiceClient) CreateSAMLConnection(ctx context.Context, req *connect.Request[v1.CreateSAMLConnectionRequest]) (*connect.Response[v1.CreateSAMLConnectionResponse], error) {
	return c.createSAMLConnection.CallUnary(ctx, req)
}

// UpdateSAMLConnection calls openauth.frontend.v1.FrontendService.UpdateSAMLConnection.
func (c *frontendServiceClient) UpdateSAMLConnection(ctx context.Context, req *connect.Request[v1.UpdateSAMLConnectionRequest]) (*connect.Response[v1.UpdateSAMLConnectionResponse], error) {
	return c.updateSAMLConnection.CallUnary(ctx, req)
}

// DeleteSAMLConnection calls openauth.frontend.v1.FrontendService.DeleteSAMLConnection.
func (c *frontendServiceClient) DeleteSAMLConnection(ctx context.Context, req *connect.Request[v1.DeleteSAMLConnectionRequest]) (*connect.Response[v1.DeleteSAMLConnectionResponse], error) {
	return c.deleteSAMLConnection.CallUnary(ctx, req)
}

// ListSCIMAPIKeys calls openauth.frontend.v1.FrontendService.ListSCIMAPIKeys.
func (c *frontendServiceClient) ListSCIMAPIKeys(ctx context.Context, req *connect.Request[v1.ListSCIMAPIKeysRequest]) (*connect.Response[v1.ListSCIMAPIKeysResponse], error) {
	return c.listSCIMAPIKeys.CallUnary(ctx, req)
}

// GetSCIMAPIKey calls openauth.frontend.v1.FrontendService.GetSCIMAPIKey.
func (c *frontendServiceClient) GetSCIMAPIKey(ctx context.Context, req *connect.Request[v1.GetSCIMAPIKeyRequest]) (*connect.Response[v1.GetSCIMAPIKeyResponse], error) {
	return c.getSCIMAPIKey.CallUnary(ctx, req)
}

// CreateSCIMAPIKey calls openauth.frontend.v1.FrontendService.CreateSCIMAPIKey.
func (c *frontendServiceClient) CreateSCIMAPIKey(ctx context.Context, req *connect.Request[v1.CreateSCIMAPIKeyRequest]) (*connect.Response[v1.CreateSCIMAPIKeyResponse], error) {
	return c.createSCIMAPIKey.CallUnary(ctx, req)
}

// UpdateSCIMAPIKey calls openauth.frontend.v1.FrontendService.UpdateSCIMAPIKey.
func (c *frontendServiceClient) UpdateSCIMAPIKey(ctx context.Context, req *connect.Request[v1.UpdateSCIMAPIKeyRequest]) (*connect.Response[v1.UpdateSCIMAPIKeyResponse], error) {
	return c.updateSCIMAPIKey.CallUnary(ctx, req)
}

// DeleteSCIMAPIKey calls openauth.frontend.v1.FrontendService.DeleteSCIMAPIKey.
func (c *frontendServiceClient) DeleteSCIMAPIKey(ctx context.Context, req *connect.Request[v1.DeleteSCIMAPIKeyRequest]) (*connect.Response[v1.DeleteSCIMAPIKeyResponse], error) {
	return c.deleteSCIMAPIKey.CallUnary(ctx, req)
}

// RevokeSCIMAPIKey calls openauth.frontend.v1.FrontendService.RevokeSCIMAPIKey.
func (c *frontendServiceClient) RevokeSCIMAPIKey(ctx context.Context, req *connect.Request[v1.RevokeSCIMAPIKeyRequest]) (*connect.Response[v1.RevokeSCIMAPIKeyResponse], error) {
	return c.revokeSCIMAPIKey.CallUnary(ctx, req)
}

// ListMyPasskeys calls openauth.frontend.v1.FrontendService.ListMyPasskeys.
func (c *frontendServiceClient) ListMyPasskeys(ctx context.Context, req *connect.Request[v1.ListMyPasskeysRequest]) (*connect.Response[v1.ListMyPasskeysResponse], error) {
	return c.listMyPasskeys.CallUnary(ctx, req)
}

// GetPasskeyOptions calls openauth.frontend.v1.FrontendService.GetPasskeyOptions.
func (c *frontendServiceClient) GetPasskeyOptions(ctx context.Context, req *connect.Request[v1.GetPasskeyOptionsRequest]) (*connect.Response[v1.GetPasskeyOptionsResponse], error) {
	return c.getPasskeyOptions.CallUnary(ctx, req)
}

// RegisterPasskey calls openauth.frontend.v1.FrontendService.RegisterPasskey.
func (c *frontendServiceClient) RegisterPasskey(ctx context.Context, req *connect.Request[v1.RegisterPasskeyRequest]) (*connect.Response[v1.RegisterPasskeyResponse], error) {
	return c.registerPasskey.CallUnary(ctx, req)
}

// FrontendServiceHandler is an implementation of the openauth.frontend.v1.FrontendService service.
type FrontendServiceHandler interface {
	Logout(context.Context, *connect.Request[v1.LogoutRequest]) (*connect.Response[v1.LogoutResponse], error)
	Refresh(context.Context, *connect.Request[v1.RefreshRequest]) (*connect.Response[v1.RefreshResponse], error)
	GetProject(context.Context, *connect.Request[v1.GetProjectRequest]) (*connect.Response[v1.GetProjectResponse], error)
	GetOrganization(context.Context, *connect.Request[v1.GetOrganizationRequest]) (*connect.Response[v1.GetOrganizationResponse], error)
	UpdateOrganization(context.Context, *connect.Request[v1.UpdateOrganizationRequest]) (*connect.Response[v1.UpdateOrganizationResponse], error)
	ListUsers(context.Context, *connect.Request[v1.ListUsersRequest]) (*connect.Response[v1.ListUsersResponse], error)
	GetUser(context.Context, *connect.Request[v1.GetUserRequest]) (*connect.Response[v1.GetUserResponse], error)
	UpdateUser(context.Context, *connect.Request[v1.UpdateUserRequest]) (*connect.Response[v1.UpdateUserResponse], error)
	// Gets a list of organizations.
	ListOrganizations(context.Context, *connect.Request[v1.ListOrganizationsRequest]) (*connect.Response[v1.ListOrganizationsResponse], error)
	// Sets a user's password.
	SetPassword(context.Context, *connect.Request[v1.SetPasswordRequest]) (*connect.Response[v1.SetPasswordResponse], error)
	// Who am I?
	WhoAmI(context.Context, *connect.Request[v1.WhoAmIRequest]) (*connect.Response[v1.WhoAmIResponse], error)
	ListSAMLConnections(context.Context, *connect.Request[v1.ListSAMLConnectionsRequest]) (*connect.Response[v1.ListSAMLConnectionsResponse], error)
	GetSAMLConnection(context.Context, *connect.Request[v1.GetSAMLConnectionRequest]) (*connect.Response[v1.GetSAMLConnectionResponse], error)
	CreateSAMLConnection(context.Context, *connect.Request[v1.CreateSAMLConnectionRequest]) (*connect.Response[v1.CreateSAMLConnectionResponse], error)
	UpdateSAMLConnection(context.Context, *connect.Request[v1.UpdateSAMLConnectionRequest]) (*connect.Response[v1.UpdateSAMLConnectionResponse], error)
	DeleteSAMLConnection(context.Context, *connect.Request[v1.DeleteSAMLConnectionRequest]) (*connect.Response[v1.DeleteSAMLConnectionResponse], error)
	ListSCIMAPIKeys(context.Context, *connect.Request[v1.ListSCIMAPIKeysRequest]) (*connect.Response[v1.ListSCIMAPIKeysResponse], error)
	GetSCIMAPIKey(context.Context, *connect.Request[v1.GetSCIMAPIKeyRequest]) (*connect.Response[v1.GetSCIMAPIKeyResponse], error)
	CreateSCIMAPIKey(context.Context, *connect.Request[v1.CreateSCIMAPIKeyRequest]) (*connect.Response[v1.CreateSCIMAPIKeyResponse], error)
	UpdateSCIMAPIKey(context.Context, *connect.Request[v1.UpdateSCIMAPIKeyRequest]) (*connect.Response[v1.UpdateSCIMAPIKeyResponse], error)
	DeleteSCIMAPIKey(context.Context, *connect.Request[v1.DeleteSCIMAPIKeyRequest]) (*connect.Response[v1.DeleteSCIMAPIKeyResponse], error)
	RevokeSCIMAPIKey(context.Context, *connect.Request[v1.RevokeSCIMAPIKeyRequest]) (*connect.Response[v1.RevokeSCIMAPIKeyResponse], error)
	ListMyPasskeys(context.Context, *connect.Request[v1.ListMyPasskeysRequest]) (*connect.Response[v1.ListMyPasskeysResponse], error)
	GetPasskeyOptions(context.Context, *connect.Request[v1.GetPasskeyOptionsRequest]) (*connect.Response[v1.GetPasskeyOptionsResponse], error)
	RegisterPasskey(context.Context, *connect.Request[v1.RegisterPasskeyRequest]) (*connect.Response[v1.RegisterPasskeyResponse], error)
}

// NewFrontendServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewFrontendServiceHandler(svc FrontendServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	frontendServiceMethods := v1.File_openauth_frontend_v1_frontend_proto.Services().ByName("FrontendService").Methods()
	frontendServiceLogoutHandler := connect.NewUnaryHandler(
		FrontendServiceLogoutProcedure,
		svc.Logout,
		connect.WithSchema(frontendServiceMethods.ByName("Logout")),
		connect.WithHandlerOptions(opts...),
	)
	frontendServiceRefreshHandler := connect.NewUnaryHandler(
		FrontendServiceRefreshProcedure,
		svc.Refresh,
		connect.WithSchema(frontendServiceMethods.ByName("Refresh")),
		connect.WithHandlerOptions(opts...),
	)
	frontendServiceGetProjectHandler := connect.NewUnaryHandler(
		FrontendServiceGetProjectProcedure,
		svc.GetProject,
		connect.WithSchema(frontendServiceMethods.ByName("GetProject")),
		connect.WithHandlerOptions(opts...),
	)
	frontendServiceGetOrganizationHandler := connect.NewUnaryHandler(
		FrontendServiceGetOrganizationProcedure,
		svc.GetOrganization,
		connect.WithSchema(frontendServiceMethods.ByName("GetOrganization")),
		connect.WithHandlerOptions(opts...),
	)
	frontendServiceUpdateOrganizationHandler := connect.NewUnaryHandler(
		FrontendServiceUpdateOrganizationProcedure,
		svc.UpdateOrganization,
		connect.WithSchema(frontendServiceMethods.ByName("UpdateOrganization")),
		connect.WithHandlerOptions(opts...),
	)
	frontendServiceListUsersHandler := connect.NewUnaryHandler(
		FrontendServiceListUsersProcedure,
		svc.ListUsers,
		connect.WithSchema(frontendServiceMethods.ByName("ListUsers")),
		connect.WithHandlerOptions(opts...),
	)
	frontendServiceGetUserHandler := connect.NewUnaryHandler(
		FrontendServiceGetUserProcedure,
		svc.GetUser,
		connect.WithSchema(frontendServiceMethods.ByName("GetUser")),
		connect.WithHandlerOptions(opts...),
	)
	frontendServiceUpdateUserHandler := connect.NewUnaryHandler(
		FrontendServiceUpdateUserProcedure,
		svc.UpdateUser,
		connect.WithSchema(frontendServiceMethods.ByName("UpdateUser")),
		connect.WithHandlerOptions(opts...),
	)
	frontendServiceListOrganizationsHandler := connect.NewUnaryHandler(
		FrontendServiceListOrganizationsProcedure,
		svc.ListOrganizations,
		connect.WithSchema(frontendServiceMethods.ByName("ListOrganizations")),
		connect.WithHandlerOptions(opts...),
	)
	frontendServiceSetPasswordHandler := connect.NewUnaryHandler(
		FrontendServiceSetPasswordProcedure,
		svc.SetPassword,
		connect.WithSchema(frontendServiceMethods.ByName("SetPassword")),
		connect.WithHandlerOptions(opts...),
	)
	frontendServiceWhoAmIHandler := connect.NewUnaryHandler(
		FrontendServiceWhoAmIProcedure,
		svc.WhoAmI,
		connect.WithSchema(frontendServiceMethods.ByName("WhoAmI")),
		connect.WithHandlerOptions(opts...),
	)
	frontendServiceListSAMLConnectionsHandler := connect.NewUnaryHandler(
		FrontendServiceListSAMLConnectionsProcedure,
		svc.ListSAMLConnections,
		connect.WithSchema(frontendServiceMethods.ByName("ListSAMLConnections")),
		connect.WithHandlerOptions(opts...),
	)
	frontendServiceGetSAMLConnectionHandler := connect.NewUnaryHandler(
		FrontendServiceGetSAMLConnectionProcedure,
		svc.GetSAMLConnection,
		connect.WithSchema(frontendServiceMethods.ByName("GetSAMLConnection")),
		connect.WithHandlerOptions(opts...),
	)
	frontendServiceCreateSAMLConnectionHandler := connect.NewUnaryHandler(
		FrontendServiceCreateSAMLConnectionProcedure,
		svc.CreateSAMLConnection,
		connect.WithSchema(frontendServiceMethods.ByName("CreateSAMLConnection")),
		connect.WithHandlerOptions(opts...),
	)
	frontendServiceUpdateSAMLConnectionHandler := connect.NewUnaryHandler(
		FrontendServiceUpdateSAMLConnectionProcedure,
		svc.UpdateSAMLConnection,
		connect.WithSchema(frontendServiceMethods.ByName("UpdateSAMLConnection")),
		connect.WithHandlerOptions(opts...),
	)
	frontendServiceDeleteSAMLConnectionHandler := connect.NewUnaryHandler(
		FrontendServiceDeleteSAMLConnectionProcedure,
		svc.DeleteSAMLConnection,
		connect.WithSchema(frontendServiceMethods.ByName("DeleteSAMLConnection")),
		connect.WithHandlerOptions(opts...),
	)
	frontendServiceListSCIMAPIKeysHandler := connect.NewUnaryHandler(
		FrontendServiceListSCIMAPIKeysProcedure,
		svc.ListSCIMAPIKeys,
		connect.WithSchema(frontendServiceMethods.ByName("ListSCIMAPIKeys")),
		connect.WithHandlerOptions(opts...),
	)
	frontendServiceGetSCIMAPIKeyHandler := connect.NewUnaryHandler(
		FrontendServiceGetSCIMAPIKeyProcedure,
		svc.GetSCIMAPIKey,
		connect.WithSchema(frontendServiceMethods.ByName("GetSCIMAPIKey")),
		connect.WithHandlerOptions(opts...),
	)
	frontendServiceCreateSCIMAPIKeyHandler := connect.NewUnaryHandler(
		FrontendServiceCreateSCIMAPIKeyProcedure,
		svc.CreateSCIMAPIKey,
		connect.WithSchema(frontendServiceMethods.ByName("CreateSCIMAPIKey")),
		connect.WithHandlerOptions(opts...),
	)
	frontendServiceUpdateSCIMAPIKeyHandler := connect.NewUnaryHandler(
		FrontendServiceUpdateSCIMAPIKeyProcedure,
		svc.UpdateSCIMAPIKey,
		connect.WithSchema(frontendServiceMethods.ByName("UpdateSCIMAPIKey")),
		connect.WithHandlerOptions(opts...),
	)
	frontendServiceDeleteSCIMAPIKeyHandler := connect.NewUnaryHandler(
		FrontendServiceDeleteSCIMAPIKeyProcedure,
		svc.DeleteSCIMAPIKey,
		connect.WithSchema(frontendServiceMethods.ByName("DeleteSCIMAPIKey")),
		connect.WithHandlerOptions(opts...),
	)
	frontendServiceRevokeSCIMAPIKeyHandler := connect.NewUnaryHandler(
		FrontendServiceRevokeSCIMAPIKeyProcedure,
		svc.RevokeSCIMAPIKey,
		connect.WithSchema(frontendServiceMethods.ByName("RevokeSCIMAPIKey")),
		connect.WithHandlerOptions(opts...),
	)
	frontendServiceListMyPasskeysHandler := connect.NewUnaryHandler(
		FrontendServiceListMyPasskeysProcedure,
		svc.ListMyPasskeys,
		connect.WithSchema(frontendServiceMethods.ByName("ListMyPasskeys")),
		connect.WithHandlerOptions(opts...),
	)
	frontendServiceGetPasskeyOptionsHandler := connect.NewUnaryHandler(
		FrontendServiceGetPasskeyOptionsProcedure,
		svc.GetPasskeyOptions,
		connect.WithSchema(frontendServiceMethods.ByName("GetPasskeyOptions")),
		connect.WithHandlerOptions(opts...),
	)
	frontendServiceRegisterPasskeyHandler := connect.NewUnaryHandler(
		FrontendServiceRegisterPasskeyProcedure,
		svc.RegisterPasskey,
		connect.WithSchema(frontendServiceMethods.ByName("RegisterPasskey")),
		connect.WithHandlerOptions(opts...),
	)
	return "/openauth.frontend.v1.FrontendService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case FrontendServiceLogoutProcedure:
			frontendServiceLogoutHandler.ServeHTTP(w, r)
		case FrontendServiceRefreshProcedure:
			frontendServiceRefreshHandler.ServeHTTP(w, r)
		case FrontendServiceGetProjectProcedure:
			frontendServiceGetProjectHandler.ServeHTTP(w, r)
		case FrontendServiceGetOrganizationProcedure:
			frontendServiceGetOrganizationHandler.ServeHTTP(w, r)
		case FrontendServiceUpdateOrganizationProcedure:
			frontendServiceUpdateOrganizationHandler.ServeHTTP(w, r)
		case FrontendServiceListUsersProcedure:
			frontendServiceListUsersHandler.ServeHTTP(w, r)
		case FrontendServiceGetUserProcedure:
			frontendServiceGetUserHandler.ServeHTTP(w, r)
		case FrontendServiceUpdateUserProcedure:
			frontendServiceUpdateUserHandler.ServeHTTP(w, r)
		case FrontendServiceListOrganizationsProcedure:
			frontendServiceListOrganizationsHandler.ServeHTTP(w, r)
		case FrontendServiceSetPasswordProcedure:
			frontendServiceSetPasswordHandler.ServeHTTP(w, r)
		case FrontendServiceWhoAmIProcedure:
			frontendServiceWhoAmIHandler.ServeHTTP(w, r)
		case FrontendServiceListSAMLConnectionsProcedure:
			frontendServiceListSAMLConnectionsHandler.ServeHTTP(w, r)
		case FrontendServiceGetSAMLConnectionProcedure:
			frontendServiceGetSAMLConnectionHandler.ServeHTTP(w, r)
		case FrontendServiceCreateSAMLConnectionProcedure:
			frontendServiceCreateSAMLConnectionHandler.ServeHTTP(w, r)
		case FrontendServiceUpdateSAMLConnectionProcedure:
			frontendServiceUpdateSAMLConnectionHandler.ServeHTTP(w, r)
		case FrontendServiceDeleteSAMLConnectionProcedure:
			frontendServiceDeleteSAMLConnectionHandler.ServeHTTP(w, r)
		case FrontendServiceListSCIMAPIKeysProcedure:
			frontendServiceListSCIMAPIKeysHandler.ServeHTTP(w, r)
		case FrontendServiceGetSCIMAPIKeyProcedure:
			frontendServiceGetSCIMAPIKeyHandler.ServeHTTP(w, r)
		case FrontendServiceCreateSCIMAPIKeyProcedure:
			frontendServiceCreateSCIMAPIKeyHandler.ServeHTTP(w, r)
		case FrontendServiceUpdateSCIMAPIKeyProcedure:
			frontendServiceUpdateSCIMAPIKeyHandler.ServeHTTP(w, r)
		case FrontendServiceDeleteSCIMAPIKeyProcedure:
			frontendServiceDeleteSCIMAPIKeyHandler.ServeHTTP(w, r)
		case FrontendServiceRevokeSCIMAPIKeyProcedure:
			frontendServiceRevokeSCIMAPIKeyHandler.ServeHTTP(w, r)
		case FrontendServiceListMyPasskeysProcedure:
			frontendServiceListMyPasskeysHandler.ServeHTTP(w, r)
		case FrontendServiceGetPasskeyOptionsProcedure:
			frontendServiceGetPasskeyOptionsHandler.ServeHTTP(w, r)
		case FrontendServiceRegisterPasskeyProcedure:
			frontendServiceRegisterPasskeyHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedFrontendServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedFrontendServiceHandler struct{}

func (UnimplementedFrontendServiceHandler) Logout(context.Context, *connect.Request[v1.LogoutRequest]) (*connect.Response[v1.LogoutResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("openauth.frontend.v1.FrontendService.Logout is not implemented"))
}

func (UnimplementedFrontendServiceHandler) Refresh(context.Context, *connect.Request[v1.RefreshRequest]) (*connect.Response[v1.RefreshResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("openauth.frontend.v1.FrontendService.Refresh is not implemented"))
}

func (UnimplementedFrontendServiceHandler) GetProject(context.Context, *connect.Request[v1.GetProjectRequest]) (*connect.Response[v1.GetProjectResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("openauth.frontend.v1.FrontendService.GetProject is not implemented"))
}

func (UnimplementedFrontendServiceHandler) GetOrganization(context.Context, *connect.Request[v1.GetOrganizationRequest]) (*connect.Response[v1.GetOrganizationResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("openauth.frontend.v1.FrontendService.GetOrganization is not implemented"))
}

func (UnimplementedFrontendServiceHandler) UpdateOrganization(context.Context, *connect.Request[v1.UpdateOrganizationRequest]) (*connect.Response[v1.UpdateOrganizationResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("openauth.frontend.v1.FrontendService.UpdateOrganization is not implemented"))
}

func (UnimplementedFrontendServiceHandler) ListUsers(context.Context, *connect.Request[v1.ListUsersRequest]) (*connect.Response[v1.ListUsersResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("openauth.frontend.v1.FrontendService.ListUsers is not implemented"))
}

func (UnimplementedFrontendServiceHandler) GetUser(context.Context, *connect.Request[v1.GetUserRequest]) (*connect.Response[v1.GetUserResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("openauth.frontend.v1.FrontendService.GetUser is not implemented"))
}

func (UnimplementedFrontendServiceHandler) UpdateUser(context.Context, *connect.Request[v1.UpdateUserRequest]) (*connect.Response[v1.UpdateUserResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("openauth.frontend.v1.FrontendService.UpdateUser is not implemented"))
}

func (UnimplementedFrontendServiceHandler) ListOrganizations(context.Context, *connect.Request[v1.ListOrganizationsRequest]) (*connect.Response[v1.ListOrganizationsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("openauth.frontend.v1.FrontendService.ListOrganizations is not implemented"))
}

func (UnimplementedFrontendServiceHandler) SetPassword(context.Context, *connect.Request[v1.SetPasswordRequest]) (*connect.Response[v1.SetPasswordResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("openauth.frontend.v1.FrontendService.SetPassword is not implemented"))
}

func (UnimplementedFrontendServiceHandler) WhoAmI(context.Context, *connect.Request[v1.WhoAmIRequest]) (*connect.Response[v1.WhoAmIResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("openauth.frontend.v1.FrontendService.WhoAmI is not implemented"))
}

func (UnimplementedFrontendServiceHandler) ListSAMLConnections(context.Context, *connect.Request[v1.ListSAMLConnectionsRequest]) (*connect.Response[v1.ListSAMLConnectionsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("openauth.frontend.v1.FrontendService.ListSAMLConnections is not implemented"))
}

func (UnimplementedFrontendServiceHandler) GetSAMLConnection(context.Context, *connect.Request[v1.GetSAMLConnectionRequest]) (*connect.Response[v1.GetSAMLConnectionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("openauth.frontend.v1.FrontendService.GetSAMLConnection is not implemented"))
}

func (UnimplementedFrontendServiceHandler) CreateSAMLConnection(context.Context, *connect.Request[v1.CreateSAMLConnectionRequest]) (*connect.Response[v1.CreateSAMLConnectionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("openauth.frontend.v1.FrontendService.CreateSAMLConnection is not implemented"))
}

func (UnimplementedFrontendServiceHandler) UpdateSAMLConnection(context.Context, *connect.Request[v1.UpdateSAMLConnectionRequest]) (*connect.Response[v1.UpdateSAMLConnectionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("openauth.frontend.v1.FrontendService.UpdateSAMLConnection is not implemented"))
}

func (UnimplementedFrontendServiceHandler) DeleteSAMLConnection(context.Context, *connect.Request[v1.DeleteSAMLConnectionRequest]) (*connect.Response[v1.DeleteSAMLConnectionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("openauth.frontend.v1.FrontendService.DeleteSAMLConnection is not implemented"))
}

func (UnimplementedFrontendServiceHandler) ListSCIMAPIKeys(context.Context, *connect.Request[v1.ListSCIMAPIKeysRequest]) (*connect.Response[v1.ListSCIMAPIKeysResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("openauth.frontend.v1.FrontendService.ListSCIMAPIKeys is not implemented"))
}

func (UnimplementedFrontendServiceHandler) GetSCIMAPIKey(context.Context, *connect.Request[v1.GetSCIMAPIKeyRequest]) (*connect.Response[v1.GetSCIMAPIKeyResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("openauth.frontend.v1.FrontendService.GetSCIMAPIKey is not implemented"))
}

func (UnimplementedFrontendServiceHandler) CreateSCIMAPIKey(context.Context, *connect.Request[v1.CreateSCIMAPIKeyRequest]) (*connect.Response[v1.CreateSCIMAPIKeyResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("openauth.frontend.v1.FrontendService.CreateSCIMAPIKey is not implemented"))
}

func (UnimplementedFrontendServiceHandler) UpdateSCIMAPIKey(context.Context, *connect.Request[v1.UpdateSCIMAPIKeyRequest]) (*connect.Response[v1.UpdateSCIMAPIKeyResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("openauth.frontend.v1.FrontendService.UpdateSCIMAPIKey is not implemented"))
}

func (UnimplementedFrontendServiceHandler) DeleteSCIMAPIKey(context.Context, *connect.Request[v1.DeleteSCIMAPIKeyRequest]) (*connect.Response[v1.DeleteSCIMAPIKeyResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("openauth.frontend.v1.FrontendService.DeleteSCIMAPIKey is not implemented"))
}

func (UnimplementedFrontendServiceHandler) RevokeSCIMAPIKey(context.Context, *connect.Request[v1.RevokeSCIMAPIKeyRequest]) (*connect.Response[v1.RevokeSCIMAPIKeyResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("openauth.frontend.v1.FrontendService.RevokeSCIMAPIKey is not implemented"))
}

func (UnimplementedFrontendServiceHandler) ListMyPasskeys(context.Context, *connect.Request[v1.ListMyPasskeysRequest]) (*connect.Response[v1.ListMyPasskeysResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("openauth.frontend.v1.FrontendService.ListMyPasskeys is not implemented"))
}

func (UnimplementedFrontendServiceHandler) GetPasskeyOptions(context.Context, *connect.Request[v1.GetPasskeyOptionsRequest]) (*connect.Response[v1.GetPasskeyOptionsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("openauth.frontend.v1.FrontendService.GetPasskeyOptions is not implemented"))
}

func (UnimplementedFrontendServiceHandler) RegisterPasskey(context.Context, *connect.Request[v1.RegisterPasskeyRequest]) (*connect.Response[v1.RegisterPasskeyResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("openauth.frontend.v1.FrontendService.RegisterPasskey is not implemented"))
}
