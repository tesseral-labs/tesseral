// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: tesseral/frontend/v1/frontend.proto

package frontendv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/tesseral-labs/tesseral/internal/frontend/gen/tesseral/frontend/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// FrontendServiceName is the fully-qualified name of the FrontendService service.
	FrontendServiceName = "tesseral.frontend.v1.FrontendService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// FrontendServiceLogoutProcedure is the fully-qualified name of the FrontendService's Logout RPC.
	FrontendServiceLogoutProcedure = "/tesseral.frontend.v1.FrontendService/Logout"
	// FrontendServiceRefreshProcedure is the fully-qualified name of the FrontendService's Refresh RPC.
	FrontendServiceRefreshProcedure = "/tesseral.frontend.v1.FrontendService/Refresh"
	// FrontendServiceGetProjectProcedure is the fully-qualified name of the FrontendService's
	// GetProject RPC.
	FrontendServiceGetProjectProcedure = "/tesseral.frontend.v1.FrontendService/GetProject"
	// FrontendServiceGetOrganizationProcedure is the fully-qualified name of the FrontendService's
	// GetOrganization RPC.
	FrontendServiceGetOrganizationProcedure = "/tesseral.frontend.v1.FrontendService/GetOrganization"
	// FrontendServiceUpdateOrganizationProcedure is the fully-qualified name of the FrontendService's
	// UpdateOrganization RPC.
	FrontendServiceUpdateOrganizationProcedure = "/tesseral.frontend.v1.FrontendService/UpdateOrganization"
	// FrontendServiceGetOrganizationGoogleHostedDomainsProcedure is the fully-qualified name of the
	// FrontendService's GetOrganizationGoogleHostedDomains RPC.
	FrontendServiceGetOrganizationGoogleHostedDomainsProcedure = "/tesseral.frontend.v1.FrontendService/GetOrganizationGoogleHostedDomains"
	// FrontendServiceUpdateOrganizationGoogleHostedDomainsProcedure is the fully-qualified name of the
	// FrontendService's UpdateOrganizationGoogleHostedDomains RPC.
	FrontendServiceUpdateOrganizationGoogleHostedDomainsProcedure = "/tesseral.frontend.v1.FrontendService/UpdateOrganizationGoogleHostedDomains"
	// FrontendServiceGetOrganizationMicrosoftTenantIDsProcedure is the fully-qualified name of the
	// FrontendService's GetOrganizationMicrosoftTenantIDs RPC.
	FrontendServiceGetOrganizationMicrosoftTenantIDsProcedure = "/tesseral.frontend.v1.FrontendService/GetOrganizationMicrosoftTenantIDs"
	// FrontendServiceUpdateOrganizationMicrosoftTenantIDsProcedure is the fully-qualified name of the
	// FrontendService's UpdateOrganizationMicrosoftTenantIDs RPC.
	FrontendServiceUpdateOrganizationMicrosoftTenantIDsProcedure = "/tesseral.frontend.v1.FrontendService/UpdateOrganizationMicrosoftTenantIDs"
	// FrontendServiceListUsersProcedure is the fully-qualified name of the FrontendService's ListUsers
	// RPC.
	FrontendServiceListUsersProcedure = "/tesseral.frontend.v1.FrontendService/ListUsers"
	// FrontendServiceGetUserProcedure is the fully-qualified name of the FrontendService's GetUser RPC.
	FrontendServiceGetUserProcedure = "/tesseral.frontend.v1.FrontendService/GetUser"
	// FrontendServiceUpdateUserProcedure is the fully-qualified name of the FrontendService's
	// UpdateUser RPC.
	FrontendServiceUpdateUserProcedure = "/tesseral.frontend.v1.FrontendService/UpdateUser"
	// FrontendServiceUpdateMeProcedure is the fully-qualified name of the FrontendService's UpdateMe
	// RPC.
	FrontendServiceUpdateMeProcedure = "/tesseral.frontend.v1.FrontendService/UpdateMe"
	// FrontendServiceDeleteUserProcedure is the fully-qualified name of the FrontendService's
	// DeleteUser RPC.
	FrontendServiceDeleteUserProcedure = "/tesseral.frontend.v1.FrontendService/DeleteUser"
	// FrontendServiceSetPasswordProcedure is the fully-qualified name of the FrontendService's
	// SetPassword RPC.
	FrontendServiceSetPasswordProcedure = "/tesseral.frontend.v1.FrontendService/SetPassword"
	// FrontendServiceListSAMLConnectionsProcedure is the fully-qualified name of the FrontendService's
	// ListSAMLConnections RPC.
	FrontendServiceListSAMLConnectionsProcedure = "/tesseral.frontend.v1.FrontendService/ListSAMLConnections"
	// FrontendServiceGetSAMLConnectionProcedure is the fully-qualified name of the FrontendService's
	// GetSAMLConnection RPC.
	FrontendServiceGetSAMLConnectionProcedure = "/tesseral.frontend.v1.FrontendService/GetSAMLConnection"
	// FrontendServiceCreateSAMLConnectionProcedure is the fully-qualified name of the FrontendService's
	// CreateSAMLConnection RPC.
	FrontendServiceCreateSAMLConnectionProcedure = "/tesseral.frontend.v1.FrontendService/CreateSAMLConnection"
	// FrontendServiceUpdateSAMLConnectionProcedure is the fully-qualified name of the FrontendService's
	// UpdateSAMLConnection RPC.
	FrontendServiceUpdateSAMLConnectionProcedure = "/tesseral.frontend.v1.FrontendService/UpdateSAMLConnection"
	// FrontendServiceDeleteSAMLConnectionProcedure is the fully-qualified name of the FrontendService's
	// DeleteSAMLConnection RPC.
	FrontendServiceDeleteSAMLConnectionProcedure = "/tesseral.frontend.v1.FrontendService/DeleteSAMLConnection"
	// FrontendServiceListOIDCConnectionsProcedure is the fully-qualified name of the FrontendService's
	// ListOIDCConnections RPC.
	FrontendServiceListOIDCConnectionsProcedure = "/tesseral.frontend.v1.FrontendService/ListOIDCConnections"
	// FrontendServiceGetOIDCConnectionProcedure is the fully-qualified name of the FrontendService's
	// GetOIDCConnection RPC.
	FrontendServiceGetOIDCConnectionProcedure = "/tesseral.frontend.v1.FrontendService/GetOIDCConnection"
	// FrontendServiceCreateOIDCConnectionProcedure is the fully-qualified name of the FrontendService's
	// CreateOIDCConnection RPC.
	FrontendServiceCreateOIDCConnectionProcedure = "/tesseral.frontend.v1.FrontendService/CreateOIDCConnection"
	// FrontendServiceUpdateOIDCConnectionProcedure is the fully-qualified name of the FrontendService's
	// UpdateOIDCConnection RPC.
	FrontendServiceUpdateOIDCConnectionProcedure = "/tesseral.frontend.v1.FrontendService/UpdateOIDCConnection"
	// FrontendServiceDeleteOIDCConnectionProcedure is the fully-qualified name of the FrontendService's
	// DeleteOIDCConnection RPC.
	FrontendServiceDeleteOIDCConnectionProcedure = "/tesseral.frontend.v1.FrontendService/DeleteOIDCConnection"
	// FrontendServiceListSCIMAPIKeysProcedure is the fully-qualified name of the FrontendService's
	// ListSCIMAPIKeys RPC.
	FrontendServiceListSCIMAPIKeysProcedure = "/tesseral.frontend.v1.FrontendService/ListSCIMAPIKeys"
	// FrontendServiceGetSCIMAPIKeyProcedure is the fully-qualified name of the FrontendService's
	// GetSCIMAPIKey RPC.
	FrontendServiceGetSCIMAPIKeyProcedure = "/tesseral.frontend.v1.FrontendService/GetSCIMAPIKey"
	// FrontendServiceCreateSCIMAPIKeyProcedure is the fully-qualified name of the FrontendService's
	// CreateSCIMAPIKey RPC.
	FrontendServiceCreateSCIMAPIKeyProcedure = "/tesseral.frontend.v1.FrontendService/CreateSCIMAPIKey"
	// FrontendServiceUpdateSCIMAPIKeyProcedure is the fully-qualified name of the FrontendService's
	// UpdateSCIMAPIKey RPC.
	FrontendServiceUpdateSCIMAPIKeyProcedure = "/tesseral.frontend.v1.FrontendService/UpdateSCIMAPIKey"
	// FrontendServiceDeleteSCIMAPIKeyProcedure is the fully-qualified name of the FrontendService's
	// DeleteSCIMAPIKey RPC.
	FrontendServiceDeleteSCIMAPIKeyProcedure = "/tesseral.frontend.v1.FrontendService/DeleteSCIMAPIKey"
	// FrontendServiceRevokeSCIMAPIKeyProcedure is the fully-qualified name of the FrontendService's
	// RevokeSCIMAPIKey RPC.
	FrontendServiceRevokeSCIMAPIKeyProcedure = "/tesseral.frontend.v1.FrontendService/RevokeSCIMAPIKey"
	// FrontendServiceWhoamiProcedure is the fully-qualified name of the FrontendService's Whoami RPC.
	FrontendServiceWhoamiProcedure = "/tesseral.frontend.v1.FrontendService/Whoami"
	// FrontendServiceListMyPasskeysProcedure is the fully-qualified name of the FrontendService's
	// ListMyPasskeys RPC.
	FrontendServiceListMyPasskeysProcedure = "/tesseral.frontend.v1.FrontendService/ListMyPasskeys"
	// FrontendServiceDeleteMyPasskeyProcedure is the fully-qualified name of the FrontendService's
	// DeleteMyPasskey RPC.
	FrontendServiceDeleteMyPasskeyProcedure = "/tesseral.frontend.v1.FrontendService/DeleteMyPasskey"
	// FrontendServiceGetPasskeyOptionsProcedure is the fully-qualified name of the FrontendService's
	// GetPasskeyOptions RPC.
	FrontendServiceGetPasskeyOptionsProcedure = "/tesseral.frontend.v1.FrontendService/GetPasskeyOptions"
	// FrontendServiceRegisterPasskeyProcedure is the fully-qualified name of the FrontendService's
	// RegisterPasskey RPC.
	FrontendServiceRegisterPasskeyProcedure = "/tesseral.frontend.v1.FrontendService/RegisterPasskey"
	// FrontendServiceGetAuthenticatorAppOptionsProcedure is the fully-qualified name of the
	// FrontendService's GetAuthenticatorAppOptions RPC.
	FrontendServiceGetAuthenticatorAppOptionsProcedure = "/tesseral.frontend.v1.FrontendService/GetAuthenticatorAppOptions"
	// FrontendServiceRegisterAuthenticatorAppProcedure is the fully-qualified name of the
	// FrontendService's RegisterAuthenticatorApp RPC.
	FrontendServiceRegisterAuthenticatorAppProcedure = "/tesseral.frontend.v1.FrontendService/RegisterAuthenticatorApp"
	// FrontendServiceListUserInvitesProcedure is the fully-qualified name of the FrontendService's
	// ListUserInvites RPC.
	FrontendServiceListUserInvitesProcedure = "/tesseral.frontend.v1.FrontendService/ListUserInvites"
	// FrontendServiceGetUserInviteProcedure is the fully-qualified name of the FrontendService's
	// GetUserInvite RPC.
	FrontendServiceGetUserInviteProcedure = "/tesseral.frontend.v1.FrontendService/GetUserInvite"
	// FrontendServiceCreateUserInviteProcedure is the fully-qualified name of the FrontendService's
	// CreateUserInvite RPC.
	FrontendServiceCreateUserInviteProcedure = "/tesseral.frontend.v1.FrontendService/CreateUserInvite"
	// FrontendServiceDeleteUserInviteProcedure is the fully-qualified name of the FrontendService's
	// DeleteUserInvite RPC.
	FrontendServiceDeleteUserInviteProcedure = "/tesseral.frontend.v1.FrontendService/DeleteUserInvite"
	// FrontendServiceListSwitchableOrganizationsProcedure is the fully-qualified name of the
	// FrontendService's ListSwitchableOrganizations RPC.
	FrontendServiceListSwitchableOrganizationsProcedure = "/tesseral.frontend.v1.FrontendService/ListSwitchableOrganizations"
	// FrontendServiceGetRBACPolicyProcedure is the fully-qualified name of the FrontendService's
	// GetRBACPolicy RPC.
	FrontendServiceGetRBACPolicyProcedure = "/tesseral.frontend.v1.FrontendService/GetRBACPolicy"
	// FrontendServiceListRolesProcedure is the fully-qualified name of the FrontendService's ListRoles
	// RPC.
	FrontendServiceListRolesProcedure = "/tesseral.frontend.v1.FrontendService/ListRoles"
	// FrontendServiceGetRoleProcedure is the fully-qualified name of the FrontendService's GetRole RPC.
	FrontendServiceGetRoleProcedure = "/tesseral.frontend.v1.FrontendService/GetRole"
	// FrontendServiceCreateRoleProcedure is the fully-qualified name of the FrontendService's
	// CreateRole RPC.
	FrontendServiceCreateRoleProcedure = "/tesseral.frontend.v1.FrontendService/CreateRole"
	// FrontendServiceUpdateRoleProcedure is the fully-qualified name of the FrontendService's
	// UpdateRole RPC.
	FrontendServiceUpdateRoleProcedure = "/tesseral.frontend.v1.FrontendService/UpdateRole"
	// FrontendServiceDeleteRoleProcedure is the fully-qualified name of the FrontendService's
	// DeleteRole RPC.
	FrontendServiceDeleteRoleProcedure = "/tesseral.frontend.v1.FrontendService/DeleteRole"
	// FrontendServiceListUserRoleAssignmentsProcedure is the fully-qualified name of the
	// FrontendService's ListUserRoleAssignments RPC.
	FrontendServiceListUserRoleAssignmentsProcedure = "/tesseral.frontend.v1.FrontendService/ListUserRoleAssignments"
	// FrontendServiceGetUserRoleAssignmentProcedure is the fully-qualified name of the
	// FrontendService's GetUserRoleAssignment RPC.
	FrontendServiceGetUserRoleAssignmentProcedure = "/tesseral.frontend.v1.FrontendService/GetUserRoleAssignment"
	// FrontendServiceCreateUserRoleAssignmentProcedure is the fully-qualified name of the
	// FrontendService's CreateUserRoleAssignment RPC.
	FrontendServiceCreateUserRoleAssignmentProcedure = "/tesseral.frontend.v1.FrontendService/CreateUserRoleAssignment"
	// FrontendServiceDeleteUserRoleAssignmentProcedure is the fully-qualified name of the
	// FrontendService's DeleteUserRoleAssignment RPC.
	FrontendServiceDeleteUserRoleAssignmentProcedure = "/tesseral.frontend.v1.FrontendService/DeleteUserRoleAssignment"
	// FrontendServiceCreateAPIKeyProcedure is the fully-qualified name of the FrontendService's
	// CreateAPIKey RPC.
	FrontendServiceCreateAPIKeyProcedure = "/tesseral.frontend.v1.FrontendService/CreateAPIKey"
	// FrontendServiceDeleteAPIKeyProcedure is the fully-qualified name of the FrontendService's
	// DeleteAPIKey RPC.
	FrontendServiceDeleteAPIKeyProcedure = "/tesseral.frontend.v1.FrontendService/DeleteAPIKey"
	// FrontendServiceGetAPIKeyProcedure is the fully-qualified name of the FrontendService's GetAPIKey
	// RPC.
	FrontendServiceGetAPIKeyProcedure = "/tesseral.frontend.v1.FrontendService/GetAPIKey"
	// FrontendServiceListAPIKeysProcedure is the fully-qualified name of the FrontendService's
	// ListAPIKeys RPC.
	FrontendServiceListAPIKeysProcedure = "/tesseral.frontend.v1.FrontendService/ListAPIKeys"
	// FrontendServiceRevokeAPIKeyProcedure is the fully-qualified name of the FrontendService's
	// RevokeAPIKey RPC.
	FrontendServiceRevokeAPIKeyProcedure = "/tesseral.frontend.v1.FrontendService/RevokeAPIKey"
	// FrontendServiceUpdateAPIKeyProcedure is the fully-qualified name of the FrontendService's
	// UpdateAPIKey RPC.
	FrontendServiceUpdateAPIKeyProcedure = "/tesseral.frontend.v1.FrontendService/UpdateAPIKey"
	// FrontendServiceCreateAPIKeyRoleAssignmentProcedure is the fully-qualified name of the
	// FrontendService's CreateAPIKeyRoleAssignment RPC.
	FrontendServiceCreateAPIKeyRoleAssignmentProcedure = "/tesseral.frontend.v1.FrontendService/CreateAPIKeyRoleAssignment"
	// FrontendServiceDeleteAPIKeyRoleAssignmentProcedure is the fully-qualified name of the
	// FrontendService's DeleteAPIKeyRoleAssignment RPC.
	FrontendServiceDeleteAPIKeyRoleAssignmentProcedure = "/tesseral.frontend.v1.FrontendService/DeleteAPIKeyRoleAssignment"
	// FrontendServiceListAPIKeyRoleAssignmentsProcedure is the fully-qualified name of the
	// FrontendService's ListAPIKeyRoleAssignments RPC.
	FrontendServiceListAPIKeyRoleAssignmentsProcedure = "/tesseral.frontend.v1.FrontendService/ListAPIKeyRoleAssignments"
	// FrontendServiceListAuditLogEventsProcedure is the fully-qualified name of the FrontendService's
	// ListAuditLogEvents RPC.
	FrontendServiceListAuditLogEventsProcedure = "/tesseral.frontend.v1.FrontendService/ListAuditLogEvents"
)

// FrontendServiceClient is a client for the tesseral.frontend.v1.FrontendService service.
type FrontendServiceClient interface {
	Logout(context.Context, *connect.Request[v1.LogoutRequest]) (*connect.Response[v1.LogoutResponse], error)
	Refresh(context.Context, *connect.Request[v1.RefreshRequest]) (*connect.Response[v1.RefreshResponse], error)
	GetProject(context.Context, *connect.Request[v1.GetProjectRequest]) (*connect.Response[v1.GetProjectResponse], error)
	GetOrganization(context.Context, *connect.Request[v1.GetOrganizationRequest]) (*connect.Response[v1.GetOrganizationResponse], error)
	UpdateOrganization(context.Context, *connect.Request[v1.UpdateOrganizationRequest]) (*connect.Response[v1.UpdateOrganizationResponse], error)
	GetOrganizationGoogleHostedDomains(context.Context, *connect.Request[v1.GetOrganizationGoogleHostedDomainsRequest]) (*connect.Response[v1.GetOrganizationGoogleHostedDomainsResponse], error)
	UpdateOrganizationGoogleHostedDomains(context.Context, *connect.Request[v1.UpdateOrganizationGoogleHostedDomainsRequest]) (*connect.Response[v1.UpdateOrganizationGoogleHostedDomainsResponse], error)
	GetOrganizationMicrosoftTenantIDs(context.Context, *connect.Request[v1.GetOrganizationMicrosoftTenantIDsRequest]) (*connect.Response[v1.GetOrganizationMicrosoftTenantIDsResponse], error)
	UpdateOrganizationMicrosoftTenantIDs(context.Context, *connect.Request[v1.UpdateOrganizationMicrosoftTenantIDsRequest]) (*connect.Response[v1.UpdateOrganizationMicrosoftTenantIDsResponse], error)
	ListUsers(context.Context, *connect.Request[v1.ListUsersRequest]) (*connect.Response[v1.ListUsersResponse], error)
	GetUser(context.Context, *connect.Request[v1.GetUserRequest]) (*connect.Response[v1.GetUserResponse], error)
	UpdateUser(context.Context, *connect.Request[v1.UpdateUserRequest]) (*connect.Response[v1.UpdateUserResponse], error)
	UpdateMe(context.Context, *connect.Request[v1.UpdateMeRequest]) (*connect.Response[v1.UpdateMeResponse], error)
	DeleteUser(context.Context, *connect.Request[v1.DeleteUserRequest]) (*connect.Response[v1.DeleteUserResponse], error)
	// Sets a user's password.
	SetPassword(context.Context, *connect.Request[v1.SetPasswordRequest]) (*connect.Response[v1.SetPasswordResponse], error)
	ListSAMLConnections(context.Context, *connect.Request[v1.ListSAMLConnectionsRequest]) (*connect.Response[v1.ListSAMLConnectionsResponse], error)
	GetSAMLConnection(context.Context, *connect.Request[v1.GetSAMLConnectionRequest]) (*connect.Response[v1.GetSAMLConnectionResponse], error)
	CreateSAMLConnection(context.Context, *connect.Request[v1.CreateSAMLConnectionRequest]) (*connect.Response[v1.CreateSAMLConnectionResponse], error)
	UpdateSAMLConnection(context.Context, *connect.Request[v1.UpdateSAMLConnectionRequest]) (*connect.Response[v1.UpdateSAMLConnectionResponse], error)
	DeleteSAMLConnection(context.Context, *connect.Request[v1.DeleteSAMLConnectionRequest]) (*connect.Response[v1.DeleteSAMLConnectionResponse], error)
	ListOIDCConnections(context.Context, *connect.Request[v1.ListOIDCConnectionsRequest]) (*connect.Response[v1.ListOIDCConnectionsResponse], error)
	GetOIDCConnection(context.Context, *connect.Request[v1.GetOIDCConnectionRequest]) (*connect.Response[v1.GetOIDCConnectionResponse], error)
	CreateOIDCConnection(context.Context, *connect.Request[v1.CreateOIDCConnectionRequest]) (*connect.Response[v1.CreateOIDCConnectionResponse], error)
	UpdateOIDCConnection(context.Context, *connect.Request[v1.UpdateOIDCConnectionRequest]) (*connect.Response[v1.UpdateOIDCConnectionResponse], error)
	DeleteOIDCConnection(context.Context, *connect.Request[v1.DeleteOIDCConnectionRequest]) (*connect.Response[v1.DeleteOIDCConnectionResponse], error)
	ListSCIMAPIKeys(context.Context, *connect.Request[v1.ListSCIMAPIKeysRequest]) (*connect.Response[v1.ListSCIMAPIKeysResponse], error)
	GetSCIMAPIKey(context.Context, *connect.Request[v1.GetSCIMAPIKeyRequest]) (*connect.Response[v1.GetSCIMAPIKeyResponse], error)
	CreateSCIMAPIKey(context.Context, *connect.Request[v1.CreateSCIMAPIKeyRequest]) (*connect.Response[v1.CreateSCIMAPIKeyResponse], error)
	UpdateSCIMAPIKey(context.Context, *connect.Request[v1.UpdateSCIMAPIKeyRequest]) (*connect.Response[v1.UpdateSCIMAPIKeyResponse], error)
	DeleteSCIMAPIKey(context.Context, *connect.Request[v1.DeleteSCIMAPIKeyRequest]) (*connect.Response[v1.DeleteSCIMAPIKeyResponse], error)
	RevokeSCIMAPIKey(context.Context, *connect.Request[v1.RevokeSCIMAPIKeyRequest]) (*connect.Response[v1.RevokeSCIMAPIKeyResponse], error)
	Whoami(context.Context, *connect.Request[v1.WhoamiRequest]) (*connect.Response[v1.WhoamiResponse], error)
	ListMyPasskeys(context.Context, *connect.Request[v1.ListMyPasskeysRequest]) (*connect.Response[v1.ListMyPasskeysResponse], error)
	DeleteMyPasskey(context.Context, *connect.Request[v1.DeleteMyPasskeyRequest]) (*connect.Response[v1.DeleteMyPasskeyResponse], error)
	GetPasskeyOptions(context.Context, *connect.Request[v1.GetPasskeyOptionsRequest]) (*connect.Response[v1.GetPasskeyOptionsResponse], error)
	RegisterPasskey(context.Context, *connect.Request[v1.RegisterPasskeyRequest]) (*connect.Response[v1.RegisterPasskeyResponse], error)
	GetAuthenticatorAppOptions(context.Context, *connect.Request[v1.GetAuthenticatorAppOptionsRequest]) (*connect.Response[v1.GetAuthenticatorAppOptionsResponse], error)
	RegisterAuthenticatorApp(context.Context, *connect.Request[v1.RegisterAuthenticatorAppRequest]) (*connect.Response[v1.RegisterAuthenticatorAppResponse], error)
	ListUserInvites(context.Context, *connect.Request[v1.ListUserInvitesRequest]) (*connect.Response[v1.ListUserInvitesResponse], error)
	GetUserInvite(context.Context, *connect.Request[v1.GetUserInviteRequest]) (*connect.Response[v1.GetUserInviteResponse], error)
	CreateUserInvite(context.Context, *connect.Request[v1.CreateUserInviteRequest]) (*connect.Response[v1.CreateUserInviteResponse], error)
	DeleteUserInvite(context.Context, *connect.Request[v1.DeleteUserInviteRequest]) (*connect.Response[v1.DeleteUserInviteResponse], error)
	ListSwitchableOrganizations(context.Context, *connect.Request[v1.ListSwitchableOrganizationsRequest]) (*connect.Response[v1.ListSwitchableOrganizationsResponse], error)
	// Get RBAC Policy.
	GetRBACPolicy(context.Context, *connect.Request[v1.GetRBACPolicyRequest]) (*connect.Response[v1.GetRBACPolicyResponse], error)
	// List Roles.
	ListRoles(context.Context, *connect.Request[v1.ListRolesRequest]) (*connect.Response[v1.ListRolesResponse], error)
	// Get a Role.
	GetRole(context.Context, *connect.Request[v1.GetRoleRequest]) (*connect.Response[v1.GetRoleResponse], error)
	// Create a Role.
	CreateRole(context.Context, *connect.Request[v1.CreateRoleRequest]) (*connect.Response[v1.CreateRoleResponse], error)
	// Update a Role.
	UpdateRole(context.Context, *connect.Request[v1.UpdateRoleRequest]) (*connect.Response[v1.UpdateRoleResponse], error)
	// Delete a Role.
	DeleteRole(context.Context, *connect.Request[v1.DeleteRoleRequest]) (*connect.Response[v1.DeleteRoleResponse], error)
	// List User Role Assignments.
	ListUserRoleAssignments(context.Context, *connect.Request[v1.ListUserRoleAssignmentsRequest]) (*connect.Response[v1.ListUserRoleAssignmentsResponse], error)
	// Get a User Role Assignment.
	GetUserRoleAssignment(context.Context, *connect.Request[v1.GetUserRoleAssignmentRequest]) (*connect.Response[v1.GetUserRoleAssignmentResponse], error)
	// Create a User Role Assignment.
	CreateUserRoleAssignment(context.Context, *connect.Request[v1.CreateUserRoleAssignmentRequest]) (*connect.Response[v1.CreateUserRoleAssignmentResponse], error)
	// Delete a User Role Assignment.
	DeleteUserRoleAssignment(context.Context, *connect.Request[v1.DeleteUserRoleAssignmentRequest]) (*connect.Response[v1.DeleteUserRoleAssignmentResponse], error)
	// Create an API Key for an Organization.
	CreateAPIKey(context.Context, *connect.Request[v1.CreateAPIKeyRequest]) (*connect.Response[v1.CreateAPIKeyResponse], error)
	// Delete an API Key.
	DeleteAPIKey(context.Context, *connect.Request[v1.DeleteAPIKeyRequest]) (*connect.Response[v1.DeleteAPIKeyResponse], error)
	// Get an API Key.
	GetAPIKey(context.Context, *connect.Request[v1.GetAPIKeyRequest]) (*connect.Response[v1.GetAPIKeyResponse], error)
	// List API Keys.
	ListAPIKeys(context.Context, *connect.Request[v1.ListAPIKeysRequest]) (*connect.Response[v1.ListAPIKeysResponse], error)
	// Revoke an API Key.
	RevokeAPIKey(context.Context, *connect.Request[v1.RevokeAPIKeyRequest]) (*connect.Response[v1.RevokeAPIKeyResponse], error)
	// Update an API Key.
	UpdateAPIKey(context.Context, *connect.Request[v1.UpdateAPIKeyRequest]) (*connect.Response[v1.UpdateAPIKeyResponse], error)
	CreateAPIKeyRoleAssignment(context.Context, *connect.Request[v1.CreateAPIKeyRoleAssignmentRequest]) (*connect.Response[v1.CreateAPIKeyRoleAssignmentResponse], error)
	DeleteAPIKeyRoleAssignment(context.Context, *connect.Request[v1.DeleteAPIKeyRoleAssignmentRequest]) (*connect.Response[v1.DeleteAPIKeyRoleAssignmentResponse], error)
	ListAPIKeyRoleAssignments(context.Context, *connect.Request[v1.ListAPIKeyRoleAssignmentsRequest]) (*connect.Response[v1.ListAPIKeyRoleAssignmentsResponse], error)
	ListAuditLogEvents(context.Context, *connect.Request[v1.ListAuditLogEventsRequest]) (*connect.Response[v1.ListAuditLogEventsResponse], error)
}

// NewFrontendServiceClient constructs a client for the tesseral.frontend.v1.FrontendService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewFrontendServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) FrontendServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	frontendServiceMethods := v1.File_tesseral_frontend_v1_frontend_proto.Services().ByName("FrontendService").Methods()
	return &frontendServiceClient{
		logout: connect.NewClient[v1.LogoutRequest, v1.LogoutResponse](
			httpClient,
			baseURL+FrontendServiceLogoutProcedure,
			connect.WithSchema(frontendServiceMethods.ByName("Logout")),
			connect.WithClientOptions(opts...),
		),
		refresh: connect.NewClient[v1.RefreshRequest, v1.RefreshResponse](
			httpClient,
			baseURL+FrontendServiceRefreshProcedure,
			connect.WithSchema(frontendServiceMethods.ByName("Refresh")),
			connect.WithClientOptions(opts...),
		),
		getProject: connect.NewClient[v1.GetProjectRequest, v1.GetProjectResponse](
			httpClient,
			baseURL+FrontendServiceGetProjectProcedure,
			connect.WithSchema(frontendServiceMethods.ByName("GetProject")),
			connect.WithClientOptions(opts...),
		),
		getOrganization: connect.NewClient[v1.GetOrganizationRequest, v1.GetOrganizationResponse](
			httpClient,
			baseURL+FrontendServiceGetOrganizationProcedure,
			connect.WithSchema(frontendServiceMethods.ByName("GetOrganization")),
			connect.WithClientOptions(opts...),
		),
		updateOrganization: connect.NewClient[v1.UpdateOrganizationRequest, v1.UpdateOrganizationResponse](
			httpClient,
			baseURL+FrontendServiceUpdateOrganizationProcedure,
			connect.WithSchema(frontendServiceMethods.ByName("UpdateOrganization")),
			connect.WithClientOptions(opts...),
		),
		getOrganizationGoogleHostedDomains: connect.NewClient[v1.GetOrganizationGoogleHostedDomainsRequest, v1.GetOrganizationGoogleHostedDomainsResponse](
			httpClient,
			baseURL+FrontendServiceGetOrganizationGoogleHostedDomainsProcedure,
			connect.WithSchema(frontendServiceMethods.ByName("GetOrganizationGoogleHostedDomains")),
			connect.WithClientOptions(opts...),
		),
		updateOrganizationGoogleHostedDomains: connect.NewClient[v1.UpdateOrganizationGoogleHostedDomainsRequest, v1.UpdateOrganizationGoogleHostedDomainsResponse](
			httpClient,
			baseURL+FrontendServiceUpdateOrganizationGoogleHostedDomainsProcedure,
			connect.WithSchema(frontendServiceMethods.ByName("UpdateOrganizationGoogleHostedDomains")),
			connect.WithClientOptions(opts...),
		),
		getOrganizationMicrosoftTenantIDs: connect.NewClient[v1.GetOrganizationMicrosoftTenantIDsRequest, v1.GetOrganizationMicrosoftTenantIDsResponse](
			httpClient,
			baseURL+FrontendServiceGetOrganizationMicrosoftTenantIDsProcedure,
			connect.WithSchema(frontendServiceMethods.ByName("GetOrganizationMicrosoftTenantIDs")),
			connect.WithClientOptions(opts...),
		),
		updateOrganizationMicrosoftTenantIDs: connect.NewClient[v1.UpdateOrganizationMicrosoftTenantIDsRequest, v1.UpdateOrganizationMicrosoftTenantIDsResponse](
			httpClient,
			baseURL+FrontendServiceUpdateOrganizationMicrosoftTenantIDsProcedure,
			connect.WithSchema(frontendServiceMethods.ByName("UpdateOrganizationMicrosoftTenantIDs")),
			connect.WithClientOptions(opts...),
		),
		listUsers: connect.NewClient[v1.ListUsersRequest, v1.ListUsersResponse](
			httpClient,
			baseURL+FrontendServiceListUsersProcedure,
			connect.WithSchema(frontendServiceMethods.ByName("ListUsers")),
			connect.WithClientOptions(opts...),
		),
		getUser: connect.NewClient[v1.GetUserRequest, v1.GetUserResponse](
			httpClient,
			baseURL+FrontendServiceGetUserProcedure,
			connect.WithSchema(frontendServiceMethods.ByName("GetUser")),
			connect.WithClientOptions(opts...),
		),
		updateUser: connect.NewClient[v1.UpdateUserRequest, v1.UpdateUserResponse](
			httpClient,
			baseURL+FrontendServiceUpdateUserProcedure,
			connect.WithSchema(frontendServiceMethods.ByName("UpdateUser")),
			connect.WithClientOptions(opts...),
		),
		updateMe: connect.NewClient[v1.UpdateMeRequest, v1.UpdateMeResponse](
			httpClient,
			baseURL+FrontendServiceUpdateMeProcedure,
			connect.WithSchema(frontendServiceMethods.ByName("UpdateMe")),
			connect.WithClientOptions(opts...),
		),
		deleteUser: connect.NewClient[v1.DeleteUserRequest, v1.DeleteUserResponse](
			httpClient,
			baseURL+FrontendServiceDeleteUserProcedure,
			connect.WithSchema(frontendServiceMethods.ByName("DeleteUser")),
			connect.WithClientOptions(opts...),
		),
		setPassword: connect.NewClient[v1.SetPasswordRequest, v1.SetPasswordResponse](
			httpClient,
			baseURL+FrontendServiceSetPasswordProcedure,
			connect.WithSchema(frontendServiceMethods.ByName("SetPassword")),
			connect.WithClientOptions(opts...),
		),
		listSAMLConnections: connect.NewClient[v1.ListSAMLConnectionsRequest, v1.ListSAMLConnectionsResponse](
			httpClient,
			baseURL+FrontendServiceListSAMLConnectionsProcedure,
			connect.WithSchema(frontendServiceMethods.ByName("ListSAMLConnections")),
			connect.WithClientOptions(opts...),
		),
		getSAMLConnection: connect.NewClient[v1.GetSAMLConnectionRequest, v1.GetSAMLConnectionResponse](
			httpClient,
			baseURL+FrontendServiceGetSAMLConnectionProcedure,
			connect.WithSchema(frontendServiceMethods.ByName("GetSAMLConnection")),
			connect.WithClientOptions(opts...),
		),
		createSAMLConnection: connect.NewClient[v1.CreateSAMLConnectionRequest, v1.CreateSAMLConnectionResponse](
			httpClient,
			baseURL+FrontendServiceCreateSAMLConnectionProcedure,
			connect.WithSchema(frontendServiceMethods.ByName("CreateSAMLConnection")),
			connect.WithClientOptions(opts...),
		),
		updateSAMLConnection: connect.NewClient[v1.UpdateSAMLConnectionRequest, v1.UpdateSAMLConnectionResponse](
			httpClient,
			baseURL+FrontendServiceUpdateSAMLConnectionProcedure,
			connect.WithSchema(frontendServiceMethods.ByName("UpdateSAMLConnection")),
			connect.WithClientOptions(opts...),
		),
		deleteSAMLConnection: connect.NewClient[v1.DeleteSAMLConnectionRequest, v1.DeleteSAMLConnectionResponse](
			httpClient,
			baseURL+FrontendServiceDeleteSAMLConnectionProcedure,
			connect.WithSchema(frontendServiceMethods.ByName("DeleteSAMLConnection")),
			connect.WithClientOptions(opts...),
		),
		listOIDCConnections: connect.NewClient[v1.ListOIDCConnectionsRequest, v1.ListOIDCConnectionsResponse](
			httpClient,
			baseURL+FrontendServiceListOIDCConnectionsProcedure,
			connect.WithSchema(frontendServiceMethods.ByName("ListOIDCConnections")),
			connect.WithClientOptions(opts...),
		),
		getOIDCConnection: connect.NewClient[v1.GetOIDCConnectionRequest, v1.GetOIDCConnectionResponse](
			httpClient,
			baseURL+FrontendServiceGetOIDCConnectionProcedure,
			connect.WithSchema(frontendServiceMethods.ByName("GetOIDCConnection")),
			connect.WithClientOptions(opts...),
		),
		createOIDCConnection: connect.NewClient[v1.CreateOIDCConnectionRequest, v1.CreateOIDCConnectionResponse](
			httpClient,
			baseURL+FrontendServiceCreateOIDCConnectionProcedure,
			connect.WithSchema(frontendServiceMethods.ByName("CreateOIDCConnection")),
			connect.WithClientOptions(opts...),
		),
		updateOIDCConnection: connect.NewClient[v1.UpdateOIDCConnectionRequest, v1.UpdateOIDCConnectionResponse](
			httpClient,
			baseURL+FrontendServiceUpdateOIDCConnectionProcedure,
			connect.WithSchema(frontendServiceMethods.ByName("UpdateOIDCConnection")),
			connect.WithClientOptions(opts...),
		),
		deleteOIDCConnection: connect.NewClient[v1.DeleteOIDCConnectionRequest, v1.DeleteOIDCConnectionResponse](
			httpClient,
			baseURL+FrontendServiceDeleteOIDCConnectionProcedure,
			connect.WithSchema(frontendServiceMethods.ByName("DeleteOIDCConnection")),
			connect.WithClientOptions(opts...),
		),
		listSCIMAPIKeys: connect.NewClient[v1.ListSCIMAPIKeysRequest, v1.ListSCIMAPIKeysResponse](
			httpClient,
			baseURL+FrontendServiceListSCIMAPIKeysProcedure,
			connect.WithSchema(frontendServiceMethods.ByName("ListSCIMAPIKeys")),
			connect.WithClientOptions(opts...),
		),
		getSCIMAPIKey: connect.NewClient[v1.GetSCIMAPIKeyRequest, v1.GetSCIMAPIKeyResponse](
			httpClient,
			baseURL+FrontendServiceGetSCIMAPIKeyProcedure,
			connect.WithSchema(frontendServiceMethods.ByName("GetSCIMAPIKey")),
			connect.WithClientOptions(opts...),
		),
		createSCIMAPIKey: connect.NewClient[v1.CreateSCIMAPIKeyRequest, v1.CreateSCIMAPIKeyResponse](
			httpClient,
			baseURL+FrontendServiceCreateSCIMAPIKeyProcedure,
			connect.WithSchema(frontendServiceMethods.ByName("CreateSCIMAPIKey")),
			connect.WithClientOptions(opts...),
		),
		updateSCIMAPIKey: connect.NewClient[v1.UpdateSCIMAPIKeyRequest, v1.UpdateSCIMAPIKeyResponse](
			httpClient,
			baseURL+FrontendServiceUpdateSCIMAPIKeyProcedure,
			connect.WithSchema(frontendServiceMethods.ByName("UpdateSCIMAPIKey")),
			connect.WithClientOptions(opts...),
		),
		deleteSCIMAPIKey: connect.NewClient[v1.DeleteSCIMAPIKeyRequest, v1.DeleteSCIMAPIKeyResponse](
			httpClient,
			baseURL+FrontendServiceDeleteSCIMAPIKeyProcedure,
			connect.WithSchema(frontendServiceMethods.ByName("DeleteSCIMAPIKey")),
			connect.WithClientOptions(opts...),
		),
		revokeSCIMAPIKey: connect.NewClient[v1.RevokeSCIMAPIKeyRequest, v1.RevokeSCIMAPIKeyResponse](
			httpClient,
			baseURL+FrontendServiceRevokeSCIMAPIKeyProcedure,
			connect.WithSchema(frontendServiceMethods.ByName("RevokeSCIMAPIKey")),
			connect.WithClientOptions(opts...),
		),
		whoami: connect.NewClient[v1.WhoamiRequest, v1.WhoamiResponse](
			httpClient,
			baseURL+FrontendServiceWhoamiProcedure,
			connect.WithSchema(frontendServiceMethods.ByName("Whoami")),
			connect.WithClientOptions(opts...),
		),
		listMyPasskeys: connect.NewClient[v1.ListMyPasskeysRequest, v1.ListMyPasskeysResponse](
			httpClient,
			baseURL+FrontendServiceListMyPasskeysProcedure,
			connect.WithSchema(frontendServiceMethods.ByName("ListMyPasskeys")),
			connect.WithClientOptions(opts...),
		),
		deleteMyPasskey: connect.NewClient[v1.DeleteMyPasskeyRequest, v1.DeleteMyPasskeyResponse](
			httpClient,
			baseURL+FrontendServiceDeleteMyPasskeyProcedure,
			connect.WithSchema(frontendServiceMethods.ByName("DeleteMyPasskey")),
			connect.WithClientOptions(opts...),
		),
		getPasskeyOptions: connect.NewClient[v1.GetPasskeyOptionsRequest, v1.GetPasskeyOptionsResponse](
			httpClient,
			baseURL+FrontendServiceGetPasskeyOptionsProcedure,
			connect.WithSchema(frontendServiceMethods.ByName("GetPasskeyOptions")),
			connect.WithClientOptions(opts...),
		),
		registerPasskey: connect.NewClient[v1.RegisterPasskeyRequest, v1.RegisterPasskeyResponse](
			httpClient,
			baseURL+FrontendServiceRegisterPasskeyProcedure,
			connect.WithSchema(frontendServiceMethods.ByName("RegisterPasskey")),
			connect.WithClientOptions(opts...),
		),
		getAuthenticatorAppOptions: connect.NewClient[v1.GetAuthenticatorAppOptionsRequest, v1.GetAuthenticatorAppOptionsResponse](
			httpClient,
			baseURL+FrontendServiceGetAuthenticatorAppOptionsProcedure,
			connect.WithSchema(frontendServiceMethods.ByName("GetAuthenticatorAppOptions")),
			connect.WithClientOptions(opts...),
		),
		registerAuthenticatorApp: connect.NewClient[v1.RegisterAuthenticatorAppRequest, v1.RegisterAuthenticatorAppResponse](
			httpClient,
			baseURL+FrontendServiceRegisterAuthenticatorAppProcedure,
			connect.WithSchema(frontendServiceMethods.ByName("RegisterAuthenticatorApp")),
			connect.WithClientOptions(opts...),
		),
		listUserInvites: connect.NewClient[v1.ListUserInvitesRequest, v1.ListUserInvitesResponse](
			httpClient,
			baseURL+FrontendServiceListUserInvitesProcedure,
			connect.WithSchema(frontendServiceMethods.ByName("ListUserInvites")),
			connect.WithClientOptions(opts...),
		),
		getUserInvite: connect.NewClient[v1.GetUserInviteRequest, v1.GetUserInviteResponse](
			httpClient,
			baseURL+FrontendServiceGetUserInviteProcedure,
			connect.WithSchema(frontendServiceMethods.ByName("GetUserInvite")),
			connect.WithClientOptions(opts...),
		),
		createUserInvite: connect.NewClient[v1.CreateUserInviteRequest, v1.CreateUserInviteResponse](
			httpClient,
			baseURL+FrontendServiceCreateUserInviteProcedure,
			connect.WithSchema(frontendServiceMethods.ByName("CreateUserInvite")),
			connect.WithClientOptions(opts...),
		),
		deleteUserInvite: connect.NewClient[v1.DeleteUserInviteRequest, v1.DeleteUserInviteResponse](
			httpClient,
			baseURL+FrontendServiceDeleteUserInviteProcedure,
			connect.WithSchema(frontendServiceMethods.ByName("DeleteUserInvite")),
			connect.WithClientOptions(opts...),
		),
		listSwitchableOrganizations: connect.NewClient[v1.ListSwitchableOrganizationsRequest, v1.ListSwitchableOrganizationsResponse](
			httpClient,
			baseURL+FrontendServiceListSwitchableOrganizationsProcedure,
			connect.WithSchema(frontendServiceMethods.ByName("ListSwitchableOrganizations")),
			connect.WithClientOptions(opts...),
		),
		getRBACPolicy: connect.NewClient[v1.GetRBACPolicyRequest, v1.GetRBACPolicyResponse](
			httpClient,
			baseURL+FrontendServiceGetRBACPolicyProcedure,
			connect.WithSchema(frontendServiceMethods.ByName("GetRBACPolicy")),
			connect.WithClientOptions(opts...),
		),
		listRoles: connect.NewClient[v1.ListRolesRequest, v1.ListRolesResponse](
			httpClient,
			baseURL+FrontendServiceListRolesProcedure,
			connect.WithSchema(frontendServiceMethods.ByName("ListRoles")),
			connect.WithClientOptions(opts...),
		),
		getRole: connect.NewClient[v1.GetRoleRequest, v1.GetRoleResponse](
			httpClient,
			baseURL+FrontendServiceGetRoleProcedure,
			connect.WithSchema(frontendServiceMethods.ByName("GetRole")),
			connect.WithClientOptions(opts...),
		),
		createRole: connect.NewClient[v1.CreateRoleRequest, v1.CreateRoleResponse](
			httpClient,
			baseURL+FrontendServiceCreateRoleProcedure,
			connect.WithSchema(frontendServiceMethods.ByName("CreateRole")),
			connect.WithClientOptions(opts...),
		),
		updateRole: connect.NewClient[v1.UpdateRoleRequest, v1.UpdateRoleResponse](
			httpClient,
			baseURL+FrontendServiceUpdateRoleProcedure,
			connect.WithSchema(frontendServiceMethods.ByName("UpdateRole")),
			connect.WithClientOptions(opts...),
		),
		deleteRole: connect.NewClient[v1.DeleteRoleRequest, v1.DeleteRoleResponse](
			httpClient,
			baseURL+FrontendServiceDeleteRoleProcedure,
			connect.WithSchema(frontendServiceMethods.ByName("DeleteRole")),
			connect.WithClientOptions(opts...),
		),
		listUserRoleAssignments: connect.NewClient[v1.ListUserRoleAssignmentsRequest, v1.ListUserRoleAssignmentsResponse](
			httpClient,
			baseURL+FrontendServiceListUserRoleAssignmentsProcedure,
			connect.WithSchema(frontendServiceMethods.ByName("ListUserRoleAssignments")),
			connect.WithClientOptions(opts...),
		),
		getUserRoleAssignment: connect.NewClient[v1.GetUserRoleAssignmentRequest, v1.GetUserRoleAssignmentResponse](
			httpClient,
			baseURL+FrontendServiceGetUserRoleAssignmentProcedure,
			connect.WithSchema(frontendServiceMethods.ByName("GetUserRoleAssignment")),
			connect.WithClientOptions(opts...),
		),
		createUserRoleAssignment: connect.NewClient[v1.CreateUserRoleAssignmentRequest, v1.CreateUserRoleAssignmentResponse](
			httpClient,
			baseURL+FrontendServiceCreateUserRoleAssignmentProcedure,
			connect.WithSchema(frontendServiceMethods.ByName("CreateUserRoleAssignment")),
			connect.WithClientOptions(opts...),
		),
		deleteUserRoleAssignment: connect.NewClient[v1.DeleteUserRoleAssignmentRequest, v1.DeleteUserRoleAssignmentResponse](
			httpClient,
			baseURL+FrontendServiceDeleteUserRoleAssignmentProcedure,
			connect.WithSchema(frontendServiceMethods.ByName("DeleteUserRoleAssignment")),
			connect.WithClientOptions(opts...),
		),
		createAPIKey: connect.NewClient[v1.CreateAPIKeyRequest, v1.CreateAPIKeyResponse](
			httpClient,
			baseURL+FrontendServiceCreateAPIKeyProcedure,
			connect.WithSchema(frontendServiceMethods.ByName("CreateAPIKey")),
			connect.WithClientOptions(opts...),
		),
		deleteAPIKey: connect.NewClient[v1.DeleteAPIKeyRequest, v1.DeleteAPIKeyResponse](
			httpClient,
			baseURL+FrontendServiceDeleteAPIKeyProcedure,
			connect.WithSchema(frontendServiceMethods.ByName("DeleteAPIKey")),
			connect.WithClientOptions(opts...),
		),
		getAPIKey: connect.NewClient[v1.GetAPIKeyRequest, v1.GetAPIKeyResponse](
			httpClient,
			baseURL+FrontendServiceGetAPIKeyProcedure,
			connect.WithSchema(frontendServiceMethods.ByName("GetAPIKey")),
			connect.WithClientOptions(opts...),
		),
		listAPIKeys: connect.NewClient[v1.ListAPIKeysRequest, v1.ListAPIKeysResponse](
			httpClient,
			baseURL+FrontendServiceListAPIKeysProcedure,
			connect.WithSchema(frontendServiceMethods.ByName("ListAPIKeys")),
			connect.WithClientOptions(opts...),
		),
		revokeAPIKey: connect.NewClient[v1.RevokeAPIKeyRequest, v1.RevokeAPIKeyResponse](
			httpClient,
			baseURL+FrontendServiceRevokeAPIKeyProcedure,
			connect.WithSchema(frontendServiceMethods.ByName("RevokeAPIKey")),
			connect.WithClientOptions(opts...),
		),
		updateAPIKey: connect.NewClient[v1.UpdateAPIKeyRequest, v1.UpdateAPIKeyResponse](
			httpClient,
			baseURL+FrontendServiceUpdateAPIKeyProcedure,
			connect.WithSchema(frontendServiceMethods.ByName("UpdateAPIKey")),
			connect.WithClientOptions(opts...),
		),
		createAPIKeyRoleAssignment: connect.NewClient[v1.CreateAPIKeyRoleAssignmentRequest, v1.CreateAPIKeyRoleAssignmentResponse](
			httpClient,
			baseURL+FrontendServiceCreateAPIKeyRoleAssignmentProcedure,
			connect.WithSchema(frontendServiceMethods.ByName("CreateAPIKeyRoleAssignment")),
			connect.WithClientOptions(opts...),
		),
		deleteAPIKeyRoleAssignment: connect.NewClient[v1.DeleteAPIKeyRoleAssignmentRequest, v1.DeleteAPIKeyRoleAssignmentResponse](
			httpClient,
			baseURL+FrontendServiceDeleteAPIKeyRoleAssignmentProcedure,
			connect.WithSchema(frontendServiceMethods.ByName("DeleteAPIKeyRoleAssignment")),
			connect.WithClientOptions(opts...),
		),
		listAPIKeyRoleAssignments: connect.NewClient[v1.ListAPIKeyRoleAssignmentsRequest, v1.ListAPIKeyRoleAssignmentsResponse](
			httpClient,
			baseURL+FrontendServiceListAPIKeyRoleAssignmentsProcedure,
			connect.WithSchema(frontendServiceMethods.ByName("ListAPIKeyRoleAssignments")),
			connect.WithClientOptions(opts...),
		),
		listAuditLogEvents: connect.NewClient[v1.ListAuditLogEventsRequest, v1.ListAuditLogEventsResponse](
			httpClient,
			baseURL+FrontendServiceListAuditLogEventsProcedure,
			connect.WithSchema(frontendServiceMethods.ByName("ListAuditLogEvents")),
			connect.WithClientOptions(opts...),
		),
	}
}

// frontendServiceClient implements FrontendServiceClient.
type frontendServiceClient struct {
	logout                                *connect.Client[v1.LogoutRequest, v1.LogoutResponse]
	refresh                               *connect.Client[v1.RefreshRequest, v1.RefreshResponse]
	getProject                            *connect.Client[v1.GetProjectRequest, v1.GetProjectResponse]
	getOrganization                       *connect.Client[v1.GetOrganizationRequest, v1.GetOrganizationResponse]
	updateOrganization                    *connect.Client[v1.UpdateOrganizationRequest, v1.UpdateOrganizationResponse]
	getOrganizationGoogleHostedDomains    *connect.Client[v1.GetOrganizationGoogleHostedDomainsRequest, v1.GetOrganizationGoogleHostedDomainsResponse]
	updateOrganizationGoogleHostedDomains *connect.Client[v1.UpdateOrganizationGoogleHostedDomainsRequest, v1.UpdateOrganizationGoogleHostedDomainsResponse]
	getOrganizationMicrosoftTenantIDs     *connect.Client[v1.GetOrganizationMicrosoftTenantIDsRequest, v1.GetOrganizationMicrosoftTenantIDsResponse]
	updateOrganizationMicrosoftTenantIDs  *connect.Client[v1.UpdateOrganizationMicrosoftTenantIDsRequest, v1.UpdateOrganizationMicrosoftTenantIDsResponse]
	listUsers                             *connect.Client[v1.ListUsersRequest, v1.ListUsersResponse]
	getUser                               *connect.Client[v1.GetUserRequest, v1.GetUserResponse]
	updateUser                            *connect.Client[v1.UpdateUserRequest, v1.UpdateUserResponse]
	updateMe                              *connect.Client[v1.UpdateMeRequest, v1.UpdateMeResponse]
	deleteUser                            *connect.Client[v1.DeleteUserRequest, v1.DeleteUserResponse]
	setPassword                           *connect.Client[v1.SetPasswordRequest, v1.SetPasswordResponse]
	listSAMLConnections                   *connect.Client[v1.ListSAMLConnectionsRequest, v1.ListSAMLConnectionsResponse]
	getSAMLConnection                     *connect.Client[v1.GetSAMLConnectionRequest, v1.GetSAMLConnectionResponse]
	createSAMLConnection                  *connect.Client[v1.CreateSAMLConnectionRequest, v1.CreateSAMLConnectionResponse]
	updateSAMLConnection                  *connect.Client[v1.UpdateSAMLConnectionRequest, v1.UpdateSAMLConnectionResponse]
	deleteSAMLConnection                  *connect.Client[v1.DeleteSAMLConnectionRequest, v1.DeleteSAMLConnectionResponse]
	listOIDCConnections                   *connect.Client[v1.ListOIDCConnectionsRequest, v1.ListOIDCConnectionsResponse]
	getOIDCConnection                     *connect.Client[v1.GetOIDCConnectionRequest, v1.GetOIDCConnectionResponse]
	createOIDCConnection                  *connect.Client[v1.CreateOIDCConnectionRequest, v1.CreateOIDCConnectionResponse]
	updateOIDCConnection                  *connect.Client[v1.UpdateOIDCConnectionRequest, v1.UpdateOIDCConnectionResponse]
	deleteOIDCConnection                  *connect.Client[v1.DeleteOIDCConnectionRequest, v1.DeleteOIDCConnectionResponse]
	listSCIMAPIKeys                       *connect.Client[v1.ListSCIMAPIKeysRequest, v1.ListSCIMAPIKeysResponse]
	getSCIMAPIKey                         *connect.Client[v1.GetSCIMAPIKeyRequest, v1.GetSCIMAPIKeyResponse]
	createSCIMAPIKey                      *connect.Client[v1.CreateSCIMAPIKeyRequest, v1.CreateSCIMAPIKeyResponse]
	updateSCIMAPIKey                      *connect.Client[v1.UpdateSCIMAPIKeyRequest, v1.UpdateSCIMAPIKeyResponse]
	deleteSCIMAPIKey                      *connect.Client[v1.DeleteSCIMAPIKeyRequest, v1.DeleteSCIMAPIKeyResponse]
	revokeSCIMAPIKey                      *connect.Client[v1.RevokeSCIMAPIKeyRequest, v1.RevokeSCIMAPIKeyResponse]
	whoami                                *connect.Client[v1.WhoamiRequest, v1.WhoamiResponse]
	listMyPasskeys                        *connect.Client[v1.ListMyPasskeysRequest, v1.ListMyPasskeysResponse]
	deleteMyPasskey                       *connect.Client[v1.DeleteMyPasskeyRequest, v1.DeleteMyPasskeyResponse]
	getPasskeyOptions                     *connect.Client[v1.GetPasskeyOptionsRequest, v1.GetPasskeyOptionsResponse]
	registerPasskey                       *connect.Client[v1.RegisterPasskeyRequest, v1.RegisterPasskeyResponse]
	getAuthenticatorAppOptions            *connect.Client[v1.GetAuthenticatorAppOptionsRequest, v1.GetAuthenticatorAppOptionsResponse]
	registerAuthenticatorApp              *connect.Client[v1.RegisterAuthenticatorAppRequest, v1.RegisterAuthenticatorAppResponse]
	listUserInvites                       *connect.Client[v1.ListUserInvitesRequest, v1.ListUserInvitesResponse]
	getUserInvite                         *connect.Client[v1.GetUserInviteRequest, v1.GetUserInviteResponse]
	createUserInvite                      *connect.Client[v1.CreateUserInviteRequest, v1.CreateUserInviteResponse]
	deleteUserInvite                      *connect.Client[v1.DeleteUserInviteRequest, v1.DeleteUserInviteResponse]
	listSwitchableOrganizations           *connect.Client[v1.ListSwitchableOrganizationsRequest, v1.ListSwitchableOrganizationsResponse]
	getRBACPolicy                         *connect.Client[v1.GetRBACPolicyRequest, v1.GetRBACPolicyResponse]
	listRoles                             *connect.Client[v1.ListRolesRequest, v1.ListRolesResponse]
	getRole                               *connect.Client[v1.GetRoleRequest, v1.GetRoleResponse]
	createRole                            *connect.Client[v1.CreateRoleRequest, v1.CreateRoleResponse]
	updateRole                            *connect.Client[v1.UpdateRoleRequest, v1.UpdateRoleResponse]
	deleteRole                            *connect.Client[v1.DeleteRoleRequest, v1.DeleteRoleResponse]
	listUserRoleAssignments               *connect.Client[v1.ListUserRoleAssignmentsRequest, v1.ListUserRoleAssignmentsResponse]
	getUserRoleAssignment                 *connect.Client[v1.GetUserRoleAssignmentRequest, v1.GetUserRoleAssignmentResponse]
	createUserRoleAssignment              *connect.Client[v1.CreateUserRoleAssignmentRequest, v1.CreateUserRoleAssignmentResponse]
	deleteUserRoleAssignment              *connect.Client[v1.DeleteUserRoleAssignmentRequest, v1.DeleteUserRoleAssignmentResponse]
	createAPIKey                          *connect.Client[v1.CreateAPIKeyRequest, v1.CreateAPIKeyResponse]
	deleteAPIKey                          *connect.Client[v1.DeleteAPIKeyRequest, v1.DeleteAPIKeyResponse]
	getAPIKey                             *connect.Client[v1.GetAPIKeyRequest, v1.GetAPIKeyResponse]
	listAPIKeys                           *connect.Client[v1.ListAPIKeysRequest, v1.ListAPIKeysResponse]
	revokeAPIKey                          *connect.Client[v1.RevokeAPIKeyRequest, v1.RevokeAPIKeyResponse]
	updateAPIKey                          *connect.Client[v1.UpdateAPIKeyRequest, v1.UpdateAPIKeyResponse]
	createAPIKeyRoleAssignment            *connect.Client[v1.CreateAPIKeyRoleAssignmentRequest, v1.CreateAPIKeyRoleAssignmentResponse]
	deleteAPIKeyRoleAssignment            *connect.Client[v1.DeleteAPIKeyRoleAssignmentRequest, v1.DeleteAPIKeyRoleAssignmentResponse]
	listAPIKeyRoleAssignments             *connect.Client[v1.ListAPIKeyRoleAssignmentsRequest, v1.ListAPIKeyRoleAssignmentsResponse]
	listAuditLogEvents                    *connect.Client[v1.ListAuditLogEventsRequest, v1.ListAuditLogEventsResponse]
}

// Logout calls tesseral.frontend.v1.FrontendService.Logout.
func (c *frontendServiceClient) Logout(ctx context.Context, req *connect.Request[v1.LogoutRequest]) (*connect.Response[v1.LogoutResponse], error) {
	return c.logout.CallUnary(ctx, req)
}

// Refresh calls tesseral.frontend.v1.FrontendService.Refresh.
func (c *frontendServiceClient) Refresh(ctx context.Context, req *connect.Request[v1.RefreshRequest]) (*connect.Response[v1.RefreshResponse], error) {
	return c.refresh.CallUnary(ctx, req)
}

// GetProject calls tesseral.frontend.v1.FrontendService.GetProject.
func (c *frontendServiceClient) GetProject(ctx context.Context, req *connect.Request[v1.GetProjectRequest]) (*connect.Response[v1.GetProjectResponse], error) {
	return c.getProject.CallUnary(ctx, req)
}

// GetOrganization calls tesseral.frontend.v1.FrontendService.GetOrganization.
func (c *frontendServiceClient) GetOrganization(ctx context.Context, req *connect.Request[v1.GetOrganizationRequest]) (*connect.Response[v1.GetOrganizationResponse], error) {
	return c.getOrganization.CallUnary(ctx, req)
}

// UpdateOrganization calls tesseral.frontend.v1.FrontendService.UpdateOrganization.
func (c *frontendServiceClient) UpdateOrganization(ctx context.Context, req *connect.Request[v1.UpdateOrganizationRequest]) (*connect.Response[v1.UpdateOrganizationResponse], error) {
	return c.updateOrganization.CallUnary(ctx, req)
}

// GetOrganizationGoogleHostedDomains calls
// tesseral.frontend.v1.FrontendService.GetOrganizationGoogleHostedDomains.
func (c *frontendServiceClient) GetOrganizationGoogleHostedDomains(ctx context.Context, req *connect.Request[v1.GetOrganizationGoogleHostedDomainsRequest]) (*connect.Response[v1.GetOrganizationGoogleHostedDomainsResponse], error) {
	return c.getOrganizationGoogleHostedDomains.CallUnary(ctx, req)
}

// UpdateOrganizationGoogleHostedDomains calls
// tesseral.frontend.v1.FrontendService.UpdateOrganizationGoogleHostedDomains.
func (c *frontendServiceClient) UpdateOrganizationGoogleHostedDomains(ctx context.Context, req *connect.Request[v1.UpdateOrganizationGoogleHostedDomainsRequest]) (*connect.Response[v1.UpdateOrganizationGoogleHostedDomainsResponse], error) {
	return c.updateOrganizationGoogleHostedDomains.CallUnary(ctx, req)
}

// GetOrganizationMicrosoftTenantIDs calls
// tesseral.frontend.v1.FrontendService.GetOrganizationMicrosoftTenantIDs.
func (c *frontendServiceClient) GetOrganizationMicrosoftTenantIDs(ctx context.Context, req *connect.Request[v1.GetOrganizationMicrosoftTenantIDsRequest]) (*connect.Response[v1.GetOrganizationMicrosoftTenantIDsResponse], error) {
	return c.getOrganizationMicrosoftTenantIDs.CallUnary(ctx, req)
}

// UpdateOrganizationMicrosoftTenantIDs calls
// tesseral.frontend.v1.FrontendService.UpdateOrganizationMicrosoftTenantIDs.
func (c *frontendServiceClient) UpdateOrganizationMicrosoftTenantIDs(ctx context.Context, req *connect.Request[v1.UpdateOrganizationMicrosoftTenantIDsRequest]) (*connect.Response[v1.UpdateOrganizationMicrosoftTenantIDsResponse], error) {
	return c.updateOrganizationMicrosoftTenantIDs.CallUnary(ctx, req)
}

// ListUsers calls tesseral.frontend.v1.FrontendService.ListUsers.
func (c *frontendServiceClient) ListUsers(ctx context.Context, req *connect.Request[v1.ListUsersRequest]) (*connect.Response[v1.ListUsersResponse], error) {
	return c.listUsers.CallUnary(ctx, req)
}

// GetUser calls tesseral.frontend.v1.FrontendService.GetUser.
func (c *frontendServiceClient) GetUser(ctx context.Context, req *connect.Request[v1.GetUserRequest]) (*connect.Response[v1.GetUserResponse], error) {
	return c.getUser.CallUnary(ctx, req)
}

// UpdateUser calls tesseral.frontend.v1.FrontendService.UpdateUser.
func (c *frontendServiceClient) UpdateUser(ctx context.Context, req *connect.Request[v1.UpdateUserRequest]) (*connect.Response[v1.UpdateUserResponse], error) {
	return c.updateUser.CallUnary(ctx, req)
}

// UpdateMe calls tesseral.frontend.v1.FrontendService.UpdateMe.
func (c *frontendServiceClient) UpdateMe(ctx context.Context, req *connect.Request[v1.UpdateMeRequest]) (*connect.Response[v1.UpdateMeResponse], error) {
	return c.updateMe.CallUnary(ctx, req)
}

// DeleteUser calls tesseral.frontend.v1.FrontendService.DeleteUser.
func (c *frontendServiceClient) DeleteUser(ctx context.Context, req *connect.Request[v1.DeleteUserRequest]) (*connect.Response[v1.DeleteUserResponse], error) {
	return c.deleteUser.CallUnary(ctx, req)
}

// SetPassword calls tesseral.frontend.v1.FrontendService.SetPassword.
func (c *frontendServiceClient) SetPassword(ctx context.Context, req *connect.Request[v1.SetPasswordRequest]) (*connect.Response[v1.SetPasswordResponse], error) {
	return c.setPassword.CallUnary(ctx, req)
}

// ListSAMLConnections calls tesseral.frontend.v1.FrontendService.ListSAMLConnections.
func (c *frontendServiceClient) ListSAMLConnections(ctx context.Context, req *connect.Request[v1.ListSAMLConnectionsRequest]) (*connect.Response[v1.ListSAMLConnectionsResponse], error) {
	return c.listSAMLConnections.CallUnary(ctx, req)
}

// GetSAMLConnection calls tesseral.frontend.v1.FrontendService.GetSAMLConnection.
func (c *frontendServiceClient) GetSAMLConnection(ctx context.Context, req *connect.Request[v1.GetSAMLConnectionRequest]) (*connect.Response[v1.GetSAMLConnectionResponse], error) {
	return c.getSAMLConnection.CallUnary(ctx, req)
}

// CreateSAMLConnection calls tesseral.frontend.v1.FrontendService.CreateSAMLConnection.
func (c *frontendServiceClient) CreateSAMLConnection(ctx context.Context, req *connect.Request[v1.CreateSAMLConnectionRequest]) (*connect.Response[v1.CreateSAMLConnectionResponse], error) {
	return c.createSAMLConnection.CallUnary(ctx, req)
}

// UpdateSAMLConnection calls tesseral.frontend.v1.FrontendService.UpdateSAMLConnection.
func (c *frontendServiceClient) UpdateSAMLConnection(ctx context.Context, req *connect.Request[v1.UpdateSAMLConnectionRequest]) (*connect.Response[v1.UpdateSAMLConnectionResponse], error) {
	return c.updateSAMLConnection.CallUnary(ctx, req)
}

// DeleteSAMLConnection calls tesseral.frontend.v1.FrontendService.DeleteSAMLConnection.
func (c *frontendServiceClient) DeleteSAMLConnection(ctx context.Context, req *connect.Request[v1.DeleteSAMLConnectionRequest]) (*connect.Response[v1.DeleteSAMLConnectionResponse], error) {
	return c.deleteSAMLConnection.CallUnary(ctx, req)
}

// ListOIDCConnections calls tesseral.frontend.v1.FrontendService.ListOIDCConnections.
func (c *frontendServiceClient) ListOIDCConnections(ctx context.Context, req *connect.Request[v1.ListOIDCConnectionsRequest]) (*connect.Response[v1.ListOIDCConnectionsResponse], error) {
	return c.listOIDCConnections.CallUnary(ctx, req)
}

// GetOIDCConnection calls tesseral.frontend.v1.FrontendService.GetOIDCConnection.
func (c *frontendServiceClient) GetOIDCConnection(ctx context.Context, req *connect.Request[v1.GetOIDCConnectionRequest]) (*connect.Response[v1.GetOIDCConnectionResponse], error) {
	return c.getOIDCConnection.CallUnary(ctx, req)
}

// CreateOIDCConnection calls tesseral.frontend.v1.FrontendService.CreateOIDCConnection.
func (c *frontendServiceClient) CreateOIDCConnection(ctx context.Context, req *connect.Request[v1.CreateOIDCConnectionRequest]) (*connect.Response[v1.CreateOIDCConnectionResponse], error) {
	return c.createOIDCConnection.CallUnary(ctx, req)
}

// UpdateOIDCConnection calls tesseral.frontend.v1.FrontendService.UpdateOIDCConnection.
func (c *frontendServiceClient) UpdateOIDCConnection(ctx context.Context, req *connect.Request[v1.UpdateOIDCConnectionRequest]) (*connect.Response[v1.UpdateOIDCConnectionResponse], error) {
	return c.updateOIDCConnection.CallUnary(ctx, req)
}

// DeleteOIDCConnection calls tesseral.frontend.v1.FrontendService.DeleteOIDCConnection.
func (c *frontendServiceClient) DeleteOIDCConnection(ctx context.Context, req *connect.Request[v1.DeleteOIDCConnectionRequest]) (*connect.Response[v1.DeleteOIDCConnectionResponse], error) {
	return c.deleteOIDCConnection.CallUnary(ctx, req)
}

// ListSCIMAPIKeys calls tesseral.frontend.v1.FrontendService.ListSCIMAPIKeys.
func (c *frontendServiceClient) ListSCIMAPIKeys(ctx context.Context, req *connect.Request[v1.ListSCIMAPIKeysRequest]) (*connect.Response[v1.ListSCIMAPIKeysResponse], error) {
	return c.listSCIMAPIKeys.CallUnary(ctx, req)
}

// GetSCIMAPIKey calls tesseral.frontend.v1.FrontendService.GetSCIMAPIKey.
func (c *frontendServiceClient) GetSCIMAPIKey(ctx context.Context, req *connect.Request[v1.GetSCIMAPIKeyRequest]) (*connect.Response[v1.GetSCIMAPIKeyResponse], error) {
	return c.getSCIMAPIKey.CallUnary(ctx, req)
}

// CreateSCIMAPIKey calls tesseral.frontend.v1.FrontendService.CreateSCIMAPIKey.
func (c *frontendServiceClient) CreateSCIMAPIKey(ctx context.Context, req *connect.Request[v1.CreateSCIMAPIKeyRequest]) (*connect.Response[v1.CreateSCIMAPIKeyResponse], error) {
	return c.createSCIMAPIKey.CallUnary(ctx, req)
}

// UpdateSCIMAPIKey calls tesseral.frontend.v1.FrontendService.UpdateSCIMAPIKey.
func (c *frontendServiceClient) UpdateSCIMAPIKey(ctx context.Context, req *connect.Request[v1.UpdateSCIMAPIKeyRequest]) (*connect.Response[v1.UpdateSCIMAPIKeyResponse], error) {
	return c.updateSCIMAPIKey.CallUnary(ctx, req)
}

// DeleteSCIMAPIKey calls tesseral.frontend.v1.FrontendService.DeleteSCIMAPIKey.
func (c *frontendServiceClient) DeleteSCIMAPIKey(ctx context.Context, req *connect.Request[v1.DeleteSCIMAPIKeyRequest]) (*connect.Response[v1.DeleteSCIMAPIKeyResponse], error) {
	return c.deleteSCIMAPIKey.CallUnary(ctx, req)
}

// RevokeSCIMAPIKey calls tesseral.frontend.v1.FrontendService.RevokeSCIMAPIKey.
func (c *frontendServiceClient) RevokeSCIMAPIKey(ctx context.Context, req *connect.Request[v1.RevokeSCIMAPIKeyRequest]) (*connect.Response[v1.RevokeSCIMAPIKeyResponse], error) {
	return c.revokeSCIMAPIKey.CallUnary(ctx, req)
}

// Whoami calls tesseral.frontend.v1.FrontendService.Whoami.
func (c *frontendServiceClient) Whoami(ctx context.Context, req *connect.Request[v1.WhoamiRequest]) (*connect.Response[v1.WhoamiResponse], error) {
	return c.whoami.CallUnary(ctx, req)
}

// ListMyPasskeys calls tesseral.frontend.v1.FrontendService.ListMyPasskeys.
func (c *frontendServiceClient) ListMyPasskeys(ctx context.Context, req *connect.Request[v1.ListMyPasskeysRequest]) (*connect.Response[v1.ListMyPasskeysResponse], error) {
	return c.listMyPasskeys.CallUnary(ctx, req)
}

// DeleteMyPasskey calls tesseral.frontend.v1.FrontendService.DeleteMyPasskey.
func (c *frontendServiceClient) DeleteMyPasskey(ctx context.Context, req *connect.Request[v1.DeleteMyPasskeyRequest]) (*connect.Response[v1.DeleteMyPasskeyResponse], error) {
	return c.deleteMyPasskey.CallUnary(ctx, req)
}

// GetPasskeyOptions calls tesseral.frontend.v1.FrontendService.GetPasskeyOptions.
func (c *frontendServiceClient) GetPasskeyOptions(ctx context.Context, req *connect.Request[v1.GetPasskeyOptionsRequest]) (*connect.Response[v1.GetPasskeyOptionsResponse], error) {
	return c.getPasskeyOptions.CallUnary(ctx, req)
}

// RegisterPasskey calls tesseral.frontend.v1.FrontendService.RegisterPasskey.
func (c *frontendServiceClient) RegisterPasskey(ctx context.Context, req *connect.Request[v1.RegisterPasskeyRequest]) (*connect.Response[v1.RegisterPasskeyResponse], error) {
	return c.registerPasskey.CallUnary(ctx, req)
}

// GetAuthenticatorAppOptions calls tesseral.frontend.v1.FrontendService.GetAuthenticatorAppOptions.
func (c *frontendServiceClient) GetAuthenticatorAppOptions(ctx context.Context, req *connect.Request[v1.GetAuthenticatorAppOptionsRequest]) (*connect.Response[v1.GetAuthenticatorAppOptionsResponse], error) {
	return c.getAuthenticatorAppOptions.CallUnary(ctx, req)
}

// RegisterAuthenticatorApp calls tesseral.frontend.v1.FrontendService.RegisterAuthenticatorApp.
func (c *frontendServiceClient) RegisterAuthenticatorApp(ctx context.Context, req *connect.Request[v1.RegisterAuthenticatorAppRequest]) (*connect.Response[v1.RegisterAuthenticatorAppResponse], error) {
	return c.registerAuthenticatorApp.CallUnary(ctx, req)
}

// ListUserInvites calls tesseral.frontend.v1.FrontendService.ListUserInvites.
func (c *frontendServiceClient) ListUserInvites(ctx context.Context, req *connect.Request[v1.ListUserInvitesRequest]) (*connect.Response[v1.ListUserInvitesResponse], error) {
	return c.listUserInvites.CallUnary(ctx, req)
}

// GetUserInvite calls tesseral.frontend.v1.FrontendService.GetUserInvite.
func (c *frontendServiceClient) GetUserInvite(ctx context.Context, req *connect.Request[v1.GetUserInviteRequest]) (*connect.Response[v1.GetUserInviteResponse], error) {
	return c.getUserInvite.CallUnary(ctx, req)
}

// CreateUserInvite calls tesseral.frontend.v1.FrontendService.CreateUserInvite.
func (c *frontendServiceClient) CreateUserInvite(ctx context.Context, req *connect.Request[v1.CreateUserInviteRequest]) (*connect.Response[v1.CreateUserInviteResponse], error) {
	return c.createUserInvite.CallUnary(ctx, req)
}

// DeleteUserInvite calls tesseral.frontend.v1.FrontendService.DeleteUserInvite.
func (c *frontendServiceClient) DeleteUserInvite(ctx context.Context, req *connect.Request[v1.DeleteUserInviteRequest]) (*connect.Response[v1.DeleteUserInviteResponse], error) {
	return c.deleteUserInvite.CallUnary(ctx, req)
}

// ListSwitchableOrganizations calls
// tesseral.frontend.v1.FrontendService.ListSwitchableOrganizations.
func (c *frontendServiceClient) ListSwitchableOrganizations(ctx context.Context, req *connect.Request[v1.ListSwitchableOrganizationsRequest]) (*connect.Response[v1.ListSwitchableOrganizationsResponse], error) {
	return c.listSwitchableOrganizations.CallUnary(ctx, req)
}

// GetRBACPolicy calls tesseral.frontend.v1.FrontendService.GetRBACPolicy.
func (c *frontendServiceClient) GetRBACPolicy(ctx context.Context, req *connect.Request[v1.GetRBACPolicyRequest]) (*connect.Response[v1.GetRBACPolicyResponse], error) {
	return c.getRBACPolicy.CallUnary(ctx, req)
}

// ListRoles calls tesseral.frontend.v1.FrontendService.ListRoles.
func (c *frontendServiceClient) ListRoles(ctx context.Context, req *connect.Request[v1.ListRolesRequest]) (*connect.Response[v1.ListRolesResponse], error) {
	return c.listRoles.CallUnary(ctx, req)
}

// GetRole calls tesseral.frontend.v1.FrontendService.GetRole.
func (c *frontendServiceClient) GetRole(ctx context.Context, req *connect.Request[v1.GetRoleRequest]) (*connect.Response[v1.GetRoleResponse], error) {
	return c.getRole.CallUnary(ctx, req)
}

// CreateRole calls tesseral.frontend.v1.FrontendService.CreateRole.
func (c *frontendServiceClient) CreateRole(ctx context.Context, req *connect.Request[v1.CreateRoleRequest]) (*connect.Response[v1.CreateRoleResponse], error) {
	return c.createRole.CallUnary(ctx, req)
}

// UpdateRole calls tesseral.frontend.v1.FrontendService.UpdateRole.
func (c *frontendServiceClient) UpdateRole(ctx context.Context, req *connect.Request[v1.UpdateRoleRequest]) (*connect.Response[v1.UpdateRoleResponse], error) {
	return c.updateRole.CallUnary(ctx, req)
}

// DeleteRole calls tesseral.frontend.v1.FrontendService.DeleteRole.
func (c *frontendServiceClient) DeleteRole(ctx context.Context, req *connect.Request[v1.DeleteRoleRequest]) (*connect.Response[v1.DeleteRoleResponse], error) {
	return c.deleteRole.CallUnary(ctx, req)
}

// ListUserRoleAssignments calls tesseral.frontend.v1.FrontendService.ListUserRoleAssignments.
func (c *frontendServiceClient) ListUserRoleAssignments(ctx context.Context, req *connect.Request[v1.ListUserRoleAssignmentsRequest]) (*connect.Response[v1.ListUserRoleAssignmentsResponse], error) {
	return c.listUserRoleAssignments.CallUnary(ctx, req)
}

// GetUserRoleAssignment calls tesseral.frontend.v1.FrontendService.GetUserRoleAssignment.
func (c *frontendServiceClient) GetUserRoleAssignment(ctx context.Context, req *connect.Request[v1.GetUserRoleAssignmentRequest]) (*connect.Response[v1.GetUserRoleAssignmentResponse], error) {
	return c.getUserRoleAssignment.CallUnary(ctx, req)
}

// CreateUserRoleAssignment calls tesseral.frontend.v1.FrontendService.CreateUserRoleAssignment.
func (c *frontendServiceClient) CreateUserRoleAssignment(ctx context.Context, req *connect.Request[v1.CreateUserRoleAssignmentRequest]) (*connect.Response[v1.CreateUserRoleAssignmentResponse], error) {
	return c.createUserRoleAssignment.CallUnary(ctx, req)
}

// DeleteUserRoleAssignment calls tesseral.frontend.v1.FrontendService.DeleteUserRoleAssignment.
func (c *frontendServiceClient) DeleteUserRoleAssignment(ctx context.Context, req *connect.Request[v1.DeleteUserRoleAssignmentRequest]) (*connect.Response[v1.DeleteUserRoleAssignmentResponse], error) {
	return c.deleteUserRoleAssignment.CallUnary(ctx, req)
}

// CreateAPIKey calls tesseral.frontend.v1.FrontendService.CreateAPIKey.
func (c *frontendServiceClient) CreateAPIKey(ctx context.Context, req *connect.Request[v1.CreateAPIKeyRequest]) (*connect.Response[v1.CreateAPIKeyResponse], error) {
	return c.createAPIKey.CallUnary(ctx, req)
}

// DeleteAPIKey calls tesseral.frontend.v1.FrontendService.DeleteAPIKey.
func (c *frontendServiceClient) DeleteAPIKey(ctx context.Context, req *connect.Request[v1.DeleteAPIKeyRequest]) (*connect.Response[v1.DeleteAPIKeyResponse], error) {
	return c.deleteAPIKey.CallUnary(ctx, req)
}

// GetAPIKey calls tesseral.frontend.v1.FrontendService.GetAPIKey.
func (c *frontendServiceClient) GetAPIKey(ctx context.Context, req *connect.Request[v1.GetAPIKeyRequest]) (*connect.Response[v1.GetAPIKeyResponse], error) {
	return c.getAPIKey.CallUnary(ctx, req)
}

// ListAPIKeys calls tesseral.frontend.v1.FrontendService.ListAPIKeys.
func (c *frontendServiceClient) ListAPIKeys(ctx context.Context, req *connect.Request[v1.ListAPIKeysRequest]) (*connect.Response[v1.ListAPIKeysResponse], error) {
	return c.listAPIKeys.CallUnary(ctx, req)
}

// RevokeAPIKey calls tesseral.frontend.v1.FrontendService.RevokeAPIKey.
func (c *frontendServiceClient) RevokeAPIKey(ctx context.Context, req *connect.Request[v1.RevokeAPIKeyRequest]) (*connect.Response[v1.RevokeAPIKeyResponse], error) {
	return c.revokeAPIKey.CallUnary(ctx, req)
}

// UpdateAPIKey calls tesseral.frontend.v1.FrontendService.UpdateAPIKey.
func (c *frontendServiceClient) UpdateAPIKey(ctx context.Context, req *connect.Request[v1.UpdateAPIKeyRequest]) (*connect.Response[v1.UpdateAPIKeyResponse], error) {
	return c.updateAPIKey.CallUnary(ctx, req)
}

// CreateAPIKeyRoleAssignment calls tesseral.frontend.v1.FrontendService.CreateAPIKeyRoleAssignment.
func (c *frontendServiceClient) CreateAPIKeyRoleAssignment(ctx context.Context, req *connect.Request[v1.CreateAPIKeyRoleAssignmentRequest]) (*connect.Response[v1.CreateAPIKeyRoleAssignmentResponse], error) {
	return c.createAPIKeyRoleAssignment.CallUnary(ctx, req)
}

// DeleteAPIKeyRoleAssignment calls tesseral.frontend.v1.FrontendService.DeleteAPIKeyRoleAssignment.
func (c *frontendServiceClient) DeleteAPIKeyRoleAssignment(ctx context.Context, req *connect.Request[v1.DeleteAPIKeyRoleAssignmentRequest]) (*connect.Response[v1.DeleteAPIKeyRoleAssignmentResponse], error) {
	return c.deleteAPIKeyRoleAssignment.CallUnary(ctx, req)
}

// ListAPIKeyRoleAssignments calls tesseral.frontend.v1.FrontendService.ListAPIKeyRoleAssignments.
func (c *frontendServiceClient) ListAPIKeyRoleAssignments(ctx context.Context, req *connect.Request[v1.ListAPIKeyRoleAssignmentsRequest]) (*connect.Response[v1.ListAPIKeyRoleAssignmentsResponse], error) {
	return c.listAPIKeyRoleAssignments.CallUnary(ctx, req)
}

// ListAuditLogEvents calls tesseral.frontend.v1.FrontendService.ListAuditLogEvents.
func (c *frontendServiceClient) ListAuditLogEvents(ctx context.Context, req *connect.Request[v1.ListAuditLogEventsRequest]) (*connect.Response[v1.ListAuditLogEventsResponse], error) {
	return c.listAuditLogEvents.CallUnary(ctx, req)
}

// FrontendServiceHandler is an implementation of the tesseral.frontend.v1.FrontendService service.
type FrontendServiceHandler interface {
	Logout(context.Context, *connect.Request[v1.LogoutRequest]) (*connect.Response[v1.LogoutResponse], error)
	Refresh(context.Context, *connect.Request[v1.RefreshRequest]) (*connect.Response[v1.RefreshResponse], error)
	GetProject(context.Context, *connect.Request[v1.GetProjectRequest]) (*connect.Response[v1.GetProjectResponse], error)
	GetOrganization(context.Context, *connect.Request[v1.GetOrganizationRequest]) (*connect.Response[v1.GetOrganizationResponse], error)
	UpdateOrganization(context.Context, *connect.Request[v1.UpdateOrganizationRequest]) (*connect.Response[v1.UpdateOrganizationResponse], error)
	GetOrganizationGoogleHostedDomains(context.Context, *connect.Request[v1.GetOrganizationGoogleHostedDomainsRequest]) (*connect.Response[v1.GetOrganizationGoogleHostedDomainsResponse], error)
	UpdateOrganizationGoogleHostedDomains(context.Context, *connect.Request[v1.UpdateOrganizationGoogleHostedDomainsRequest]) (*connect.Response[v1.UpdateOrganizationGoogleHostedDomainsResponse], error)
	GetOrganizationMicrosoftTenantIDs(context.Context, *connect.Request[v1.GetOrganizationMicrosoftTenantIDsRequest]) (*connect.Response[v1.GetOrganizationMicrosoftTenantIDsResponse], error)
	UpdateOrganizationMicrosoftTenantIDs(context.Context, *connect.Request[v1.UpdateOrganizationMicrosoftTenantIDsRequest]) (*connect.Response[v1.UpdateOrganizationMicrosoftTenantIDsResponse], error)
	ListUsers(context.Context, *connect.Request[v1.ListUsersRequest]) (*connect.Response[v1.ListUsersResponse], error)
	GetUser(context.Context, *connect.Request[v1.GetUserRequest]) (*connect.Response[v1.GetUserResponse], error)
	UpdateUser(context.Context, *connect.Request[v1.UpdateUserRequest]) (*connect.Response[v1.UpdateUserResponse], error)
	UpdateMe(context.Context, *connect.Request[v1.UpdateMeRequest]) (*connect.Response[v1.UpdateMeResponse], error)
	DeleteUser(context.Context, *connect.Request[v1.DeleteUserRequest]) (*connect.Response[v1.DeleteUserResponse], error)
	// Sets a user's password.
	SetPassword(context.Context, *connect.Request[v1.SetPasswordRequest]) (*connect.Response[v1.SetPasswordResponse], error)
	ListSAMLConnections(context.Context, *connect.Request[v1.ListSAMLConnectionsRequest]) (*connect.Response[v1.ListSAMLConnectionsResponse], error)
	GetSAMLConnection(context.Context, *connect.Request[v1.GetSAMLConnectionRequest]) (*connect.Response[v1.GetSAMLConnectionResponse], error)
	CreateSAMLConnection(context.Context, *connect.Request[v1.CreateSAMLConnectionRequest]) (*connect.Response[v1.CreateSAMLConnectionResponse], error)
	UpdateSAMLConnection(context.Context, *connect.Request[v1.UpdateSAMLConnectionRequest]) (*connect.Response[v1.UpdateSAMLConnectionResponse], error)
	DeleteSAMLConnection(context.Context, *connect.Request[v1.DeleteSAMLConnectionRequest]) (*connect.Response[v1.DeleteSAMLConnectionResponse], error)
	ListOIDCConnections(context.Context, *connect.Request[v1.ListOIDCConnectionsRequest]) (*connect.Response[v1.ListOIDCConnectionsResponse], error)
	GetOIDCConnection(context.Context, *connect.Request[v1.GetOIDCConnectionRequest]) (*connect.Response[v1.GetOIDCConnectionResponse], error)
	CreateOIDCConnection(context.Context, *connect.Request[v1.CreateOIDCConnectionRequest]) (*connect.Response[v1.CreateOIDCConnectionResponse], error)
	UpdateOIDCConnection(context.Context, *connect.Request[v1.UpdateOIDCConnectionRequest]) (*connect.Response[v1.UpdateOIDCConnectionResponse], error)
	DeleteOIDCConnection(context.Context, *connect.Request[v1.DeleteOIDCConnectionRequest]) (*connect.Response[v1.DeleteOIDCConnectionResponse], error)
	ListSCIMAPIKeys(context.Context, *connect.Request[v1.ListSCIMAPIKeysRequest]) (*connect.Response[v1.ListSCIMAPIKeysResponse], error)
	GetSCIMAPIKey(context.Context, *connect.Request[v1.GetSCIMAPIKeyRequest]) (*connect.Response[v1.GetSCIMAPIKeyResponse], error)
	CreateSCIMAPIKey(context.Context, *connect.Request[v1.CreateSCIMAPIKeyRequest]) (*connect.Response[v1.CreateSCIMAPIKeyResponse], error)
	UpdateSCIMAPIKey(context.Context, *connect.Request[v1.UpdateSCIMAPIKeyRequest]) (*connect.Response[v1.UpdateSCIMAPIKeyResponse], error)
	DeleteSCIMAPIKey(context.Context, *connect.Request[v1.DeleteSCIMAPIKeyRequest]) (*connect.Response[v1.DeleteSCIMAPIKeyResponse], error)
	RevokeSCIMAPIKey(context.Context, *connect.Request[v1.RevokeSCIMAPIKeyRequest]) (*connect.Response[v1.RevokeSCIMAPIKeyResponse], error)
	Whoami(context.Context, *connect.Request[v1.WhoamiRequest]) (*connect.Response[v1.WhoamiResponse], error)
	ListMyPasskeys(context.Context, *connect.Request[v1.ListMyPasskeysRequest]) (*connect.Response[v1.ListMyPasskeysResponse], error)
	DeleteMyPasskey(context.Context, *connect.Request[v1.DeleteMyPasskeyRequest]) (*connect.Response[v1.DeleteMyPasskeyResponse], error)
	GetPasskeyOptions(context.Context, *connect.Request[v1.GetPasskeyOptionsRequest]) (*connect.Response[v1.GetPasskeyOptionsResponse], error)
	RegisterPasskey(context.Context, *connect.Request[v1.RegisterPasskeyRequest]) (*connect.Response[v1.RegisterPasskeyResponse], error)
	GetAuthenticatorAppOptions(context.Context, *connect.Request[v1.GetAuthenticatorAppOptionsRequest]) (*connect.Response[v1.GetAuthenticatorAppOptionsResponse], error)
	RegisterAuthenticatorApp(context.Context, *connect.Request[v1.RegisterAuthenticatorAppRequest]) (*connect.Response[v1.RegisterAuthenticatorAppResponse], error)
	ListUserInvites(context.Context, *connect.Request[v1.ListUserInvitesRequest]) (*connect.Response[v1.ListUserInvitesResponse], error)
	GetUserInvite(context.Context, *connect.Request[v1.GetUserInviteRequest]) (*connect.Response[v1.GetUserInviteResponse], error)
	CreateUserInvite(context.Context, *connect.Request[v1.CreateUserInviteRequest]) (*connect.Response[v1.CreateUserInviteResponse], error)
	DeleteUserInvite(context.Context, *connect.Request[v1.DeleteUserInviteRequest]) (*connect.Response[v1.DeleteUserInviteResponse], error)
	ListSwitchableOrganizations(context.Context, *connect.Request[v1.ListSwitchableOrganizationsRequest]) (*connect.Response[v1.ListSwitchableOrganizationsResponse], error)
	// Get RBAC Policy.
	GetRBACPolicy(context.Context, *connect.Request[v1.GetRBACPolicyRequest]) (*connect.Response[v1.GetRBACPolicyResponse], error)
	// List Roles.
	ListRoles(context.Context, *connect.Request[v1.ListRolesRequest]) (*connect.Response[v1.ListRolesResponse], error)
	// Get a Role.
	GetRole(context.Context, *connect.Request[v1.GetRoleRequest]) (*connect.Response[v1.GetRoleResponse], error)
	// Create a Role.
	CreateRole(context.Context, *connect.Request[v1.CreateRoleRequest]) (*connect.Response[v1.CreateRoleResponse], error)
	// Update a Role.
	UpdateRole(context.Context, *connect.Request[v1.UpdateRoleRequest]) (*connect.Response[v1.UpdateRoleResponse], error)
	// Delete a Role.
	DeleteRole(context.Context, *connect.Request[v1.DeleteRoleRequest]) (*connect.Response[v1.DeleteRoleResponse], error)
	// List User Role Assignments.
	ListUserRoleAssignments(context.Context, *connect.Request[v1.ListUserRoleAssignmentsRequest]) (*connect.Response[v1.ListUserRoleAssignmentsResponse], error)
	// Get a User Role Assignment.
	GetUserRoleAssignment(context.Context, *connect.Request[v1.GetUserRoleAssignmentRequest]) (*connect.Response[v1.GetUserRoleAssignmentResponse], error)
	// Create a User Role Assignment.
	CreateUserRoleAssignment(context.Context, *connect.Request[v1.CreateUserRoleAssignmentRequest]) (*connect.Response[v1.CreateUserRoleAssignmentResponse], error)
	// Delete a User Role Assignment.
	DeleteUserRoleAssignment(context.Context, *connect.Request[v1.DeleteUserRoleAssignmentRequest]) (*connect.Response[v1.DeleteUserRoleAssignmentResponse], error)
	// Create an API Key for an Organization.
	CreateAPIKey(context.Context, *connect.Request[v1.CreateAPIKeyRequest]) (*connect.Response[v1.CreateAPIKeyResponse], error)
	// Delete an API Key.
	DeleteAPIKey(context.Context, *connect.Request[v1.DeleteAPIKeyRequest]) (*connect.Response[v1.DeleteAPIKeyResponse], error)
	// Get an API Key.
	GetAPIKey(context.Context, *connect.Request[v1.GetAPIKeyRequest]) (*connect.Response[v1.GetAPIKeyResponse], error)
	// List API Keys.
	ListAPIKeys(context.Context, *connect.Request[v1.ListAPIKeysRequest]) (*connect.Response[v1.ListAPIKeysResponse], error)
	// Revoke an API Key.
	RevokeAPIKey(context.Context, *connect.Request[v1.RevokeAPIKeyRequest]) (*connect.Response[v1.RevokeAPIKeyResponse], error)
	// Update an API Key.
	UpdateAPIKey(context.Context, *connect.Request[v1.UpdateAPIKeyRequest]) (*connect.Response[v1.UpdateAPIKeyResponse], error)
	CreateAPIKeyRoleAssignment(context.Context, *connect.Request[v1.CreateAPIKeyRoleAssignmentRequest]) (*connect.Response[v1.CreateAPIKeyRoleAssignmentResponse], error)
	DeleteAPIKeyRoleAssignment(context.Context, *connect.Request[v1.DeleteAPIKeyRoleAssignmentRequest]) (*connect.Response[v1.DeleteAPIKeyRoleAssignmentResponse], error)
	ListAPIKeyRoleAssignments(context.Context, *connect.Request[v1.ListAPIKeyRoleAssignmentsRequest]) (*connect.Response[v1.ListAPIKeyRoleAssignmentsResponse], error)
	ListAuditLogEvents(context.Context, *connect.Request[v1.ListAuditLogEventsRequest]) (*connect.Response[v1.ListAuditLogEventsResponse], error)
}

// NewFrontendServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewFrontendServiceHandler(svc FrontendServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	frontendServiceMethods := v1.File_tesseral_frontend_v1_frontend_proto.Services().ByName("FrontendService").Methods()
	frontendServiceLogoutHandler := connect.NewUnaryHandler(
		FrontendServiceLogoutProcedure,
		svc.Logout,
		connect.WithSchema(frontendServiceMethods.ByName("Logout")),
		connect.WithHandlerOptions(opts...),
	)
	frontendServiceRefreshHandler := connect.NewUnaryHandler(
		FrontendServiceRefreshProcedure,
		svc.Refresh,
		connect.WithSchema(frontendServiceMethods.ByName("Refresh")),
		connect.WithHandlerOptions(opts...),
	)
	frontendServiceGetProjectHandler := connect.NewUnaryHandler(
		FrontendServiceGetProjectProcedure,
		svc.GetProject,
		connect.WithSchema(frontendServiceMethods.ByName("GetProject")),
		connect.WithHandlerOptions(opts...),
	)
	frontendServiceGetOrganizationHandler := connect.NewUnaryHandler(
		FrontendServiceGetOrganizationProcedure,
		svc.GetOrganization,
		connect.WithSchema(frontendServiceMethods.ByName("GetOrganization")),
		connect.WithHandlerOptions(opts...),
	)
	frontendServiceUpdateOrganizationHandler := connect.NewUnaryHandler(
		FrontendServiceUpdateOrganizationProcedure,
		svc.UpdateOrganization,
		connect.WithSchema(frontendServiceMethods.ByName("UpdateOrganization")),
		connect.WithHandlerOptions(opts...),
	)
	frontendServiceGetOrganizationGoogleHostedDomainsHandler := connect.NewUnaryHandler(
		FrontendServiceGetOrganizationGoogleHostedDomainsProcedure,
		svc.GetOrganizationGoogleHostedDomains,
		connect.WithSchema(frontendServiceMethods.ByName("GetOrganizationGoogleHostedDomains")),
		connect.WithHandlerOptions(opts...),
	)
	frontendServiceUpdateOrganizationGoogleHostedDomainsHandler := connect.NewUnaryHandler(
		FrontendServiceUpdateOrganizationGoogleHostedDomainsProcedure,
		svc.UpdateOrganizationGoogleHostedDomains,
		connect.WithSchema(frontendServiceMethods.ByName("UpdateOrganizationGoogleHostedDomains")),
		connect.WithHandlerOptions(opts...),
	)
	frontendServiceGetOrganizationMicrosoftTenantIDsHandler := connect.NewUnaryHandler(
		FrontendServiceGetOrganizationMicrosoftTenantIDsProcedure,
		svc.GetOrganizationMicrosoftTenantIDs,
		connect.WithSchema(frontendServiceMethods.ByName("GetOrganizationMicrosoftTenantIDs")),
		connect.WithHandlerOptions(opts...),
	)
	frontendServiceUpdateOrganizationMicrosoftTenantIDsHandler := connect.NewUnaryHandler(
		FrontendServiceUpdateOrganizationMicrosoftTenantIDsProcedure,
		svc.UpdateOrganizationMicrosoftTenantIDs,
		connect.WithSchema(frontendServiceMethods.ByName("UpdateOrganizationMicrosoftTenantIDs")),
		connect.WithHandlerOptions(opts...),
	)
	frontendServiceListUsersHandler := connect.NewUnaryHandler(
		FrontendServiceListUsersProcedure,
		svc.ListUsers,
		connect.WithSchema(frontendServiceMethods.ByName("ListUsers")),
		connect.WithHandlerOptions(opts...),
	)
	frontendServiceGetUserHandler := connect.NewUnaryHandler(
		FrontendServiceGetUserProcedure,
		svc.GetUser,
		connect.WithSchema(frontendServiceMethods.ByName("GetUser")),
		connect.WithHandlerOptions(opts...),
	)
	frontendServiceUpdateUserHandler := connect.NewUnaryHandler(
		FrontendServiceUpdateUserProcedure,
		svc.UpdateUser,
		connect.WithSchema(frontendServiceMethods.ByName("UpdateUser")),
		connect.WithHandlerOptions(opts...),
	)
	frontendServiceUpdateMeHandler := connect.NewUnaryHandler(
		FrontendServiceUpdateMeProcedure,
		svc.UpdateMe,
		connect.WithSchema(frontendServiceMethods.ByName("UpdateMe")),
		connect.WithHandlerOptions(opts...),
	)
	frontendServiceDeleteUserHandler := connect.NewUnaryHandler(
		FrontendServiceDeleteUserProcedure,
		svc.DeleteUser,
		connect.WithSchema(frontendServiceMethods.ByName("DeleteUser")),
		connect.WithHandlerOptions(opts...),
	)
	frontendServiceSetPasswordHandler := connect.NewUnaryHandler(
		FrontendServiceSetPasswordProcedure,
		svc.SetPassword,
		connect.WithSchema(frontendServiceMethods.ByName("SetPassword")),
		connect.WithHandlerOptions(opts...),
	)
	frontendServiceListSAMLConnectionsHandler := connect.NewUnaryHandler(
		FrontendServiceListSAMLConnectionsProcedure,
		svc.ListSAMLConnections,
		connect.WithSchema(frontendServiceMethods.ByName("ListSAMLConnections")),
		connect.WithHandlerOptions(opts...),
	)
	frontendServiceGetSAMLConnectionHandler := connect.NewUnaryHandler(
		FrontendServiceGetSAMLConnectionProcedure,
		svc.GetSAMLConnection,
		connect.WithSchema(frontendServiceMethods.ByName("GetSAMLConnection")),
		connect.WithHandlerOptions(opts...),
	)
	frontendServiceCreateSAMLConnectionHandler := connect.NewUnaryHandler(
		FrontendServiceCreateSAMLConnectionProcedure,
		svc.CreateSAMLConnection,
		connect.WithSchema(frontendServiceMethods.ByName("CreateSAMLConnection")),
		connect.WithHandlerOptions(opts...),
	)
	frontendServiceUpdateSAMLConnectionHandler := connect.NewUnaryHandler(
		FrontendServiceUpdateSAMLConnectionProcedure,
		svc.UpdateSAMLConnection,
		connect.WithSchema(frontendServiceMethods.ByName("UpdateSAMLConnection")),
		connect.WithHandlerOptions(opts...),
	)
	frontendServiceDeleteSAMLConnectionHandler := connect.NewUnaryHandler(
		FrontendServiceDeleteSAMLConnectionProcedure,
		svc.DeleteSAMLConnection,
		connect.WithSchema(frontendServiceMethods.ByName("DeleteSAMLConnection")),
		connect.WithHandlerOptions(opts...),
	)
	frontendServiceListOIDCConnectionsHandler := connect.NewUnaryHandler(
		FrontendServiceListOIDCConnectionsProcedure,
		svc.ListOIDCConnections,
		connect.WithSchema(frontendServiceMethods.ByName("ListOIDCConnections")),
		connect.WithHandlerOptions(opts...),
	)
	frontendServiceGetOIDCConnectionHandler := connect.NewUnaryHandler(
		FrontendServiceGetOIDCConnectionProcedure,
		svc.GetOIDCConnection,
		connect.WithSchema(frontendServiceMethods.ByName("GetOIDCConnection")),
		connect.WithHandlerOptions(opts...),
	)
	frontendServiceCreateOIDCConnectionHandler := connect.NewUnaryHandler(
		FrontendServiceCreateOIDCConnectionProcedure,
		svc.CreateOIDCConnection,
		connect.WithSchema(frontendServiceMethods.ByName("CreateOIDCConnection")),
		connect.WithHandlerOptions(opts...),
	)
	frontendServiceUpdateOIDCConnectionHandler := connect.NewUnaryHandler(
		FrontendServiceUpdateOIDCConnectionProcedure,
		svc.UpdateOIDCConnection,
		connect.WithSchema(frontendServiceMethods.ByName("UpdateOIDCConnection")),
		connect.WithHandlerOptions(opts...),
	)
	frontendServiceDeleteOIDCConnectionHandler := connect.NewUnaryHandler(
		FrontendServiceDeleteOIDCConnectionProcedure,
		svc.DeleteOIDCConnection,
		connect.WithSchema(frontendServiceMethods.ByName("DeleteOIDCConnection")),
		connect.WithHandlerOptions(opts...),
	)
	frontendServiceListSCIMAPIKeysHandler := connect.NewUnaryHandler(
		FrontendServiceListSCIMAPIKeysProcedure,
		svc.ListSCIMAPIKeys,
		connect.WithSchema(frontendServiceMethods.ByName("ListSCIMAPIKeys")),
		connect.WithHandlerOptions(opts...),
	)
	frontendServiceGetSCIMAPIKeyHandler := connect.NewUnaryHandler(
		FrontendServiceGetSCIMAPIKeyProcedure,
		svc.GetSCIMAPIKey,
		connect.WithSchema(frontendServiceMethods.ByName("GetSCIMAPIKey")),
		connect.WithHandlerOptions(opts...),
	)
	frontendServiceCreateSCIMAPIKeyHandler := connect.NewUnaryHandler(
		FrontendServiceCreateSCIMAPIKeyProcedure,
		svc.CreateSCIMAPIKey,
		connect.WithSchema(frontendServiceMethods.ByName("CreateSCIMAPIKey")),
		connect.WithHandlerOptions(opts...),
	)
	frontendServiceUpdateSCIMAPIKeyHandler := connect.NewUnaryHandler(
		FrontendServiceUpdateSCIMAPIKeyProcedure,
		svc.UpdateSCIMAPIKey,
		connect.WithSchema(frontendServiceMethods.ByName("UpdateSCIMAPIKey")),
		connect.WithHandlerOptions(opts...),
	)
	frontendServiceDeleteSCIMAPIKeyHandler := connect.NewUnaryHandler(
		FrontendServiceDeleteSCIMAPIKeyProcedure,
		svc.DeleteSCIMAPIKey,
		connect.WithSchema(frontendServiceMethods.ByName("DeleteSCIMAPIKey")),
		connect.WithHandlerOptions(opts...),
	)
	frontendServiceRevokeSCIMAPIKeyHandler := connect.NewUnaryHandler(
		FrontendServiceRevokeSCIMAPIKeyProcedure,
		svc.RevokeSCIMAPIKey,
		connect.WithSchema(frontendServiceMethods.ByName("RevokeSCIMAPIKey")),
		connect.WithHandlerOptions(opts...),
	)
	frontendServiceWhoamiHandler := connect.NewUnaryHandler(
		FrontendServiceWhoamiProcedure,
		svc.Whoami,
		connect.WithSchema(frontendServiceMethods.ByName("Whoami")),
		connect.WithHandlerOptions(opts...),
	)
	frontendServiceListMyPasskeysHandler := connect.NewUnaryHandler(
		FrontendServiceListMyPasskeysProcedure,
		svc.ListMyPasskeys,
		connect.WithSchema(frontendServiceMethods.ByName("ListMyPasskeys")),
		connect.WithHandlerOptions(opts...),
	)
	frontendServiceDeleteMyPasskeyHandler := connect.NewUnaryHandler(
		FrontendServiceDeleteMyPasskeyProcedure,
		svc.DeleteMyPasskey,
		connect.WithSchema(frontendServiceMethods.ByName("DeleteMyPasskey")),
		connect.WithHandlerOptions(opts...),
	)
	frontendServiceGetPasskeyOptionsHandler := connect.NewUnaryHandler(
		FrontendServiceGetPasskeyOptionsProcedure,
		svc.GetPasskeyOptions,
		connect.WithSchema(frontendServiceMethods.ByName("GetPasskeyOptions")),
		connect.WithHandlerOptions(opts...),
	)
	frontendServiceRegisterPasskeyHandler := connect.NewUnaryHandler(
		FrontendServiceRegisterPasskeyProcedure,
		svc.RegisterPasskey,
		connect.WithSchema(frontendServiceMethods.ByName("RegisterPasskey")),
		connect.WithHandlerOptions(opts...),
	)
	frontendServiceGetAuthenticatorAppOptionsHandler := connect.NewUnaryHandler(
		FrontendServiceGetAuthenticatorAppOptionsProcedure,
		svc.GetAuthenticatorAppOptions,
		connect.WithSchema(frontendServiceMethods.ByName("GetAuthenticatorAppOptions")),
		connect.WithHandlerOptions(opts...),
	)
	frontendServiceRegisterAuthenticatorAppHandler := connect.NewUnaryHandler(
		FrontendServiceRegisterAuthenticatorAppProcedure,
		svc.RegisterAuthenticatorApp,
		connect.WithSchema(frontendServiceMethods.ByName("RegisterAuthenticatorApp")),
		connect.WithHandlerOptions(opts...),
	)
	frontendServiceListUserInvitesHandler := connect.NewUnaryHandler(
		FrontendServiceListUserInvitesProcedure,
		svc.ListUserInvites,
		connect.WithSchema(frontendServiceMethods.ByName("ListUserInvites")),
		connect.WithHandlerOptions(opts...),
	)
	frontendServiceGetUserInviteHandler := connect.NewUnaryHandler(
		FrontendServiceGetUserInviteProcedure,
		svc.GetUserInvite,
		connect.WithSchema(frontendServiceMethods.ByName("GetUserInvite")),
		connect.WithHandlerOptions(opts...),
	)
	frontendServiceCreateUserInviteHandler := connect.NewUnaryHandler(
		FrontendServiceCreateUserInviteProcedure,
		svc.CreateUserInvite,
		connect.WithSchema(frontendServiceMethods.ByName("CreateUserInvite")),
		connect.WithHandlerOptions(opts...),
	)
	frontendServiceDeleteUserInviteHandler := connect.NewUnaryHandler(
		FrontendServiceDeleteUserInviteProcedure,
		svc.DeleteUserInvite,
		connect.WithSchema(frontendServiceMethods.ByName("DeleteUserInvite")),
		connect.WithHandlerOptions(opts...),
	)
	frontendServiceListSwitchableOrganizationsHandler := connect.NewUnaryHandler(
		FrontendServiceListSwitchableOrganizationsProcedure,
		svc.ListSwitchableOrganizations,
		connect.WithSchema(frontendServiceMethods.ByName("ListSwitchableOrganizations")),
		connect.WithHandlerOptions(opts...),
	)
	frontendServiceGetRBACPolicyHandler := connect.NewUnaryHandler(
		FrontendServiceGetRBACPolicyProcedure,
		svc.GetRBACPolicy,
		connect.WithSchema(frontendServiceMethods.ByName("GetRBACPolicy")),
		connect.WithHandlerOptions(opts...),
	)
	frontendServiceListRolesHandler := connect.NewUnaryHandler(
		FrontendServiceListRolesProcedure,
		svc.ListRoles,
		connect.WithSchema(frontendServiceMethods.ByName("ListRoles")),
		connect.WithHandlerOptions(opts...),
	)
	frontendServiceGetRoleHandler := connect.NewUnaryHandler(
		FrontendServiceGetRoleProcedure,
		svc.GetRole,
		connect.WithSchema(frontendServiceMethods.ByName("GetRole")),
		connect.WithHandlerOptions(opts...),
	)
	frontendServiceCreateRoleHandler := connect.NewUnaryHandler(
		FrontendServiceCreateRoleProcedure,
		svc.CreateRole,
		connect.WithSchema(frontendServiceMethods.ByName("CreateRole")),
		connect.WithHandlerOptions(opts...),
	)
	frontendServiceUpdateRoleHandler := connect.NewUnaryHandler(
		FrontendServiceUpdateRoleProcedure,
		svc.UpdateRole,
		connect.WithSchema(frontendServiceMethods.ByName("UpdateRole")),
		connect.WithHandlerOptions(opts...),
	)
	frontendServiceDeleteRoleHandler := connect.NewUnaryHandler(
		FrontendServiceDeleteRoleProcedure,
		svc.DeleteRole,
		connect.WithSchema(frontendServiceMethods.ByName("DeleteRole")),
		connect.WithHandlerOptions(opts...),
	)
	frontendServiceListUserRoleAssignmentsHandler := connect.NewUnaryHandler(
		FrontendServiceListUserRoleAssignmentsProcedure,
		svc.ListUserRoleAssignments,
		connect.WithSchema(frontendServiceMethods.ByName("ListUserRoleAssignments")),
		connect.WithHandlerOptions(opts...),
	)
	frontendServiceGetUserRoleAssignmentHandler := connect.NewUnaryHandler(
		FrontendServiceGetUserRoleAssignmentProcedure,
		svc.GetUserRoleAssignment,
		connect.WithSchema(frontendServiceMethods.ByName("GetUserRoleAssignment")),
		connect.WithHandlerOptions(opts...),
	)
	frontendServiceCreateUserRoleAssignmentHandler := connect.NewUnaryHandler(
		FrontendServiceCreateUserRoleAssignmentProcedure,
		svc.CreateUserRoleAssignment,
		connect.WithSchema(frontendServiceMethods.ByName("CreateUserRoleAssignment")),
		connect.WithHandlerOptions(opts...),
	)
	frontendServiceDeleteUserRoleAssignmentHandler := connect.NewUnaryHandler(
		FrontendServiceDeleteUserRoleAssignmentProcedure,
		svc.DeleteUserRoleAssignment,
		connect.WithSchema(frontendServiceMethods.ByName("DeleteUserRoleAssignment")),
		connect.WithHandlerOptions(opts...),
	)
	frontendServiceCreateAPIKeyHandler := connect.NewUnaryHandler(
		FrontendServiceCreateAPIKeyProcedure,
		svc.CreateAPIKey,
		connect.WithSchema(frontendServiceMethods.ByName("CreateAPIKey")),
		connect.WithHandlerOptions(opts...),
	)
	frontendServiceDeleteAPIKeyHandler := connect.NewUnaryHandler(
		FrontendServiceDeleteAPIKeyProcedure,
		svc.DeleteAPIKey,
		connect.WithSchema(frontendServiceMethods.ByName("DeleteAPIKey")),
		connect.WithHandlerOptions(opts...),
	)
	frontendServiceGetAPIKeyHandler := connect.NewUnaryHandler(
		FrontendServiceGetAPIKeyProcedure,
		svc.GetAPIKey,
		connect.WithSchema(frontendServiceMethods.ByName("GetAPIKey")),
		connect.WithHandlerOptions(opts...),
	)
	frontendServiceListAPIKeysHandler := connect.NewUnaryHandler(
		FrontendServiceListAPIKeysProcedure,
		svc.ListAPIKeys,
		connect.WithSchema(frontendServiceMethods.ByName("ListAPIKeys")),
		connect.WithHandlerOptions(opts...),
	)
	frontendServiceRevokeAPIKeyHandler := connect.NewUnaryHandler(
		FrontendServiceRevokeAPIKeyProcedure,
		svc.RevokeAPIKey,
		connect.WithSchema(frontendServiceMethods.ByName("RevokeAPIKey")),
		connect.WithHandlerOptions(opts...),
	)
	frontendServiceUpdateAPIKeyHandler := connect.NewUnaryHandler(
		FrontendServiceUpdateAPIKeyProcedure,
		svc.UpdateAPIKey,
		connect.WithSchema(frontendServiceMethods.ByName("UpdateAPIKey")),
		connect.WithHandlerOptions(opts...),
	)
	frontendServiceCreateAPIKeyRoleAssignmentHandler := connect.NewUnaryHandler(
		FrontendServiceCreateAPIKeyRoleAssignmentProcedure,
		svc.CreateAPIKeyRoleAssignment,
		connect.WithSchema(frontendServiceMethods.ByName("CreateAPIKeyRoleAssignment")),
		connect.WithHandlerOptions(opts...),
	)
	frontendServiceDeleteAPIKeyRoleAssignmentHandler := connect.NewUnaryHandler(
		FrontendServiceDeleteAPIKeyRoleAssignmentProcedure,
		svc.DeleteAPIKeyRoleAssignment,
		connect.WithSchema(frontendServiceMethods.ByName("DeleteAPIKeyRoleAssignment")),
		connect.WithHandlerOptions(opts...),
	)
	frontendServiceListAPIKeyRoleAssignmentsHandler := connect.NewUnaryHandler(
		FrontendServiceListAPIKeyRoleAssignmentsProcedure,
		svc.ListAPIKeyRoleAssignments,
		connect.WithSchema(frontendServiceMethods.ByName("ListAPIKeyRoleAssignments")),
		connect.WithHandlerOptions(opts...),
	)
	frontendServiceListAuditLogEventsHandler := connect.NewUnaryHandler(
		FrontendServiceListAuditLogEventsProcedure,
		svc.ListAuditLogEvents,
		connect.WithSchema(frontendServiceMethods.ByName("ListAuditLogEvents")),
		connect.WithHandlerOptions(opts...),
	)
	return "/tesseral.frontend.v1.FrontendService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case FrontendServiceLogoutProcedure:
			frontendServiceLogoutHandler.ServeHTTP(w, r)
		case FrontendServiceRefreshProcedure:
			frontendServiceRefreshHandler.ServeHTTP(w, r)
		case FrontendServiceGetProjectProcedure:
			frontendServiceGetProjectHandler.ServeHTTP(w, r)
		case FrontendServiceGetOrganizationProcedure:
			frontendServiceGetOrganizationHandler.ServeHTTP(w, r)
		case FrontendServiceUpdateOrganizationProcedure:
			frontendServiceUpdateOrganizationHandler.ServeHTTP(w, r)
		case FrontendServiceGetOrganizationGoogleHostedDomainsProcedure:
			frontendServiceGetOrganizationGoogleHostedDomainsHandler.ServeHTTP(w, r)
		case FrontendServiceUpdateOrganizationGoogleHostedDomainsProcedure:
			frontendServiceUpdateOrganizationGoogleHostedDomainsHandler.ServeHTTP(w, r)
		case FrontendServiceGetOrganizationMicrosoftTenantIDsProcedure:
			frontendServiceGetOrganizationMicrosoftTenantIDsHandler.ServeHTTP(w, r)
		case FrontendServiceUpdateOrganizationMicrosoftTenantIDsProcedure:
			frontendServiceUpdateOrganizationMicrosoftTenantIDsHandler.ServeHTTP(w, r)
		case FrontendServiceListUsersProcedure:
			frontendServiceListUsersHandler.ServeHTTP(w, r)
		case FrontendServiceGetUserProcedure:
			frontendServiceGetUserHandler.ServeHTTP(w, r)
		case FrontendServiceUpdateUserProcedure:
			frontendServiceUpdateUserHandler.ServeHTTP(w, r)
		case FrontendServiceUpdateMeProcedure:
			frontendServiceUpdateMeHandler.ServeHTTP(w, r)
		case FrontendServiceDeleteUserProcedure:
			frontendServiceDeleteUserHandler.ServeHTTP(w, r)
		case FrontendServiceSetPasswordProcedure:
			frontendServiceSetPasswordHandler.ServeHTTP(w, r)
		case FrontendServiceListSAMLConnectionsProcedure:
			frontendServiceListSAMLConnectionsHandler.ServeHTTP(w, r)
		case FrontendServiceGetSAMLConnectionProcedure:
			frontendServiceGetSAMLConnectionHandler.ServeHTTP(w, r)
		case FrontendServiceCreateSAMLConnectionProcedure:
			frontendServiceCreateSAMLConnectionHandler.ServeHTTP(w, r)
		case FrontendServiceUpdateSAMLConnectionProcedure:
			frontendServiceUpdateSAMLConnectionHandler.ServeHTTP(w, r)
		case FrontendServiceDeleteSAMLConnectionProcedure:
			frontendServiceDeleteSAMLConnectionHandler.ServeHTTP(w, r)
		case FrontendServiceListOIDCConnectionsProcedure:
			frontendServiceListOIDCConnectionsHandler.ServeHTTP(w, r)
		case FrontendServiceGetOIDCConnectionProcedure:
			frontendServiceGetOIDCConnectionHandler.ServeHTTP(w, r)
		case FrontendServiceCreateOIDCConnectionProcedure:
			frontendServiceCreateOIDCConnectionHandler.ServeHTTP(w, r)
		case FrontendServiceUpdateOIDCConnectionProcedure:
			frontendServiceUpdateOIDCConnectionHandler.ServeHTTP(w, r)
		case FrontendServiceDeleteOIDCConnectionProcedure:
			frontendServiceDeleteOIDCConnectionHandler.ServeHTTP(w, r)
		case FrontendServiceListSCIMAPIKeysProcedure:
			frontendServiceListSCIMAPIKeysHandler.ServeHTTP(w, r)
		case FrontendServiceGetSCIMAPIKeyProcedure:
			frontendServiceGetSCIMAPIKeyHandler.ServeHTTP(w, r)
		case FrontendServiceCreateSCIMAPIKeyProcedure:
			frontendServiceCreateSCIMAPIKeyHandler.ServeHTTP(w, r)
		case FrontendServiceUpdateSCIMAPIKeyProcedure:
			frontendServiceUpdateSCIMAPIKeyHandler.ServeHTTP(w, r)
		case FrontendServiceDeleteSCIMAPIKeyProcedure:
			frontendServiceDeleteSCIMAPIKeyHandler.ServeHTTP(w, r)
		case FrontendServiceRevokeSCIMAPIKeyProcedure:
			frontendServiceRevokeSCIMAPIKeyHandler.ServeHTTP(w, r)
		case FrontendServiceWhoamiProcedure:
			frontendServiceWhoamiHandler.ServeHTTP(w, r)
		case FrontendServiceListMyPasskeysProcedure:
			frontendServiceListMyPasskeysHandler.ServeHTTP(w, r)
		case FrontendServiceDeleteMyPasskeyProcedure:
			frontendServiceDeleteMyPasskeyHandler.ServeHTTP(w, r)
		case FrontendServiceGetPasskeyOptionsProcedure:
			frontendServiceGetPasskeyOptionsHandler.ServeHTTP(w, r)
		case FrontendServiceRegisterPasskeyProcedure:
			frontendServiceRegisterPasskeyHandler.ServeHTTP(w, r)
		case FrontendServiceGetAuthenticatorAppOptionsProcedure:
			frontendServiceGetAuthenticatorAppOptionsHandler.ServeHTTP(w, r)
		case FrontendServiceRegisterAuthenticatorAppProcedure:
			frontendServiceRegisterAuthenticatorAppHandler.ServeHTTP(w, r)
		case FrontendServiceListUserInvitesProcedure:
			frontendServiceListUserInvitesHandler.ServeHTTP(w, r)
		case FrontendServiceGetUserInviteProcedure:
			frontendServiceGetUserInviteHandler.ServeHTTP(w, r)
		case FrontendServiceCreateUserInviteProcedure:
			frontendServiceCreateUserInviteHandler.ServeHTTP(w, r)
		case FrontendServiceDeleteUserInviteProcedure:
			frontendServiceDeleteUserInviteHandler.ServeHTTP(w, r)
		case FrontendServiceListSwitchableOrganizationsProcedure:
			frontendServiceListSwitchableOrganizationsHandler.ServeHTTP(w, r)
		case FrontendServiceGetRBACPolicyProcedure:
			frontendServiceGetRBACPolicyHandler.ServeHTTP(w, r)
		case FrontendServiceListRolesProcedure:
			frontendServiceListRolesHandler.ServeHTTP(w, r)
		case FrontendServiceGetRoleProcedure:
			frontendServiceGetRoleHandler.ServeHTTP(w, r)
		case FrontendServiceCreateRoleProcedure:
			frontendServiceCreateRoleHandler.ServeHTTP(w, r)
		case FrontendServiceUpdateRoleProcedure:
			frontendServiceUpdateRoleHandler.ServeHTTP(w, r)
		case FrontendServiceDeleteRoleProcedure:
			frontendServiceDeleteRoleHandler.ServeHTTP(w, r)
		case FrontendServiceListUserRoleAssignmentsProcedure:
			frontendServiceListUserRoleAssignmentsHandler.ServeHTTP(w, r)
		case FrontendServiceGetUserRoleAssignmentProcedure:
			frontendServiceGetUserRoleAssignmentHandler.ServeHTTP(w, r)
		case FrontendServiceCreateUserRoleAssignmentProcedure:
			frontendServiceCreateUserRoleAssignmentHandler.ServeHTTP(w, r)
		case FrontendServiceDeleteUserRoleAssignmentProcedure:
			frontendServiceDeleteUserRoleAssignmentHandler.ServeHTTP(w, r)
		case FrontendServiceCreateAPIKeyProcedure:
			frontendServiceCreateAPIKeyHandler.ServeHTTP(w, r)
		case FrontendServiceDeleteAPIKeyProcedure:
			frontendServiceDeleteAPIKeyHandler.ServeHTTP(w, r)
		case FrontendServiceGetAPIKeyProcedure:
			frontendServiceGetAPIKeyHandler.ServeHTTP(w, r)
		case FrontendServiceListAPIKeysProcedure:
			frontendServiceListAPIKeysHandler.ServeHTTP(w, r)
		case FrontendServiceRevokeAPIKeyProcedure:
			frontendServiceRevokeAPIKeyHandler.ServeHTTP(w, r)
		case FrontendServiceUpdateAPIKeyProcedure:
			frontendServiceUpdateAPIKeyHandler.ServeHTTP(w, r)
		case FrontendServiceCreateAPIKeyRoleAssignmentProcedure:
			frontendServiceCreateAPIKeyRoleAssignmentHandler.ServeHTTP(w, r)
		case FrontendServiceDeleteAPIKeyRoleAssignmentProcedure:
			frontendServiceDeleteAPIKeyRoleAssignmentHandler.ServeHTTP(w, r)
		case FrontendServiceListAPIKeyRoleAssignmentsProcedure:
			frontendServiceListAPIKeyRoleAssignmentsHandler.ServeHTTP(w, r)
		case FrontendServiceListAuditLogEventsProcedure:
			frontendServiceListAuditLogEventsHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedFrontendServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedFrontendServiceHandler struct{}

func (UnimplementedFrontendServiceHandler) Logout(context.Context, *connect.Request[v1.LogoutRequest]) (*connect.Response[v1.LogoutResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("tesseral.frontend.v1.FrontendService.Logout is not implemented"))
}

func (UnimplementedFrontendServiceHandler) Refresh(context.Context, *connect.Request[v1.RefreshRequest]) (*connect.Response[v1.RefreshResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("tesseral.frontend.v1.FrontendService.Refresh is not implemented"))
}

func (UnimplementedFrontendServiceHandler) GetProject(context.Context, *connect.Request[v1.GetProjectRequest]) (*connect.Response[v1.GetProjectResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("tesseral.frontend.v1.FrontendService.GetProject is not implemented"))
}

func (UnimplementedFrontendServiceHandler) GetOrganization(context.Context, *connect.Request[v1.GetOrganizationRequest]) (*connect.Response[v1.GetOrganizationResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("tesseral.frontend.v1.FrontendService.GetOrganization is not implemented"))
}

func (UnimplementedFrontendServiceHandler) UpdateOrganization(context.Context, *connect.Request[v1.UpdateOrganizationRequest]) (*connect.Response[v1.UpdateOrganizationResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("tesseral.frontend.v1.FrontendService.UpdateOrganization is not implemented"))
}

func (UnimplementedFrontendServiceHandler) GetOrganizationGoogleHostedDomains(context.Context, *connect.Request[v1.GetOrganizationGoogleHostedDomainsRequest]) (*connect.Response[v1.GetOrganizationGoogleHostedDomainsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("tesseral.frontend.v1.FrontendService.GetOrganizationGoogleHostedDomains is not implemented"))
}

func (UnimplementedFrontendServiceHandler) UpdateOrganizationGoogleHostedDomains(context.Context, *connect.Request[v1.UpdateOrganizationGoogleHostedDomainsRequest]) (*connect.Response[v1.UpdateOrganizationGoogleHostedDomainsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("tesseral.frontend.v1.FrontendService.UpdateOrganizationGoogleHostedDomains is not implemented"))
}

func (UnimplementedFrontendServiceHandler) GetOrganizationMicrosoftTenantIDs(context.Context, *connect.Request[v1.GetOrganizationMicrosoftTenantIDsRequest]) (*connect.Response[v1.GetOrganizationMicrosoftTenantIDsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("tesseral.frontend.v1.FrontendService.GetOrganizationMicrosoftTenantIDs is not implemented"))
}

func (UnimplementedFrontendServiceHandler) UpdateOrganizationMicrosoftTenantIDs(context.Context, *connect.Request[v1.UpdateOrganizationMicrosoftTenantIDsRequest]) (*connect.Response[v1.UpdateOrganizationMicrosoftTenantIDsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("tesseral.frontend.v1.FrontendService.UpdateOrganizationMicrosoftTenantIDs is not implemented"))
}

func (UnimplementedFrontendServiceHandler) ListUsers(context.Context, *connect.Request[v1.ListUsersRequest]) (*connect.Response[v1.ListUsersResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("tesseral.frontend.v1.FrontendService.ListUsers is not implemented"))
}

func (UnimplementedFrontendServiceHandler) GetUser(context.Context, *connect.Request[v1.GetUserRequest]) (*connect.Response[v1.GetUserResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("tesseral.frontend.v1.FrontendService.GetUser is not implemented"))
}

func (UnimplementedFrontendServiceHandler) UpdateUser(context.Context, *connect.Request[v1.UpdateUserRequest]) (*connect.Response[v1.UpdateUserResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("tesseral.frontend.v1.FrontendService.UpdateUser is not implemented"))
}

func (UnimplementedFrontendServiceHandler) UpdateMe(context.Context, *connect.Request[v1.UpdateMeRequest]) (*connect.Response[v1.UpdateMeResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("tesseral.frontend.v1.FrontendService.UpdateMe is not implemented"))
}

func (UnimplementedFrontendServiceHandler) DeleteUser(context.Context, *connect.Request[v1.DeleteUserRequest]) (*connect.Response[v1.DeleteUserResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("tesseral.frontend.v1.FrontendService.DeleteUser is not implemented"))
}

func (UnimplementedFrontendServiceHandler) SetPassword(context.Context, *connect.Request[v1.SetPasswordRequest]) (*connect.Response[v1.SetPasswordResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("tesseral.frontend.v1.FrontendService.SetPassword is not implemented"))
}

func (UnimplementedFrontendServiceHandler) ListSAMLConnections(context.Context, *connect.Request[v1.ListSAMLConnectionsRequest]) (*connect.Response[v1.ListSAMLConnectionsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("tesseral.frontend.v1.FrontendService.ListSAMLConnections is not implemented"))
}

func (UnimplementedFrontendServiceHandler) GetSAMLConnection(context.Context, *connect.Request[v1.GetSAMLConnectionRequest]) (*connect.Response[v1.GetSAMLConnectionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("tesseral.frontend.v1.FrontendService.GetSAMLConnection is not implemented"))
}

func (UnimplementedFrontendServiceHandler) CreateSAMLConnection(context.Context, *connect.Request[v1.CreateSAMLConnectionRequest]) (*connect.Response[v1.CreateSAMLConnectionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("tesseral.frontend.v1.FrontendService.CreateSAMLConnection is not implemented"))
}

func (UnimplementedFrontendServiceHandler) UpdateSAMLConnection(context.Context, *connect.Request[v1.UpdateSAMLConnectionRequest]) (*connect.Response[v1.UpdateSAMLConnectionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("tesseral.frontend.v1.FrontendService.UpdateSAMLConnection is not implemented"))
}

func (UnimplementedFrontendServiceHandler) DeleteSAMLConnection(context.Context, *connect.Request[v1.DeleteSAMLConnectionRequest]) (*connect.Response[v1.DeleteSAMLConnectionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("tesseral.frontend.v1.FrontendService.DeleteSAMLConnection is not implemented"))
}

func (UnimplementedFrontendServiceHandler) ListOIDCConnections(context.Context, *connect.Request[v1.ListOIDCConnectionsRequest]) (*connect.Response[v1.ListOIDCConnectionsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("tesseral.frontend.v1.FrontendService.ListOIDCConnections is not implemented"))
}

func (UnimplementedFrontendServiceHandler) GetOIDCConnection(context.Context, *connect.Request[v1.GetOIDCConnectionRequest]) (*connect.Response[v1.GetOIDCConnectionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("tesseral.frontend.v1.FrontendService.GetOIDCConnection is not implemented"))
}

func (UnimplementedFrontendServiceHandler) CreateOIDCConnection(context.Context, *connect.Request[v1.CreateOIDCConnectionRequest]) (*connect.Response[v1.CreateOIDCConnectionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("tesseral.frontend.v1.FrontendService.CreateOIDCConnection is not implemented"))
}

func (UnimplementedFrontendServiceHandler) UpdateOIDCConnection(context.Context, *connect.Request[v1.UpdateOIDCConnectionRequest]) (*connect.Response[v1.UpdateOIDCConnectionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("tesseral.frontend.v1.FrontendService.UpdateOIDCConnection is not implemented"))
}

func (UnimplementedFrontendServiceHandler) DeleteOIDCConnection(context.Context, *connect.Request[v1.DeleteOIDCConnectionRequest]) (*connect.Response[v1.DeleteOIDCConnectionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("tesseral.frontend.v1.FrontendService.DeleteOIDCConnection is not implemented"))
}

func (UnimplementedFrontendServiceHandler) ListSCIMAPIKeys(context.Context, *connect.Request[v1.ListSCIMAPIKeysRequest]) (*connect.Response[v1.ListSCIMAPIKeysResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("tesseral.frontend.v1.FrontendService.ListSCIMAPIKeys is not implemented"))
}

func (UnimplementedFrontendServiceHandler) GetSCIMAPIKey(context.Context, *connect.Request[v1.GetSCIMAPIKeyRequest]) (*connect.Response[v1.GetSCIMAPIKeyResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("tesseral.frontend.v1.FrontendService.GetSCIMAPIKey is not implemented"))
}

func (UnimplementedFrontendServiceHandler) CreateSCIMAPIKey(context.Context, *connect.Request[v1.CreateSCIMAPIKeyRequest]) (*connect.Response[v1.CreateSCIMAPIKeyResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("tesseral.frontend.v1.FrontendService.CreateSCIMAPIKey is not implemented"))
}

func (UnimplementedFrontendServiceHandler) UpdateSCIMAPIKey(context.Context, *connect.Request[v1.UpdateSCIMAPIKeyRequest]) (*connect.Response[v1.UpdateSCIMAPIKeyResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("tesseral.frontend.v1.FrontendService.UpdateSCIMAPIKey is not implemented"))
}

func (UnimplementedFrontendServiceHandler) DeleteSCIMAPIKey(context.Context, *connect.Request[v1.DeleteSCIMAPIKeyRequest]) (*connect.Response[v1.DeleteSCIMAPIKeyResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("tesseral.frontend.v1.FrontendService.DeleteSCIMAPIKey is not implemented"))
}

func (UnimplementedFrontendServiceHandler) RevokeSCIMAPIKey(context.Context, *connect.Request[v1.RevokeSCIMAPIKeyRequest]) (*connect.Response[v1.RevokeSCIMAPIKeyResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("tesseral.frontend.v1.FrontendService.RevokeSCIMAPIKey is not implemented"))
}

func (UnimplementedFrontendServiceHandler) Whoami(context.Context, *connect.Request[v1.WhoamiRequest]) (*connect.Response[v1.WhoamiResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("tesseral.frontend.v1.FrontendService.Whoami is not implemented"))
}

func (UnimplementedFrontendServiceHandler) ListMyPasskeys(context.Context, *connect.Request[v1.ListMyPasskeysRequest]) (*connect.Response[v1.ListMyPasskeysResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("tesseral.frontend.v1.FrontendService.ListMyPasskeys is not implemented"))
}

func (UnimplementedFrontendServiceHandler) DeleteMyPasskey(context.Context, *connect.Request[v1.DeleteMyPasskeyRequest]) (*connect.Response[v1.DeleteMyPasskeyResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("tesseral.frontend.v1.FrontendService.DeleteMyPasskey is not implemented"))
}

func (UnimplementedFrontendServiceHandler) GetPasskeyOptions(context.Context, *connect.Request[v1.GetPasskeyOptionsRequest]) (*connect.Response[v1.GetPasskeyOptionsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("tesseral.frontend.v1.FrontendService.GetPasskeyOptions is not implemented"))
}

func (UnimplementedFrontendServiceHandler) RegisterPasskey(context.Context, *connect.Request[v1.RegisterPasskeyRequest]) (*connect.Response[v1.RegisterPasskeyResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("tesseral.frontend.v1.FrontendService.RegisterPasskey is not implemented"))
}

func (UnimplementedFrontendServiceHandler) GetAuthenticatorAppOptions(context.Context, *connect.Request[v1.GetAuthenticatorAppOptionsRequest]) (*connect.Response[v1.GetAuthenticatorAppOptionsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("tesseral.frontend.v1.FrontendService.GetAuthenticatorAppOptions is not implemented"))
}

func (UnimplementedFrontendServiceHandler) RegisterAuthenticatorApp(context.Context, *connect.Request[v1.RegisterAuthenticatorAppRequest]) (*connect.Response[v1.RegisterAuthenticatorAppResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("tesseral.frontend.v1.FrontendService.RegisterAuthenticatorApp is not implemented"))
}

func (UnimplementedFrontendServiceHandler) ListUserInvites(context.Context, *connect.Request[v1.ListUserInvitesRequest]) (*connect.Response[v1.ListUserInvitesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("tesseral.frontend.v1.FrontendService.ListUserInvites is not implemented"))
}

func (UnimplementedFrontendServiceHandler) GetUserInvite(context.Context, *connect.Request[v1.GetUserInviteRequest]) (*connect.Response[v1.GetUserInviteResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("tesseral.frontend.v1.FrontendService.GetUserInvite is not implemented"))
}

func (UnimplementedFrontendServiceHandler) CreateUserInvite(context.Context, *connect.Request[v1.CreateUserInviteRequest]) (*connect.Response[v1.CreateUserInviteResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("tesseral.frontend.v1.FrontendService.CreateUserInvite is not implemented"))
}

func (UnimplementedFrontendServiceHandler) DeleteUserInvite(context.Context, *connect.Request[v1.DeleteUserInviteRequest]) (*connect.Response[v1.DeleteUserInviteResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("tesseral.frontend.v1.FrontendService.DeleteUserInvite is not implemented"))
}

func (UnimplementedFrontendServiceHandler) ListSwitchableOrganizations(context.Context, *connect.Request[v1.ListSwitchableOrganizationsRequest]) (*connect.Response[v1.ListSwitchableOrganizationsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("tesseral.frontend.v1.FrontendService.ListSwitchableOrganizations is not implemented"))
}

func (UnimplementedFrontendServiceHandler) GetRBACPolicy(context.Context, *connect.Request[v1.GetRBACPolicyRequest]) (*connect.Response[v1.GetRBACPolicyResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("tesseral.frontend.v1.FrontendService.GetRBACPolicy is not implemented"))
}

func (UnimplementedFrontendServiceHandler) ListRoles(context.Context, *connect.Request[v1.ListRolesRequest]) (*connect.Response[v1.ListRolesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("tesseral.frontend.v1.FrontendService.ListRoles is not implemented"))
}

func (UnimplementedFrontendServiceHandler) GetRole(context.Context, *connect.Request[v1.GetRoleRequest]) (*connect.Response[v1.GetRoleResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("tesseral.frontend.v1.FrontendService.GetRole is not implemented"))
}

func (UnimplementedFrontendServiceHandler) CreateRole(context.Context, *connect.Request[v1.CreateRoleRequest]) (*connect.Response[v1.CreateRoleResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("tesseral.frontend.v1.FrontendService.CreateRole is not implemented"))
}

func (UnimplementedFrontendServiceHandler) UpdateRole(context.Context, *connect.Request[v1.UpdateRoleRequest]) (*connect.Response[v1.UpdateRoleResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("tesseral.frontend.v1.FrontendService.UpdateRole is not implemented"))
}

func (UnimplementedFrontendServiceHandler) DeleteRole(context.Context, *connect.Request[v1.DeleteRoleRequest]) (*connect.Response[v1.DeleteRoleResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("tesseral.frontend.v1.FrontendService.DeleteRole is not implemented"))
}

func (UnimplementedFrontendServiceHandler) ListUserRoleAssignments(context.Context, *connect.Request[v1.ListUserRoleAssignmentsRequest]) (*connect.Response[v1.ListUserRoleAssignmentsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("tesseral.frontend.v1.FrontendService.ListUserRoleAssignments is not implemented"))
}

func (UnimplementedFrontendServiceHandler) GetUserRoleAssignment(context.Context, *connect.Request[v1.GetUserRoleAssignmentRequest]) (*connect.Response[v1.GetUserRoleAssignmentResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("tesseral.frontend.v1.FrontendService.GetUserRoleAssignment is not implemented"))
}

func (UnimplementedFrontendServiceHandler) CreateUserRoleAssignment(context.Context, *connect.Request[v1.CreateUserRoleAssignmentRequest]) (*connect.Response[v1.CreateUserRoleAssignmentResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("tesseral.frontend.v1.FrontendService.CreateUserRoleAssignment is not implemented"))
}

func (UnimplementedFrontendServiceHandler) DeleteUserRoleAssignment(context.Context, *connect.Request[v1.DeleteUserRoleAssignmentRequest]) (*connect.Response[v1.DeleteUserRoleAssignmentResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("tesseral.frontend.v1.FrontendService.DeleteUserRoleAssignment is not implemented"))
}

func (UnimplementedFrontendServiceHandler) CreateAPIKey(context.Context, *connect.Request[v1.CreateAPIKeyRequest]) (*connect.Response[v1.CreateAPIKeyResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("tesseral.frontend.v1.FrontendService.CreateAPIKey is not implemented"))
}

func (UnimplementedFrontendServiceHandler) DeleteAPIKey(context.Context, *connect.Request[v1.DeleteAPIKeyRequest]) (*connect.Response[v1.DeleteAPIKeyResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("tesseral.frontend.v1.FrontendService.DeleteAPIKey is not implemented"))
}

func (UnimplementedFrontendServiceHandler) GetAPIKey(context.Context, *connect.Request[v1.GetAPIKeyRequest]) (*connect.Response[v1.GetAPIKeyResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("tesseral.frontend.v1.FrontendService.GetAPIKey is not implemented"))
}

func (UnimplementedFrontendServiceHandler) ListAPIKeys(context.Context, *connect.Request[v1.ListAPIKeysRequest]) (*connect.Response[v1.ListAPIKeysResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("tesseral.frontend.v1.FrontendService.ListAPIKeys is not implemented"))
}

func (UnimplementedFrontendServiceHandler) RevokeAPIKey(context.Context, *connect.Request[v1.RevokeAPIKeyRequest]) (*connect.Response[v1.RevokeAPIKeyResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("tesseral.frontend.v1.FrontendService.RevokeAPIKey is not implemented"))
}

func (UnimplementedFrontendServiceHandler) UpdateAPIKey(context.Context, *connect.Request[v1.UpdateAPIKeyRequest]) (*connect.Response[v1.UpdateAPIKeyResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("tesseral.frontend.v1.FrontendService.UpdateAPIKey is not implemented"))
}

func (UnimplementedFrontendServiceHandler) CreateAPIKeyRoleAssignment(context.Context, *connect.Request[v1.CreateAPIKeyRoleAssignmentRequest]) (*connect.Response[v1.CreateAPIKeyRoleAssignmentResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("tesseral.frontend.v1.FrontendService.CreateAPIKeyRoleAssignment is not implemented"))
}

func (UnimplementedFrontendServiceHandler) DeleteAPIKeyRoleAssignment(context.Context, *connect.Request[v1.DeleteAPIKeyRoleAssignmentRequest]) (*connect.Response[v1.DeleteAPIKeyRoleAssignmentResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("tesseral.frontend.v1.FrontendService.DeleteAPIKeyRoleAssignment is not implemented"))
}

func (UnimplementedFrontendServiceHandler) ListAPIKeyRoleAssignments(context.Context, *connect.Request[v1.ListAPIKeyRoleAssignmentsRequest]) (*connect.Response[v1.ListAPIKeyRoleAssignmentsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("tesseral.frontend.v1.FrontendService.ListAPIKeyRoleAssignments is not implemented"))
}

func (UnimplementedFrontendServiceHandler) ListAuditLogEvents(context.Context, *connect.Request[v1.ListAuditLogEventsRequest]) (*connect.Response[v1.ListAuditLogEventsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("tesseral.frontend.v1.FrontendService.ListAuditLogEvents is not implemented"))
}
