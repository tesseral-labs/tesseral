// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: tesseral/frontend/v1/frontend.proto

package frontendv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	FrontendService_Logout_FullMethodName                                = "/tesseral.frontend.v1.FrontendService/Logout"
	FrontendService_Refresh_FullMethodName                               = "/tesseral.frontend.v1.FrontendService/Refresh"
	FrontendService_GetProject_FullMethodName                            = "/tesseral.frontend.v1.FrontendService/GetProject"
	FrontendService_GetOrganization_FullMethodName                       = "/tesseral.frontend.v1.FrontendService/GetOrganization"
	FrontendService_UpdateOrganization_FullMethodName                    = "/tesseral.frontend.v1.FrontendService/UpdateOrganization"
	FrontendService_GetOrganizationGoogleHostedDomains_FullMethodName    = "/tesseral.frontend.v1.FrontendService/GetOrganizationGoogleHostedDomains"
	FrontendService_UpdateOrganizationGoogleHostedDomains_FullMethodName = "/tesseral.frontend.v1.FrontendService/UpdateOrganizationGoogleHostedDomains"
	FrontendService_GetOrganizationMicrosoftTenantIDs_FullMethodName     = "/tesseral.frontend.v1.FrontendService/GetOrganizationMicrosoftTenantIDs"
	FrontendService_UpdateOrganizationMicrosoftTenantIDs_FullMethodName  = "/tesseral.frontend.v1.FrontendService/UpdateOrganizationMicrosoftTenantIDs"
	FrontendService_ListUsers_FullMethodName                             = "/tesseral.frontend.v1.FrontendService/ListUsers"
	FrontendService_GetUser_FullMethodName                               = "/tesseral.frontend.v1.FrontendService/GetUser"
	FrontendService_UpdateUser_FullMethodName                            = "/tesseral.frontend.v1.FrontendService/UpdateUser"
	FrontendService_DeleteUser_FullMethodName                            = "/tesseral.frontend.v1.FrontendService/DeleteUser"
	FrontendService_SetPassword_FullMethodName                           = "/tesseral.frontend.v1.FrontendService/SetPassword"
	FrontendService_ListSAMLConnections_FullMethodName                   = "/tesseral.frontend.v1.FrontendService/ListSAMLConnections"
	FrontendService_GetSAMLConnection_FullMethodName                     = "/tesseral.frontend.v1.FrontendService/GetSAMLConnection"
	FrontendService_CreateSAMLConnection_FullMethodName                  = "/tesseral.frontend.v1.FrontendService/CreateSAMLConnection"
	FrontendService_UpdateSAMLConnection_FullMethodName                  = "/tesseral.frontend.v1.FrontendService/UpdateSAMLConnection"
	FrontendService_DeleteSAMLConnection_FullMethodName                  = "/tesseral.frontend.v1.FrontendService/DeleteSAMLConnection"
	FrontendService_ListSCIMAPIKeys_FullMethodName                       = "/tesseral.frontend.v1.FrontendService/ListSCIMAPIKeys"
	FrontendService_GetSCIMAPIKey_FullMethodName                         = "/tesseral.frontend.v1.FrontendService/GetSCIMAPIKey"
	FrontendService_CreateSCIMAPIKey_FullMethodName                      = "/tesseral.frontend.v1.FrontendService/CreateSCIMAPIKey"
	FrontendService_UpdateSCIMAPIKey_FullMethodName                      = "/tesseral.frontend.v1.FrontendService/UpdateSCIMAPIKey"
	FrontendService_DeleteSCIMAPIKey_FullMethodName                      = "/tesseral.frontend.v1.FrontendService/DeleteSCIMAPIKey"
	FrontendService_RevokeSCIMAPIKey_FullMethodName                      = "/tesseral.frontend.v1.FrontendService/RevokeSCIMAPIKey"
	FrontendService_Whoami_FullMethodName                                = "/tesseral.frontend.v1.FrontendService/Whoami"
	FrontendService_ListMyPasskeys_FullMethodName                        = "/tesseral.frontend.v1.FrontendService/ListMyPasskeys"
	FrontendService_DeleteMyPasskey_FullMethodName                       = "/tesseral.frontend.v1.FrontendService/DeleteMyPasskey"
	FrontendService_GetPasskeyOptions_FullMethodName                     = "/tesseral.frontend.v1.FrontendService/GetPasskeyOptions"
	FrontendService_RegisterPasskey_FullMethodName                       = "/tesseral.frontend.v1.FrontendService/RegisterPasskey"
	FrontendService_GetAuthenticatorAppOptions_FullMethodName            = "/tesseral.frontend.v1.FrontendService/GetAuthenticatorAppOptions"
	FrontendService_RegisterAuthenticatorApp_FullMethodName              = "/tesseral.frontend.v1.FrontendService/RegisterAuthenticatorApp"
	FrontendService_ListUserInvites_FullMethodName                       = "/tesseral.frontend.v1.FrontendService/ListUserInvites"
	FrontendService_GetUserInvite_FullMethodName                         = "/tesseral.frontend.v1.FrontendService/GetUserInvite"
	FrontendService_CreateUserInvite_FullMethodName                      = "/tesseral.frontend.v1.FrontendService/CreateUserInvite"
	FrontendService_DeleteUserInvite_FullMethodName                      = "/tesseral.frontend.v1.FrontendService/DeleteUserInvite"
	FrontendService_ListSwitchableOrganizations_FullMethodName           = "/tesseral.frontend.v1.FrontendService/ListSwitchableOrganizations"
)

// FrontendServiceClient is the client API for FrontendService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FrontendServiceClient interface {
	Logout(ctx context.Context, in *LogoutRequest, opts ...grpc.CallOption) (*LogoutResponse, error)
	Refresh(ctx context.Context, in *RefreshRequest, opts ...grpc.CallOption) (*RefreshResponse, error)
	GetProject(ctx context.Context, in *GetProjectRequest, opts ...grpc.CallOption) (*GetProjectResponse, error)
	GetOrganization(ctx context.Context, in *GetOrganizationRequest, opts ...grpc.CallOption) (*GetOrganizationResponse, error)
	UpdateOrganization(ctx context.Context, in *UpdateOrganizationRequest, opts ...grpc.CallOption) (*UpdateOrganizationResponse, error)
	GetOrganizationGoogleHostedDomains(ctx context.Context, in *GetOrganizationGoogleHostedDomainsRequest, opts ...grpc.CallOption) (*GetOrganizationGoogleHostedDomainsResponse, error)
	UpdateOrganizationGoogleHostedDomains(ctx context.Context, in *UpdateOrganizationGoogleHostedDomainsRequest, opts ...grpc.CallOption) (*UpdateOrganizationGoogleHostedDomainsResponse, error)
	GetOrganizationMicrosoftTenantIDs(ctx context.Context, in *GetOrganizationMicrosoftTenantIDsRequest, opts ...grpc.CallOption) (*GetOrganizationMicrosoftTenantIDsResponse, error)
	UpdateOrganizationMicrosoftTenantIDs(ctx context.Context, in *UpdateOrganizationMicrosoftTenantIDsRequest, opts ...grpc.CallOption) (*UpdateOrganizationMicrosoftTenantIDsResponse, error)
	ListUsers(ctx context.Context, in *ListUsersRequest, opts ...grpc.CallOption) (*ListUsersResponse, error)
	GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*GetUserResponse, error)
	UpdateUser(ctx context.Context, in *UpdateUserRequest, opts ...grpc.CallOption) (*UpdateUserResponse, error)
	DeleteUser(ctx context.Context, in *DeleteUserRequest, opts ...grpc.CallOption) (*DeleteUserResponse, error)
	// Sets a user's password.
	SetPassword(ctx context.Context, in *SetPasswordRequest, opts ...grpc.CallOption) (*SetPasswordResponse, error)
	ListSAMLConnections(ctx context.Context, in *ListSAMLConnectionsRequest, opts ...grpc.CallOption) (*ListSAMLConnectionsResponse, error)
	GetSAMLConnection(ctx context.Context, in *GetSAMLConnectionRequest, opts ...grpc.CallOption) (*GetSAMLConnectionResponse, error)
	CreateSAMLConnection(ctx context.Context, in *CreateSAMLConnectionRequest, opts ...grpc.CallOption) (*CreateSAMLConnectionResponse, error)
	UpdateSAMLConnection(ctx context.Context, in *UpdateSAMLConnectionRequest, opts ...grpc.CallOption) (*UpdateSAMLConnectionResponse, error)
	DeleteSAMLConnection(ctx context.Context, in *DeleteSAMLConnectionRequest, opts ...grpc.CallOption) (*DeleteSAMLConnectionResponse, error)
	ListSCIMAPIKeys(ctx context.Context, in *ListSCIMAPIKeysRequest, opts ...grpc.CallOption) (*ListSCIMAPIKeysResponse, error)
	GetSCIMAPIKey(ctx context.Context, in *GetSCIMAPIKeyRequest, opts ...grpc.CallOption) (*GetSCIMAPIKeyResponse, error)
	CreateSCIMAPIKey(ctx context.Context, in *CreateSCIMAPIKeyRequest, opts ...grpc.CallOption) (*CreateSCIMAPIKeyResponse, error)
	UpdateSCIMAPIKey(ctx context.Context, in *UpdateSCIMAPIKeyRequest, opts ...grpc.CallOption) (*UpdateSCIMAPIKeyResponse, error)
	DeleteSCIMAPIKey(ctx context.Context, in *DeleteSCIMAPIKeyRequest, opts ...grpc.CallOption) (*DeleteSCIMAPIKeyResponse, error)
	RevokeSCIMAPIKey(ctx context.Context, in *RevokeSCIMAPIKeyRequest, opts ...grpc.CallOption) (*RevokeSCIMAPIKeyResponse, error)
	Whoami(ctx context.Context, in *WhoamiRequest, opts ...grpc.CallOption) (*WhoamiResponse, error)
	ListMyPasskeys(ctx context.Context, in *ListMyPasskeysRequest, opts ...grpc.CallOption) (*ListMyPasskeysResponse, error)
	DeleteMyPasskey(ctx context.Context, in *DeleteMyPasskeyRequest, opts ...grpc.CallOption) (*DeleteMyPasskeyResponse, error)
	GetPasskeyOptions(ctx context.Context, in *GetPasskeyOptionsRequest, opts ...grpc.CallOption) (*GetPasskeyOptionsResponse, error)
	RegisterPasskey(ctx context.Context, in *RegisterPasskeyRequest, opts ...grpc.CallOption) (*RegisterPasskeyResponse, error)
	GetAuthenticatorAppOptions(ctx context.Context, in *GetAuthenticatorAppOptionsRequest, opts ...grpc.CallOption) (*GetAuthenticatorAppOptionsResponse, error)
	RegisterAuthenticatorApp(ctx context.Context, in *RegisterAuthenticatorAppRequest, opts ...grpc.CallOption) (*RegisterAuthenticatorAppResponse, error)
	ListUserInvites(ctx context.Context, in *ListUserInvitesRequest, opts ...grpc.CallOption) (*ListUserInvitesResponse, error)
	GetUserInvite(ctx context.Context, in *GetUserInviteRequest, opts ...grpc.CallOption) (*GetUserInviteResponse, error)
	CreateUserInvite(ctx context.Context, in *CreateUserInviteRequest, opts ...grpc.CallOption) (*CreateUserInviteResponse, error)
	DeleteUserInvite(ctx context.Context, in *DeleteUserInviteRequest, opts ...grpc.CallOption) (*DeleteUserInviteResponse, error)
	ListSwitchableOrganizations(ctx context.Context, in *ListSwitchableOrganizationsRequest, opts ...grpc.CallOption) (*ListSwitchableOrganizationsResponse, error)
}

type frontendServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFrontendServiceClient(cc grpc.ClientConnInterface) FrontendServiceClient {
	return &frontendServiceClient{cc}
}

func (c *frontendServiceClient) Logout(ctx context.Context, in *LogoutRequest, opts ...grpc.CallOption) (*LogoutResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LogoutResponse)
	err := c.cc.Invoke(ctx, FrontendService_Logout_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontendServiceClient) Refresh(ctx context.Context, in *RefreshRequest, opts ...grpc.CallOption) (*RefreshResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RefreshResponse)
	err := c.cc.Invoke(ctx, FrontendService_Refresh_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontendServiceClient) GetProject(ctx context.Context, in *GetProjectRequest, opts ...grpc.CallOption) (*GetProjectResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetProjectResponse)
	err := c.cc.Invoke(ctx, FrontendService_GetProject_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontendServiceClient) GetOrganization(ctx context.Context, in *GetOrganizationRequest, opts ...grpc.CallOption) (*GetOrganizationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetOrganizationResponse)
	err := c.cc.Invoke(ctx, FrontendService_GetOrganization_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontendServiceClient) UpdateOrganization(ctx context.Context, in *UpdateOrganizationRequest, opts ...grpc.CallOption) (*UpdateOrganizationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateOrganizationResponse)
	err := c.cc.Invoke(ctx, FrontendService_UpdateOrganization_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontendServiceClient) GetOrganizationGoogleHostedDomains(ctx context.Context, in *GetOrganizationGoogleHostedDomainsRequest, opts ...grpc.CallOption) (*GetOrganizationGoogleHostedDomainsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetOrganizationGoogleHostedDomainsResponse)
	err := c.cc.Invoke(ctx, FrontendService_GetOrganizationGoogleHostedDomains_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontendServiceClient) UpdateOrganizationGoogleHostedDomains(ctx context.Context, in *UpdateOrganizationGoogleHostedDomainsRequest, opts ...grpc.CallOption) (*UpdateOrganizationGoogleHostedDomainsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateOrganizationGoogleHostedDomainsResponse)
	err := c.cc.Invoke(ctx, FrontendService_UpdateOrganizationGoogleHostedDomains_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontendServiceClient) GetOrganizationMicrosoftTenantIDs(ctx context.Context, in *GetOrganizationMicrosoftTenantIDsRequest, opts ...grpc.CallOption) (*GetOrganizationMicrosoftTenantIDsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetOrganizationMicrosoftTenantIDsResponse)
	err := c.cc.Invoke(ctx, FrontendService_GetOrganizationMicrosoftTenantIDs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontendServiceClient) UpdateOrganizationMicrosoftTenantIDs(ctx context.Context, in *UpdateOrganizationMicrosoftTenantIDsRequest, opts ...grpc.CallOption) (*UpdateOrganizationMicrosoftTenantIDsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateOrganizationMicrosoftTenantIDsResponse)
	err := c.cc.Invoke(ctx, FrontendService_UpdateOrganizationMicrosoftTenantIDs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontendServiceClient) ListUsers(ctx context.Context, in *ListUsersRequest, opts ...grpc.CallOption) (*ListUsersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListUsersResponse)
	err := c.cc.Invoke(ctx, FrontendService_ListUsers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontendServiceClient) GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*GetUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserResponse)
	err := c.cc.Invoke(ctx, FrontendService_GetUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontendServiceClient) UpdateUser(ctx context.Context, in *UpdateUserRequest, opts ...grpc.CallOption) (*UpdateUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateUserResponse)
	err := c.cc.Invoke(ctx, FrontendService_UpdateUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontendServiceClient) DeleteUser(ctx context.Context, in *DeleteUserRequest, opts ...grpc.CallOption) (*DeleteUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteUserResponse)
	err := c.cc.Invoke(ctx, FrontendService_DeleteUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontendServiceClient) SetPassword(ctx context.Context, in *SetPasswordRequest, opts ...grpc.CallOption) (*SetPasswordResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetPasswordResponse)
	err := c.cc.Invoke(ctx, FrontendService_SetPassword_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontendServiceClient) ListSAMLConnections(ctx context.Context, in *ListSAMLConnectionsRequest, opts ...grpc.CallOption) (*ListSAMLConnectionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListSAMLConnectionsResponse)
	err := c.cc.Invoke(ctx, FrontendService_ListSAMLConnections_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontendServiceClient) GetSAMLConnection(ctx context.Context, in *GetSAMLConnectionRequest, opts ...grpc.CallOption) (*GetSAMLConnectionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSAMLConnectionResponse)
	err := c.cc.Invoke(ctx, FrontendService_GetSAMLConnection_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontendServiceClient) CreateSAMLConnection(ctx context.Context, in *CreateSAMLConnectionRequest, opts ...grpc.CallOption) (*CreateSAMLConnectionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateSAMLConnectionResponse)
	err := c.cc.Invoke(ctx, FrontendService_CreateSAMLConnection_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontendServiceClient) UpdateSAMLConnection(ctx context.Context, in *UpdateSAMLConnectionRequest, opts ...grpc.CallOption) (*UpdateSAMLConnectionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateSAMLConnectionResponse)
	err := c.cc.Invoke(ctx, FrontendService_UpdateSAMLConnection_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontendServiceClient) DeleteSAMLConnection(ctx context.Context, in *DeleteSAMLConnectionRequest, opts ...grpc.CallOption) (*DeleteSAMLConnectionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteSAMLConnectionResponse)
	err := c.cc.Invoke(ctx, FrontendService_DeleteSAMLConnection_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontendServiceClient) ListSCIMAPIKeys(ctx context.Context, in *ListSCIMAPIKeysRequest, opts ...grpc.CallOption) (*ListSCIMAPIKeysResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListSCIMAPIKeysResponse)
	err := c.cc.Invoke(ctx, FrontendService_ListSCIMAPIKeys_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontendServiceClient) GetSCIMAPIKey(ctx context.Context, in *GetSCIMAPIKeyRequest, opts ...grpc.CallOption) (*GetSCIMAPIKeyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSCIMAPIKeyResponse)
	err := c.cc.Invoke(ctx, FrontendService_GetSCIMAPIKey_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontendServiceClient) CreateSCIMAPIKey(ctx context.Context, in *CreateSCIMAPIKeyRequest, opts ...grpc.CallOption) (*CreateSCIMAPIKeyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateSCIMAPIKeyResponse)
	err := c.cc.Invoke(ctx, FrontendService_CreateSCIMAPIKey_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontendServiceClient) UpdateSCIMAPIKey(ctx context.Context, in *UpdateSCIMAPIKeyRequest, opts ...grpc.CallOption) (*UpdateSCIMAPIKeyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateSCIMAPIKeyResponse)
	err := c.cc.Invoke(ctx, FrontendService_UpdateSCIMAPIKey_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontendServiceClient) DeleteSCIMAPIKey(ctx context.Context, in *DeleteSCIMAPIKeyRequest, opts ...grpc.CallOption) (*DeleteSCIMAPIKeyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteSCIMAPIKeyResponse)
	err := c.cc.Invoke(ctx, FrontendService_DeleteSCIMAPIKey_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontendServiceClient) RevokeSCIMAPIKey(ctx context.Context, in *RevokeSCIMAPIKeyRequest, opts ...grpc.CallOption) (*RevokeSCIMAPIKeyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RevokeSCIMAPIKeyResponse)
	err := c.cc.Invoke(ctx, FrontendService_RevokeSCIMAPIKey_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontendServiceClient) Whoami(ctx context.Context, in *WhoamiRequest, opts ...grpc.CallOption) (*WhoamiResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(WhoamiResponse)
	err := c.cc.Invoke(ctx, FrontendService_Whoami_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontendServiceClient) ListMyPasskeys(ctx context.Context, in *ListMyPasskeysRequest, opts ...grpc.CallOption) (*ListMyPasskeysResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListMyPasskeysResponse)
	err := c.cc.Invoke(ctx, FrontendService_ListMyPasskeys_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontendServiceClient) DeleteMyPasskey(ctx context.Context, in *DeleteMyPasskeyRequest, opts ...grpc.CallOption) (*DeleteMyPasskeyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteMyPasskeyResponse)
	err := c.cc.Invoke(ctx, FrontendService_DeleteMyPasskey_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontendServiceClient) GetPasskeyOptions(ctx context.Context, in *GetPasskeyOptionsRequest, opts ...grpc.CallOption) (*GetPasskeyOptionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPasskeyOptionsResponse)
	err := c.cc.Invoke(ctx, FrontendService_GetPasskeyOptions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontendServiceClient) RegisterPasskey(ctx context.Context, in *RegisterPasskeyRequest, opts ...grpc.CallOption) (*RegisterPasskeyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RegisterPasskeyResponse)
	err := c.cc.Invoke(ctx, FrontendService_RegisterPasskey_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontendServiceClient) GetAuthenticatorAppOptions(ctx context.Context, in *GetAuthenticatorAppOptionsRequest, opts ...grpc.CallOption) (*GetAuthenticatorAppOptionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAuthenticatorAppOptionsResponse)
	err := c.cc.Invoke(ctx, FrontendService_GetAuthenticatorAppOptions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontendServiceClient) RegisterAuthenticatorApp(ctx context.Context, in *RegisterAuthenticatorAppRequest, opts ...grpc.CallOption) (*RegisterAuthenticatorAppResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RegisterAuthenticatorAppResponse)
	err := c.cc.Invoke(ctx, FrontendService_RegisterAuthenticatorApp_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontendServiceClient) ListUserInvites(ctx context.Context, in *ListUserInvitesRequest, opts ...grpc.CallOption) (*ListUserInvitesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListUserInvitesResponse)
	err := c.cc.Invoke(ctx, FrontendService_ListUserInvites_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontendServiceClient) GetUserInvite(ctx context.Context, in *GetUserInviteRequest, opts ...grpc.CallOption) (*GetUserInviteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserInviteResponse)
	err := c.cc.Invoke(ctx, FrontendService_GetUserInvite_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontendServiceClient) CreateUserInvite(ctx context.Context, in *CreateUserInviteRequest, opts ...grpc.CallOption) (*CreateUserInviteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateUserInviteResponse)
	err := c.cc.Invoke(ctx, FrontendService_CreateUserInvite_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontendServiceClient) DeleteUserInvite(ctx context.Context, in *DeleteUserInviteRequest, opts ...grpc.CallOption) (*DeleteUserInviteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteUserInviteResponse)
	err := c.cc.Invoke(ctx, FrontendService_DeleteUserInvite_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontendServiceClient) ListSwitchableOrganizations(ctx context.Context, in *ListSwitchableOrganizationsRequest, opts ...grpc.CallOption) (*ListSwitchableOrganizationsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListSwitchableOrganizationsResponse)
	err := c.cc.Invoke(ctx, FrontendService_ListSwitchableOrganizations_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FrontendServiceServer is the server API for FrontendService service.
// All implementations must embed UnimplementedFrontendServiceServer
// for forward compatibility.
type FrontendServiceServer interface {
	Logout(context.Context, *LogoutRequest) (*LogoutResponse, error)
	Refresh(context.Context, *RefreshRequest) (*RefreshResponse, error)
	GetProject(context.Context, *GetProjectRequest) (*GetProjectResponse, error)
	GetOrganization(context.Context, *GetOrganizationRequest) (*GetOrganizationResponse, error)
	UpdateOrganization(context.Context, *UpdateOrganizationRequest) (*UpdateOrganizationResponse, error)
	GetOrganizationGoogleHostedDomains(context.Context, *GetOrganizationGoogleHostedDomainsRequest) (*GetOrganizationGoogleHostedDomainsResponse, error)
	UpdateOrganizationGoogleHostedDomains(context.Context, *UpdateOrganizationGoogleHostedDomainsRequest) (*UpdateOrganizationGoogleHostedDomainsResponse, error)
	GetOrganizationMicrosoftTenantIDs(context.Context, *GetOrganizationMicrosoftTenantIDsRequest) (*GetOrganizationMicrosoftTenantIDsResponse, error)
	UpdateOrganizationMicrosoftTenantIDs(context.Context, *UpdateOrganizationMicrosoftTenantIDsRequest) (*UpdateOrganizationMicrosoftTenantIDsResponse, error)
	ListUsers(context.Context, *ListUsersRequest) (*ListUsersResponse, error)
	GetUser(context.Context, *GetUserRequest) (*GetUserResponse, error)
	UpdateUser(context.Context, *UpdateUserRequest) (*UpdateUserResponse, error)
	DeleteUser(context.Context, *DeleteUserRequest) (*DeleteUserResponse, error)
	// Sets a user's password.
	SetPassword(context.Context, *SetPasswordRequest) (*SetPasswordResponse, error)
	ListSAMLConnections(context.Context, *ListSAMLConnectionsRequest) (*ListSAMLConnectionsResponse, error)
	GetSAMLConnection(context.Context, *GetSAMLConnectionRequest) (*GetSAMLConnectionResponse, error)
	CreateSAMLConnection(context.Context, *CreateSAMLConnectionRequest) (*CreateSAMLConnectionResponse, error)
	UpdateSAMLConnection(context.Context, *UpdateSAMLConnectionRequest) (*UpdateSAMLConnectionResponse, error)
	DeleteSAMLConnection(context.Context, *DeleteSAMLConnectionRequest) (*DeleteSAMLConnectionResponse, error)
	ListSCIMAPIKeys(context.Context, *ListSCIMAPIKeysRequest) (*ListSCIMAPIKeysResponse, error)
	GetSCIMAPIKey(context.Context, *GetSCIMAPIKeyRequest) (*GetSCIMAPIKeyResponse, error)
	CreateSCIMAPIKey(context.Context, *CreateSCIMAPIKeyRequest) (*CreateSCIMAPIKeyResponse, error)
	UpdateSCIMAPIKey(context.Context, *UpdateSCIMAPIKeyRequest) (*UpdateSCIMAPIKeyResponse, error)
	DeleteSCIMAPIKey(context.Context, *DeleteSCIMAPIKeyRequest) (*DeleteSCIMAPIKeyResponse, error)
	RevokeSCIMAPIKey(context.Context, *RevokeSCIMAPIKeyRequest) (*RevokeSCIMAPIKeyResponse, error)
	Whoami(context.Context, *WhoamiRequest) (*WhoamiResponse, error)
	ListMyPasskeys(context.Context, *ListMyPasskeysRequest) (*ListMyPasskeysResponse, error)
	DeleteMyPasskey(context.Context, *DeleteMyPasskeyRequest) (*DeleteMyPasskeyResponse, error)
	GetPasskeyOptions(context.Context, *GetPasskeyOptionsRequest) (*GetPasskeyOptionsResponse, error)
	RegisterPasskey(context.Context, *RegisterPasskeyRequest) (*RegisterPasskeyResponse, error)
	GetAuthenticatorAppOptions(context.Context, *GetAuthenticatorAppOptionsRequest) (*GetAuthenticatorAppOptionsResponse, error)
	RegisterAuthenticatorApp(context.Context, *RegisterAuthenticatorAppRequest) (*RegisterAuthenticatorAppResponse, error)
	ListUserInvites(context.Context, *ListUserInvitesRequest) (*ListUserInvitesResponse, error)
	GetUserInvite(context.Context, *GetUserInviteRequest) (*GetUserInviteResponse, error)
	CreateUserInvite(context.Context, *CreateUserInviteRequest) (*CreateUserInviteResponse, error)
	DeleteUserInvite(context.Context, *DeleteUserInviteRequest) (*DeleteUserInviteResponse, error)
	ListSwitchableOrganizations(context.Context, *ListSwitchableOrganizationsRequest) (*ListSwitchableOrganizationsResponse, error)
	mustEmbedUnimplementedFrontendServiceServer()
}

// UnimplementedFrontendServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedFrontendServiceServer struct{}

func (UnimplementedFrontendServiceServer) Logout(context.Context, *LogoutRequest) (*LogoutResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Logout not implemented")
}
func (UnimplementedFrontendServiceServer) Refresh(context.Context, *RefreshRequest) (*RefreshResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Refresh not implemented")
}
func (UnimplementedFrontendServiceServer) GetProject(context.Context, *GetProjectRequest) (*GetProjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProject not implemented")
}
func (UnimplementedFrontendServiceServer) GetOrganization(context.Context, *GetOrganizationRequest) (*GetOrganizationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrganization not implemented")
}
func (UnimplementedFrontendServiceServer) UpdateOrganization(context.Context, *UpdateOrganizationRequest) (*UpdateOrganizationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOrganization not implemented")
}
func (UnimplementedFrontendServiceServer) GetOrganizationGoogleHostedDomains(context.Context, *GetOrganizationGoogleHostedDomainsRequest) (*GetOrganizationGoogleHostedDomainsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrganizationGoogleHostedDomains not implemented")
}
func (UnimplementedFrontendServiceServer) UpdateOrganizationGoogleHostedDomains(context.Context, *UpdateOrganizationGoogleHostedDomainsRequest) (*UpdateOrganizationGoogleHostedDomainsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOrganizationGoogleHostedDomains not implemented")
}
func (UnimplementedFrontendServiceServer) GetOrganizationMicrosoftTenantIDs(context.Context, *GetOrganizationMicrosoftTenantIDsRequest) (*GetOrganizationMicrosoftTenantIDsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrganizationMicrosoftTenantIDs not implemented")
}
func (UnimplementedFrontendServiceServer) UpdateOrganizationMicrosoftTenantIDs(context.Context, *UpdateOrganizationMicrosoftTenantIDsRequest) (*UpdateOrganizationMicrosoftTenantIDsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOrganizationMicrosoftTenantIDs not implemented")
}
func (UnimplementedFrontendServiceServer) ListUsers(context.Context, *ListUsersRequest) (*ListUsersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUsers not implemented")
}
func (UnimplementedFrontendServiceServer) GetUser(context.Context, *GetUserRequest) (*GetUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUser not implemented")
}
func (UnimplementedFrontendServiceServer) UpdateUser(context.Context, *UpdateUserRequest) (*UpdateUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUser not implemented")
}
func (UnimplementedFrontendServiceServer) DeleteUser(context.Context, *DeleteUserRequest) (*DeleteUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUser not implemented")
}
func (UnimplementedFrontendServiceServer) SetPassword(context.Context, *SetPasswordRequest) (*SetPasswordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetPassword not implemented")
}
func (UnimplementedFrontendServiceServer) ListSAMLConnections(context.Context, *ListSAMLConnectionsRequest) (*ListSAMLConnectionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSAMLConnections not implemented")
}
func (UnimplementedFrontendServiceServer) GetSAMLConnection(context.Context, *GetSAMLConnectionRequest) (*GetSAMLConnectionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSAMLConnection not implemented")
}
func (UnimplementedFrontendServiceServer) CreateSAMLConnection(context.Context, *CreateSAMLConnectionRequest) (*CreateSAMLConnectionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSAMLConnection not implemented")
}
func (UnimplementedFrontendServiceServer) UpdateSAMLConnection(context.Context, *UpdateSAMLConnectionRequest) (*UpdateSAMLConnectionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSAMLConnection not implemented")
}
func (UnimplementedFrontendServiceServer) DeleteSAMLConnection(context.Context, *DeleteSAMLConnectionRequest) (*DeleteSAMLConnectionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSAMLConnection not implemented")
}
func (UnimplementedFrontendServiceServer) ListSCIMAPIKeys(context.Context, *ListSCIMAPIKeysRequest) (*ListSCIMAPIKeysResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSCIMAPIKeys not implemented")
}
func (UnimplementedFrontendServiceServer) GetSCIMAPIKey(context.Context, *GetSCIMAPIKeyRequest) (*GetSCIMAPIKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSCIMAPIKey not implemented")
}
func (UnimplementedFrontendServiceServer) CreateSCIMAPIKey(context.Context, *CreateSCIMAPIKeyRequest) (*CreateSCIMAPIKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSCIMAPIKey not implemented")
}
func (UnimplementedFrontendServiceServer) UpdateSCIMAPIKey(context.Context, *UpdateSCIMAPIKeyRequest) (*UpdateSCIMAPIKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSCIMAPIKey not implemented")
}
func (UnimplementedFrontendServiceServer) DeleteSCIMAPIKey(context.Context, *DeleteSCIMAPIKeyRequest) (*DeleteSCIMAPIKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSCIMAPIKey not implemented")
}
func (UnimplementedFrontendServiceServer) RevokeSCIMAPIKey(context.Context, *RevokeSCIMAPIKeyRequest) (*RevokeSCIMAPIKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RevokeSCIMAPIKey not implemented")
}
func (UnimplementedFrontendServiceServer) Whoami(context.Context, *WhoamiRequest) (*WhoamiResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Whoami not implemented")
}
func (UnimplementedFrontendServiceServer) ListMyPasskeys(context.Context, *ListMyPasskeysRequest) (*ListMyPasskeysResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMyPasskeys not implemented")
}
func (UnimplementedFrontendServiceServer) DeleteMyPasskey(context.Context, *DeleteMyPasskeyRequest) (*DeleteMyPasskeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMyPasskey not implemented")
}
func (UnimplementedFrontendServiceServer) GetPasskeyOptions(context.Context, *GetPasskeyOptionsRequest) (*GetPasskeyOptionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPasskeyOptions not implemented")
}
func (UnimplementedFrontendServiceServer) RegisterPasskey(context.Context, *RegisterPasskeyRequest) (*RegisterPasskeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterPasskey not implemented")
}
func (UnimplementedFrontendServiceServer) GetAuthenticatorAppOptions(context.Context, *GetAuthenticatorAppOptionsRequest) (*GetAuthenticatorAppOptionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAuthenticatorAppOptions not implemented")
}
func (UnimplementedFrontendServiceServer) RegisterAuthenticatorApp(context.Context, *RegisterAuthenticatorAppRequest) (*RegisterAuthenticatorAppResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterAuthenticatorApp not implemented")
}
func (UnimplementedFrontendServiceServer) ListUserInvites(context.Context, *ListUserInvitesRequest) (*ListUserInvitesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUserInvites not implemented")
}
func (UnimplementedFrontendServiceServer) GetUserInvite(context.Context, *GetUserInviteRequest) (*GetUserInviteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserInvite not implemented")
}
func (UnimplementedFrontendServiceServer) CreateUserInvite(context.Context, *CreateUserInviteRequest) (*CreateUserInviteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUserInvite not implemented")
}
func (UnimplementedFrontendServiceServer) DeleteUserInvite(context.Context, *DeleteUserInviteRequest) (*DeleteUserInviteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUserInvite not implemented")
}
func (UnimplementedFrontendServiceServer) ListSwitchableOrganizations(context.Context, *ListSwitchableOrganizationsRequest) (*ListSwitchableOrganizationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSwitchableOrganizations not implemented")
}
func (UnimplementedFrontendServiceServer) mustEmbedUnimplementedFrontendServiceServer() {}
func (UnimplementedFrontendServiceServer) testEmbeddedByValue()                         {}

// UnsafeFrontendServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FrontendServiceServer will
// result in compilation errors.
type UnsafeFrontendServiceServer interface {
	mustEmbedUnimplementedFrontendServiceServer()
}

func RegisterFrontendServiceServer(s grpc.ServiceRegistrar, srv FrontendServiceServer) {
	// If the following call pancis, it indicates UnimplementedFrontendServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&FrontendService_ServiceDesc, srv)
}

func _FrontendService_Logout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogoutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontendServiceServer).Logout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FrontendService_Logout_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontendServiceServer).Logout(ctx, req.(*LogoutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrontendService_Refresh_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RefreshRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontendServiceServer).Refresh(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FrontendService_Refresh_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontendServiceServer).Refresh(ctx, req.(*RefreshRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrontendService_GetProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontendServiceServer).GetProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FrontendService_GetProject_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontendServiceServer).GetProject(ctx, req.(*GetProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrontendService_GetOrganization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrganizationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontendServiceServer).GetOrganization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FrontendService_GetOrganization_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontendServiceServer).GetOrganization(ctx, req.(*GetOrganizationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrontendService_UpdateOrganization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateOrganizationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontendServiceServer).UpdateOrganization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FrontendService_UpdateOrganization_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontendServiceServer).UpdateOrganization(ctx, req.(*UpdateOrganizationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrontendService_GetOrganizationGoogleHostedDomains_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrganizationGoogleHostedDomainsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontendServiceServer).GetOrganizationGoogleHostedDomains(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FrontendService_GetOrganizationGoogleHostedDomains_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontendServiceServer).GetOrganizationGoogleHostedDomains(ctx, req.(*GetOrganizationGoogleHostedDomainsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrontendService_UpdateOrganizationGoogleHostedDomains_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateOrganizationGoogleHostedDomainsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontendServiceServer).UpdateOrganizationGoogleHostedDomains(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FrontendService_UpdateOrganizationGoogleHostedDomains_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontendServiceServer).UpdateOrganizationGoogleHostedDomains(ctx, req.(*UpdateOrganizationGoogleHostedDomainsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrontendService_GetOrganizationMicrosoftTenantIDs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrganizationMicrosoftTenantIDsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontendServiceServer).GetOrganizationMicrosoftTenantIDs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FrontendService_GetOrganizationMicrosoftTenantIDs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontendServiceServer).GetOrganizationMicrosoftTenantIDs(ctx, req.(*GetOrganizationMicrosoftTenantIDsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrontendService_UpdateOrganizationMicrosoftTenantIDs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateOrganizationMicrosoftTenantIDsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontendServiceServer).UpdateOrganizationMicrosoftTenantIDs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FrontendService_UpdateOrganizationMicrosoftTenantIDs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontendServiceServer).UpdateOrganizationMicrosoftTenantIDs(ctx, req.(*UpdateOrganizationMicrosoftTenantIDsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrontendService_ListUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontendServiceServer).ListUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FrontendService_ListUsers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontendServiceServer).ListUsers(ctx, req.(*ListUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrontendService_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontendServiceServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FrontendService_GetUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontendServiceServer).GetUser(ctx, req.(*GetUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrontendService_UpdateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontendServiceServer).UpdateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FrontendService_UpdateUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontendServiceServer).UpdateUser(ctx, req.(*UpdateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrontendService_DeleteUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontendServiceServer).DeleteUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FrontendService_DeleteUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontendServiceServer).DeleteUser(ctx, req.(*DeleteUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrontendService_SetPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetPasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontendServiceServer).SetPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FrontendService_SetPassword_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontendServiceServer).SetPassword(ctx, req.(*SetPasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrontendService_ListSAMLConnections_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSAMLConnectionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontendServiceServer).ListSAMLConnections(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FrontendService_ListSAMLConnections_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontendServiceServer).ListSAMLConnections(ctx, req.(*ListSAMLConnectionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrontendService_GetSAMLConnection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSAMLConnectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontendServiceServer).GetSAMLConnection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FrontendService_GetSAMLConnection_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontendServiceServer).GetSAMLConnection(ctx, req.(*GetSAMLConnectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrontendService_CreateSAMLConnection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSAMLConnectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontendServiceServer).CreateSAMLConnection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FrontendService_CreateSAMLConnection_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontendServiceServer).CreateSAMLConnection(ctx, req.(*CreateSAMLConnectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrontendService_UpdateSAMLConnection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSAMLConnectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontendServiceServer).UpdateSAMLConnection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FrontendService_UpdateSAMLConnection_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontendServiceServer).UpdateSAMLConnection(ctx, req.(*UpdateSAMLConnectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrontendService_DeleteSAMLConnection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSAMLConnectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontendServiceServer).DeleteSAMLConnection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FrontendService_DeleteSAMLConnection_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontendServiceServer).DeleteSAMLConnection(ctx, req.(*DeleteSAMLConnectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrontendService_ListSCIMAPIKeys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSCIMAPIKeysRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontendServiceServer).ListSCIMAPIKeys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FrontendService_ListSCIMAPIKeys_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontendServiceServer).ListSCIMAPIKeys(ctx, req.(*ListSCIMAPIKeysRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrontendService_GetSCIMAPIKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSCIMAPIKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontendServiceServer).GetSCIMAPIKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FrontendService_GetSCIMAPIKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontendServiceServer).GetSCIMAPIKey(ctx, req.(*GetSCIMAPIKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrontendService_CreateSCIMAPIKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSCIMAPIKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontendServiceServer).CreateSCIMAPIKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FrontendService_CreateSCIMAPIKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontendServiceServer).CreateSCIMAPIKey(ctx, req.(*CreateSCIMAPIKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrontendService_UpdateSCIMAPIKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSCIMAPIKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontendServiceServer).UpdateSCIMAPIKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FrontendService_UpdateSCIMAPIKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontendServiceServer).UpdateSCIMAPIKey(ctx, req.(*UpdateSCIMAPIKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrontendService_DeleteSCIMAPIKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSCIMAPIKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontendServiceServer).DeleteSCIMAPIKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FrontendService_DeleteSCIMAPIKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontendServiceServer).DeleteSCIMAPIKey(ctx, req.(*DeleteSCIMAPIKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrontendService_RevokeSCIMAPIKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RevokeSCIMAPIKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontendServiceServer).RevokeSCIMAPIKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FrontendService_RevokeSCIMAPIKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontendServiceServer).RevokeSCIMAPIKey(ctx, req.(*RevokeSCIMAPIKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrontendService_Whoami_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WhoamiRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontendServiceServer).Whoami(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FrontendService_Whoami_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontendServiceServer).Whoami(ctx, req.(*WhoamiRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrontendService_ListMyPasskeys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMyPasskeysRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontendServiceServer).ListMyPasskeys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FrontendService_ListMyPasskeys_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontendServiceServer).ListMyPasskeys(ctx, req.(*ListMyPasskeysRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrontendService_DeleteMyPasskey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMyPasskeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontendServiceServer).DeleteMyPasskey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FrontendService_DeleteMyPasskey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontendServiceServer).DeleteMyPasskey(ctx, req.(*DeleteMyPasskeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrontendService_GetPasskeyOptions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPasskeyOptionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontendServiceServer).GetPasskeyOptions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FrontendService_GetPasskeyOptions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontendServiceServer).GetPasskeyOptions(ctx, req.(*GetPasskeyOptionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrontendService_RegisterPasskey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterPasskeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontendServiceServer).RegisterPasskey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FrontendService_RegisterPasskey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontendServiceServer).RegisterPasskey(ctx, req.(*RegisterPasskeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrontendService_GetAuthenticatorAppOptions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAuthenticatorAppOptionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontendServiceServer).GetAuthenticatorAppOptions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FrontendService_GetAuthenticatorAppOptions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontendServiceServer).GetAuthenticatorAppOptions(ctx, req.(*GetAuthenticatorAppOptionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrontendService_RegisterAuthenticatorApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterAuthenticatorAppRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontendServiceServer).RegisterAuthenticatorApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FrontendService_RegisterAuthenticatorApp_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontendServiceServer).RegisterAuthenticatorApp(ctx, req.(*RegisterAuthenticatorAppRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrontendService_ListUserInvites_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUserInvitesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontendServiceServer).ListUserInvites(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FrontendService_ListUserInvites_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontendServiceServer).ListUserInvites(ctx, req.(*ListUserInvitesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrontendService_GetUserInvite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserInviteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontendServiceServer).GetUserInvite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FrontendService_GetUserInvite_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontendServiceServer).GetUserInvite(ctx, req.(*GetUserInviteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrontendService_CreateUserInvite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserInviteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontendServiceServer).CreateUserInvite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FrontendService_CreateUserInvite_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontendServiceServer).CreateUserInvite(ctx, req.(*CreateUserInviteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrontendService_DeleteUserInvite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUserInviteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontendServiceServer).DeleteUserInvite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FrontendService_DeleteUserInvite_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontendServiceServer).DeleteUserInvite(ctx, req.(*DeleteUserInviteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrontendService_ListSwitchableOrganizations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSwitchableOrganizationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontendServiceServer).ListSwitchableOrganizations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FrontendService_ListSwitchableOrganizations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontendServiceServer).ListSwitchableOrganizations(ctx, req.(*ListSwitchableOrganizationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FrontendService_ServiceDesc is the grpc.ServiceDesc for FrontendService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FrontendService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "tesseral.frontend.v1.FrontendService",
	HandlerType: (*FrontendServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Logout",
			Handler:    _FrontendService_Logout_Handler,
		},
		{
			MethodName: "Refresh",
			Handler:    _FrontendService_Refresh_Handler,
		},
		{
			MethodName: "GetProject",
			Handler:    _FrontendService_GetProject_Handler,
		},
		{
			MethodName: "GetOrganization",
			Handler:    _FrontendService_GetOrganization_Handler,
		},
		{
			MethodName: "UpdateOrganization",
			Handler:    _FrontendService_UpdateOrganization_Handler,
		},
		{
			MethodName: "GetOrganizationGoogleHostedDomains",
			Handler:    _FrontendService_GetOrganizationGoogleHostedDomains_Handler,
		},
		{
			MethodName: "UpdateOrganizationGoogleHostedDomains",
			Handler:    _FrontendService_UpdateOrganizationGoogleHostedDomains_Handler,
		},
		{
			MethodName: "GetOrganizationMicrosoftTenantIDs",
			Handler:    _FrontendService_GetOrganizationMicrosoftTenantIDs_Handler,
		},
		{
			MethodName: "UpdateOrganizationMicrosoftTenantIDs",
			Handler:    _FrontendService_UpdateOrganizationMicrosoftTenantIDs_Handler,
		},
		{
			MethodName: "ListUsers",
			Handler:    _FrontendService_ListUsers_Handler,
		},
		{
			MethodName: "GetUser",
			Handler:    _FrontendService_GetUser_Handler,
		},
		{
			MethodName: "UpdateUser",
			Handler:    _FrontendService_UpdateUser_Handler,
		},
		{
			MethodName: "DeleteUser",
			Handler:    _FrontendService_DeleteUser_Handler,
		},
		{
			MethodName: "SetPassword",
			Handler:    _FrontendService_SetPassword_Handler,
		},
		{
			MethodName: "ListSAMLConnections",
			Handler:    _FrontendService_ListSAMLConnections_Handler,
		},
		{
			MethodName: "GetSAMLConnection",
			Handler:    _FrontendService_GetSAMLConnection_Handler,
		},
		{
			MethodName: "CreateSAMLConnection",
			Handler:    _FrontendService_CreateSAMLConnection_Handler,
		},
		{
			MethodName: "UpdateSAMLConnection",
			Handler:    _FrontendService_UpdateSAMLConnection_Handler,
		},
		{
			MethodName: "DeleteSAMLConnection",
			Handler:    _FrontendService_DeleteSAMLConnection_Handler,
		},
		{
			MethodName: "ListSCIMAPIKeys",
			Handler:    _FrontendService_ListSCIMAPIKeys_Handler,
		},
		{
			MethodName: "GetSCIMAPIKey",
			Handler:    _FrontendService_GetSCIMAPIKey_Handler,
		},
		{
			MethodName: "CreateSCIMAPIKey",
			Handler:    _FrontendService_CreateSCIMAPIKey_Handler,
		},
		{
			MethodName: "UpdateSCIMAPIKey",
			Handler:    _FrontendService_UpdateSCIMAPIKey_Handler,
		},
		{
			MethodName: "DeleteSCIMAPIKey",
			Handler:    _FrontendService_DeleteSCIMAPIKey_Handler,
		},
		{
			MethodName: "RevokeSCIMAPIKey",
			Handler:    _FrontendService_RevokeSCIMAPIKey_Handler,
		},
		{
			MethodName: "Whoami",
			Handler:    _FrontendService_Whoami_Handler,
		},
		{
			MethodName: "ListMyPasskeys",
			Handler:    _FrontendService_ListMyPasskeys_Handler,
		},
		{
			MethodName: "DeleteMyPasskey",
			Handler:    _FrontendService_DeleteMyPasskey_Handler,
		},
		{
			MethodName: "GetPasskeyOptions",
			Handler:    _FrontendService_GetPasskeyOptions_Handler,
		},
		{
			MethodName: "RegisterPasskey",
			Handler:    _FrontendService_RegisterPasskey_Handler,
		},
		{
			MethodName: "GetAuthenticatorAppOptions",
			Handler:    _FrontendService_GetAuthenticatorAppOptions_Handler,
		},
		{
			MethodName: "RegisterAuthenticatorApp",
			Handler:    _FrontendService_RegisterAuthenticatorApp_Handler,
		},
		{
			MethodName: "ListUserInvites",
			Handler:    _FrontendService_ListUserInvites_Handler,
		},
		{
			MethodName: "GetUserInvite",
			Handler:    _FrontendService_GetUserInvite_Handler,
		},
		{
			MethodName: "CreateUserInvite",
			Handler:    _FrontendService_CreateUserInvite_Handler,
		},
		{
			MethodName: "DeleteUserInvite",
			Handler:    _FrontendService_DeleteUserInvite_Handler,
		},
		{
			MethodName: "ListSwitchableOrganizations",
			Handler:    _FrontendService_ListSwitchableOrganizations_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "tesseral/frontend/v1/frontend.proto",
}
