// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        (unknown)
// source: tesseral/frontend/v1/models.proto

package frontendv1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	structpb "google.golang.org/protobuf/types/known/structpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type PrimaryAuthFactor int32

const (
	PrimaryAuthFactor_PRIMARY_AUTH_FACTOR_UNSPECIFIED   PrimaryAuthFactor = 0
	PrimaryAuthFactor_PRIMARY_AUTH_FACTOR_EMAIL         PrimaryAuthFactor = 1
	PrimaryAuthFactor_PRIMARY_AUTH_FACTOR_GOOGLE        PrimaryAuthFactor = 2
	PrimaryAuthFactor_PRIMARY_AUTH_FACTOR_MICROSOFT     PrimaryAuthFactor = 3
	PrimaryAuthFactor_PRIMARY_AUTH_FACTOR_SAML          PrimaryAuthFactor = 4
	PrimaryAuthFactor_PRIMARY_AUTH_FACTOR_IMPERSONATION PrimaryAuthFactor = 5
)

// Enum value maps for PrimaryAuthFactor.
var (
	PrimaryAuthFactor_name = map[int32]string{
		0: "PRIMARY_AUTH_FACTOR_UNSPECIFIED",
		1: "PRIMARY_AUTH_FACTOR_EMAIL",
		2: "PRIMARY_AUTH_FACTOR_GOOGLE",
		3: "PRIMARY_AUTH_FACTOR_MICROSOFT",
		4: "PRIMARY_AUTH_FACTOR_SAML",
		5: "PRIMARY_AUTH_FACTOR_IMPERSONATION",
	}
	PrimaryAuthFactor_value = map[string]int32{
		"PRIMARY_AUTH_FACTOR_UNSPECIFIED":   0,
		"PRIMARY_AUTH_FACTOR_EMAIL":         1,
		"PRIMARY_AUTH_FACTOR_GOOGLE":        2,
		"PRIMARY_AUTH_FACTOR_MICROSOFT":     3,
		"PRIMARY_AUTH_FACTOR_SAML":          4,
		"PRIMARY_AUTH_FACTOR_IMPERSONATION": 5,
	}
)

func (x PrimaryAuthFactor) Enum() *PrimaryAuthFactor {
	p := new(PrimaryAuthFactor)
	*p = x
	return p
}

func (x PrimaryAuthFactor) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PrimaryAuthFactor) Descriptor() protoreflect.EnumDescriptor {
	return file_tesseral_frontend_v1_models_proto_enumTypes[0].Descriptor()
}

func (PrimaryAuthFactor) Type() protoreflect.EnumType {
	return &file_tesseral_frontend_v1_models_proto_enumTypes[0]
}

func (x PrimaryAuthFactor) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PrimaryAuthFactor.Descriptor instead.
func (PrimaryAuthFactor) EnumDescriptor() ([]byte, []int) {
	return file_tesseral_frontend_v1_models_proto_rawDescGZIP(), []int{0}
}

type Project struct {
	state                     protoimpl.MessageState `protogen:"open.v1"`
	Id                        string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	DisplayName               string                 `protobuf:"bytes,2,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	CreateTime                *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	UpdateTime                *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	LogInWithGoogle           bool                   `protobuf:"varint,6,opt,name=log_in_with_google,json=logInWithGoogle,proto3" json:"log_in_with_google,omitempty"`
	LogInWithMicrosoft        bool                   `protobuf:"varint,7,opt,name=log_in_with_microsoft,json=logInWithMicrosoft,proto3" json:"log_in_with_microsoft,omitempty"`
	LogInWithEmail            bool                   `protobuf:"varint,11,opt,name=log_in_with_email,json=logInWithEmail,proto3" json:"log_in_with_email,omitempty"`
	LogInWithPassword         bool                   `protobuf:"varint,5,opt,name=log_in_with_password,json=logInWithPassword,proto3" json:"log_in_with_password,omitempty"`
	LogInWithSaml             bool                   `protobuf:"varint,12,opt,name=log_in_with_saml,json=logInWithSaml,proto3" json:"log_in_with_saml,omitempty"`
	LogInWithAuthenticatorApp bool                   `protobuf:"varint,9,opt,name=log_in_with_authenticator_app,json=logInWithAuthenticatorApp,proto3" json:"log_in_with_authenticator_app,omitempty"`
	LogInWithPasskey          bool                   `protobuf:"varint,10,opt,name=log_in_with_passkey,json=logInWithPasskey,proto3" json:"log_in_with_passkey,omitempty"`
	VaultDomain               string                 `protobuf:"bytes,8,opt,name=vault_domain,json=vaultDomain,proto3" json:"vault_domain,omitempty"`
	unknownFields             protoimpl.UnknownFields
	sizeCache                 protoimpl.SizeCache
}

func (x *Project) Reset() {
	*x = Project{}
	mi := &file_tesseral_frontend_v1_models_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Project) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Project) ProtoMessage() {}

func (x *Project) ProtoReflect() protoreflect.Message {
	mi := &file_tesseral_frontend_v1_models_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Project.ProtoReflect.Descriptor instead.
func (*Project) Descriptor() ([]byte, []int) {
	return file_tesseral_frontend_v1_models_proto_rawDescGZIP(), []int{0}
}

func (x *Project) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Project) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *Project) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *Project) GetUpdateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdateTime
	}
	return nil
}

func (x *Project) GetLogInWithGoogle() bool {
	if x != nil {
		return x.LogInWithGoogle
	}
	return false
}

func (x *Project) GetLogInWithMicrosoft() bool {
	if x != nil {
		return x.LogInWithMicrosoft
	}
	return false
}

func (x *Project) GetLogInWithEmail() bool {
	if x != nil {
		return x.LogInWithEmail
	}
	return false
}

func (x *Project) GetLogInWithPassword() bool {
	if x != nil {
		return x.LogInWithPassword
	}
	return false
}

func (x *Project) GetLogInWithSaml() bool {
	if x != nil {
		return x.LogInWithSaml
	}
	return false
}

func (x *Project) GetLogInWithAuthenticatorApp() bool {
	if x != nil {
		return x.LogInWithAuthenticatorApp
	}
	return false
}

func (x *Project) GetLogInWithPasskey() bool {
	if x != nil {
		return x.LogInWithPasskey
	}
	return false
}

func (x *Project) GetVaultDomain() string {
	if x != nil {
		return x.VaultDomain
	}
	return ""
}

type Organization struct {
	state                     protoimpl.MessageState `protogen:"open.v1"`
	Id                        string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	DisplayName               string                 `protobuf:"bytes,2,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	CreateTime                *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	UpdateTime                *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	LogInWithGoogle           *bool                  `protobuf:"varint,7,opt,name=log_in_with_google,json=logInWithGoogle,proto3,oneof" json:"log_in_with_google,omitempty"`
	LogInWithMicrosoft        *bool                  `protobuf:"varint,8,opt,name=log_in_with_microsoft,json=logInWithMicrosoft,proto3,oneof" json:"log_in_with_microsoft,omitempty"`
	LogInWithEmail            *bool                  `protobuf:"varint,16,opt,name=log_in_with_email,json=logInWithEmail,proto3,oneof" json:"log_in_with_email,omitempty"`
	LogInWithPassword         *bool                  `protobuf:"varint,6,opt,name=log_in_with_password,json=logInWithPassword,proto3,oneof" json:"log_in_with_password,omitempty"`
	LogInWithSaml             *bool                  `protobuf:"varint,12,opt,name=log_in_with_saml,json=logInWithSaml,proto3,oneof" json:"log_in_with_saml,omitempty"`
	LogInWithAuthenticatorApp *bool                  `protobuf:"varint,13,opt,name=log_in_with_authenticator_app,json=logInWithAuthenticatorApp,proto3,oneof" json:"log_in_with_authenticator_app,omitempty"`
	LogInWithPasskey          *bool                  `protobuf:"varint,14,opt,name=log_in_with_passkey,json=logInWithPasskey,proto3,oneof" json:"log_in_with_passkey,omitempty"`
	RequireMfa                *bool                  `protobuf:"varint,15,opt,name=require_mfa,json=requireMfa,proto3,oneof" json:"require_mfa,omitempty"`
	GoogleHostedDomains       []string               `protobuf:"bytes,9,rep,name=google_hosted_domains,json=googleHostedDomains,proto3" json:"google_hosted_domains,omitempty"`
	MicrosoftTenantIds        []string               `protobuf:"bytes,10,rep,name=microsoft_tenant_ids,json=microsoftTenantIds,proto3" json:"microsoft_tenant_ids,omitempty"`
	SamlEnabled               bool                   `protobuf:"varint,11,opt,name=saml_enabled,json=samlEnabled,proto3" json:"saml_enabled,omitempty"`
	unknownFields             protoimpl.UnknownFields
	sizeCache                 protoimpl.SizeCache
}

func (x *Organization) Reset() {
	*x = Organization{}
	mi := &file_tesseral_frontend_v1_models_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Organization) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Organization) ProtoMessage() {}

func (x *Organization) ProtoReflect() protoreflect.Message {
	mi := &file_tesseral_frontend_v1_models_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Organization.ProtoReflect.Descriptor instead.
func (*Organization) Descriptor() ([]byte, []int) {
	return file_tesseral_frontend_v1_models_proto_rawDescGZIP(), []int{1}
}

func (x *Organization) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Organization) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *Organization) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *Organization) GetUpdateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdateTime
	}
	return nil
}

func (x *Organization) GetLogInWithGoogle() bool {
	if x != nil && x.LogInWithGoogle != nil {
		return *x.LogInWithGoogle
	}
	return false
}

func (x *Organization) GetLogInWithMicrosoft() bool {
	if x != nil && x.LogInWithMicrosoft != nil {
		return *x.LogInWithMicrosoft
	}
	return false
}

func (x *Organization) GetLogInWithEmail() bool {
	if x != nil && x.LogInWithEmail != nil {
		return *x.LogInWithEmail
	}
	return false
}

func (x *Organization) GetLogInWithPassword() bool {
	if x != nil && x.LogInWithPassword != nil {
		return *x.LogInWithPassword
	}
	return false
}

func (x *Organization) GetLogInWithSaml() bool {
	if x != nil && x.LogInWithSaml != nil {
		return *x.LogInWithSaml
	}
	return false
}

func (x *Organization) GetLogInWithAuthenticatorApp() bool {
	if x != nil && x.LogInWithAuthenticatorApp != nil {
		return *x.LogInWithAuthenticatorApp
	}
	return false
}

func (x *Organization) GetLogInWithPasskey() bool {
	if x != nil && x.LogInWithPasskey != nil {
		return *x.LogInWithPasskey
	}
	return false
}

func (x *Organization) GetRequireMfa() bool {
	if x != nil && x.RequireMfa != nil {
		return *x.RequireMfa
	}
	return false
}

func (x *Organization) GetGoogleHostedDomains() []string {
	if x != nil {
		return x.GoogleHostedDomains
	}
	return nil
}

func (x *Organization) GetMicrosoftTenantIds() []string {
	if x != nil {
		return x.MicrosoftTenantIds
	}
	return nil
}

func (x *Organization) GetSamlEnabled() bool {
	if x != nil {
		return x.SamlEnabled
	}
	return false
}

type OrganizationGoogleHostedDomains struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	GoogleHostedDomains []string               `protobuf:"bytes,2,rep,name=google_hosted_domains,json=googleHostedDomains,proto3" json:"google_hosted_domains,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *OrganizationGoogleHostedDomains) Reset() {
	*x = OrganizationGoogleHostedDomains{}
	mi := &file_tesseral_frontend_v1_models_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OrganizationGoogleHostedDomains) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrganizationGoogleHostedDomains) ProtoMessage() {}

func (x *OrganizationGoogleHostedDomains) ProtoReflect() protoreflect.Message {
	mi := &file_tesseral_frontend_v1_models_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrganizationGoogleHostedDomains.ProtoReflect.Descriptor instead.
func (*OrganizationGoogleHostedDomains) Descriptor() ([]byte, []int) {
	return file_tesseral_frontend_v1_models_proto_rawDescGZIP(), []int{2}
}

func (x *OrganizationGoogleHostedDomains) GetGoogleHostedDomains() []string {
	if x != nil {
		return x.GoogleHostedDomains
	}
	return nil
}

type OrganizationMicrosoftTenantIDs struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	MicrosoftTenantIds []string               `protobuf:"bytes,2,rep,name=microsoft_tenant_ids,json=microsoftTenantIds,proto3" json:"microsoft_tenant_ids,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *OrganizationMicrosoftTenantIDs) Reset() {
	*x = OrganizationMicrosoftTenantIDs{}
	mi := &file_tesseral_frontend_v1_models_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OrganizationMicrosoftTenantIDs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrganizationMicrosoftTenantIDs) ProtoMessage() {}

func (x *OrganizationMicrosoftTenantIDs) ProtoReflect() protoreflect.Message {
	mi := &file_tesseral_frontend_v1_models_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrganizationMicrosoftTenantIDs.ProtoReflect.Descriptor instead.
func (*OrganizationMicrosoftTenantIDs) Descriptor() ([]byte, []int) {
	return file_tesseral_frontend_v1_models_proto_rawDescGZIP(), []int{3}
}

func (x *OrganizationMicrosoftTenantIDs) GetMicrosoftTenantIds() []string {
	if x != nil {
		return x.MicrosoftTenantIds
	}
	return nil
}

type SessionSigningKey struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	PublicKeyJwk  *structpb.Struct       `protobuf:"bytes,2,opt,name=public_key_jwk,json=publicKeyJwk,proto3" json:"public_key_jwk,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SessionSigningKey) Reset() {
	*x = SessionSigningKey{}
	mi := &file_tesseral_frontend_v1_models_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SessionSigningKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SessionSigningKey) ProtoMessage() {}

func (x *SessionSigningKey) ProtoReflect() protoreflect.Message {
	mi := &file_tesseral_frontend_v1_models_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SessionSigningKey.ProtoReflect.Descriptor instead.
func (*SessionSigningKey) Descriptor() ([]byte, []int) {
	return file_tesseral_frontend_v1_models_proto_rawDescGZIP(), []int{4}
}

func (x *SessionSigningKey) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *SessionSigningKey) GetPublicKeyJwk() *structpb.Struct {
	if x != nil {
		return x.PublicKeyJwk
	}
	return nil
}

type User struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	Id                  string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Email               string                 `protobuf:"bytes,2,opt,name=email,proto3" json:"email,omitempty"`
	CreateTime          *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	UpdateTime          *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	Owner               *bool                  `protobuf:"varint,5,opt,name=owner,proto3,oneof" json:"owner,omitempty"`
	GoogleUserId        string                 `protobuf:"bytes,6,opt,name=google_user_id,json=googleUserId,proto3" json:"google_user_id,omitempty"`
	MicrosoftUserId     string                 `protobuf:"bytes,7,opt,name=microsoft_user_id,json=microsoftUserId,proto3" json:"microsoft_user_id,omitempty"`
	HasAuthenticatorApp bool                   `protobuf:"varint,8,opt,name=has_authenticator_app,json=hasAuthenticatorApp,proto3" json:"has_authenticator_app,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *User) Reset() {
	*x = User{}
	mi := &file_tesseral_frontend_v1_models_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *User) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*User) ProtoMessage() {}

func (x *User) ProtoReflect() protoreflect.Message {
	mi := &file_tesseral_frontend_v1_models_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use User.ProtoReflect.Descriptor instead.
func (*User) Descriptor() ([]byte, []int) {
	return file_tesseral_frontend_v1_models_proto_rawDescGZIP(), []int{5}
}

func (x *User) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *User) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *User) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *User) GetUpdateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdateTime
	}
	return nil
}

func (x *User) GetOwner() bool {
	if x != nil && x.Owner != nil {
		return *x.Owner
	}
	return false
}

func (x *User) GetGoogleUserId() string {
	if x != nil {
		return x.GoogleUserId
	}
	return ""
}

func (x *User) GetMicrosoftUserId() string {
	if x != nil {
		return x.MicrosoftUserId
	}
	return ""
}

func (x *User) GetHasAuthenticatorApp() bool {
	if x != nil {
		return x.HasAuthenticatorApp
	}
	return false
}

type Session struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	Id                string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	UserId            string                 `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	CreateTime        *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	ExpireTime        *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=expire_time,json=expireTime,proto3" json:"expire_time,omitempty"`
	Revoked           bool                   `protobuf:"varint,5,opt,name=revoked,proto3" json:"revoked,omitempty"`
	PrimaryAuthFactor PrimaryAuthFactor      `protobuf:"varint,6,opt,name=primary_auth_factor,json=primaryAuthFactor,proto3,enum=tesseral.frontend.v1.PrimaryAuthFactor" json:"primary_auth_factor,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *Session) Reset() {
	*x = Session{}
	mi := &file_tesseral_frontend_v1_models_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Session) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Session) ProtoMessage() {}

func (x *Session) ProtoReflect() protoreflect.Message {
	mi := &file_tesseral_frontend_v1_models_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Session.ProtoReflect.Descriptor instead.
func (*Session) Descriptor() ([]byte, []int) {
	return file_tesseral_frontend_v1_models_proto_rawDescGZIP(), []int{6}
}

func (x *Session) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Session) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *Session) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *Session) GetExpireTime() *timestamppb.Timestamp {
	if x != nil {
		return x.ExpireTime
	}
	return nil
}

func (x *Session) GetRevoked() bool {
	if x != nil {
		return x.Revoked
	}
	return false
}

func (x *Session) GetPrimaryAuthFactor() PrimaryAuthFactor {
	if x != nil {
		return x.PrimaryAuthFactor
	}
	return PrimaryAuthFactor_PRIMARY_AUTH_FACTOR_UNSPECIFIED
}

type SAMLConnection struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	Id                 string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	CreateTime         *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	UpdateTime         *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	Primary            *bool                  `protobuf:"varint,4,opt,name=primary,proto3,oneof" json:"primary,omitempty"`
	SpAcsUrl           string                 `protobuf:"bytes,5,opt,name=sp_acs_url,json=spAcsUrl,proto3" json:"sp_acs_url,omitempty"`
	SpEntityId         string                 `protobuf:"bytes,6,opt,name=sp_entity_id,json=spEntityId,proto3" json:"sp_entity_id,omitempty"`
	IdpRedirectUrl     string                 `protobuf:"bytes,7,opt,name=idp_redirect_url,json=idpRedirectUrl,proto3" json:"idp_redirect_url,omitempty"`
	IdpX509Certificate string                 `protobuf:"bytes,8,opt,name=idp_x509_certificate,json=idpX509Certificate,proto3" json:"idp_x509_certificate,omitempty"`
	IdpEntityId        string                 `protobuf:"bytes,9,opt,name=idp_entity_id,json=idpEntityId,proto3" json:"idp_entity_id,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *SAMLConnection) Reset() {
	*x = SAMLConnection{}
	mi := &file_tesseral_frontend_v1_models_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SAMLConnection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SAMLConnection) ProtoMessage() {}

func (x *SAMLConnection) ProtoReflect() protoreflect.Message {
	mi := &file_tesseral_frontend_v1_models_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SAMLConnection.ProtoReflect.Descriptor instead.
func (*SAMLConnection) Descriptor() ([]byte, []int) {
	return file_tesseral_frontend_v1_models_proto_rawDescGZIP(), []int{7}
}

func (x *SAMLConnection) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *SAMLConnection) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *SAMLConnection) GetUpdateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdateTime
	}
	return nil
}

func (x *SAMLConnection) GetPrimary() bool {
	if x != nil && x.Primary != nil {
		return *x.Primary
	}
	return false
}

func (x *SAMLConnection) GetSpAcsUrl() string {
	if x != nil {
		return x.SpAcsUrl
	}
	return ""
}

func (x *SAMLConnection) GetSpEntityId() string {
	if x != nil {
		return x.SpEntityId
	}
	return ""
}

func (x *SAMLConnection) GetIdpRedirectUrl() string {
	if x != nil {
		return x.IdpRedirectUrl
	}
	return ""
}

func (x *SAMLConnection) GetIdpX509Certificate() string {
	if x != nil {
		return x.IdpX509Certificate
	}
	return ""
}

func (x *SAMLConnection) GetIdpEntityId() string {
	if x != nil {
		return x.IdpEntityId
	}
	return ""
}

type SCIMAPIKey struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	DisplayName   string                 `protobuf:"bytes,2,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	CreateTime    *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	UpdateTime    *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	SecretToken   string                 `protobuf:"bytes,5,opt,name=secret_token,json=secretToken,proto3" json:"secret_token,omitempty"`
	Revoked       bool                   `protobuf:"varint,6,opt,name=revoked,proto3" json:"revoked,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SCIMAPIKey) Reset() {
	*x = SCIMAPIKey{}
	mi := &file_tesseral_frontend_v1_models_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SCIMAPIKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SCIMAPIKey) ProtoMessage() {}

func (x *SCIMAPIKey) ProtoReflect() protoreflect.Message {
	mi := &file_tesseral_frontend_v1_models_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SCIMAPIKey.ProtoReflect.Descriptor instead.
func (*SCIMAPIKey) Descriptor() ([]byte, []int) {
	return file_tesseral_frontend_v1_models_proto_rawDescGZIP(), []int{8}
}

func (x *SCIMAPIKey) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *SCIMAPIKey) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *SCIMAPIKey) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *SCIMAPIKey) GetUpdateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdateTime
	}
	return nil
}

func (x *SCIMAPIKey) GetSecretToken() string {
	if x != nil {
		return x.SecretToken
	}
	return ""
}

func (x *SCIMAPIKey) GetRevoked() bool {
	if x != nil {
		return x.Revoked
	}
	return false
}

type Passkey struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	UserId        string                 `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	CreateTime    *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	UpdateTime    *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	Disabled      bool                   `protobuf:"varint,8,opt,name=disabled,proto3" json:"disabled,omitempty"`
	CredentialId  []byte                 `protobuf:"bytes,5,opt,name=credential_id,json=credentialId,proto3" json:"credential_id,omitempty"`
	PublicKeyPkix string                 `protobuf:"bytes,6,opt,name=public_key_pkix,json=publicKeyPkix,proto3" json:"public_key_pkix,omitempty"`
	Aaguid        string                 `protobuf:"bytes,7,opt,name=aaguid,proto3" json:"aaguid,omitempty"`
	RpId          string                 `protobuf:"bytes,9,opt,name=rp_id,json=rpId,proto3" json:"rp_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Passkey) Reset() {
	*x = Passkey{}
	mi := &file_tesseral_frontend_v1_models_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Passkey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Passkey) ProtoMessage() {}

func (x *Passkey) ProtoReflect() protoreflect.Message {
	mi := &file_tesseral_frontend_v1_models_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Passkey.ProtoReflect.Descriptor instead.
func (*Passkey) Descriptor() ([]byte, []int) {
	return file_tesseral_frontend_v1_models_proto_rawDescGZIP(), []int{9}
}

func (x *Passkey) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Passkey) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *Passkey) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *Passkey) GetUpdateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdateTime
	}
	return nil
}

func (x *Passkey) GetDisabled() bool {
	if x != nil {
		return x.Disabled
	}
	return false
}

func (x *Passkey) GetCredentialId() []byte {
	if x != nil {
		return x.CredentialId
	}
	return nil
}

func (x *Passkey) GetPublicKeyPkix() string {
	if x != nil {
		return x.PublicKeyPkix
	}
	return ""
}

func (x *Passkey) GetAaguid() string {
	if x != nil {
		return x.Aaguid
	}
	return ""
}

func (x *Passkey) GetRpId() string {
	if x != nil {
		return x.RpId
	}
	return ""
}

type UserInvite struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	CreateTime    *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	UpdateTime    *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	Email         string                 `protobuf:"bytes,4,opt,name=email,proto3" json:"email,omitempty"`
	Owner         bool                   `protobuf:"varint,5,opt,name=owner,proto3" json:"owner,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UserInvite) Reset() {
	*x = UserInvite{}
	mi := &file_tesseral_frontend_v1_models_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserInvite) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserInvite) ProtoMessage() {}

func (x *UserInvite) ProtoReflect() protoreflect.Message {
	mi := &file_tesseral_frontend_v1_models_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserInvite.ProtoReflect.Descriptor instead.
func (*UserInvite) Descriptor() ([]byte, []int) {
	return file_tesseral_frontend_v1_models_proto_rawDescGZIP(), []int{10}
}

func (x *UserInvite) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UserInvite) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *UserInvite) GetUpdateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdateTime
	}
	return nil
}

func (x *UserInvite) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *UserInvite) GetOwner() bool {
	if x != nil {
		return x.Owner
	}
	return false
}

type SwitchableOrganization struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	DisplayName   string                 `protobuf:"bytes,2,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SwitchableOrganization) Reset() {
	*x = SwitchableOrganization{}
	mi := &file_tesseral_frontend_v1_models_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SwitchableOrganization) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SwitchableOrganization) ProtoMessage() {}

func (x *SwitchableOrganization) ProtoReflect() protoreflect.Message {
	mi := &file_tesseral_frontend_v1_models_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SwitchableOrganization.ProtoReflect.Descriptor instead.
func (*SwitchableOrganization) Descriptor() ([]byte, []int) {
	return file_tesseral_frontend_v1_models_proto_rawDescGZIP(), []int{11}
}

func (x *SwitchableOrganization) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *SwitchableOrganization) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

var File_tesseral_frontend_v1_models_proto protoreflect.FileDescriptor

var file_tesseral_frontend_v1_models_proto_rawDesc = string([]byte{
	0x0a, 0x21, 0x74, 0x65, 0x73, 0x73, 0x65, 0x72, 0x61, 0x6c, 0x2f, 0x66, 0x72, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x64, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x14, 0x74, 0x65, 0x73, 0x73, 0x65, 0x72, 0x61, 0x6c, 0x2e, 0x66, 0x72,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xaf, 0x04, 0x0a, 0x07, 0x50, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70,
	0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x2b, 0x0a, 0x12, 0x6c, 0x6f, 0x67, 0x5f, 0x69, 0x6e, 0x5f, 0x77, 0x69, 0x74, 0x68,
	0x5f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x6c,
	0x6f, 0x67, 0x49, 0x6e, 0x57, 0x69, 0x74, 0x68, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x12, 0x31,
	0x0a, 0x15, 0x6c, 0x6f, 0x67, 0x5f, 0x69, 0x6e, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x6d, 0x69,
	0x63, 0x72, 0x6f, 0x73, 0x6f, 0x66, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x6c,
	0x6f, 0x67, 0x49, 0x6e, 0x57, 0x69, 0x74, 0x68, 0x4d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x6f, 0x66,
	0x74, 0x12, 0x29, 0x0a, 0x11, 0x6c, 0x6f, 0x67, 0x5f, 0x69, 0x6e, 0x5f, 0x77, 0x69, 0x74, 0x68,
	0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x6c, 0x6f,
	0x67, 0x49, 0x6e, 0x57, 0x69, 0x74, 0x68, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x2f, 0x0a, 0x14,
	0x6c, 0x6f, 0x67, 0x5f, 0x69, 0x6e, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x70, 0x61, 0x73, 0x73,
	0x77, 0x6f, 0x72, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x6c, 0x6f, 0x67, 0x49,
	0x6e, 0x57, 0x69, 0x74, 0x68, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x27, 0x0a,
	0x10, 0x6c, 0x6f, 0x67, 0x5f, 0x69, 0x6e, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x73, 0x61, 0x6d,
	0x6c, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x6c, 0x6f, 0x67, 0x49, 0x6e, 0x57, 0x69,
	0x74, 0x68, 0x53, 0x61, 0x6d, 0x6c, 0x12, 0x40, 0x0a, 0x1d, 0x6c, 0x6f, 0x67, 0x5f, 0x69, 0x6e,
	0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61,
	0x74, 0x6f, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x19, 0x6c,
	0x6f, 0x67, 0x49, 0x6e, 0x57, 0x69, 0x74, 0x68, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69,
	0x63, 0x61, 0x74, 0x6f, 0x72, 0x41, 0x70, 0x70, 0x12, 0x2d, 0x0a, 0x13, 0x6c, 0x6f, 0x67, 0x5f,
	0x69, 0x6e, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x6b, 0x65, 0x79, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x6c, 0x6f, 0x67, 0x49, 0x6e, 0x57, 0x69, 0x74, 0x68,
	0x50, 0x61, 0x73, 0x73, 0x6b, 0x65, 0x79, 0x12, 0x21, 0x0a, 0x0c, 0x76, 0x61, 0x75, 0x6c, 0x74,
	0x5f, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x76,
	0x61, 0x75, 0x6c, 0x74, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x22, 0xa2, 0x07, 0x0a, 0x0c, 0x4f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x64,
	0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3b,
	0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x12, 0x6c, 0x6f, 0x67, 0x5f,
	0x69, 0x6e, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x0f, 0x6c, 0x6f, 0x67, 0x49, 0x6e, 0x57, 0x69, 0x74,
	0x68, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x36, 0x0a, 0x15, 0x6c, 0x6f,
	0x67, 0x5f, 0x69, 0x6e, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73,
	0x6f, 0x66, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x48, 0x01, 0x52, 0x12, 0x6c, 0x6f, 0x67,
	0x49, 0x6e, 0x57, 0x69, 0x74, 0x68, 0x4d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x6f, 0x66, 0x74, 0x88,
	0x01, 0x01, 0x12, 0x2e, 0x0a, 0x11, 0x6c, 0x6f, 0x67, 0x5f, 0x69, 0x6e, 0x5f, 0x77, 0x69, 0x74,
	0x68, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x48, 0x02, 0x52,
	0x0e, 0x6c, 0x6f, 0x67, 0x49, 0x6e, 0x57, 0x69, 0x74, 0x68, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x88,
	0x01, 0x01, 0x12, 0x34, 0x0a, 0x14, 0x6c, 0x6f, 0x67, 0x5f, 0x69, 0x6e, 0x5f, 0x77, 0x69, 0x74,
	0x68, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08,
	0x48, 0x03, 0x52, 0x11, 0x6c, 0x6f, 0x67, 0x49, 0x6e, 0x57, 0x69, 0x74, 0x68, 0x50, 0x61, 0x73,
	0x73, 0x77, 0x6f, 0x72, 0x64, 0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a, 0x10, 0x6c, 0x6f, 0x67, 0x5f,
	0x69, 0x6e, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x73, 0x61, 0x6d, 0x6c, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x08, 0x48, 0x04, 0x52, 0x0d, 0x6c, 0x6f, 0x67, 0x49, 0x6e, 0x57, 0x69, 0x74, 0x68, 0x53,
	0x61, 0x6d, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x45, 0x0a, 0x1d, 0x6c, 0x6f, 0x67, 0x5f, 0x69, 0x6e,
	0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61,
	0x74, 0x6f, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x48, 0x05, 0x52,
	0x19, 0x6c, 0x6f, 0x67, 0x49, 0x6e, 0x57, 0x69, 0x74, 0x68, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e,
	0x74, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x41, 0x70, 0x70, 0x88, 0x01, 0x01, 0x12, 0x32, 0x0a,
	0x13, 0x6c, 0x6f, 0x67, 0x5f, 0x69, 0x6e, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x70, 0x61, 0x73,
	0x73, 0x6b, 0x65, 0x79, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x48, 0x06, 0x52, 0x10, 0x6c, 0x6f,
	0x67, 0x49, 0x6e, 0x57, 0x69, 0x74, 0x68, 0x50, 0x61, 0x73, 0x73, 0x6b, 0x65, 0x79, 0x88, 0x01,
	0x01, 0x12, 0x24, 0x0a, 0x0b, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x5f, 0x6d, 0x66, 0x61,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x48, 0x07, 0x52, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72,
	0x65, 0x4d, 0x66, 0x61, 0x88, 0x01, 0x01, 0x12, 0x32, 0x0a, 0x15, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x5f, 0x68, 0x6f, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73,
	0x18, 0x09, 0x20, 0x03, 0x28, 0x09, 0x52, 0x13, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x48, 0x6f,
	0x73, 0x74, 0x65, 0x64, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x12, 0x30, 0x0a, 0x14, 0x6d,
	0x69, 0x63, 0x72, 0x6f, 0x73, 0x6f, 0x66, 0x74, 0x5f, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x09, 0x52, 0x12, 0x6d, 0x69, 0x63, 0x72, 0x6f,
	0x73, 0x6f, 0x66, 0x74, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x73, 0x12, 0x21, 0x0a,
	0x0c, 0x73, 0x61, 0x6d, 0x6c, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0b, 0x73, 0x61, 0x6d, 0x6c, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x42, 0x15, 0x0a, 0x13, 0x5f, 0x6c, 0x6f, 0x67, 0x5f, 0x69, 0x6e, 0x5f, 0x77, 0x69, 0x74, 0x68,
	0x5f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x42, 0x18, 0x0a, 0x16, 0x5f, 0x6c, 0x6f, 0x67, 0x5f,
	0x69, 0x6e, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x6f, 0x66,
	0x74, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x6c, 0x6f, 0x67, 0x5f, 0x69, 0x6e, 0x5f, 0x77, 0x69, 0x74,
	0x68, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x6c, 0x6f, 0x67, 0x5f,
	0x69, 0x6e, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64,
	0x42, 0x13, 0x0a, 0x11, 0x5f, 0x6c, 0x6f, 0x67, 0x5f, 0x69, 0x6e, 0x5f, 0x77, 0x69, 0x74, 0x68,
	0x5f, 0x73, 0x61, 0x6d, 0x6c, 0x42, 0x20, 0x0a, 0x1e, 0x5f, 0x6c, 0x6f, 0x67, 0x5f, 0x69, 0x6e,
	0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61,
	0x74, 0x6f, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x6c, 0x6f, 0x67, 0x5f,
	0x69, 0x6e, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x6b, 0x65, 0x79, 0x42,
	0x0e, 0x0a, 0x0c, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x5f, 0x6d, 0x66, 0x61, 0x22,
	0x55, 0x0a, 0x1f, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x48, 0x6f, 0x73, 0x74, 0x65, 0x64, 0x44, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x73, 0x12, 0x32, 0x0a, 0x15, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x5f, 0x68, 0x6f, 0x73,
	0x74, 0x65, 0x64, 0x5f, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x13, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x48, 0x6f, 0x73, 0x74, 0x65, 0x64, 0x44,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x22, 0x52, 0x0a, 0x1e, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x6f, 0x66, 0x74, 0x54,
	0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x44, 0x73, 0x12, 0x30, 0x0a, 0x14, 0x6d, 0x69, 0x63, 0x72,
	0x6f, 0x73, 0x6f, 0x66, 0x74, 0x5f, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x12, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x6f, 0x66,
	0x74, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x73, 0x22, 0x62, 0x0a, 0x11, 0x53, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x4b, 0x65, 0x79, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x3d, 0x0a, 0x0e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x6a, 0x77,
	0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x52, 0x0c, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x4a, 0x77, 0x6b, 0x22, 0xd1,
	0x02, 0x0a, 0x04, 0x55, 0x73, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x3b, 0x0a,
	0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x88,
	0x01, 0x01, 0x12, 0x24, 0x0a, 0x0e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x5f, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x6d, 0x69, 0x63, 0x72,
	0x6f, 0x73, 0x6f, 0x66, 0x74, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x6f, 0x66, 0x74, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x15, 0x68, 0x61, 0x73, 0x5f, 0x61, 0x75, 0x74, 0x68,
	0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x13, 0x68, 0x61, 0x73, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69,
	0x63, 0x61, 0x74, 0x6f, 0x72, 0x41, 0x70, 0x70, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x6f, 0x77, 0x6e,
	0x65, 0x72, 0x22, 0x9f, 0x02, 0x0a, 0x07, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x17,
	0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x3b, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x07, 0x72, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x64, 0x12, 0x57, 0x0a, 0x13, 0x70,
	0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x66, 0x61, 0x63, 0x74,
	0x6f, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x74, 0x65, 0x73, 0x73, 0x65,
	0x72, 0x61, 0x6c, 0x2e, 0x66, 0x72, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e,
	0x50, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x41, 0x75, 0x74, 0x68, 0x46, 0x61, 0x63, 0x74, 0x6f,
	0x72, 0x52, 0x11, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x41, 0x75, 0x74, 0x68, 0x46, 0x61,
	0x63, 0x74, 0x6f, 0x72, 0x22, 0x85, 0x03, 0x0a, 0x0e, 0x53, 0x41, 0x4d, 0x4c, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3b, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x1d, 0x0a, 0x07, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x08, 0x48, 0x00, 0x52, 0x07, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x88, 0x01, 0x01,
	0x12, 0x1c, 0x0a, 0x0a, 0x73, 0x70, 0x5f, 0x61, 0x63, 0x73, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x70, 0x41, 0x63, 0x73, 0x55, 0x72, 0x6c, 0x12, 0x20,
	0x0a, 0x0c, 0x73, 0x70, 0x5f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x70, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x64,
	0x12, 0x28, 0x0a, 0x10, 0x69, 0x64, 0x70, 0x5f, 0x72, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x5f, 0x75, 0x72, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x69, 0x64, 0x70, 0x52,
	0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x55, 0x72, 0x6c, 0x12, 0x30, 0x0a, 0x14, 0x69, 0x64,
	0x70, 0x5f, 0x78, 0x35, 0x30, 0x39, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x69, 0x64, 0x70, 0x58, 0x35, 0x30,
	0x39, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x12, 0x22, 0x0a, 0x0d,
	0x69, 0x64, 0x70, 0x5f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x69, 0x64, 0x70, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x64,
	0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x22, 0xf6, 0x01, 0x0a,
	0x0a, 0x53, 0x43, 0x49, 0x4d, 0x41, 0x50, 0x49, 0x4b, 0x65, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x64,
	0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3b,
	0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x65, 0x63, 0x72,
	0x65, 0x74, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x72,
	0x65, 0x76, 0x6f, 0x6b, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x72, 0x65,
	0x76, 0x6f, 0x6b, 0x65, 0x64, 0x22, 0xc2, 0x02, 0x0a, 0x07, 0x50, 0x61, 0x73, 0x73, 0x6b, 0x65,
	0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x3b, 0x0a, 0x0b, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x12, 0x23, 0x0a, 0x0d, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x69,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x61, 0x6c, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f,
	0x6b, 0x65, 0x79, 0x5f, 0x70, 0x6b, 0x69, 0x78, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x50, 0x6b, 0x69, 0x78, 0x12, 0x16, 0x0a,
	0x06, 0x61, 0x61, 0x67, 0x75, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61,
	0x61, 0x67, 0x75, 0x69, 0x64, 0x12, 0x13, 0x0a, 0x05, 0x72, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x72, 0x70, 0x49, 0x64, 0x22, 0xc2, 0x01, 0x0a, 0x0a, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3b, 0x0a, 0x0b, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x77, 0x6e,
	0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x22,
	0x4b, 0x0a, 0x16, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x61, 0x62, 0x6c, 0x65, 0x4f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x69, 0x73,
	0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x2a, 0xdf, 0x01, 0x0a,
	0x11, 0x50, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x41, 0x75, 0x74, 0x68, 0x46, 0x61, 0x63, 0x74,
	0x6f, 0x72, 0x12, 0x23, 0x0a, 0x1f, 0x50, 0x52, 0x49, 0x4d, 0x41, 0x52, 0x59, 0x5f, 0x41, 0x55,
	0x54, 0x48, 0x5f, 0x46, 0x41, 0x43, 0x54, 0x4f, 0x52, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1d, 0x0a, 0x19, 0x50, 0x52, 0x49, 0x4d, 0x41,
	0x52, 0x59, 0x5f, 0x41, 0x55, 0x54, 0x48, 0x5f, 0x46, 0x41, 0x43, 0x54, 0x4f, 0x52, 0x5f, 0x45,
	0x4d, 0x41, 0x49, 0x4c, 0x10, 0x01, 0x12, 0x1e, 0x0a, 0x1a, 0x50, 0x52, 0x49, 0x4d, 0x41, 0x52,
	0x59, 0x5f, 0x41, 0x55, 0x54, 0x48, 0x5f, 0x46, 0x41, 0x43, 0x54, 0x4f, 0x52, 0x5f, 0x47, 0x4f,
	0x4f, 0x47, 0x4c, 0x45, 0x10, 0x02, 0x12, 0x21, 0x0a, 0x1d, 0x50, 0x52, 0x49, 0x4d, 0x41, 0x52,
	0x59, 0x5f, 0x41, 0x55, 0x54, 0x48, 0x5f, 0x46, 0x41, 0x43, 0x54, 0x4f, 0x52, 0x5f, 0x4d, 0x49,
	0x43, 0x52, 0x4f, 0x53, 0x4f, 0x46, 0x54, 0x10, 0x03, 0x12, 0x1c, 0x0a, 0x18, 0x50, 0x52, 0x49,
	0x4d, 0x41, 0x52, 0x59, 0x5f, 0x41, 0x55, 0x54, 0x48, 0x5f, 0x46, 0x41, 0x43, 0x54, 0x4f, 0x52,
	0x5f, 0x53, 0x41, 0x4d, 0x4c, 0x10, 0x04, 0x12, 0x25, 0x0a, 0x21, 0x50, 0x52, 0x49, 0x4d, 0x41,
	0x52, 0x59, 0x5f, 0x41, 0x55, 0x54, 0x48, 0x5f, 0x46, 0x41, 0x43, 0x54, 0x4f, 0x52, 0x5f, 0x49,
	0x4d, 0x50, 0x45, 0x52, 0x53, 0x4f, 0x4e, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x05, 0x42, 0xf2,
	0x01, 0x0a, 0x18, 0x63, 0x6f, 0x6d, 0x2e, 0x74, 0x65, 0x73, 0x73, 0x65, 0x72, 0x61, 0x6c, 0x2e,
	0x66, 0x72, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x42, 0x0b, 0x4d, 0x6f, 0x64,
	0x65, 0x6c, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x57, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x74, 0x65, 0x73, 0x73, 0x65, 0x72, 0x61, 0x6c, 0x2d,
	0x6c, 0x61, 0x62, 0x73, 0x2f, 0x74, 0x65, 0x73, 0x73, 0x65, 0x72, 0x61, 0x6c, 0x2f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x66, 0x72, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x64, 0x2f,
	0x67, 0x65, 0x6e, 0x2f, 0x74, 0x65, 0x73, 0x73, 0x65, 0x72, 0x61, 0x6c, 0x2f, 0x66, 0x72, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x64, 0x2f, 0x76, 0x31, 0x3b, 0x66, 0x72, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x64, 0x76, 0x31, 0xa2, 0x02, 0x03, 0x54, 0x46, 0x58, 0xaa, 0x02, 0x14, 0x54, 0x65, 0x73, 0x73,
	0x65, 0x72, 0x61, 0x6c, 0x2e, 0x46, 0x72, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x64, 0x2e, 0x56, 0x31,
	0xca, 0x02, 0x14, 0x54, 0x65, 0x73, 0x73, 0x65, 0x72, 0x61, 0x6c, 0x5c, 0x46, 0x72, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x64, 0x5c, 0x56, 0x31, 0xe2, 0x02, 0x20, 0x54, 0x65, 0x73, 0x73, 0x65, 0x72,
	0x61, 0x6c, 0x5c, 0x46, 0x72, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x64, 0x5c, 0x56, 0x31, 0x5c, 0x47,
	0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x16, 0x54, 0x65, 0x73,
	0x73, 0x65, 0x72, 0x61, 0x6c, 0x3a, 0x3a, 0x46, 0x72, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x64, 0x3a,
	0x3a, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_tesseral_frontend_v1_models_proto_rawDescOnce sync.Once
	file_tesseral_frontend_v1_models_proto_rawDescData []byte
)

func file_tesseral_frontend_v1_models_proto_rawDescGZIP() []byte {
	file_tesseral_frontend_v1_models_proto_rawDescOnce.Do(func() {
		file_tesseral_frontend_v1_models_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_tesseral_frontend_v1_models_proto_rawDesc), len(file_tesseral_frontend_v1_models_proto_rawDesc)))
	})
	return file_tesseral_frontend_v1_models_proto_rawDescData
}

var file_tesseral_frontend_v1_models_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_tesseral_frontend_v1_models_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_tesseral_frontend_v1_models_proto_goTypes = []any{
	(PrimaryAuthFactor)(0),                  // 0: tesseral.frontend.v1.PrimaryAuthFactor
	(*Project)(nil),                         // 1: tesseral.frontend.v1.Project
	(*Organization)(nil),                    // 2: tesseral.frontend.v1.Organization
	(*OrganizationGoogleHostedDomains)(nil), // 3: tesseral.frontend.v1.OrganizationGoogleHostedDomains
	(*OrganizationMicrosoftTenantIDs)(nil),  // 4: tesseral.frontend.v1.OrganizationMicrosoftTenantIDs
	(*SessionSigningKey)(nil),               // 5: tesseral.frontend.v1.SessionSigningKey
	(*User)(nil),                            // 6: tesseral.frontend.v1.User
	(*Session)(nil),                         // 7: tesseral.frontend.v1.Session
	(*SAMLConnection)(nil),                  // 8: tesseral.frontend.v1.SAMLConnection
	(*SCIMAPIKey)(nil),                      // 9: tesseral.frontend.v1.SCIMAPIKey
	(*Passkey)(nil),                         // 10: tesseral.frontend.v1.Passkey
	(*UserInvite)(nil),                      // 11: tesseral.frontend.v1.UserInvite
	(*SwitchableOrganization)(nil),          // 12: tesseral.frontend.v1.SwitchableOrganization
	(*timestamppb.Timestamp)(nil),           // 13: google.protobuf.Timestamp
	(*structpb.Struct)(nil),                 // 14: google.protobuf.Struct
}
var file_tesseral_frontend_v1_models_proto_depIdxs = []int32{
	13, // 0: tesseral.frontend.v1.Project.create_time:type_name -> google.protobuf.Timestamp
	13, // 1: tesseral.frontend.v1.Project.update_time:type_name -> google.protobuf.Timestamp
	13, // 2: tesseral.frontend.v1.Organization.create_time:type_name -> google.protobuf.Timestamp
	13, // 3: tesseral.frontend.v1.Organization.update_time:type_name -> google.protobuf.Timestamp
	14, // 4: tesseral.frontend.v1.SessionSigningKey.public_key_jwk:type_name -> google.protobuf.Struct
	13, // 5: tesseral.frontend.v1.User.create_time:type_name -> google.protobuf.Timestamp
	13, // 6: tesseral.frontend.v1.User.update_time:type_name -> google.protobuf.Timestamp
	13, // 7: tesseral.frontend.v1.Session.create_time:type_name -> google.protobuf.Timestamp
	13, // 8: tesseral.frontend.v1.Session.expire_time:type_name -> google.protobuf.Timestamp
	0,  // 9: tesseral.frontend.v1.Session.primary_auth_factor:type_name -> tesseral.frontend.v1.PrimaryAuthFactor
	13, // 10: tesseral.frontend.v1.SAMLConnection.create_time:type_name -> google.protobuf.Timestamp
	13, // 11: tesseral.frontend.v1.SAMLConnection.update_time:type_name -> google.protobuf.Timestamp
	13, // 12: tesseral.frontend.v1.SCIMAPIKey.create_time:type_name -> google.protobuf.Timestamp
	13, // 13: tesseral.frontend.v1.SCIMAPIKey.update_time:type_name -> google.protobuf.Timestamp
	13, // 14: tesseral.frontend.v1.Passkey.create_time:type_name -> google.protobuf.Timestamp
	13, // 15: tesseral.frontend.v1.Passkey.update_time:type_name -> google.protobuf.Timestamp
	13, // 16: tesseral.frontend.v1.UserInvite.create_time:type_name -> google.protobuf.Timestamp
	13, // 17: tesseral.frontend.v1.UserInvite.update_time:type_name -> google.protobuf.Timestamp
	18, // [18:18] is the sub-list for method output_type
	18, // [18:18] is the sub-list for method input_type
	18, // [18:18] is the sub-list for extension type_name
	18, // [18:18] is the sub-list for extension extendee
	0,  // [0:18] is the sub-list for field type_name
}

func init() { file_tesseral_frontend_v1_models_proto_init() }
func file_tesseral_frontend_v1_models_proto_init() {
	if File_tesseral_frontend_v1_models_proto != nil {
		return
	}
	file_tesseral_frontend_v1_models_proto_msgTypes[1].OneofWrappers = []any{}
	file_tesseral_frontend_v1_models_proto_msgTypes[5].OneofWrappers = []any{}
	file_tesseral_frontend_v1_models_proto_msgTypes[7].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_tesseral_frontend_v1_models_proto_rawDesc), len(file_tesseral_frontend_v1_models_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_tesseral_frontend_v1_models_proto_goTypes,
		DependencyIndexes: file_tesseral_frontend_v1_models_proto_depIdxs,
		EnumInfos:         file_tesseral_frontend_v1_models_proto_enumTypes,
		MessageInfos:      file_tesseral_frontend_v1_models_proto_msgTypes,
	}.Build()
	File_tesseral_frontend_v1_models_proto = out.File
	file_tesseral_frontend_v1_models_proto_goTypes = nil
	file_tesseral_frontend_v1_models_proto_depIdxs = nil
}
