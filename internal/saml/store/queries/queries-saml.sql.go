// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: queries-saml.sql

package queries

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createAuditLogEvent = `-- name: CreateAuditLogEvent :one
INSERT INTO audit_log_events (id, project_id, organization_id, actor_user_id, actor_session_id, resource_type, resource_id, event_name, event_time, event_details)
    VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, coalesce($10, '{}'::jsonb))
RETURNING
    id, project_id, organization_id, actor_user_id, actor_session_id, actor_api_key_id, actor_console_user_id, actor_console_session_id, actor_backend_api_key_id, actor_intermediate_session_id, resource_type, resource_id, event_name, event_time, event_details
`

type CreateAuditLogEventParams struct {
	ID             uuid.UUID
	ProjectID      uuid.UUID
	OrganizationID *uuid.UUID
	ActorUserID    *uuid.UUID
	ActorSessionID *uuid.UUID
	ResourceType   *AuditLogEventResourceType
	ResourceID     *uuid.UUID
	EventName      string
	EventTime      *time.Time
	EventDetails   interface{}
}

func (q *Queries) CreateAuditLogEvent(ctx context.Context, arg CreateAuditLogEventParams) (AuditLogEvent, error) {
	row := q.db.QueryRow(ctx, createAuditLogEvent,
		arg.ID,
		arg.ProjectID,
		arg.OrganizationID,
		arg.ActorUserID,
		arg.ActorSessionID,
		arg.ResourceType,
		arg.ResourceID,
		arg.EventName,
		arg.EventTime,
		arg.EventDetails,
	)
	var i AuditLogEvent
	err := row.Scan(
		&i.ID,
		&i.ProjectID,
		&i.OrganizationID,
		&i.ActorUserID,
		&i.ActorSessionID,
		&i.ActorApiKeyID,
		&i.ActorConsoleUserID,
		&i.ActorConsoleSessionID,
		&i.ActorBackendApiKeyID,
		&i.ActorIntermediateSessionID,
		&i.ResourceType,
		&i.ResourceID,
		&i.EventName,
		&i.EventTime,
		&i.EventDetails,
	)
	return i, err
}

const createIntermediateSession = `-- name: CreateIntermediateSession :one
INSERT INTO intermediate_sessions (id, project_id, expire_time, secret_token_sha256)
    VALUES ($1, $2, $3, $4)
RETURNING
    id, project_id, create_time, expire_time, email, google_oauth_state_sha256, microsoft_oauth_state_sha256, google_hosted_domain, google_user_id, microsoft_tenant_id, microsoft_user_id, password_verified, organization_id, update_time, secret_token_sha256, new_user_password_bcrypt, email_verification_challenge_sha256, email_verification_challenge_completed, passkey_credential_id, passkey_public_key, passkey_aaguid, passkey_verify_challenge_sha256, passkey_verified, authenticator_app_secret_ciphertext, authenticator_app_verified, passkey_rp_id, primary_auth_factor, relayed_session_state, password_reset_code_sha256, password_reset_code_verified, authenticator_app_recovery_code_sha256s, user_display_name, profile_picture_url, github_user_id, github_oauth_state_sha256, redirect_uri, return_relayed_session_token_as_query_param, verified_saml_connection_id
`

type CreateIntermediateSessionParams struct {
	ID                uuid.UUID
	ProjectID         uuid.UUID
	ExpireTime        *time.Time
	SecretTokenSha256 []byte
}

func (q *Queries) CreateIntermediateSession(ctx context.Context, arg CreateIntermediateSessionParams) (IntermediateSession, error) {
	row := q.db.QueryRow(ctx, createIntermediateSession,
		arg.ID,
		arg.ProjectID,
		arg.ExpireTime,
		arg.SecretTokenSha256,
	)
	var i IntermediateSession
	err := row.Scan(
		&i.ID,
		&i.ProjectID,
		&i.CreateTime,
		&i.ExpireTime,
		&i.Email,
		&i.GoogleOauthStateSha256,
		&i.MicrosoftOauthStateSha256,
		&i.GoogleHostedDomain,
		&i.GoogleUserID,
		&i.MicrosoftTenantID,
		&i.MicrosoftUserID,
		&i.PasswordVerified,
		&i.OrganizationID,
		&i.UpdateTime,
		&i.SecretTokenSha256,
		&i.NewUserPasswordBcrypt,
		&i.EmailVerificationChallengeSha256,
		&i.EmailVerificationChallengeCompleted,
		&i.PasskeyCredentialID,
		&i.PasskeyPublicKey,
		&i.PasskeyAaguid,
		&i.PasskeyVerifyChallengeSha256,
		&i.PasskeyVerified,
		&i.AuthenticatorAppSecretCiphertext,
		&i.AuthenticatorAppVerified,
		&i.PasskeyRpID,
		&i.PrimaryAuthFactor,
		&i.RelayedSessionState,
		&i.PasswordResetCodeSha256,
		&i.PasswordResetCodeVerified,
		&i.AuthenticatorAppRecoveryCodeSha256s,
		&i.UserDisplayName,
		&i.ProfilePictureUrl,
		&i.GithubUserID,
		&i.GithubOauthStateSha256,
		&i.RedirectUri,
		&i.ReturnRelayedSessionTokenAsQueryParam,
		&i.VerifiedSamlConnectionID,
	)
	return i, err
}

const getIntermediateSessionByTokenSHA256AndProjectID = `-- name: GetIntermediateSessionByTokenSHA256AndProjectID :one
SELECT
    id, project_id, create_time, expire_time, email, google_oauth_state_sha256, microsoft_oauth_state_sha256, google_hosted_domain, google_user_id, microsoft_tenant_id, microsoft_user_id, password_verified, organization_id, update_time, secret_token_sha256, new_user_password_bcrypt, email_verification_challenge_sha256, email_verification_challenge_completed, passkey_credential_id, passkey_public_key, passkey_aaguid, passkey_verify_challenge_sha256, passkey_verified, authenticator_app_secret_ciphertext, authenticator_app_verified, passkey_rp_id, primary_auth_factor, relayed_session_state, password_reset_code_sha256, password_reset_code_verified, authenticator_app_recovery_code_sha256s, user_display_name, profile_picture_url, github_user_id, github_oauth_state_sha256, redirect_uri, return_relayed_session_token_as_query_param, verified_saml_connection_id
FROM
    intermediate_sessions
WHERE
    secret_token_sha256 = $1
    AND project_id = $2
`

type GetIntermediateSessionByTokenSHA256AndProjectIDParams struct {
	SecretTokenSha256 []byte
	ProjectID         uuid.UUID
}

func (q *Queries) GetIntermediateSessionByTokenSHA256AndProjectID(ctx context.Context, arg GetIntermediateSessionByTokenSHA256AndProjectIDParams) (IntermediateSession, error) {
	row := q.db.QueryRow(ctx, getIntermediateSessionByTokenSHA256AndProjectID, arg.SecretTokenSha256, arg.ProjectID)
	var i IntermediateSession
	err := row.Scan(
		&i.ID,
		&i.ProjectID,
		&i.CreateTime,
		&i.ExpireTime,
		&i.Email,
		&i.GoogleOauthStateSha256,
		&i.MicrosoftOauthStateSha256,
		&i.GoogleHostedDomain,
		&i.GoogleUserID,
		&i.MicrosoftTenantID,
		&i.MicrosoftUserID,
		&i.PasswordVerified,
		&i.OrganizationID,
		&i.UpdateTime,
		&i.SecretTokenSha256,
		&i.NewUserPasswordBcrypt,
		&i.EmailVerificationChallengeSha256,
		&i.EmailVerificationChallengeCompleted,
		&i.PasskeyCredentialID,
		&i.PasskeyPublicKey,
		&i.PasskeyAaguid,
		&i.PasskeyVerifyChallengeSha256,
		&i.PasskeyVerified,
		&i.AuthenticatorAppSecretCiphertext,
		&i.AuthenticatorAppVerified,
		&i.PasskeyRpID,
		&i.PrimaryAuthFactor,
		&i.RelayedSessionState,
		&i.PasswordResetCodeSha256,
		&i.PasswordResetCodeVerified,
		&i.AuthenticatorAppRecoveryCodeSha256s,
		&i.UserDisplayName,
		&i.ProfilePictureUrl,
		&i.GithubUserID,
		&i.GithubOauthStateSha256,
		&i.RedirectUri,
		&i.ReturnRelayedSessionTokenAsQueryParam,
		&i.VerifiedSamlConnectionID,
	)
	return i, err
}

const getOrganizationDomains = `-- name: GetOrganizationDomains :many
SELECT
    DOMAIN
FROM
    organization_domains
WHERE
    organization_id = $1
`

func (q *Queries) GetOrganizationDomains(ctx context.Context, organizationID uuid.UUID) ([]string, error) {
	rows, err := q.db.Query(ctx, getOrganizationDomains, organizationID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var domain string
		if err := rows.Scan(&domain); err != nil {
			return nil, err
		}
		items = append(items, domain)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getProject = `-- name: GetProject :one
SELECT
    id, organization_id, log_in_with_password, log_in_with_google, log_in_with_microsoft, google_oauth_client_id, microsoft_oauth_client_id, google_oauth_client_secret_ciphertext, microsoft_oauth_client_secret_ciphertext, display_name, create_time, update_time, logins_disabled, log_in_with_authenticator_app, log_in_with_passkey, log_in_with_email, log_in_with_saml, redirect_uri, after_login_redirect_uri, after_signup_redirect_uri, vault_domain, email_send_from_domain, cookie_domain, email_quota_daily, stripe_customer_id, entitled_custom_vault_domains, entitled_backend_api_keys, log_in_with_github, github_oauth_client_id, github_oauth_client_secret_ciphertext, api_keys_enabled, api_key_secret_token_prefix, audit_logs_enabled, log_in_with_oidc
FROM
    projects
WHERE
    id = $1
`

func (q *Queries) GetProject(ctx context.Context, id uuid.UUID) (Project, error) {
	row := q.db.QueryRow(ctx, getProject, id)
	var i Project
	err := row.Scan(
		&i.ID,
		&i.OrganizationID,
		&i.LogInWithPassword,
		&i.LogInWithGoogle,
		&i.LogInWithMicrosoft,
		&i.GoogleOauthClientID,
		&i.MicrosoftOauthClientID,
		&i.GoogleOauthClientSecretCiphertext,
		&i.MicrosoftOauthClientSecretCiphertext,
		&i.DisplayName,
		&i.CreateTime,
		&i.UpdateTime,
		&i.LoginsDisabled,
		&i.LogInWithAuthenticatorApp,
		&i.LogInWithPasskey,
		&i.LogInWithEmail,
		&i.LogInWithSaml,
		&i.RedirectUri,
		&i.AfterLoginRedirectUri,
		&i.AfterSignupRedirectUri,
		&i.VaultDomain,
		&i.EmailSendFromDomain,
		&i.CookieDomain,
		&i.EmailQuotaDaily,
		&i.StripeCustomerID,
		&i.EntitledCustomVaultDomains,
		&i.EntitledBackendApiKeys,
		&i.LogInWithGithub,
		&i.GithubOauthClientID,
		&i.GithubOauthClientSecretCiphertext,
		&i.ApiKeysEnabled,
		&i.ApiKeySecretTokenPrefix,
		&i.AuditLogsEnabled,
		&i.LogInWithOidc,
	)
	return i, err
}

const getSAMLConnection = `-- name: GetSAMLConnection :one
SELECT
    saml_connections.id, saml_connections.organization_id, saml_connections.create_time, saml_connections.is_primary, saml_connections.idp_redirect_url, saml_connections.idp_x509_certificate, saml_connections.idp_entity_id, saml_connections.update_time
FROM
    saml_connections
    JOIN organizations ON saml_connections.organization_id = organizations.id
WHERE
    organizations.project_id = $1
    AND organizations.log_in_with_saml
    AND saml_connections.id = $2
`

type GetSAMLConnectionParams struct {
	ProjectID uuid.UUID
	ID        uuid.UUID
}

func (q *Queries) GetSAMLConnection(ctx context.Context, arg GetSAMLConnectionParams) (SamlConnection, error) {
	row := q.db.QueryRow(ctx, getSAMLConnection, arg.ProjectID, arg.ID)
	var i SamlConnection
	err := row.Scan(
		&i.ID,
		&i.OrganizationID,
		&i.CreateTime,
		&i.IsPrimary,
		&i.IdpRedirectUrl,
		&i.IdpX509Certificate,
		&i.IdpEntityID,
		&i.UpdateTime,
	)
	return i, err
}

const updateIntermediateSession = `-- name: UpdateIntermediateSession :exec
UPDATE
    intermediate_sessions
SET
    email = $2,
    verified_saml_connection_id = $3,
    organization_id = $4,
    primary_auth_factor = 'saml'
WHERE
    id = $1
`

type UpdateIntermediateSessionParams struct {
	ID                       uuid.UUID
	Email                    *string
	VerifiedSamlConnectionID *uuid.UUID
	OrganizationID           *uuid.UUID
}

func (q *Queries) UpdateIntermediateSession(ctx context.Context, arg UpdateIntermediateSessionParams) error {
	_, err := q.db.Exec(ctx, updateIntermediateSession,
		arg.ID,
		arg.Email,
		arg.VerifiedSamlConnectionID,
		arg.OrganizationID,
	)
	return err
}
