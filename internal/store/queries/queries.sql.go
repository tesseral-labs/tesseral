// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: queries.sql

package queries

import (
	"context"

	"github.com/google/uuid"
)

const createGoogleUser = `-- name: CreateGoogleUser :one
insert into users (
  id,
  organization_id,
  google_user_id, 
  verified_email
) values (
  $1, 
  $2, 
  $3,
  $4
)
returning id, organization_id, unverified_email, verified_email, password_bcrypt, google_user_id, microsoft_user_id
`

type CreateGoogleUserParams struct {
	ID             uuid.UUID
	OrganizationID uuid.UUID
	GoogleUserID   *string
	VerifiedEmail  *string
}

func (q *Queries) CreateGoogleUser(ctx context.Context, arg CreateGoogleUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createGoogleUser,
		arg.ID,
		arg.OrganizationID,
		arg.GoogleUserID,
		arg.VerifiedEmail,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.OrganizationID,
		&i.UnverifiedEmail,
		&i.VerifiedEmail,
		&i.PasswordBcrypt,
		&i.GoogleUserID,
		&i.MicrosoftUserID,
	)
	return i, err
}

const createMicrosoftUser = `-- name: CreateMicrosoftUser :one
insert into users (
  id,
  organization_id,
  microsoft_user_id, 
  verified_email
) values (
  $1, 
  $2, 
  $3,
  $4
)
returning id, organization_id, unverified_email, verified_email, password_bcrypt, google_user_id, microsoft_user_id
`

type CreateMicrosoftUserParams struct {
	ID              uuid.UUID
	OrganizationID  uuid.UUID
	MicrosoftUserID *string
	VerifiedEmail   *string
}

func (q *Queries) CreateMicrosoftUser(ctx context.Context, arg CreateMicrosoftUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createMicrosoftUser,
		arg.ID,
		arg.OrganizationID,
		arg.MicrosoftUserID,
		arg.VerifiedEmail,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.OrganizationID,
		&i.UnverifiedEmail,
		&i.VerifiedEmail,
		&i.PasswordBcrypt,
		&i.GoogleUserID,
		&i.MicrosoftUserID,
	)
	return i, err
}

const createOrganization = `-- name: CreateOrganization :one
insert into organizations (
  id, 
  project_id, 
  display_name, 
  google_hosted_domain, 
  microsoft_tenant_id,
  override_log_in_with_google_enabled,
  override_log_in_with_microsoft_enabled,
  override_log_in_with_password_enabled
) values (
  $1, 
  $2, 
  $3, 
  $4, 
  $5,
  $6,
  $7,
  $8
)
returning id, project_id, display_name, override_log_in_with_password_enabled, override_log_in_with_google_enabled, override_log_in_with_microsoft_enabled, google_hosted_domain, microsoft_tenant_id
`

type CreateOrganizationParams struct {
	ID                                uuid.UUID
	ProjectID                         uuid.UUID
	DisplayName                       string
	GoogleHostedDomain                *string
	MicrosoftTenantID                 *string
	OverrideLogInWithGoogleEnabled    *bool
	OverrideLogInWithMicrosoftEnabled *bool
	OverrideLogInWithPasswordEnabled  *bool
}

func (q *Queries) CreateOrganization(ctx context.Context, arg CreateOrganizationParams) (Organization, error) {
	row := q.db.QueryRow(ctx, createOrganization,
		arg.ID,
		arg.ProjectID,
		arg.DisplayName,
		arg.GoogleHostedDomain,
		arg.MicrosoftTenantID,
		arg.OverrideLogInWithGoogleEnabled,
		arg.OverrideLogInWithMicrosoftEnabled,
		arg.OverrideLogInWithPasswordEnabled,
	)
	var i Organization
	err := row.Scan(
		&i.ID,
		&i.ProjectID,
		&i.DisplayName,
		&i.OverrideLogInWithPasswordEnabled,
		&i.OverrideLogInWithGoogleEnabled,
		&i.OverrideLogInWithMicrosoftEnabled,
		&i.GoogleHostedDomain,
		&i.MicrosoftTenantID,
	)
	return i, err
}

const createProject = `-- name: CreateProject :one
insert into projects (
  id, 
  organization_id, 
  log_in_with_password_enabled, 
  log_in_with_google_enabled, 
  log_in_with_microsoft_enabled, 
  google_oauth_client_id, 
  google_oauth_client_secret, 
  microsoft_oauth_client_id, 
  microsoft_oauth_client_secret
) values (
  $1, 
  $2, 
  $3, 
  $4, 
  $5, 
  $6, 
  $7, 
  $8, 
  $9
)
returning id, organization_id, log_in_with_password_enabled, log_in_with_google_enabled, log_in_with_microsoft_enabled, google_oauth_client_id, google_oauth_client_secret, microsoft_oauth_client_id, microsoft_oauth_client_secret
`

type CreateProjectParams struct {
	ID                         uuid.UUID
	OrganizationID             *uuid.UUID
	LogInWithPasswordEnabled   bool
	LogInWithGoogleEnabled     bool
	LogInWithMicrosoftEnabled  bool
	GoogleOauthClientID        *string
	GoogleOauthClientSecret    *string
	MicrosoftOauthClientID     *string
	MicrosoftOauthClientSecret *string
}

func (q *Queries) CreateProject(ctx context.Context, arg CreateProjectParams) (Project, error) {
	row := q.db.QueryRow(ctx, createProject,
		arg.ID,
		arg.OrganizationID,
		arg.LogInWithPasswordEnabled,
		arg.LogInWithGoogleEnabled,
		arg.LogInWithMicrosoftEnabled,
		arg.GoogleOauthClientID,
		arg.GoogleOauthClientSecret,
		arg.MicrosoftOauthClientID,
		arg.MicrosoftOauthClientSecret,
	)
	var i Project
	err := row.Scan(
		&i.ID,
		&i.OrganizationID,
		&i.LogInWithPasswordEnabled,
		&i.LogInWithGoogleEnabled,
		&i.LogInWithMicrosoftEnabled,
		&i.GoogleOauthClientID,
		&i.GoogleOauthClientSecret,
		&i.MicrosoftOauthClientID,
		&i.MicrosoftOauthClientSecret,
	)
	return i, err
}

const createUnverifiedUser = `-- name: CreateUnverifiedUser :one
insert into users (
  id,
  organization_id,
  unverified_email
) values (
  $1,
  $2,
  $3
)
returning id, organization_id, unverified_email, verified_email, password_bcrypt, google_user_id, microsoft_user_id
`

type CreateUnverifiedUserParams struct {
	ID              uuid.UUID
	OrganizationID  uuid.UUID
	UnverifiedEmail *string
}

func (q *Queries) CreateUnverifiedUser(ctx context.Context, arg CreateUnverifiedUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUnverifiedUser, arg.ID, arg.OrganizationID, arg.UnverifiedEmail)
	var i User
	err := row.Scan(
		&i.ID,
		&i.OrganizationID,
		&i.UnverifiedEmail,
		&i.VerifiedEmail,
		&i.PasswordBcrypt,
		&i.GoogleUserID,
		&i.MicrosoftUserID,
	)
	return i, err
}

const createUser = `-- name: CreateUser :one
insert into users (
  id, 
  organization_id,
  unverified_email,
  verified_email,
  password_bcrypt,
  google_user_id,
  microsoft_user_id
) values (
  $1, 
  $2, 
  $3,
  $4,
  $5,
  $6,
  $7
)
returning id, organization_id, unverified_email, verified_email, password_bcrypt, google_user_id, microsoft_user_id
`

type CreateUserParams struct {
	ID              uuid.UUID
	OrganizationID  uuid.UUID
	UnverifiedEmail *string
	VerifiedEmail   *string
	PasswordBcrypt  *string
	GoogleUserID    *string
	MicrosoftUserID *string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.ID,
		arg.OrganizationID,
		arg.UnverifiedEmail,
		arg.VerifiedEmail,
		arg.PasswordBcrypt,
		arg.GoogleUserID,
		arg.MicrosoftUserID,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.OrganizationID,
		&i.UnverifiedEmail,
		&i.VerifiedEmail,
		&i.PasswordBcrypt,
		&i.GoogleUserID,
		&i.MicrosoftUserID,
	)
	return i, err
}

const getOrganizationByGoogleHostedDomain = `-- name: GetOrganizationByGoogleHostedDomain :one
select id, project_id, display_name, override_log_in_with_password_enabled, override_log_in_with_google_enabled, override_log_in_with_microsoft_enabled, google_hosted_domain, microsoft_tenant_id from organizations where google_hosted_domain = $1
`

func (q *Queries) GetOrganizationByGoogleHostedDomain(ctx context.Context, googleHostedDomain *string) (Organization, error) {
	row := q.db.QueryRow(ctx, getOrganizationByGoogleHostedDomain, googleHostedDomain)
	var i Organization
	err := row.Scan(
		&i.ID,
		&i.ProjectID,
		&i.DisplayName,
		&i.OverrideLogInWithPasswordEnabled,
		&i.OverrideLogInWithGoogleEnabled,
		&i.OverrideLogInWithMicrosoftEnabled,
		&i.GoogleHostedDomain,
		&i.MicrosoftTenantID,
	)
	return i, err
}

const getOrganizationByID = `-- name: GetOrganizationByID :one
select id, project_id, display_name, override_log_in_with_password_enabled, override_log_in_with_google_enabled, override_log_in_with_microsoft_enabled, google_hosted_domain, microsoft_tenant_id from organizations where id = $1
`

func (q *Queries) GetOrganizationByID(ctx context.Context, id uuid.UUID) (Organization, error) {
	row := q.db.QueryRow(ctx, getOrganizationByID, id)
	var i Organization
	err := row.Scan(
		&i.ID,
		&i.ProjectID,
		&i.DisplayName,
		&i.OverrideLogInWithPasswordEnabled,
		&i.OverrideLogInWithGoogleEnabled,
		&i.OverrideLogInWithMicrosoftEnabled,
		&i.GoogleHostedDomain,
		&i.MicrosoftTenantID,
	)
	return i, err
}

const getProjectByID = `-- name: GetProjectByID :one
select id, organization_id, log_in_with_password_enabled, log_in_with_google_enabled, log_in_with_microsoft_enabled, google_oauth_client_id, google_oauth_client_secret, microsoft_oauth_client_id, microsoft_oauth_client_secret from projects where id = $1
`

func (q *Queries) GetProjectByID(ctx context.Context, id uuid.UUID) (Project, error) {
	row := q.db.QueryRow(ctx, getProjectByID, id)
	var i Project
	err := row.Scan(
		&i.ID,
		&i.OrganizationID,
		&i.LogInWithPasswordEnabled,
		&i.LogInWithGoogleEnabled,
		&i.LogInWithMicrosoftEnabled,
		&i.GoogleOauthClientID,
		&i.GoogleOauthClientSecret,
		&i.MicrosoftOauthClientID,
		&i.MicrosoftOauthClientSecret,
	)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
select id, organization_id, unverified_email, verified_email, password_bcrypt, google_user_id, microsoft_user_id from users where verified_email = $1 or unverified_email = $1
`

func (q *Queries) GetUserByEmail(ctx context.Context, verifiedEmail *string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByEmail, verifiedEmail)
	var i User
	err := row.Scan(
		&i.ID,
		&i.OrganizationID,
		&i.UnverifiedEmail,
		&i.VerifiedEmail,
		&i.PasswordBcrypt,
		&i.GoogleUserID,
		&i.MicrosoftUserID,
	)
	return i, err
}

const getUserByGoogleUserID = `-- name: GetUserByGoogleUserID :one
select id, organization_id, unverified_email, verified_email, password_bcrypt, google_user_id, microsoft_user_id from users where organization_id = $1 and google_user_id = $2
`

type GetUserByGoogleUserIDParams struct {
	OrganizationID uuid.UUID
	GoogleUserID   *string
}

func (q *Queries) GetUserByGoogleUserID(ctx context.Context, arg GetUserByGoogleUserIDParams) (User, error) {
	row := q.db.QueryRow(ctx, getUserByGoogleUserID, arg.OrganizationID, arg.GoogleUserID)
	var i User
	err := row.Scan(
		&i.ID,
		&i.OrganizationID,
		&i.UnverifiedEmail,
		&i.VerifiedEmail,
		&i.PasswordBcrypt,
		&i.GoogleUserID,
		&i.MicrosoftUserID,
	)
	return i, err
}

const getUserByID = `-- name: GetUserByID :one
select id, organization_id, unverified_email, verified_email, password_bcrypt, google_user_id, microsoft_user_id from users where id = $1
`

func (q *Queries) GetUserByID(ctx context.Context, id uuid.UUID) (User, error) {
	row := q.db.QueryRow(ctx, getUserByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.OrganizationID,
		&i.UnverifiedEmail,
		&i.VerifiedEmail,
		&i.PasswordBcrypt,
		&i.GoogleUserID,
		&i.MicrosoftUserID,
	)
	return i, err
}

const getUserByMicrosoftUserID = `-- name: GetUserByMicrosoftUserID :one
select id, organization_id, unverified_email, verified_email, password_bcrypt, google_user_id, microsoft_user_id from users where organization_id = $1 and microsoft_user_id = $2
`

type GetUserByMicrosoftUserIDParams struct {
	OrganizationID  uuid.UUID
	MicrosoftUserID *string
}

func (q *Queries) GetUserByMicrosoftUserID(ctx context.Context, arg GetUserByMicrosoftUserIDParams) (User, error) {
	row := q.db.QueryRow(ctx, getUserByMicrosoftUserID, arg.OrganizationID, arg.MicrosoftUserID)
	var i User
	err := row.Scan(
		&i.ID,
		&i.OrganizationID,
		&i.UnverifiedEmail,
		&i.VerifiedEmail,
		&i.PasswordBcrypt,
		&i.GoogleUserID,
		&i.MicrosoftUserID,
	)
	return i, err
}

const getUserByUnverifiedEmail = `-- name: GetUserByUnverifiedEmail :one
select id, organization_id, unverified_email, verified_email, password_bcrypt, google_user_id, microsoft_user_id from users where unverified_email = $1
`

func (q *Queries) GetUserByUnverifiedEmail(ctx context.Context, unverifiedEmail *string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByUnverifiedEmail, unverifiedEmail)
	var i User
	err := row.Scan(
		&i.ID,
		&i.OrganizationID,
		&i.UnverifiedEmail,
		&i.VerifiedEmail,
		&i.PasswordBcrypt,
		&i.GoogleUserID,
		&i.MicrosoftUserID,
	)
	return i, err
}

const getUserByVerifiedEmail = `-- name: GetUserByVerifiedEmail :one
select id, organization_id, unverified_email, verified_email, password_bcrypt, google_user_id, microsoft_user_id from users where verified_email = $1
`

func (q *Queries) GetUserByVerifiedEmail(ctx context.Context, verifiedEmail *string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByVerifiedEmail, verifiedEmail)
	var i User
	err := row.Scan(
		&i.ID,
		&i.OrganizationID,
		&i.UnverifiedEmail,
		&i.VerifiedEmail,
		&i.PasswordBcrypt,
		&i.GoogleUserID,
		&i.MicrosoftUserID,
	)
	return i, err
}

const listOrganizations = `-- name: ListOrganizations :many
select id, project_id, display_name, override_log_in_with_password_enabled, override_log_in_with_google_enabled, override_log_in_with_microsoft_enabled, google_hosted_domain, microsoft_tenant_id from organizations
`

func (q *Queries) ListOrganizations(ctx context.Context) ([]Organization, error) {
	rows, err := q.db.Query(ctx, listOrganizations)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Organization
	for rows.Next() {
		var i Organization
		if err := rows.Scan(
			&i.ID,
			&i.ProjectID,
			&i.DisplayName,
			&i.OverrideLogInWithPasswordEnabled,
			&i.OverrideLogInWithGoogleEnabled,
			&i.OverrideLogInWithMicrosoftEnabled,
			&i.GoogleHostedDomain,
			&i.MicrosoftTenantID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listOrganizationsByProjectId = `-- name: ListOrganizationsByProjectId :many
select id, project_id, display_name, override_log_in_with_password_enabled, override_log_in_with_google_enabled, override_log_in_with_microsoft_enabled, google_hosted_domain, microsoft_tenant_id from organizations where project_id = $1 order by id limit $2
`

type ListOrganizationsByProjectIdParams struct {
	ProjectID uuid.UUID
	Limit     int32
}

func (q *Queries) ListOrganizationsByProjectId(ctx context.Context, arg ListOrganizationsByProjectIdParams) ([]Organization, error) {
	rows, err := q.db.Query(ctx, listOrganizationsByProjectId, arg.ProjectID, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Organization
	for rows.Next() {
		var i Organization
		if err := rows.Scan(
			&i.ID,
			&i.ProjectID,
			&i.DisplayName,
			&i.OverrideLogInWithPasswordEnabled,
			&i.OverrideLogInWithGoogleEnabled,
			&i.OverrideLogInWithMicrosoftEnabled,
			&i.GoogleHostedDomain,
			&i.MicrosoftTenantID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listProjects = `-- name: ListProjects :many
select id, organization_id, log_in_with_password_enabled, log_in_with_google_enabled, log_in_with_microsoft_enabled, google_oauth_client_id, google_oauth_client_secret, microsoft_oauth_client_id, microsoft_oauth_client_secret from projects order by id limit $1
`

func (q *Queries) ListProjects(ctx context.Context, limit int32) ([]Project, error) {
	rows, err := q.db.Query(ctx, listProjects, limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Project
	for rows.Next() {
		var i Project
		if err := rows.Scan(
			&i.ID,
			&i.OrganizationID,
			&i.LogInWithPasswordEnabled,
			&i.LogInWithGoogleEnabled,
			&i.LogInWithMicrosoftEnabled,
			&i.GoogleOauthClientID,
			&i.GoogleOauthClientSecret,
			&i.MicrosoftOauthClientID,
			&i.MicrosoftOauthClientSecret,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listUsersByEmail = `-- name: ListUsersByEmail :many
select id, organization_id, unverified_email, verified_email, password_bcrypt, google_user_id, microsoft_user_id from users where unverified_email = $1 or verified_email = $1
`

func (q *Queries) ListUsersByEmail(ctx context.Context, unverifiedEmail *string) ([]User, error) {
	rows, err := q.db.Query(ctx, listUsersByEmail, unverifiedEmail)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.OrganizationID,
			&i.UnverifiedEmail,
			&i.VerifiedEmail,
			&i.PasswordBcrypt,
			&i.GoogleUserID,
			&i.MicrosoftUserID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listUsersByOrganization = `-- name: ListUsersByOrganization :many
select id, organization_id, unverified_email, verified_email, password_bcrypt, google_user_id, microsoft_user_id from users where organization_id = $1 order by id limit $2
`

type ListUsersByOrganizationParams struct {
	OrganizationID uuid.UUID
	Limit          int32
}

func (q *Queries) ListUsersByOrganization(ctx context.Context, arg ListUsersByOrganizationParams) ([]User, error) {
	rows, err := q.db.Query(ctx, listUsersByOrganization, arg.OrganizationID, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.OrganizationID,
			&i.UnverifiedEmail,
			&i.VerifiedEmail,
			&i.PasswordBcrypt,
			&i.GoogleUserID,
			&i.MicrosoftUserID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateOrganization = `-- name: UpdateOrganization :one
update organizations set 
  display_name = $2, 
  google_hosted_domain = $3, 
  microsoft_tenant_id = $4,
  override_log_in_with_password_enabled = $5,
  override_log_in_with_google_enabled = $6,
  override_log_in_with_microsoft_enabled = $7 
where id = $1 returning id, project_id, display_name, override_log_in_with_password_enabled, override_log_in_with_google_enabled, override_log_in_with_microsoft_enabled, google_hosted_domain, microsoft_tenant_id
`

type UpdateOrganizationParams struct {
	ID                                uuid.UUID
	DisplayName                       string
	GoogleHostedDomain                *string
	MicrosoftTenantID                 *string
	OverrideLogInWithPasswordEnabled  *bool
	OverrideLogInWithGoogleEnabled    *bool
	OverrideLogInWithMicrosoftEnabled *bool
}

func (q *Queries) UpdateOrganization(ctx context.Context, arg UpdateOrganizationParams) (Organization, error) {
	row := q.db.QueryRow(ctx, updateOrganization,
		arg.ID,
		arg.DisplayName,
		arg.GoogleHostedDomain,
		arg.MicrosoftTenantID,
		arg.OverrideLogInWithPasswordEnabled,
		arg.OverrideLogInWithGoogleEnabled,
		arg.OverrideLogInWithMicrosoftEnabled,
	)
	var i Organization
	err := row.Scan(
		&i.ID,
		&i.ProjectID,
		&i.DisplayName,
		&i.OverrideLogInWithPasswordEnabled,
		&i.OverrideLogInWithGoogleEnabled,
		&i.OverrideLogInWithMicrosoftEnabled,
		&i.GoogleHostedDomain,
		&i.MicrosoftTenantID,
	)
	return i, err
}

const updateOrganizationDisplayName = `-- name: UpdateOrganizationDisplayName :one
update organizations set display_name = $2 where id = $1 returning id, project_id, display_name, override_log_in_with_password_enabled, override_log_in_with_google_enabled, override_log_in_with_microsoft_enabled, google_hosted_domain, microsoft_tenant_id
`

type UpdateOrganizationDisplayNameParams struct {
	ID          uuid.UUID
	DisplayName string
}

func (q *Queries) UpdateOrganizationDisplayName(ctx context.Context, arg UpdateOrganizationDisplayNameParams) (Organization, error) {
	row := q.db.QueryRow(ctx, updateOrganizationDisplayName, arg.ID, arg.DisplayName)
	var i Organization
	err := row.Scan(
		&i.ID,
		&i.ProjectID,
		&i.DisplayName,
		&i.OverrideLogInWithPasswordEnabled,
		&i.OverrideLogInWithGoogleEnabled,
		&i.OverrideLogInWithMicrosoftEnabled,
		&i.GoogleHostedDomain,
		&i.MicrosoftTenantID,
	)
	return i, err
}

const updateOrganizationGoogleHostedDomain = `-- name: UpdateOrganizationGoogleHostedDomain :one
update organizations set google_hosted_domain = $2 where id = $1 returning id, project_id, display_name, override_log_in_with_password_enabled, override_log_in_with_google_enabled, override_log_in_with_microsoft_enabled, google_hosted_domain, microsoft_tenant_id
`

type UpdateOrganizationGoogleHostedDomainParams struct {
	ID                 uuid.UUID
	GoogleHostedDomain *string
}

func (q *Queries) UpdateOrganizationGoogleHostedDomain(ctx context.Context, arg UpdateOrganizationGoogleHostedDomainParams) (Organization, error) {
	row := q.db.QueryRow(ctx, updateOrganizationGoogleHostedDomain, arg.ID, arg.GoogleHostedDomain)
	var i Organization
	err := row.Scan(
		&i.ID,
		&i.ProjectID,
		&i.DisplayName,
		&i.OverrideLogInWithPasswordEnabled,
		&i.OverrideLogInWithGoogleEnabled,
		&i.OverrideLogInWithMicrosoftEnabled,
		&i.GoogleHostedDomain,
		&i.MicrosoftTenantID,
	)
	return i, err
}

const updateOrganizationMicrosoftTenantID = `-- name: UpdateOrganizationMicrosoftTenantID :one
update organizations set microsoft_tenant_id = $2 where id = $1 returning id, project_id, display_name, override_log_in_with_password_enabled, override_log_in_with_google_enabled, override_log_in_with_microsoft_enabled, google_hosted_domain, microsoft_tenant_id
`

type UpdateOrganizationMicrosoftTenantIDParams struct {
	ID                uuid.UUID
	MicrosoftTenantID *string
}

func (q *Queries) UpdateOrganizationMicrosoftTenantID(ctx context.Context, arg UpdateOrganizationMicrosoftTenantIDParams) (Organization, error) {
	row := q.db.QueryRow(ctx, updateOrganizationMicrosoftTenantID, arg.ID, arg.MicrosoftTenantID)
	var i Organization
	err := row.Scan(
		&i.ID,
		&i.ProjectID,
		&i.DisplayName,
		&i.OverrideLogInWithPasswordEnabled,
		&i.OverrideLogInWithGoogleEnabled,
		&i.OverrideLogInWithMicrosoftEnabled,
		&i.GoogleHostedDomain,
		&i.MicrosoftTenantID,
	)
	return i, err
}

const updateOrganizationOverrides = `-- name: UpdateOrganizationOverrides :one
update organizations set 
  override_log_in_with_password_enabled = $2, 
  override_log_in_with_google_enabled = $3, 
  override_log_in_with_microsoft_enabled = $4 
where id = $1 returning id, project_id, display_name, override_log_in_with_password_enabled, override_log_in_with_google_enabled, override_log_in_with_microsoft_enabled, google_hosted_domain, microsoft_tenant_id
`

type UpdateOrganizationOverridesParams struct {
	ID                                uuid.UUID
	OverrideLogInWithPasswordEnabled  *bool
	OverrideLogInWithGoogleEnabled    *bool
	OverrideLogInWithMicrosoftEnabled *bool
}

func (q *Queries) UpdateOrganizationOverrides(ctx context.Context, arg UpdateOrganizationOverridesParams) (Organization, error) {
	row := q.db.QueryRow(ctx, updateOrganizationOverrides,
		arg.ID,
		arg.OverrideLogInWithPasswordEnabled,
		arg.OverrideLogInWithGoogleEnabled,
		arg.OverrideLogInWithMicrosoftEnabled,
	)
	var i Organization
	err := row.Scan(
		&i.ID,
		&i.ProjectID,
		&i.DisplayName,
		&i.OverrideLogInWithPasswordEnabled,
		&i.OverrideLogInWithGoogleEnabled,
		&i.OverrideLogInWithMicrosoftEnabled,
		&i.GoogleHostedDomain,
		&i.MicrosoftTenantID,
	)
	return i, err
}

const updateProject = `-- name: UpdateProject :one
update projects set 
  log_in_with_password_enabled = $2, 
  log_in_with_google_enabled = $3, 
  log_in_with_microsoft_enabled = $4,
  google_oauth_client_id = $5,
  google_oauth_client_secret = $6,
  microsoft_oauth_client_id = $7,
  microsoft_oauth_client_secret = $8
where id = $1 returning id, organization_id, log_in_with_password_enabled, log_in_with_google_enabled, log_in_with_microsoft_enabled, google_oauth_client_id, google_oauth_client_secret, microsoft_oauth_client_id, microsoft_oauth_client_secret
`

type UpdateProjectParams struct {
	ID                         uuid.UUID
	LogInWithPasswordEnabled   bool
	LogInWithGoogleEnabled     bool
	LogInWithMicrosoftEnabled  bool
	GoogleOauthClientID        *string
	GoogleOauthClientSecret    *string
	MicrosoftOauthClientID     *string
	MicrosoftOauthClientSecret *string
}

func (q *Queries) UpdateProject(ctx context.Context, arg UpdateProjectParams) (Project, error) {
	row := q.db.QueryRow(ctx, updateProject,
		arg.ID,
		arg.LogInWithPasswordEnabled,
		arg.LogInWithGoogleEnabled,
		arg.LogInWithMicrosoftEnabled,
		arg.GoogleOauthClientID,
		arg.GoogleOauthClientSecret,
		arg.MicrosoftOauthClientID,
		arg.MicrosoftOauthClientSecret,
	)
	var i Project
	err := row.Scan(
		&i.ID,
		&i.OrganizationID,
		&i.LogInWithPasswordEnabled,
		&i.LogInWithGoogleEnabled,
		&i.LogInWithMicrosoftEnabled,
		&i.GoogleOauthClientID,
		&i.GoogleOauthClientSecret,
		&i.MicrosoftOauthClientID,
		&i.MicrosoftOauthClientSecret,
	)
	return i, err
}

const updateProjectGoogleOAuthClient = `-- name: UpdateProjectGoogleOAuthClient :one
update projects set google_oauth_client_id = $2, google_oauth_client_secret = $3 where id = $1 returning id, organization_id, log_in_with_password_enabled, log_in_with_google_enabled, log_in_with_microsoft_enabled, google_oauth_client_id, google_oauth_client_secret, microsoft_oauth_client_id, microsoft_oauth_client_secret
`

type UpdateProjectGoogleOAuthClientParams struct {
	ID                      uuid.UUID
	GoogleOauthClientID     *string
	GoogleOauthClientSecret *string
}

func (q *Queries) UpdateProjectGoogleOAuthClient(ctx context.Context, arg UpdateProjectGoogleOAuthClientParams) (Project, error) {
	row := q.db.QueryRow(ctx, updateProjectGoogleOAuthClient, arg.ID, arg.GoogleOauthClientID, arg.GoogleOauthClientSecret)
	var i Project
	err := row.Scan(
		&i.ID,
		&i.OrganizationID,
		&i.LogInWithPasswordEnabled,
		&i.LogInWithGoogleEnabled,
		&i.LogInWithMicrosoftEnabled,
		&i.GoogleOauthClientID,
		&i.GoogleOauthClientSecret,
		&i.MicrosoftOauthClientID,
		&i.MicrosoftOauthClientSecret,
	)
	return i, err
}

const updateProjectLoginMethods = `-- name: UpdateProjectLoginMethods :one
update projects set 
  log_in_with_password_enabled = $2, 
  log_in_with_google_enabled = $3, 
  log_in_with_microsoft_enabled = $4 
where id = $1 returning id, organization_id, log_in_with_password_enabled, log_in_with_google_enabled, log_in_with_microsoft_enabled, google_oauth_client_id, google_oauth_client_secret, microsoft_oauth_client_id, microsoft_oauth_client_secret
`

type UpdateProjectLoginMethodsParams struct {
	ID                        uuid.UUID
	LogInWithPasswordEnabled  bool
	LogInWithGoogleEnabled    bool
	LogInWithMicrosoftEnabled bool
}

func (q *Queries) UpdateProjectLoginMethods(ctx context.Context, arg UpdateProjectLoginMethodsParams) (Project, error) {
	row := q.db.QueryRow(ctx, updateProjectLoginMethods,
		arg.ID,
		arg.LogInWithPasswordEnabled,
		arg.LogInWithGoogleEnabled,
		arg.LogInWithMicrosoftEnabled,
	)
	var i Project
	err := row.Scan(
		&i.ID,
		&i.OrganizationID,
		&i.LogInWithPasswordEnabled,
		&i.LogInWithGoogleEnabled,
		&i.LogInWithMicrosoftEnabled,
		&i.GoogleOauthClientID,
		&i.GoogleOauthClientSecret,
		&i.MicrosoftOauthClientID,
		&i.MicrosoftOauthClientSecret,
	)
	return i, err
}

const updateProjectMicrosoftOAuthClient = `-- name: UpdateProjectMicrosoftOAuthClient :one
update projects set microsoft_oauth_client_id = $2, microsoft_oauth_client_secret = $3 where id = $1 returning id, organization_id, log_in_with_password_enabled, log_in_with_google_enabled, log_in_with_microsoft_enabled, google_oauth_client_id, google_oauth_client_secret, microsoft_oauth_client_id, microsoft_oauth_client_secret
`

type UpdateProjectMicrosoftOAuthClientParams struct {
	ID                         uuid.UUID
	MicrosoftOauthClientID     *string
	MicrosoftOauthClientSecret *string
}

func (q *Queries) UpdateProjectMicrosoftOAuthClient(ctx context.Context, arg UpdateProjectMicrosoftOAuthClientParams) (Project, error) {
	row := q.db.QueryRow(ctx, updateProjectMicrosoftOAuthClient, arg.ID, arg.MicrosoftOauthClientID, arg.MicrosoftOauthClientSecret)
	var i Project
	err := row.Scan(
		&i.ID,
		&i.OrganizationID,
		&i.LogInWithPasswordEnabled,
		&i.LogInWithGoogleEnabled,
		&i.LogInWithMicrosoftEnabled,
		&i.GoogleOauthClientID,
		&i.GoogleOauthClientSecret,
		&i.MicrosoftOauthClientID,
		&i.MicrosoftOauthClientSecret,
	)
	return i, err
}

const updateProjectOrganizationID = `-- name: UpdateProjectOrganizationID :one
update projects set organization_id = $2 where id = $1 returning id, organization_id, log_in_with_password_enabled, log_in_with_google_enabled, log_in_with_microsoft_enabled, google_oauth_client_id, google_oauth_client_secret, microsoft_oauth_client_id, microsoft_oauth_client_secret
`

type UpdateProjectOrganizationIDParams struct {
	ID             uuid.UUID
	OrganizationID *uuid.UUID
}

func (q *Queries) UpdateProjectOrganizationID(ctx context.Context, arg UpdateProjectOrganizationIDParams) (Project, error) {
	row := q.db.QueryRow(ctx, updateProjectOrganizationID, arg.ID, arg.OrganizationID)
	var i Project
	err := row.Scan(
		&i.ID,
		&i.OrganizationID,
		&i.LogInWithPasswordEnabled,
		&i.LogInWithGoogleEnabled,
		&i.LogInWithMicrosoftEnabled,
		&i.GoogleOauthClientID,
		&i.GoogleOauthClientSecret,
		&i.MicrosoftOauthClientID,
		&i.MicrosoftOauthClientSecret,
	)
	return i, err
}

const updateUser = `-- name: UpdateUser :one
update users set 
  organization_id = $2, 
  unverified_email = $3, 
  verified_email = $4, 
  password_bcrypt = $5, 
  google_user_id = $6, 
  microsoft_user_id = $7 
where id = $1 returning id, organization_id, unverified_email, verified_email, password_bcrypt, google_user_id, microsoft_user_id
`

type UpdateUserParams struct {
	ID              uuid.UUID
	OrganizationID  uuid.UUID
	UnverifiedEmail *string
	VerifiedEmail   *string
	PasswordBcrypt  *string
	GoogleUserID    *string
	MicrosoftUserID *string
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, updateUser,
		arg.ID,
		arg.OrganizationID,
		arg.UnverifiedEmail,
		arg.VerifiedEmail,
		arg.PasswordBcrypt,
		arg.GoogleUserID,
		arg.MicrosoftUserID,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.OrganizationID,
		&i.UnverifiedEmail,
		&i.VerifiedEmail,
		&i.PasswordBcrypt,
		&i.GoogleUserID,
		&i.MicrosoftUserID,
	)
	return i, err
}

const updateUserGoogleUserID = `-- name: UpdateUserGoogleUserID :one
update users set google_user_id = $2 where id = $1 returning id, organization_id, unverified_email, verified_email, password_bcrypt, google_user_id, microsoft_user_id
`

type UpdateUserGoogleUserIDParams struct {
	ID           uuid.UUID
	GoogleUserID *string
}

func (q *Queries) UpdateUserGoogleUserID(ctx context.Context, arg UpdateUserGoogleUserIDParams) (User, error) {
	row := q.db.QueryRow(ctx, updateUserGoogleUserID, arg.ID, arg.GoogleUserID)
	var i User
	err := row.Scan(
		&i.ID,
		&i.OrganizationID,
		&i.UnverifiedEmail,
		&i.VerifiedEmail,
		&i.PasswordBcrypt,
		&i.GoogleUserID,
		&i.MicrosoftUserID,
	)
	return i, err
}

const updateUserMicrosoftUserID = `-- name: UpdateUserMicrosoftUserID :one
update users set microsoft_user_id = $2 where id = $1 returning id, organization_id, unverified_email, verified_email, password_bcrypt, google_user_id, microsoft_user_id
`

type UpdateUserMicrosoftUserIDParams struct {
	ID              uuid.UUID
	MicrosoftUserID *string
}

func (q *Queries) UpdateUserMicrosoftUserID(ctx context.Context, arg UpdateUserMicrosoftUserIDParams) (User, error) {
	row := q.db.QueryRow(ctx, updateUserMicrosoftUserID, arg.ID, arg.MicrosoftUserID)
	var i User
	err := row.Scan(
		&i.ID,
		&i.OrganizationID,
		&i.UnverifiedEmail,
		&i.VerifiedEmail,
		&i.PasswordBcrypt,
		&i.GoogleUserID,
		&i.MicrosoftUserID,
	)
	return i, err
}

const updateUserPassword = `-- name: UpdateUserPassword :one
update users set password_bcrypt = $2 where id = $1 returning id, organization_id, unverified_email, verified_email, password_bcrypt, google_user_id, microsoft_user_id
`

type UpdateUserPasswordParams struct {
	ID             uuid.UUID
	PasswordBcrypt *string
}

func (q *Queries) UpdateUserPassword(ctx context.Context, arg UpdateUserPasswordParams) (User, error) {
	row := q.db.QueryRow(ctx, updateUserPassword, arg.ID, arg.PasswordBcrypt)
	var i User
	err := row.Scan(
		&i.ID,
		&i.OrganizationID,
		&i.UnverifiedEmail,
		&i.VerifiedEmail,
		&i.PasswordBcrypt,
		&i.GoogleUserID,
		&i.MicrosoftUserID,
	)
	return i, err
}

const verifyUserEmail = `-- name: VerifyUserEmail :one
update users set unverified_email = null, verified_email = $2 where id = $1 returning id, organization_id, unverified_email, verified_email, password_bcrypt, google_user_id, microsoft_user_id
`

type VerifyUserEmailParams struct {
	ID            uuid.UUID
	VerifiedEmail *string
}

func (q *Queries) VerifyUserEmail(ctx context.Context, arg VerifyUserEmailParams) (User, error) {
	row := q.db.QueryRow(ctx, verifyUserEmail, arg.ID, arg.VerifiedEmail)
	var i User
	err := row.Scan(
		&i.ID,
		&i.OrganizationID,
		&i.UnverifiedEmail,
		&i.VerifiedEmail,
		&i.PasswordBcrypt,
		&i.GoogleUserID,
		&i.MicrosoftUserID,
	)
	return i, err
}
