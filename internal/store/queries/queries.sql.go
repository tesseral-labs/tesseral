// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: queries.sql

package queries

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const completeMethodVerificationChallenge = `-- name: CompleteMethodVerificationChallenge :one
INSERT INTO method_verification_challenges (id, complete_time)
    VALUES ($1, $2)
RETURNING
    id, project_id, complete_time, intermediate_session_id, auth_method, expire_time, secret_token_sha256
`

type CompleteMethodVerificationChallengeParams struct {
	ID           uuid.UUID
	CompleteTime *time.Time
}

func (q *Queries) CompleteMethodVerificationChallenge(ctx context.Context, arg CompleteMethodVerificationChallengeParams) (MethodVerificationChallenge, error) {
	row := q.db.QueryRow(ctx, completeMethodVerificationChallenge, arg.ID, arg.CompleteTime)
	var i MethodVerificationChallenge
	err := row.Scan(
		&i.ID,
		&i.ProjectID,
		&i.CompleteTime,
		&i.IntermediateSessionID,
		&i.AuthMethod,
		&i.ExpireTime,
		&i.SecretTokenSha256,
	)
	return i, err
}

const countAllProjects = `-- name: CountAllProjects :one
SELECT
    count(*)
FROM
    projects
`

func (q *Queries) CountAllProjects(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, countAllProjects)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createGoogleUser = `-- name: CreateGoogleUser :one
INSERT INTO users (id, organization_id, google_user_id, verified_email)
    VALUES ($1, $2, $3, $4)
RETURNING
    id, organization_id, unverified_email, verified_email, password_bcrypt, google_user_id, microsoft_user_id
`

type CreateGoogleUserParams struct {
	ID             uuid.UUID
	OrganizationID uuid.UUID
	GoogleUserID   *string
	VerifiedEmail  *string
}

func (q *Queries) CreateGoogleUser(ctx context.Context, arg CreateGoogleUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createGoogleUser,
		arg.ID,
		arg.OrganizationID,
		arg.GoogleUserID,
		arg.VerifiedEmail,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.OrganizationID,
		&i.UnverifiedEmail,
		&i.VerifiedEmail,
		&i.PasswordBcrypt,
		&i.GoogleUserID,
		&i.MicrosoftUserID,
	)
	return i, err
}

const createIntermediateSession = `-- name: CreateIntermediateSession :one
INSERT INTO intermediate_sessions (id, project_id, unverified_email, verified_email, expire_time, token, token_sha256)
    VALUES ($1, $2, $3, $4, $5, $6, $7)
RETURNING
    id, project_id, unverified_email, verified_email, create_time, expire_time, token, token_sha256, revoked
`

type CreateIntermediateSessionParams struct {
	ID              uuid.UUID
	ProjectID       uuid.UUID
	UnverifiedEmail *string
	VerifiedEmail   *string
	ExpireTime      *time.Time
	Token           string
	TokenSha256     []byte
}

func (q *Queries) CreateIntermediateSession(ctx context.Context, arg CreateIntermediateSessionParams) (IntermediateSession, error) {
	row := q.db.QueryRow(ctx, createIntermediateSession,
		arg.ID,
		arg.ProjectID,
		arg.UnverifiedEmail,
		arg.VerifiedEmail,
		arg.ExpireTime,
		arg.Token,
		arg.TokenSha256,
	)
	var i IntermediateSession
	err := row.Scan(
		&i.ID,
		&i.ProjectID,
		&i.UnverifiedEmail,
		&i.VerifiedEmail,
		&i.CreateTime,
		&i.ExpireTime,
		&i.Token,
		&i.TokenSha256,
		&i.Revoked,
	)
	return i, err
}

const createIntermediateSessionSigningKey = `-- name: CreateIntermediateSessionSigningKey :one
INSERT INTO intermediate_session_signing_keys (id, project_id, public_key, private_key_cipher_text, expire_time)
    VALUES ($1, $2, $3, $4, $5)
RETURNING
    id, project_id, public_key, private_key_cipher_text, create_time, expire_time
`

type CreateIntermediateSessionSigningKeyParams struct {
	ID                   uuid.UUID
	ProjectID            uuid.UUID
	PublicKey            []byte
	PrivateKeyCipherText []byte
	ExpireTime           *time.Time
}

func (q *Queries) CreateIntermediateSessionSigningKey(ctx context.Context, arg CreateIntermediateSessionSigningKeyParams) (IntermediateSessionSigningKey, error) {
	row := q.db.QueryRow(ctx, createIntermediateSessionSigningKey,
		arg.ID,
		arg.ProjectID,
		arg.PublicKey,
		arg.PrivateKeyCipherText,
		arg.ExpireTime,
	)
	var i IntermediateSessionSigningKey
	err := row.Scan(
		&i.ID,
		&i.ProjectID,
		&i.PublicKey,
		&i.PrivateKeyCipherText,
		&i.CreateTime,
		&i.ExpireTime,
	)
	return i, err
}

const createMethodVerificationChallenge = `-- name: CreateMethodVerificationChallenge :one
INSERT INTO method_verification_challenges (id, project_id, complete_time, intermediate_session_id, auth_method, expire_time, secret_token_sha256)
    VALUES ($1, $2, $3, $4, $5, $6, $7)
RETURNING
    id, project_id, complete_time, intermediate_session_id, auth_method, expire_time, secret_token_sha256
`

type CreateMethodVerificationChallengeParams struct {
	ID                    uuid.UUID
	ProjectID             uuid.UUID
	CompleteTime          *time.Time
	IntermediateSessionID uuid.UUID
	AuthMethod            AuthMethod
	ExpireTime            *time.Time
	SecretTokenSha256     []byte
}

func (q *Queries) CreateMethodVerificationChallenge(ctx context.Context, arg CreateMethodVerificationChallengeParams) (MethodVerificationChallenge, error) {
	row := q.db.QueryRow(ctx, createMethodVerificationChallenge,
		arg.ID,
		arg.ProjectID,
		arg.CompleteTime,
		arg.IntermediateSessionID,
		arg.AuthMethod,
		arg.ExpireTime,
		arg.SecretTokenSha256,
	)
	var i MethodVerificationChallenge
	err := row.Scan(
		&i.ID,
		&i.ProjectID,
		&i.CompleteTime,
		&i.IntermediateSessionID,
		&i.AuthMethod,
		&i.ExpireTime,
		&i.SecretTokenSha256,
	)
	return i, err
}

const createMicrosoftUser = `-- name: CreateMicrosoftUser :one
INSERT INTO users (id, organization_id, microsoft_user_id, verified_email)
    VALUES ($1, $2, $3, $4)
RETURNING
    id, organization_id, unverified_email, verified_email, password_bcrypt, google_user_id, microsoft_user_id
`

type CreateMicrosoftUserParams struct {
	ID              uuid.UUID
	OrganizationID  uuid.UUID
	MicrosoftUserID *string
	VerifiedEmail   *string
}

func (q *Queries) CreateMicrosoftUser(ctx context.Context, arg CreateMicrosoftUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createMicrosoftUser,
		arg.ID,
		arg.OrganizationID,
		arg.MicrosoftUserID,
		arg.VerifiedEmail,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.OrganizationID,
		&i.UnverifiedEmail,
		&i.VerifiedEmail,
		&i.PasswordBcrypt,
		&i.GoogleUserID,
		&i.MicrosoftUserID,
	)
	return i, err
}

const createOrganization = `-- name: CreateOrganization :one
INSERT INTO organizations (id, project_id, display_name, google_hosted_domain, microsoft_tenant_id, override_log_in_with_google_enabled, override_log_in_with_microsoft_enabled, override_log_in_with_password_enabled)
    VALUES ($1, $2, $3, $4, $5, $6, $7, $8)
RETURNING
    id, project_id, display_name, override_log_in_with_password_enabled, override_log_in_with_google_enabled, override_log_in_with_microsoft_enabled, google_hosted_domain, microsoft_tenant_id
`

type CreateOrganizationParams struct {
	ID                                uuid.UUID
	ProjectID                         uuid.UUID
	DisplayName                       string
	GoogleHostedDomain                *string
	MicrosoftTenantID                 *string
	OverrideLogInWithGoogleEnabled    *bool
	OverrideLogInWithMicrosoftEnabled *bool
	OverrideLogInWithPasswordEnabled  *bool
}

func (q *Queries) CreateOrganization(ctx context.Context, arg CreateOrganizationParams) (Organization, error) {
	row := q.db.QueryRow(ctx, createOrganization,
		arg.ID,
		arg.ProjectID,
		arg.DisplayName,
		arg.GoogleHostedDomain,
		arg.MicrosoftTenantID,
		arg.OverrideLogInWithGoogleEnabled,
		arg.OverrideLogInWithMicrosoftEnabled,
		arg.OverrideLogInWithPasswordEnabled,
	)
	var i Organization
	err := row.Scan(
		&i.ID,
		&i.ProjectID,
		&i.DisplayName,
		&i.OverrideLogInWithPasswordEnabled,
		&i.OverrideLogInWithGoogleEnabled,
		&i.OverrideLogInWithMicrosoftEnabled,
		&i.GoogleHostedDomain,
		&i.MicrosoftTenantID,
	)
	return i, err
}

const createProject = `-- name: CreateProject :one
INSERT INTO projects (id, organization_id, log_in_with_password_enabled, log_in_with_google_enabled, log_in_with_microsoft_enabled, google_oauth_client_id, google_oauth_client_secret, microsoft_oauth_client_id, microsoft_oauth_client_secret)
    VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9)
RETURNING
    id, organization_id, log_in_with_password_enabled, log_in_with_google_enabled, log_in_with_microsoft_enabled, google_oauth_client_id, google_oauth_client_secret, microsoft_oauth_client_id, microsoft_oauth_client_secret
`

type CreateProjectParams struct {
	ID                         uuid.UUID
	OrganizationID             *uuid.UUID
	LogInWithPasswordEnabled   bool
	LogInWithGoogleEnabled     bool
	LogInWithMicrosoftEnabled  bool
	GoogleOauthClientID        *string
	GoogleOauthClientSecret    *string
	MicrosoftOauthClientID     *string
	MicrosoftOauthClientSecret *string
}

func (q *Queries) CreateProject(ctx context.Context, arg CreateProjectParams) (Project, error) {
	row := q.db.QueryRow(ctx, createProject,
		arg.ID,
		arg.OrganizationID,
		arg.LogInWithPasswordEnabled,
		arg.LogInWithGoogleEnabled,
		arg.LogInWithMicrosoftEnabled,
		arg.GoogleOauthClientID,
		arg.GoogleOauthClientSecret,
		arg.MicrosoftOauthClientID,
		arg.MicrosoftOauthClientSecret,
	)
	var i Project
	err := row.Scan(
		&i.ID,
		&i.OrganizationID,
		&i.LogInWithPasswordEnabled,
		&i.LogInWithGoogleEnabled,
		&i.LogInWithMicrosoftEnabled,
		&i.GoogleOauthClientID,
		&i.GoogleOauthClientSecret,
		&i.MicrosoftOauthClientID,
		&i.MicrosoftOauthClientSecret,
	)
	return i, err
}

const createProjectAPIKey = `-- name: CreateProjectAPIKey :one
INSERT INTO project_api_keys (id, project_id, create_time, revoked, secret_token_sha256)
    VALUES ($1, $2, $3, $4, $5)
RETURNING
    id, project_id, create_time, revoked, secret_token_sha256
`

type CreateProjectAPIKeyParams struct {
	ID                uuid.UUID
	ProjectID         uuid.UUID
	CreateTime        *time.Time
	Revoked           bool
	SecretTokenSha256 []byte
}

func (q *Queries) CreateProjectAPIKey(ctx context.Context, arg CreateProjectAPIKeyParams) (ProjectApiKey, error) {
	row := q.db.QueryRow(ctx, createProjectAPIKey,
		arg.ID,
		arg.ProjectID,
		arg.CreateTime,
		arg.Revoked,
		arg.SecretTokenSha256,
	)
	var i ProjectApiKey
	err := row.Scan(
		&i.ID,
		&i.ProjectID,
		&i.CreateTime,
		&i.Revoked,
		&i.SecretTokenSha256,
	)
	return i, err
}

const createSession = `-- name: CreateSession :one
INSERT INTO sessions (id, user_id, create_time, expire_time, revoked)
    VALUES ($1, $2, $3, $4, $5)
RETURNING
    id, user_id, create_time, expire_time, revoked, refresh_token_sha256
`

type CreateSessionParams struct {
	ID         uuid.UUID
	UserID     uuid.UUID
	CreateTime *time.Time
	ExpireTime *time.Time
	Revoked    bool
}

func (q *Queries) CreateSession(ctx context.Context, arg CreateSessionParams) (Session, error) {
	row := q.db.QueryRow(ctx, createSession,
		arg.ID,
		arg.UserID,
		arg.CreateTime,
		arg.ExpireTime,
		arg.Revoked,
	)
	var i Session
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.CreateTime,
		&i.ExpireTime,
		&i.Revoked,
		&i.RefreshTokenSha256,
	)
	return i, err
}

const createSessionSigningKey = `-- name: CreateSessionSigningKey :one
INSERT INTO session_signing_keys (id, project_id, public_key, private_key_cipher_text, expire_time)
    VALUES ($1, $2, $3, $4, $5)
RETURNING
    id, project_id, public_key, private_key_cipher_text, create_time, expire_time
`

type CreateSessionSigningKeyParams struct {
	ID                   uuid.UUID
	ProjectID            uuid.UUID
	PublicKey            []byte
	PrivateKeyCipherText []byte
	ExpireTime           *time.Time
}

func (q *Queries) CreateSessionSigningKey(ctx context.Context, arg CreateSessionSigningKeyParams) (SessionSigningKey, error) {
	row := q.db.QueryRow(ctx, createSessionSigningKey,
		arg.ID,
		arg.ProjectID,
		arg.PublicKey,
		arg.PrivateKeyCipherText,
		arg.ExpireTime,
	)
	var i SessionSigningKey
	err := row.Scan(
		&i.ID,
		&i.ProjectID,
		&i.PublicKey,
		&i.PrivateKeyCipherText,
		&i.CreateTime,
		&i.ExpireTime,
	)
	return i, err
}

const createUnverifiedUser = `-- name: CreateUnverifiedUser :one
INSERT INTO users (id, organization_id, unverified_email)
    VALUES ($1, $2, $3)
RETURNING
    id, organization_id, unverified_email, verified_email, password_bcrypt, google_user_id, microsoft_user_id
`

type CreateUnverifiedUserParams struct {
	ID              uuid.UUID
	OrganizationID  uuid.UUID
	UnverifiedEmail *string
}

func (q *Queries) CreateUnverifiedUser(ctx context.Context, arg CreateUnverifiedUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUnverifiedUser, arg.ID, arg.OrganizationID, arg.UnverifiedEmail)
	var i User
	err := row.Scan(
		&i.ID,
		&i.OrganizationID,
		&i.UnverifiedEmail,
		&i.VerifiedEmail,
		&i.PasswordBcrypt,
		&i.GoogleUserID,
		&i.MicrosoftUserID,
	)
	return i, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users (id, organization_id, unverified_email, verified_email, password_bcrypt, google_user_id, microsoft_user_id)
    VALUES ($1, $2, $3, $4, $5, $6, $7)
RETURNING
    id, organization_id, unverified_email, verified_email, password_bcrypt, google_user_id, microsoft_user_id
`

type CreateUserParams struct {
	ID              uuid.UUID
	OrganizationID  uuid.UUID
	UnverifiedEmail *string
	VerifiedEmail   *string
	PasswordBcrypt  *string
	GoogleUserID    *string
	MicrosoftUserID *string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.ID,
		arg.OrganizationID,
		arg.UnverifiedEmail,
		arg.VerifiedEmail,
		arg.PasswordBcrypt,
		arg.GoogleUserID,
		arg.MicrosoftUserID,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.OrganizationID,
		&i.UnverifiedEmail,
		&i.VerifiedEmail,
		&i.PasswordBcrypt,
		&i.GoogleUserID,
		&i.MicrosoftUserID,
	)
	return i, err
}

const getCurrentSessionKeyByProjectID = `-- name: GetCurrentSessionKeyByProjectID :one
SELECT
    id, project_id, public_key, private_key_cipher_text, create_time, expire_time
FROM
    session_signing_keys
WHERE
    project_id = $1
ORDER BY
    create_time DESC
LIMIT 1
`

func (q *Queries) GetCurrentSessionKeyByProjectID(ctx context.Context, projectID uuid.UUID) (SessionSigningKey, error) {
	row := q.db.QueryRow(ctx, getCurrentSessionKeyByProjectID, projectID)
	var i SessionSigningKey
	err := row.Scan(
		&i.ID,
		&i.ProjectID,
		&i.PublicKey,
		&i.PrivateKeyCipherText,
		&i.CreateTime,
		&i.ExpireTime,
	)
	return i, err
}

const getIntermediateSessionByID = `-- name: GetIntermediateSessionByID :one
SELECT
    id, project_id, unverified_email, verified_email, create_time, expire_time, token, token_sha256, revoked
FROM
    intermediate_sessions
WHERE
    id = $1
`

func (q *Queries) GetIntermediateSessionByID(ctx context.Context, id uuid.UUID) (IntermediateSession, error) {
	row := q.db.QueryRow(ctx, getIntermediateSessionByID, id)
	var i IntermediateSession
	err := row.Scan(
		&i.ID,
		&i.ProjectID,
		&i.UnverifiedEmail,
		&i.VerifiedEmail,
		&i.CreateTime,
		&i.ExpireTime,
		&i.Token,
		&i.TokenSha256,
		&i.Revoked,
	)
	return i, err
}

const getIntermediateSessionSigningKeyByID = `-- name: GetIntermediateSessionSigningKeyByID :one
SELECT
    id, project_id, public_key, private_key_cipher_text, create_time, expire_time
FROM
    intermediate_session_signing_keys
WHERE
    id = $1
`

func (q *Queries) GetIntermediateSessionSigningKeyByID(ctx context.Context, id uuid.UUID) (IntermediateSessionSigningKey, error) {
	row := q.db.QueryRow(ctx, getIntermediateSessionSigningKeyByID, id)
	var i IntermediateSessionSigningKey
	err := row.Scan(
		&i.ID,
		&i.ProjectID,
		&i.PublicKey,
		&i.PrivateKeyCipherText,
		&i.CreateTime,
		&i.ExpireTime,
	)
	return i, err
}

const getIntermediateSessionSigningKeyByProjectID = `-- name: GetIntermediateSessionSigningKeyByProjectID :one
SELECT
    id, project_id, public_key, private_key_cipher_text, create_time, expire_time
FROM
    intermediate_session_signing_keys
WHERE
    project_id = $1
ORDER BY
    create_time DESC
LIMIT 1
`

func (q *Queries) GetIntermediateSessionSigningKeyByProjectID(ctx context.Context, projectID uuid.UUID) (IntermediateSessionSigningKey, error) {
	row := q.db.QueryRow(ctx, getIntermediateSessionSigningKeyByProjectID, projectID)
	var i IntermediateSessionSigningKey
	err := row.Scan(
		&i.ID,
		&i.ProjectID,
		&i.PublicKey,
		&i.PrivateKeyCipherText,
		&i.CreateTime,
		&i.ExpireTime,
	)
	return i, err
}

const getMethodVerificationChallengeByID = `-- name: GetMethodVerificationChallengeByID :one
SELECT
    id, project_id, complete_time, intermediate_session_id, auth_method, expire_time, secret_token_sha256
FROM
    method_verification_challenges
WHERE
    id = $1
`

func (q *Queries) GetMethodVerificationChallengeByID(ctx context.Context, id uuid.UUID) (MethodVerificationChallenge, error) {
	row := q.db.QueryRow(ctx, getMethodVerificationChallengeByID, id)
	var i MethodVerificationChallenge
	err := row.Scan(
		&i.ID,
		&i.ProjectID,
		&i.CompleteTime,
		&i.IntermediateSessionID,
		&i.AuthMethod,
		&i.ExpireTime,
		&i.SecretTokenSha256,
	)
	return i, err
}

const getOrganizationByGoogleHostedDomain = `-- name: GetOrganizationByGoogleHostedDomain :one
SELECT
    id, project_id, display_name, override_log_in_with_password_enabled, override_log_in_with_google_enabled, override_log_in_with_microsoft_enabled, google_hosted_domain, microsoft_tenant_id
FROM
    organizations
WHERE
    google_hosted_domain = $1
`

func (q *Queries) GetOrganizationByGoogleHostedDomain(ctx context.Context, googleHostedDomain *string) (Organization, error) {
	row := q.db.QueryRow(ctx, getOrganizationByGoogleHostedDomain, googleHostedDomain)
	var i Organization
	err := row.Scan(
		&i.ID,
		&i.ProjectID,
		&i.DisplayName,
		&i.OverrideLogInWithPasswordEnabled,
		&i.OverrideLogInWithGoogleEnabled,
		&i.OverrideLogInWithMicrosoftEnabled,
		&i.GoogleHostedDomain,
		&i.MicrosoftTenantID,
	)
	return i, err
}

const getOrganizationByID = `-- name: GetOrganizationByID :one
SELECT
    id, project_id, display_name, override_log_in_with_password_enabled, override_log_in_with_google_enabled, override_log_in_with_microsoft_enabled, google_hosted_domain, microsoft_tenant_id
FROM
    organizations
WHERE
    id = $1
`

func (q *Queries) GetOrganizationByID(ctx context.Context, id uuid.UUID) (Organization, error) {
	row := q.db.QueryRow(ctx, getOrganizationByID, id)
	var i Organization
	err := row.Scan(
		&i.ID,
		&i.ProjectID,
		&i.DisplayName,
		&i.OverrideLogInWithPasswordEnabled,
		&i.OverrideLogInWithGoogleEnabled,
		&i.OverrideLogInWithMicrosoftEnabled,
		&i.GoogleHostedDomain,
		&i.MicrosoftTenantID,
	)
	return i, err
}

const getOrganizationByProjectIDAndID = `-- name: GetOrganizationByProjectIDAndID :one
SELECT
    id, project_id, display_name, override_log_in_with_password_enabled, override_log_in_with_google_enabled, override_log_in_with_microsoft_enabled, google_hosted_domain, microsoft_tenant_id
FROM
    organizations
WHERE
    id = $1
    AND project_id = $2
`

type GetOrganizationByProjectIDAndIDParams struct {
	ID        uuid.UUID
	ProjectID uuid.UUID
}

func (q *Queries) GetOrganizationByProjectIDAndID(ctx context.Context, arg GetOrganizationByProjectIDAndIDParams) (Organization, error) {
	row := q.db.QueryRow(ctx, getOrganizationByProjectIDAndID, arg.ID, arg.ProjectID)
	var i Organization
	err := row.Scan(
		&i.ID,
		&i.ProjectID,
		&i.DisplayName,
		&i.OverrideLogInWithPasswordEnabled,
		&i.OverrideLogInWithGoogleEnabled,
		&i.OverrideLogInWithMicrosoftEnabled,
		&i.GoogleHostedDomain,
		&i.MicrosoftTenantID,
	)
	return i, err
}

const getProjectAPIKeyBySecretTokenSHA256 = `-- name: GetProjectAPIKeyBySecretTokenSHA256 :one
SELECT
    id, project_id, create_time, revoked, secret_token_sha256
FROM
    project_api_keys
WHERE
    secret_token_sha256 = $1
`

func (q *Queries) GetProjectAPIKeyBySecretTokenSHA256(ctx context.Context, secretTokenSha256 []byte) (ProjectApiKey, error) {
	row := q.db.QueryRow(ctx, getProjectAPIKeyBySecretTokenSHA256, secretTokenSha256)
	var i ProjectApiKey
	err := row.Scan(
		&i.ID,
		&i.ProjectID,
		&i.CreateTime,
		&i.Revoked,
		&i.SecretTokenSha256,
	)
	return i, err
}

const getProjectByID = `-- name: GetProjectByID :one
SELECT
    id, organization_id, log_in_with_password_enabled, log_in_with_google_enabled, log_in_with_microsoft_enabled, google_oauth_client_id, google_oauth_client_secret, microsoft_oauth_client_id, microsoft_oauth_client_secret
FROM
    projects
WHERE
    id = $1
`

func (q *Queries) GetProjectByID(ctx context.Context, id uuid.UUID) (Project, error) {
	row := q.db.QueryRow(ctx, getProjectByID, id)
	var i Project
	err := row.Scan(
		&i.ID,
		&i.OrganizationID,
		&i.LogInWithPasswordEnabled,
		&i.LogInWithGoogleEnabled,
		&i.LogInWithMicrosoftEnabled,
		&i.GoogleOauthClientID,
		&i.GoogleOauthClientSecret,
		&i.MicrosoftOauthClientID,
		&i.MicrosoftOauthClientSecret,
	)
	return i, err
}

const getSessionByID = `-- name: GetSessionByID :one
SELECT
    id, user_id, create_time, expire_time, revoked, refresh_token_sha256
FROM
    sessions
WHERE
    id = $1
`

func (q *Queries) GetSessionByID(ctx context.Context, id uuid.UUID) (Session, error) {
	row := q.db.QueryRow(ctx, getSessionByID, id)
	var i Session
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.CreateTime,
		&i.ExpireTime,
		&i.Revoked,
		&i.RefreshTokenSha256,
	)
	return i, err
}

const getSessionDetailsByRefreshTokenSHA256 = `-- name: GetSessionDetailsByRefreshTokenSHA256 :one
SELECT
    sessions.id AS session_id,
    users.id AS user_id,
    organizations.id AS organization_id,
    projects.id AS project_id
FROM
    sessions
    JOIN users ON sessions.user_id = users.id
    JOIN organizations ON users.organization_id = organizations.id
    JOIN projects ON organizations.id = projects.organization_id
WHERE
    revoked = FALSE
    AND refresh_token_sha256 = $1
`

type GetSessionDetailsByRefreshTokenSHA256Row struct {
	SessionID      uuid.UUID
	UserID         uuid.UUID
	OrganizationID uuid.UUID
	ProjectID      uuid.UUID
}

func (q *Queries) GetSessionDetailsByRefreshTokenSHA256(ctx context.Context, refreshTokenSha256 []byte) (GetSessionDetailsByRefreshTokenSHA256Row, error) {
	row := q.db.QueryRow(ctx, getSessionDetailsByRefreshTokenSHA256, refreshTokenSha256)
	var i GetSessionDetailsByRefreshTokenSHA256Row
	err := row.Scan(
		&i.SessionID,
		&i.UserID,
		&i.OrganizationID,
		&i.ProjectID,
	)
	return i, err
}

const getSessionSigningKeyByID = `-- name: GetSessionSigningKeyByID :one
SELECT
    id, project_id, public_key, private_key_cipher_text, create_time, expire_time
FROM
    session_signing_keys
WHERE
    id = $1
`

func (q *Queries) GetSessionSigningKeyByID(ctx context.Context, id uuid.UUID) (SessionSigningKey, error) {
	row := q.db.QueryRow(ctx, getSessionSigningKeyByID, id)
	var i SessionSigningKey
	err := row.Scan(
		&i.ID,
		&i.ProjectID,
		&i.PublicKey,
		&i.PrivateKeyCipherText,
		&i.CreateTime,
		&i.ExpireTime,
	)
	return i, err
}

const getSessionSigningKeysByProjectID = `-- name: GetSessionSigningKeysByProjectID :many
SELECT
    id, project_id, public_key, private_key_cipher_text, create_time, expire_time
FROM
    session_signing_keys
WHERE
    project_id = $1
`

func (q *Queries) GetSessionSigningKeysByProjectID(ctx context.Context, projectID uuid.UUID) ([]SessionSigningKey, error) {
	rows, err := q.db.Query(ctx, getSessionSigningKeysByProjectID, projectID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SessionSigningKey
	for rows.Next() {
		var i SessionSigningKey
		if err := rows.Scan(
			&i.ID,
			&i.ProjectID,
			&i.PublicKey,
			&i.PrivateKeyCipherText,
			&i.CreateTime,
			&i.ExpireTime,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT
    id, organization_id, unverified_email, verified_email, password_bcrypt, google_user_id, microsoft_user_id
FROM
    users
WHERE
    verified_email = $1
    OR unverified_email = $1
`

func (q *Queries) GetUserByEmail(ctx context.Context, verifiedEmail *string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByEmail, verifiedEmail)
	var i User
	err := row.Scan(
		&i.ID,
		&i.OrganizationID,
		&i.UnverifiedEmail,
		&i.VerifiedEmail,
		&i.PasswordBcrypt,
		&i.GoogleUserID,
		&i.MicrosoftUserID,
	)
	return i, err
}

const getUserByGoogleUserID = `-- name: GetUserByGoogleUserID :one
SELECT
    id, organization_id, unverified_email, verified_email, password_bcrypt, google_user_id, microsoft_user_id
FROM
    users
WHERE
    organization_id = $1
    AND google_user_id = $2
`

type GetUserByGoogleUserIDParams struct {
	OrganizationID uuid.UUID
	GoogleUserID   *string
}

func (q *Queries) GetUserByGoogleUserID(ctx context.Context, arg GetUserByGoogleUserIDParams) (User, error) {
	row := q.db.QueryRow(ctx, getUserByGoogleUserID, arg.OrganizationID, arg.GoogleUserID)
	var i User
	err := row.Scan(
		&i.ID,
		&i.OrganizationID,
		&i.UnverifiedEmail,
		&i.VerifiedEmail,
		&i.PasswordBcrypt,
		&i.GoogleUserID,
		&i.MicrosoftUserID,
	)
	return i, err
}

const getUserByID = `-- name: GetUserByID :one
SELECT
    id, organization_id, unverified_email, verified_email, password_bcrypt, google_user_id, microsoft_user_id
FROM
    users
WHERE
    id = $1
`

func (q *Queries) GetUserByID(ctx context.Context, id uuid.UUID) (User, error) {
	row := q.db.QueryRow(ctx, getUserByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.OrganizationID,
		&i.UnverifiedEmail,
		&i.VerifiedEmail,
		&i.PasswordBcrypt,
		&i.GoogleUserID,
		&i.MicrosoftUserID,
	)
	return i, err
}

const getUserByMicrosoftUserID = `-- name: GetUserByMicrosoftUserID :one
SELECT
    id, organization_id, unverified_email, verified_email, password_bcrypt, google_user_id, microsoft_user_id
FROM
    users
WHERE
    organization_id = $1
    AND microsoft_user_id = $2
`

type GetUserByMicrosoftUserIDParams struct {
	OrganizationID  uuid.UUID
	MicrosoftUserID *string
}

func (q *Queries) GetUserByMicrosoftUserID(ctx context.Context, arg GetUserByMicrosoftUserIDParams) (User, error) {
	row := q.db.QueryRow(ctx, getUserByMicrosoftUserID, arg.OrganizationID, arg.MicrosoftUserID)
	var i User
	err := row.Scan(
		&i.ID,
		&i.OrganizationID,
		&i.UnverifiedEmail,
		&i.VerifiedEmail,
		&i.PasswordBcrypt,
		&i.GoogleUserID,
		&i.MicrosoftUserID,
	)
	return i, err
}

const getUserBySessionID = `-- name: GetUserBySessionID :one
SELECT
    id, organization_id, unverified_email, verified_email, password_bcrypt, google_user_id, microsoft_user_id
FROM
    users
WHERE
    users.id = (
        SELECT
            user_id
        FROM
            sessions
        WHERE
            sessions.id = $1)
`

func (q *Queries) GetUserBySessionID(ctx context.Context, id uuid.UUID) (User, error) {
	row := q.db.QueryRow(ctx, getUserBySessionID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.OrganizationID,
		&i.UnverifiedEmail,
		&i.VerifiedEmail,
		&i.PasswordBcrypt,
		&i.GoogleUserID,
		&i.MicrosoftUserID,
	)
	return i, err
}

const getUserByUnverifiedEmail = `-- name: GetUserByUnverifiedEmail :one
SELECT
    id, organization_id, unverified_email, verified_email, password_bcrypt, google_user_id, microsoft_user_id
FROM
    users
WHERE
    unverified_email = $1
`

func (q *Queries) GetUserByUnverifiedEmail(ctx context.Context, unverifiedEmail *string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByUnverifiedEmail, unverifiedEmail)
	var i User
	err := row.Scan(
		&i.ID,
		&i.OrganizationID,
		&i.UnverifiedEmail,
		&i.VerifiedEmail,
		&i.PasswordBcrypt,
		&i.GoogleUserID,
		&i.MicrosoftUserID,
	)
	return i, err
}

const getUserByVerifiedEmail = `-- name: GetUserByVerifiedEmail :one
SELECT
    id, organization_id, unverified_email, verified_email, password_bcrypt, google_user_id, microsoft_user_id
FROM
    users
WHERE
    verified_email = $1
`

func (q *Queries) GetUserByVerifiedEmail(ctx context.Context, verifiedEmail *string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByVerifiedEmail, verifiedEmail)
	var i User
	err := row.Scan(
		&i.ID,
		&i.OrganizationID,
		&i.UnverifiedEmail,
		&i.VerifiedEmail,
		&i.PasswordBcrypt,
		&i.GoogleUserID,
		&i.MicrosoftUserID,
	)
	return i, err
}

const listOrganizations = `-- name: ListOrganizations :many
SELECT
    id, project_id, display_name, override_log_in_with_password_enabled, override_log_in_with_google_enabled, override_log_in_with_microsoft_enabled, google_hosted_domain, microsoft_tenant_id
FROM
    organizations
`

func (q *Queries) ListOrganizations(ctx context.Context) ([]Organization, error) {
	rows, err := q.db.Query(ctx, listOrganizations)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Organization
	for rows.Next() {
		var i Organization
		if err := rows.Scan(
			&i.ID,
			&i.ProjectID,
			&i.DisplayName,
			&i.OverrideLogInWithPasswordEnabled,
			&i.OverrideLogInWithGoogleEnabled,
			&i.OverrideLogInWithMicrosoftEnabled,
			&i.GoogleHostedDomain,
			&i.MicrosoftTenantID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listOrganizationsByProjectId = `-- name: ListOrganizationsByProjectId :many
SELECT
    id, project_id, display_name, override_log_in_with_password_enabled, override_log_in_with_google_enabled, override_log_in_with_microsoft_enabled, google_hosted_domain, microsoft_tenant_id
FROM
    organizations
WHERE
    project_id = $1
ORDER BY
    id
LIMIT $2
`

type ListOrganizationsByProjectIdParams struct {
	ProjectID uuid.UUID
	Limit     int32
}

func (q *Queries) ListOrganizationsByProjectId(ctx context.Context, arg ListOrganizationsByProjectIdParams) ([]Organization, error) {
	rows, err := q.db.Query(ctx, listOrganizationsByProjectId, arg.ProjectID, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Organization
	for rows.Next() {
		var i Organization
		if err := rows.Scan(
			&i.ID,
			&i.ProjectID,
			&i.DisplayName,
			&i.OverrideLogInWithPasswordEnabled,
			&i.OverrideLogInWithGoogleEnabled,
			&i.OverrideLogInWithMicrosoftEnabled,
			&i.GoogleHostedDomain,
			&i.MicrosoftTenantID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listOrganizationsByProjectIdAndEmail = `-- name: ListOrganizationsByProjectIdAndEmail :many
SELECT
    o.id, o.project_id, o.display_name, o.override_log_in_with_password_enabled, o.override_log_in_with_google_enabled, o.override_log_in_with_microsoft_enabled, o.google_hosted_domain, o.microsoft_tenant_id
FROM
    organizations AS o
    JOIN users AS u ON o.id = users.organization_id
WHERE
    project_id = $1
    AND u.verified_email = $2
    OR u.unverified_email = $2
ORDER BY
    o.display_name
LIMIT $3
`

type ListOrganizationsByProjectIdAndEmailParams struct {
	ProjectID     uuid.UUID
	VerifiedEmail *string
	Limit         int32
}

func (q *Queries) ListOrganizationsByProjectIdAndEmail(ctx context.Context, arg ListOrganizationsByProjectIdAndEmailParams) ([]Organization, error) {
	rows, err := q.db.Query(ctx, listOrganizationsByProjectIdAndEmail, arg.ProjectID, arg.VerifiedEmail, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Organization
	for rows.Next() {
		var i Organization
		if err := rows.Scan(
			&i.ID,
			&i.ProjectID,
			&i.DisplayName,
			&i.OverrideLogInWithPasswordEnabled,
			&i.OverrideLogInWithGoogleEnabled,
			&i.OverrideLogInWithMicrosoftEnabled,
			&i.GoogleHostedDomain,
			&i.MicrosoftTenantID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listProjects = `-- name: ListProjects :many
SELECT
    id, organization_id, log_in_with_password_enabled, log_in_with_google_enabled, log_in_with_microsoft_enabled, google_oauth_client_id, google_oauth_client_secret, microsoft_oauth_client_id, microsoft_oauth_client_secret
FROM
    projects
ORDER BY
    id
LIMIT $1
`

func (q *Queries) ListProjects(ctx context.Context, limit int32) ([]Project, error) {
	rows, err := q.db.Query(ctx, listProjects, limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Project
	for rows.Next() {
		var i Project
		if err := rows.Scan(
			&i.ID,
			&i.OrganizationID,
			&i.LogInWithPasswordEnabled,
			&i.LogInWithGoogleEnabled,
			&i.LogInWithMicrosoftEnabled,
			&i.GoogleOauthClientID,
			&i.GoogleOauthClientSecret,
			&i.MicrosoftOauthClientID,
			&i.MicrosoftOauthClientSecret,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listUsersByEmail = `-- name: ListUsersByEmail :many
SELECT
    id, organization_id, unverified_email, verified_email, password_bcrypt, google_user_id, microsoft_user_id
FROM
    users
WHERE
    unverified_email = $1
    OR verified_email = $1
`

func (q *Queries) ListUsersByEmail(ctx context.Context, unverifiedEmail *string) ([]User, error) {
	rows, err := q.db.Query(ctx, listUsersByEmail, unverifiedEmail)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.OrganizationID,
			&i.UnverifiedEmail,
			&i.VerifiedEmail,
			&i.PasswordBcrypt,
			&i.GoogleUserID,
			&i.MicrosoftUserID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listUsersByOrganization = `-- name: ListUsersByOrganization :many
SELECT
    id, organization_id, unverified_email, verified_email, password_bcrypt, google_user_id, microsoft_user_id
FROM
    users
WHERE
    organization_id = $1
ORDER BY
    id
LIMIT $2
`

type ListUsersByOrganizationParams struct {
	OrganizationID uuid.UUID
	Limit          int32
}

func (q *Queries) ListUsersByOrganization(ctx context.Context, arg ListUsersByOrganizationParams) ([]User, error) {
	rows, err := q.db.Query(ctx, listUsersByOrganization, arg.OrganizationID, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.OrganizationID,
			&i.UnverifiedEmail,
			&i.VerifiedEmail,
			&i.PasswordBcrypt,
			&i.GoogleUserID,
			&i.MicrosoftUserID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const revokeIntermediateSession = `-- name: RevokeIntermediateSession :one
UPDATE
    intermediate_sessions
SET
    revoked = TRUE
WHERE
    id = $1
RETURNING
    id, project_id, unverified_email, verified_email, create_time, expire_time, token, token_sha256, revoked
`

func (q *Queries) RevokeIntermediateSession(ctx context.Context, id uuid.UUID) (IntermediateSession, error) {
	row := q.db.QueryRow(ctx, revokeIntermediateSession, id)
	var i IntermediateSession
	err := row.Scan(
		&i.ID,
		&i.ProjectID,
		&i.UnverifiedEmail,
		&i.VerifiedEmail,
		&i.CreateTime,
		&i.ExpireTime,
		&i.Token,
		&i.TokenSha256,
		&i.Revoked,
	)
	return i, err
}

const revokeSession = `-- name: RevokeSession :one
UPDATE
    sessions
SET
    revoked = TRUE
WHERE
    id = $1
RETURNING
    id, user_id, create_time, expire_time, revoked, refresh_token_sha256
`

func (q *Queries) RevokeSession(ctx context.Context, id uuid.UUID) (Session, error) {
	row := q.db.QueryRow(ctx, revokeSession, id)
	var i Session
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.CreateTime,
		&i.ExpireTime,
		&i.Revoked,
		&i.RefreshTokenSha256,
	)
	return i, err
}

const updateOrganization = `-- name: UpdateOrganization :one
UPDATE
    organizations
SET
    display_name = $2,
    google_hosted_domain = $3,
    microsoft_tenant_id = $4,
    override_log_in_with_password_enabled = $5,
    override_log_in_with_google_enabled = $6,
    override_log_in_with_microsoft_enabled = $7
WHERE
    id = $1
RETURNING
    id, project_id, display_name, override_log_in_with_password_enabled, override_log_in_with_google_enabled, override_log_in_with_microsoft_enabled, google_hosted_domain, microsoft_tenant_id
`

type UpdateOrganizationParams struct {
	ID                                uuid.UUID
	DisplayName                       string
	GoogleHostedDomain                *string
	MicrosoftTenantID                 *string
	OverrideLogInWithPasswordEnabled  *bool
	OverrideLogInWithGoogleEnabled    *bool
	OverrideLogInWithMicrosoftEnabled *bool
}

func (q *Queries) UpdateOrganization(ctx context.Context, arg UpdateOrganizationParams) (Organization, error) {
	row := q.db.QueryRow(ctx, updateOrganization,
		arg.ID,
		arg.DisplayName,
		arg.GoogleHostedDomain,
		arg.MicrosoftTenantID,
		arg.OverrideLogInWithPasswordEnabled,
		arg.OverrideLogInWithGoogleEnabled,
		arg.OverrideLogInWithMicrosoftEnabled,
	)
	var i Organization
	err := row.Scan(
		&i.ID,
		&i.ProjectID,
		&i.DisplayName,
		&i.OverrideLogInWithPasswordEnabled,
		&i.OverrideLogInWithGoogleEnabled,
		&i.OverrideLogInWithMicrosoftEnabled,
		&i.GoogleHostedDomain,
		&i.MicrosoftTenantID,
	)
	return i, err
}

const updateOrganizationDisplayName = `-- name: UpdateOrganizationDisplayName :one
UPDATE
    organizations
SET
    display_name = $2
WHERE
    id = $1
RETURNING
    id, project_id, display_name, override_log_in_with_password_enabled, override_log_in_with_google_enabled, override_log_in_with_microsoft_enabled, google_hosted_domain, microsoft_tenant_id
`

type UpdateOrganizationDisplayNameParams struct {
	ID          uuid.UUID
	DisplayName string
}

func (q *Queries) UpdateOrganizationDisplayName(ctx context.Context, arg UpdateOrganizationDisplayNameParams) (Organization, error) {
	row := q.db.QueryRow(ctx, updateOrganizationDisplayName, arg.ID, arg.DisplayName)
	var i Organization
	err := row.Scan(
		&i.ID,
		&i.ProjectID,
		&i.DisplayName,
		&i.OverrideLogInWithPasswordEnabled,
		&i.OverrideLogInWithGoogleEnabled,
		&i.OverrideLogInWithMicrosoftEnabled,
		&i.GoogleHostedDomain,
		&i.MicrosoftTenantID,
	)
	return i, err
}

const updateOrganizationGoogleHostedDomain = `-- name: UpdateOrganizationGoogleHostedDomain :one
UPDATE
    organizations
SET
    google_hosted_domain = $2
WHERE
    id = $1
RETURNING
    id, project_id, display_name, override_log_in_with_password_enabled, override_log_in_with_google_enabled, override_log_in_with_microsoft_enabled, google_hosted_domain, microsoft_tenant_id
`

type UpdateOrganizationGoogleHostedDomainParams struct {
	ID                 uuid.UUID
	GoogleHostedDomain *string
}

func (q *Queries) UpdateOrganizationGoogleHostedDomain(ctx context.Context, arg UpdateOrganizationGoogleHostedDomainParams) (Organization, error) {
	row := q.db.QueryRow(ctx, updateOrganizationGoogleHostedDomain, arg.ID, arg.GoogleHostedDomain)
	var i Organization
	err := row.Scan(
		&i.ID,
		&i.ProjectID,
		&i.DisplayName,
		&i.OverrideLogInWithPasswordEnabled,
		&i.OverrideLogInWithGoogleEnabled,
		&i.OverrideLogInWithMicrosoftEnabled,
		&i.GoogleHostedDomain,
		&i.MicrosoftTenantID,
	)
	return i, err
}

const updateOrganizationMicrosoftTenantID = `-- name: UpdateOrganizationMicrosoftTenantID :one
UPDATE
    organizations
SET
    microsoft_tenant_id = $2
WHERE
    id = $1
RETURNING
    id, project_id, display_name, override_log_in_with_password_enabled, override_log_in_with_google_enabled, override_log_in_with_microsoft_enabled, google_hosted_domain, microsoft_tenant_id
`

type UpdateOrganizationMicrosoftTenantIDParams struct {
	ID                uuid.UUID
	MicrosoftTenantID *string
}

func (q *Queries) UpdateOrganizationMicrosoftTenantID(ctx context.Context, arg UpdateOrganizationMicrosoftTenantIDParams) (Organization, error) {
	row := q.db.QueryRow(ctx, updateOrganizationMicrosoftTenantID, arg.ID, arg.MicrosoftTenantID)
	var i Organization
	err := row.Scan(
		&i.ID,
		&i.ProjectID,
		&i.DisplayName,
		&i.OverrideLogInWithPasswordEnabled,
		&i.OverrideLogInWithGoogleEnabled,
		&i.OverrideLogInWithMicrosoftEnabled,
		&i.GoogleHostedDomain,
		&i.MicrosoftTenantID,
	)
	return i, err
}

const updateOrganizationOverrides = `-- name: UpdateOrganizationOverrides :one
UPDATE
    organizations
SET
    override_log_in_with_password_enabled = $2,
    override_log_in_with_google_enabled = $3,
    override_log_in_with_microsoft_enabled = $4
WHERE
    id = $1
RETURNING
    id, project_id, display_name, override_log_in_with_password_enabled, override_log_in_with_google_enabled, override_log_in_with_microsoft_enabled, google_hosted_domain, microsoft_tenant_id
`

type UpdateOrganizationOverridesParams struct {
	ID                                uuid.UUID
	OverrideLogInWithPasswordEnabled  *bool
	OverrideLogInWithGoogleEnabled    *bool
	OverrideLogInWithMicrosoftEnabled *bool
}

func (q *Queries) UpdateOrganizationOverrides(ctx context.Context, arg UpdateOrganizationOverridesParams) (Organization, error) {
	row := q.db.QueryRow(ctx, updateOrganizationOverrides,
		arg.ID,
		arg.OverrideLogInWithPasswordEnabled,
		arg.OverrideLogInWithGoogleEnabled,
		arg.OverrideLogInWithMicrosoftEnabled,
	)
	var i Organization
	err := row.Scan(
		&i.ID,
		&i.ProjectID,
		&i.DisplayName,
		&i.OverrideLogInWithPasswordEnabled,
		&i.OverrideLogInWithGoogleEnabled,
		&i.OverrideLogInWithMicrosoftEnabled,
		&i.GoogleHostedDomain,
		&i.MicrosoftTenantID,
	)
	return i, err
}

const updateProject = `-- name: UpdateProject :one
UPDATE
    projects
SET
    log_in_with_password_enabled = $2,
    log_in_with_google_enabled = $3,
    log_in_with_microsoft_enabled = $4,
    google_oauth_client_id = $5,
    google_oauth_client_secret = $6,
    microsoft_oauth_client_id = $7,
    microsoft_oauth_client_secret = $8
WHERE
    id = $1
RETURNING
    id, organization_id, log_in_with_password_enabled, log_in_with_google_enabled, log_in_with_microsoft_enabled, google_oauth_client_id, google_oauth_client_secret, microsoft_oauth_client_id, microsoft_oauth_client_secret
`

type UpdateProjectParams struct {
	ID                         uuid.UUID
	LogInWithPasswordEnabled   bool
	LogInWithGoogleEnabled     bool
	LogInWithMicrosoftEnabled  bool
	GoogleOauthClientID        *string
	GoogleOauthClientSecret    *string
	MicrosoftOauthClientID     *string
	MicrosoftOauthClientSecret *string
}

func (q *Queries) UpdateProject(ctx context.Context, arg UpdateProjectParams) (Project, error) {
	row := q.db.QueryRow(ctx, updateProject,
		arg.ID,
		arg.LogInWithPasswordEnabled,
		arg.LogInWithGoogleEnabled,
		arg.LogInWithMicrosoftEnabled,
		arg.GoogleOauthClientID,
		arg.GoogleOauthClientSecret,
		arg.MicrosoftOauthClientID,
		arg.MicrosoftOauthClientSecret,
	)
	var i Project
	err := row.Scan(
		&i.ID,
		&i.OrganizationID,
		&i.LogInWithPasswordEnabled,
		&i.LogInWithGoogleEnabled,
		&i.LogInWithMicrosoftEnabled,
		&i.GoogleOauthClientID,
		&i.GoogleOauthClientSecret,
		&i.MicrosoftOauthClientID,
		&i.MicrosoftOauthClientSecret,
	)
	return i, err
}

const updateProjectGoogleOAuthClient = `-- name: UpdateProjectGoogleOAuthClient :one
UPDATE
    projects
SET
    google_oauth_client_id = $2,
    google_oauth_client_secret = $3
WHERE
    id = $1
RETURNING
    id, organization_id, log_in_with_password_enabled, log_in_with_google_enabled, log_in_with_microsoft_enabled, google_oauth_client_id, google_oauth_client_secret, microsoft_oauth_client_id, microsoft_oauth_client_secret
`

type UpdateProjectGoogleOAuthClientParams struct {
	ID                      uuid.UUID
	GoogleOauthClientID     *string
	GoogleOauthClientSecret *string
}

func (q *Queries) UpdateProjectGoogleOAuthClient(ctx context.Context, arg UpdateProjectGoogleOAuthClientParams) (Project, error) {
	row := q.db.QueryRow(ctx, updateProjectGoogleOAuthClient, arg.ID, arg.GoogleOauthClientID, arg.GoogleOauthClientSecret)
	var i Project
	err := row.Scan(
		&i.ID,
		&i.OrganizationID,
		&i.LogInWithPasswordEnabled,
		&i.LogInWithGoogleEnabled,
		&i.LogInWithMicrosoftEnabled,
		&i.GoogleOauthClientID,
		&i.GoogleOauthClientSecret,
		&i.MicrosoftOauthClientID,
		&i.MicrosoftOauthClientSecret,
	)
	return i, err
}

const updateProjectLoginMethods = `-- name: UpdateProjectLoginMethods :one
UPDATE
    projects
SET
    log_in_with_password_enabled = $2,
    log_in_with_google_enabled = $3,
    log_in_with_microsoft_enabled = $4
WHERE
    id = $1
RETURNING
    id, organization_id, log_in_with_password_enabled, log_in_with_google_enabled, log_in_with_microsoft_enabled, google_oauth_client_id, google_oauth_client_secret, microsoft_oauth_client_id, microsoft_oauth_client_secret
`

type UpdateProjectLoginMethodsParams struct {
	ID                        uuid.UUID
	LogInWithPasswordEnabled  bool
	LogInWithGoogleEnabled    bool
	LogInWithMicrosoftEnabled bool
}

func (q *Queries) UpdateProjectLoginMethods(ctx context.Context, arg UpdateProjectLoginMethodsParams) (Project, error) {
	row := q.db.QueryRow(ctx, updateProjectLoginMethods,
		arg.ID,
		arg.LogInWithPasswordEnabled,
		arg.LogInWithGoogleEnabled,
		arg.LogInWithMicrosoftEnabled,
	)
	var i Project
	err := row.Scan(
		&i.ID,
		&i.OrganizationID,
		&i.LogInWithPasswordEnabled,
		&i.LogInWithGoogleEnabled,
		&i.LogInWithMicrosoftEnabled,
		&i.GoogleOauthClientID,
		&i.GoogleOauthClientSecret,
		&i.MicrosoftOauthClientID,
		&i.MicrosoftOauthClientSecret,
	)
	return i, err
}

const updateProjectMicrosoftOAuthClient = `-- name: UpdateProjectMicrosoftOAuthClient :one
UPDATE
    projects
SET
    microsoft_oauth_client_id = $2,
    microsoft_oauth_client_secret = $3
WHERE
    id = $1
RETURNING
    id, organization_id, log_in_with_password_enabled, log_in_with_google_enabled, log_in_with_microsoft_enabled, google_oauth_client_id, google_oauth_client_secret, microsoft_oauth_client_id, microsoft_oauth_client_secret
`

type UpdateProjectMicrosoftOAuthClientParams struct {
	ID                         uuid.UUID
	MicrosoftOauthClientID     *string
	MicrosoftOauthClientSecret *string
}

func (q *Queries) UpdateProjectMicrosoftOAuthClient(ctx context.Context, arg UpdateProjectMicrosoftOAuthClientParams) (Project, error) {
	row := q.db.QueryRow(ctx, updateProjectMicrosoftOAuthClient, arg.ID, arg.MicrosoftOauthClientID, arg.MicrosoftOauthClientSecret)
	var i Project
	err := row.Scan(
		&i.ID,
		&i.OrganizationID,
		&i.LogInWithPasswordEnabled,
		&i.LogInWithGoogleEnabled,
		&i.LogInWithMicrosoftEnabled,
		&i.GoogleOauthClientID,
		&i.GoogleOauthClientSecret,
		&i.MicrosoftOauthClientID,
		&i.MicrosoftOauthClientSecret,
	)
	return i, err
}

const updateProjectOrganizationID = `-- name: UpdateProjectOrganizationID :one
UPDATE
    projects
SET
    organization_id = $2
WHERE
    id = $1
RETURNING
    id, organization_id, log_in_with_password_enabled, log_in_with_google_enabled, log_in_with_microsoft_enabled, google_oauth_client_id, google_oauth_client_secret, microsoft_oauth_client_id, microsoft_oauth_client_secret
`

type UpdateProjectOrganizationIDParams struct {
	ID             uuid.UUID
	OrganizationID *uuid.UUID
}

func (q *Queries) UpdateProjectOrganizationID(ctx context.Context, arg UpdateProjectOrganizationIDParams) (Project, error) {
	row := q.db.QueryRow(ctx, updateProjectOrganizationID, arg.ID, arg.OrganizationID)
	var i Project
	err := row.Scan(
		&i.ID,
		&i.OrganizationID,
		&i.LogInWithPasswordEnabled,
		&i.LogInWithGoogleEnabled,
		&i.LogInWithMicrosoftEnabled,
		&i.GoogleOauthClientID,
		&i.GoogleOauthClientSecret,
		&i.MicrosoftOauthClientID,
		&i.MicrosoftOauthClientSecret,
	)
	return i, err
}

const updateUser = `-- name: UpdateUser :one
UPDATE
    users
SET
    organization_id = $2,
    unverified_email = $3,
    verified_email = $4,
    password_bcrypt = $5,
    google_user_id = $6,
    microsoft_user_id = $7
WHERE
    id = $1
RETURNING
    id, organization_id, unverified_email, verified_email, password_bcrypt, google_user_id, microsoft_user_id
`

type UpdateUserParams struct {
	ID              uuid.UUID
	OrganizationID  uuid.UUID
	UnverifiedEmail *string
	VerifiedEmail   *string
	PasswordBcrypt  *string
	GoogleUserID    *string
	MicrosoftUserID *string
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, updateUser,
		arg.ID,
		arg.OrganizationID,
		arg.UnverifiedEmail,
		arg.VerifiedEmail,
		arg.PasswordBcrypt,
		arg.GoogleUserID,
		arg.MicrosoftUserID,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.OrganizationID,
		&i.UnverifiedEmail,
		&i.VerifiedEmail,
		&i.PasswordBcrypt,
		&i.GoogleUserID,
		&i.MicrosoftUserID,
	)
	return i, err
}

const updateUserGoogleUserID = `-- name: UpdateUserGoogleUserID :one
UPDATE
    users
SET
    google_user_id = $2
WHERE
    id = $1
RETURNING
    id, organization_id, unverified_email, verified_email, password_bcrypt, google_user_id, microsoft_user_id
`

type UpdateUserGoogleUserIDParams struct {
	ID           uuid.UUID
	GoogleUserID *string
}

func (q *Queries) UpdateUserGoogleUserID(ctx context.Context, arg UpdateUserGoogleUserIDParams) (User, error) {
	row := q.db.QueryRow(ctx, updateUserGoogleUserID, arg.ID, arg.GoogleUserID)
	var i User
	err := row.Scan(
		&i.ID,
		&i.OrganizationID,
		&i.UnverifiedEmail,
		&i.VerifiedEmail,
		&i.PasswordBcrypt,
		&i.GoogleUserID,
		&i.MicrosoftUserID,
	)
	return i, err
}

const updateUserMicrosoftUserID = `-- name: UpdateUserMicrosoftUserID :one
UPDATE
    users
SET
    microsoft_user_id = $2
WHERE
    id = $1
RETURNING
    id, organization_id, unverified_email, verified_email, password_bcrypt, google_user_id, microsoft_user_id
`

type UpdateUserMicrosoftUserIDParams struct {
	ID              uuid.UUID
	MicrosoftUserID *string
}

func (q *Queries) UpdateUserMicrosoftUserID(ctx context.Context, arg UpdateUserMicrosoftUserIDParams) (User, error) {
	row := q.db.QueryRow(ctx, updateUserMicrosoftUserID, arg.ID, arg.MicrosoftUserID)
	var i User
	err := row.Scan(
		&i.ID,
		&i.OrganizationID,
		&i.UnverifiedEmail,
		&i.VerifiedEmail,
		&i.PasswordBcrypt,
		&i.GoogleUserID,
		&i.MicrosoftUserID,
	)
	return i, err
}

const updateUserPassword = `-- name: UpdateUserPassword :one
UPDATE
    users
SET
    password_bcrypt = $2
WHERE
    id = $1
RETURNING
    id, organization_id, unverified_email, verified_email, password_bcrypt, google_user_id, microsoft_user_id
`

type UpdateUserPasswordParams struct {
	ID             uuid.UUID
	PasswordBcrypt *string
}

func (q *Queries) UpdateUserPassword(ctx context.Context, arg UpdateUserPasswordParams) (User, error) {
	row := q.db.QueryRow(ctx, updateUserPassword, arg.ID, arg.PasswordBcrypt)
	var i User
	err := row.Scan(
		&i.ID,
		&i.OrganizationID,
		&i.UnverifiedEmail,
		&i.VerifiedEmail,
		&i.PasswordBcrypt,
		&i.GoogleUserID,
		&i.MicrosoftUserID,
	)
	return i, err
}

const verifyIntermediateSessionEmail = `-- name: VerifyIntermediateSessionEmail :one
UPDATE
    intermediate_sessions
SET
    unverified_email = NULL,
    verified_email = $2
WHERE
    id = $1
RETURNING
    id, project_id, unverified_email, verified_email, create_time, expire_time, token, token_sha256, revoked
`

type VerifyIntermediateSessionEmailParams struct {
	ID            uuid.UUID
	VerifiedEmail *string
}

func (q *Queries) VerifyIntermediateSessionEmail(ctx context.Context, arg VerifyIntermediateSessionEmailParams) (IntermediateSession, error) {
	row := q.db.QueryRow(ctx, verifyIntermediateSessionEmail, arg.ID, arg.VerifiedEmail)
	var i IntermediateSession
	err := row.Scan(
		&i.ID,
		&i.ProjectID,
		&i.UnverifiedEmail,
		&i.VerifiedEmail,
		&i.CreateTime,
		&i.ExpireTime,
		&i.Token,
		&i.TokenSha256,
		&i.Revoked,
	)
	return i, err
}

const verifyUserEmail = `-- name: VerifyUserEmail :one
UPDATE
    users
SET
    unverified_email = NULL,
    verified_email = $2
WHERE
    id = $1
RETURNING
    id, organization_id, unverified_email, verified_email, password_bcrypt, google_user_id, microsoft_user_id
`

type VerifyUserEmailParams struct {
	ID            uuid.UUID
	VerifiedEmail *string
}

func (q *Queries) VerifyUserEmail(ctx context.Context, arg VerifyUserEmailParams) (User, error) {
	row := q.db.QueryRow(ctx, verifyUserEmail, arg.ID, arg.VerifiedEmail)
	var i User
	err := row.Scan(
		&i.ID,
		&i.OrganizationID,
		&i.UnverifiedEmail,
		&i.VerifiedEmail,
		&i.PasswordBcrypt,
		&i.GoogleUserID,
		&i.MicrosoftUserID,
	)
	return i, err
}
