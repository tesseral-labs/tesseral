// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: queries.sql

package queries

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const countAllProjects = `-- name: CountAllProjects :one
SELECT
    count(*)
FROM
    projects
`

func (q *Queries) CountAllProjects(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, countAllProjects)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createOrganization = `-- name: CreateOrganization :one
INSERT INTO organizations (id, project_id, display_name, override_log_in_methods, override_log_in_with_google_enabled, override_log_in_with_microsoft_enabled, override_log_in_with_password_enabled, saml_enabled, scim_enabled)
    VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9)
RETURNING
    id, project_id, display_name, override_log_in_with_password_enabled, override_log_in_with_google_enabled, override_log_in_with_microsoft_enabled, override_log_in_methods, saml_enabled, scim_enabled, create_time, update_time, logins_disabled
`

type CreateOrganizationParams struct {
	ID                                uuid.UUID
	ProjectID                         uuid.UUID
	DisplayName                       string
	OverrideLogInMethods              bool
	OverrideLogInWithGoogleEnabled    *bool
	OverrideLogInWithMicrosoftEnabled *bool
	OverrideLogInWithPasswordEnabled  *bool
	SamlEnabled                       bool
	ScimEnabled                       bool
}

func (q *Queries) CreateOrganization(ctx context.Context, arg CreateOrganizationParams) (Organization, error) {
	row := q.db.QueryRow(ctx, createOrganization,
		arg.ID,
		arg.ProjectID,
		arg.DisplayName,
		arg.OverrideLogInMethods,
		arg.OverrideLogInWithGoogleEnabled,
		arg.OverrideLogInWithMicrosoftEnabled,
		arg.OverrideLogInWithPasswordEnabled,
		arg.SamlEnabled,
		arg.ScimEnabled,
	)
	var i Organization
	err := row.Scan(
		&i.ID,
		&i.ProjectID,
		&i.DisplayName,
		&i.OverrideLogInWithPasswordEnabled,
		&i.OverrideLogInWithGoogleEnabled,
		&i.OverrideLogInWithMicrosoftEnabled,
		&i.OverrideLogInMethods,
		&i.SamlEnabled,
		&i.ScimEnabled,
		&i.CreateTime,
		&i.UpdateTime,
		&i.LoginsDisabled,
	)
	return i, err
}

const createProject = `-- name: CreateProject :one
INSERT INTO projects (id, organization_id, display_name, log_in_with_password_enabled, log_in_with_google_enabled, log_in_with_microsoft_enabled, auth_domain, custom_auth_domain)
    VALUES ($1, $2, $3, $4, $5, $6, $7, $8)
RETURNING
    id, organization_id, log_in_with_password_enabled, log_in_with_google_enabled, log_in_with_microsoft_enabled, google_oauth_client_id, microsoft_oauth_client_id, google_oauth_client_secret_ciphertext, microsoft_oauth_client_secret_ciphertext, display_name, create_time, update_time, custom_auth_domain, auth_domain, logins_disabled
`

type CreateProjectParams struct {
	ID                        uuid.UUID
	OrganizationID            *uuid.UUID
	DisplayName               string
	LogInWithPasswordEnabled  bool
	LogInWithGoogleEnabled    bool
	LogInWithMicrosoftEnabled bool
	AuthDomain                *string
	CustomAuthDomain          *string
}

func (q *Queries) CreateProject(ctx context.Context, arg CreateProjectParams) (Project, error) {
	row := q.db.QueryRow(ctx, createProject,
		arg.ID,
		arg.OrganizationID,
		arg.DisplayName,
		arg.LogInWithPasswordEnabled,
		arg.LogInWithGoogleEnabled,
		arg.LogInWithMicrosoftEnabled,
		arg.AuthDomain,
		arg.CustomAuthDomain,
	)
	var i Project
	err := row.Scan(
		&i.ID,
		&i.OrganizationID,
		&i.LogInWithPasswordEnabled,
		&i.LogInWithGoogleEnabled,
		&i.LogInWithMicrosoftEnabled,
		&i.GoogleOauthClientID,
		&i.MicrosoftOauthClientID,
		&i.GoogleOauthClientSecretCiphertext,
		&i.MicrosoftOauthClientSecretCiphertext,
		&i.DisplayName,
		&i.CreateTime,
		&i.UpdateTime,
		&i.CustomAuthDomain,
		&i.AuthDomain,
		&i.LoginsDisabled,
	)
	return i, err
}

const createProjectAPIKey = `-- name: CreateProjectAPIKey :one
INSERT INTO project_api_keys (id, project_id, secret_token_sha256, display_name)
    VALUES ($1, $2, $3, $4)
RETURNING
    id, project_id, secret_token_sha256, display_name, create_time, update_time
`

type CreateProjectAPIKeyParams struct {
	ID                uuid.UUID
	ProjectID         uuid.UUID
	SecretTokenSha256 []byte
	DisplayName       string
}

func (q *Queries) CreateProjectAPIKey(ctx context.Context, arg CreateProjectAPIKeyParams) (ProjectApiKey, error) {
	row := q.db.QueryRow(ctx, createProjectAPIKey,
		arg.ID,
		arg.ProjectID,
		arg.SecretTokenSha256,
		arg.DisplayName,
	)
	var i ProjectApiKey
	err := row.Scan(
		&i.ID,
		&i.ProjectID,
		&i.SecretTokenSha256,
		&i.DisplayName,
		&i.CreateTime,
		&i.UpdateTime,
	)
	return i, err
}

const createProjectUISettings = `-- name: CreateProjectUISettings :one
INSERT INTO project_ui_settings (id, project_id, primary_color, detect_dark_mode_enabled)
    VALUES ($1, $2, $3, $4)
RETURNING
    id, project_id, primary_color, detect_dark_mode_enabled, dark_mode_primary_color, create_time, update_time
`

type CreateProjectUISettingsParams struct {
	ID                    uuid.UUID
	ProjectID             uuid.UUID
	PrimaryColor          *string
	DetectDarkModeEnabled bool
}

func (q *Queries) CreateProjectUISettings(ctx context.Context, arg CreateProjectUISettingsParams) (ProjectUiSetting, error) {
	row := q.db.QueryRow(ctx, createProjectUISettings,
		arg.ID,
		arg.ProjectID,
		arg.PrimaryColor,
		arg.DetectDarkModeEnabled,
	)
	var i ProjectUiSetting
	err := row.Scan(
		&i.ID,
		&i.ProjectID,
		&i.PrimaryColor,
		&i.DetectDarkModeEnabled,
		&i.DarkModePrimaryColor,
		&i.CreateTime,
		&i.UpdateTime,
	)
	return i, err
}

const createSessionSigningKey = `-- name: CreateSessionSigningKey :one
INSERT INTO session_signing_keys (id, project_id, public_key, private_key_cipher_text, expire_time)
    VALUES ($1, $2, $3, $4, $5)
RETURNING
    id, project_id, public_key, private_key_cipher_text, create_time, expire_time
`

type CreateSessionSigningKeyParams struct {
	ID                   uuid.UUID
	ProjectID            uuid.UUID
	PublicKey            []byte
	PrivateKeyCipherText []byte
	ExpireTime           *time.Time
}

func (q *Queries) CreateSessionSigningKey(ctx context.Context, arg CreateSessionSigningKeyParams) (SessionSigningKey, error) {
	row := q.db.QueryRow(ctx, createSessionSigningKey,
		arg.ID,
		arg.ProjectID,
		arg.PublicKey,
		arg.PrivateKeyCipherText,
		arg.ExpireTime,
	)
	var i SessionSigningKey
	err := row.Scan(
		&i.ID,
		&i.ProjectID,
		&i.PublicKey,
		&i.PrivateKeyCipherText,
		&i.CreateTime,
		&i.ExpireTime,
	)
	return i, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users (id, organization_id, email, is_owner, password_bcrypt, google_user_id, microsoft_user_id)
    VALUES ($1, $2, $3, $4, $5, $6, $7)
RETURNING
    id, organization_id, password_bcrypt, google_user_id, microsoft_user_id, email, create_time, update_time, deactivate_time, is_owner, failed_password_attempts, password_lockout_expire_time
`

type CreateUserParams struct {
	ID              uuid.UUID
	OrganizationID  uuid.UUID
	Email           string
	IsOwner         bool
	PasswordBcrypt  *string
	GoogleUserID    *string
	MicrosoftUserID *string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.ID,
		arg.OrganizationID,
		arg.Email,
		arg.IsOwner,
		arg.PasswordBcrypt,
		arg.GoogleUserID,
		arg.MicrosoftUserID,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.OrganizationID,
		&i.PasswordBcrypt,
		&i.GoogleUserID,
		&i.MicrosoftUserID,
		&i.Email,
		&i.CreateTime,
		&i.UpdateTime,
		&i.DeactivateTime,
		&i.IsOwner,
		&i.FailedPasswordAttempts,
		&i.PasswordLockoutExpireTime,
	)
	return i, err
}

const getOrganizationByID = `-- name: GetOrganizationByID :one
SELECT
    id, project_id, display_name, override_log_in_with_password_enabled, override_log_in_with_google_enabled, override_log_in_with_microsoft_enabled, override_log_in_methods, saml_enabled, scim_enabled, create_time, update_time, logins_disabled
FROM
    organizations
WHERE
    id = $1
`

func (q *Queries) GetOrganizationByID(ctx context.Context, id uuid.UUID) (Organization, error) {
	row := q.db.QueryRow(ctx, getOrganizationByID, id)
	var i Organization
	err := row.Scan(
		&i.ID,
		&i.ProjectID,
		&i.DisplayName,
		&i.OverrideLogInWithPasswordEnabled,
		&i.OverrideLogInWithGoogleEnabled,
		&i.OverrideLogInWithMicrosoftEnabled,
		&i.OverrideLogInMethods,
		&i.SamlEnabled,
		&i.ScimEnabled,
		&i.CreateTime,
		&i.UpdateTime,
		&i.LoginsDisabled,
	)
	return i, err
}

const getOrganizationByProjectIDAndID = `-- name: GetOrganizationByProjectIDAndID :one
SELECT
    id, project_id, display_name, override_log_in_with_password_enabled, override_log_in_with_google_enabled, override_log_in_with_microsoft_enabled, override_log_in_methods, saml_enabled, scim_enabled, create_time, update_time, logins_disabled
FROM
    organizations
WHERE
    id = $1
    AND project_id = $2
`

type GetOrganizationByProjectIDAndIDParams struct {
	ID        uuid.UUID
	ProjectID uuid.UUID
}

func (q *Queries) GetOrganizationByProjectIDAndID(ctx context.Context, arg GetOrganizationByProjectIDAndIDParams) (Organization, error) {
	row := q.db.QueryRow(ctx, getOrganizationByProjectIDAndID, arg.ID, arg.ProjectID)
	var i Organization
	err := row.Scan(
		&i.ID,
		&i.ProjectID,
		&i.DisplayName,
		&i.OverrideLogInWithPasswordEnabled,
		&i.OverrideLogInWithGoogleEnabled,
		&i.OverrideLogInWithMicrosoftEnabled,
		&i.OverrideLogInMethods,
		&i.SamlEnabled,
		&i.ScimEnabled,
		&i.CreateTime,
		&i.UpdateTime,
		&i.LoginsDisabled,
	)
	return i, err
}

const getProjectAPIKeyBySecretTokenSHA256 = `-- name: GetProjectAPIKeyBySecretTokenSHA256 :one
SELECT
    id, project_id, secret_token_sha256, display_name, create_time, update_time
FROM
    project_api_keys
WHERE
    secret_token_sha256 = $1
`

func (q *Queries) GetProjectAPIKeyBySecretTokenSHA256(ctx context.Context, secretTokenSha256 []byte) (ProjectApiKey, error) {
	row := q.db.QueryRow(ctx, getProjectAPIKeyBySecretTokenSHA256, secretTokenSha256)
	var i ProjectApiKey
	err := row.Scan(
		&i.ID,
		&i.ProjectID,
		&i.SecretTokenSha256,
		&i.DisplayName,
		&i.CreateTime,
		&i.UpdateTime,
	)
	return i, err
}

const getProjectByID = `-- name: GetProjectByID :one
SELECT
    id, organization_id, log_in_with_password_enabled, log_in_with_google_enabled, log_in_with_microsoft_enabled, google_oauth_client_id, microsoft_oauth_client_id, google_oauth_client_secret_ciphertext, microsoft_oauth_client_secret_ciphertext, display_name, create_time, update_time, custom_auth_domain, auth_domain, logins_disabled
FROM
    projects
WHERE
    id = $1
`

func (q *Queries) GetProjectByID(ctx context.Context, id uuid.UUID) (Project, error) {
	row := q.db.QueryRow(ctx, getProjectByID, id)
	var i Project
	err := row.Scan(
		&i.ID,
		&i.OrganizationID,
		&i.LogInWithPasswordEnabled,
		&i.LogInWithGoogleEnabled,
		&i.LogInWithMicrosoftEnabled,
		&i.GoogleOauthClientID,
		&i.MicrosoftOauthClientID,
		&i.GoogleOauthClientSecretCiphertext,
		&i.MicrosoftOauthClientSecretCiphertext,
		&i.DisplayName,
		&i.CreateTime,
		&i.UpdateTime,
		&i.CustomAuthDomain,
		&i.AuthDomain,
		&i.LoginsDisabled,
	)
	return i, err
}

const getSessionByID = `-- name: GetSessionByID :one
SELECT
    id, user_id, create_time, expire_time, revoked, refresh_token_sha256, impersonator_user_id
FROM
    sessions
WHERE
    id = $1
`

func (q *Queries) GetSessionByID(ctx context.Context, id uuid.UUID) (Session, error) {
	row := q.db.QueryRow(ctx, getSessionByID, id)
	var i Session
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.CreateTime,
		&i.ExpireTime,
		&i.Revoked,
		&i.RefreshTokenSha256,
		&i.ImpersonatorUserID,
	)
	return i, err
}

const getSessionDetailsByRefreshTokenSHA256 = `-- name: GetSessionDetailsByRefreshTokenSHA256 :one
SELECT
    sessions.id AS session_id,
    users.id AS user_id,
    organizations.id AS organization_id,
    projects.id AS project_id
FROM
    sessions
    JOIN users ON sessions.user_id = users.id
    JOIN organizations ON users.organization_id = organizations.id
    JOIN projects ON organizations.id = projects.organization_id
WHERE
    revoked = FALSE
    AND refresh_token_sha256 = $1
`

type GetSessionDetailsByRefreshTokenSHA256Row struct {
	SessionID      uuid.UUID
	UserID         uuid.UUID
	OrganizationID uuid.UUID
	ProjectID      uuid.UUID
}

func (q *Queries) GetSessionDetailsByRefreshTokenSHA256(ctx context.Context, refreshTokenSha256 []byte) (GetSessionDetailsByRefreshTokenSHA256Row, error) {
	row := q.db.QueryRow(ctx, getSessionDetailsByRefreshTokenSHA256, refreshTokenSha256)
	var i GetSessionDetailsByRefreshTokenSHA256Row
	err := row.Scan(
		&i.SessionID,
		&i.UserID,
		&i.OrganizationID,
		&i.ProjectID,
	)
	return i, err
}

const getUserByID = `-- name: GetUserByID :one
SELECT
    id, organization_id, password_bcrypt, google_user_id, microsoft_user_id, email, create_time, update_time, deactivate_time, is_owner, failed_password_attempts, password_lockout_expire_time
FROM
    users
WHERE
    id = $1
`

// -- name: GetOrganizationByGoogleHostedDomain :one
// SELECT
//
//	*
//
// FROM
//
//	organizations
//
// WHERE
//
//	google_hosted_domain = $1;
func (q *Queries) GetUserByID(ctx context.Context, id uuid.UUID) (User, error) {
	row := q.db.QueryRow(ctx, getUserByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.OrganizationID,
		&i.PasswordBcrypt,
		&i.GoogleUserID,
		&i.MicrosoftUserID,
		&i.Email,
		&i.CreateTime,
		&i.UpdateTime,
		&i.DeactivateTime,
		&i.IsOwner,
		&i.FailedPasswordAttempts,
		&i.PasswordLockoutExpireTime,
	)
	return i, err
}

const updateProjectOrganizationID = `-- name: UpdateProjectOrganizationID :one
UPDATE
    projects
SET
    organization_id = $2
WHERE
    id = $1
RETURNING
    id, organization_id, log_in_with_password_enabled, log_in_with_google_enabled, log_in_with_microsoft_enabled, google_oauth_client_id, microsoft_oauth_client_id, google_oauth_client_secret_ciphertext, microsoft_oauth_client_secret_ciphertext, display_name, create_time, update_time, custom_auth_domain, auth_domain, logins_disabled
`

type UpdateProjectOrganizationIDParams struct {
	ID             uuid.UUID
	OrganizationID *uuid.UUID
}

// -- name: UpdateOrganization :one
// UPDATE
//
//	organizations
//
// SET
//
//	display_name = $2,
//	google_hosted_domain = $3,
//	microsoft_tenant_id = $4,
//	override_log_in_with_password_enabled = $5,
//	override_log_in_with_google_enabled = $6,
//	override_log_in_with_microsoft_enabled = $7
//
// WHERE
//
//	id = $1
//
// RETURNING
//
//	*;
//
// -- name: UpdateProject :one
// UPDATE
//
//	projects
//
// SET
//
//	log_in_with_password_enabled = $2,
//	log_in_with_google_enabled = $3,
//	log_in_with_microsoft_enabled = $4,
//	google_oauth_client_id = $5,
//	google_oauth_client_secret = $6,
//	microsoft_oauth_client_id = $7,
//	microsoft_oauth_client_secret = $8
//
// WHERE
//
//	id = $1
//
// RETURNING
//
//	*;
func (q *Queries) UpdateProjectOrganizationID(ctx context.Context, arg UpdateProjectOrganizationIDParams) (Project, error) {
	row := q.db.QueryRow(ctx, updateProjectOrganizationID, arg.ID, arg.OrganizationID)
	var i Project
	err := row.Scan(
		&i.ID,
		&i.OrganizationID,
		&i.LogInWithPasswordEnabled,
		&i.LogInWithGoogleEnabled,
		&i.LogInWithMicrosoftEnabled,
		&i.GoogleOauthClientID,
		&i.MicrosoftOauthClientID,
		&i.GoogleOauthClientSecretCiphertext,
		&i.MicrosoftOauthClientSecretCiphertext,
		&i.DisplayName,
		&i.CreateTime,
		&i.UpdateTime,
		&i.CustomAuthDomain,
		&i.AuthDomain,
		&i.LoginsDisabled,
	)
	return i, err
}

const updateUser = `-- name: UpdateUser :one
UPDATE
    users
SET
    organization_id = $2,
    email = $3,
    password_bcrypt = $4,
    google_user_id = $5,
    microsoft_user_id = $6
WHERE
    id = $1
RETURNING
    id, organization_id, password_bcrypt, google_user_id, microsoft_user_id, email, create_time, update_time, deactivate_time, is_owner, failed_password_attempts, password_lockout_expire_time
`

type UpdateUserParams struct {
	ID              uuid.UUID
	OrganizationID  uuid.UUID
	Email           string
	PasswordBcrypt  *string
	GoogleUserID    *string
	MicrosoftUserID *string
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, updateUser,
		arg.ID,
		arg.OrganizationID,
		arg.Email,
		arg.PasswordBcrypt,
		arg.GoogleUserID,
		arg.MicrosoftUserID,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.OrganizationID,
		&i.PasswordBcrypt,
		&i.GoogleUserID,
		&i.MicrosoftUserID,
		&i.Email,
		&i.CreateTime,
		&i.UpdateTime,
		&i.DeactivateTime,
		&i.IsOwner,
		&i.FailedPasswordAttempts,
		&i.PasswordLockoutExpireTime,
	)
	return i, err
}
