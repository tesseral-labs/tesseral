syntax = "proto3";

package frontend.v1;

import "google/api/annotations.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/field_mask.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/struct.proto";
import "openauth/v1/openauth.proto";

service FrontendService {
  // Creates a user.
  rpc CreateUser(CreateUserRequest) returns (CreateUserResponse) {
    option (google.api.http) = {
      post: "/frontend/v1/users",
      body: "user"
    };
  }

  // Gets a user.
  rpc GetUser(GetUserRequest) returns (GetUserResponse) {
    option (google.api.http) = {
      get: "/frontend/v1/users/{id}"
    };
  }

  // Gets a list of organizations.
  rpc ListOrganizations(ListOrganizationsRequest) returns (ListOrganizationsResponse) {
    option (google.api.http) = {
      get: "/frontend/v1/organizations"
    };
  }

  // Gets a list of users.
  rpc ListUsers(ListUsersRequest) returns (ListUsersResponse) {
    option (google.api.http) = {
      get: "/frontend/v1/users"
    };
  }

  // Creates a new intermediate session or session and cookies the requester.
  rpc SignInWithEmail(SignInWithEmailRequest) returns (SignInWithEmailResponse) {
    option (google.api.http) = {
      post: "/frontend/v1/email-signin",
      body: "*"
    };
  }

  // Updates a user.
  rpc UpdateUser(UpdateUserRequest) returns (UpdateUserResponse) {
    option (google.api.http) = {
      patch: "/frontend/v1/users/{id}",
      body: "user"
    };
  }

  // Who am I?
  rpc WhoAmI(WhoAmIRequest) returns (WhoAmIResponse) {
    option (google.api.http) = {
      get: "/frontend/v1/whoami"
    };
  }
}

message CreateUserRequest {
  // The user to create.
  openauth.v1.User user = 1;
}

message CreateUserResponse {
  // The user created by the CreateUser request.
  openauth.v1.User user = 1;
}

message GetUserRequest {
  // The ID of the user to get.
  string id = 1;
}

message GetUserResponse {
  // The user returned by the GetUser request.
  openauth.v1.User user = 1;
}

message ListOrganizationsRequest {
  // The ID of the project to use for filtering.
  string project_id = 1;
  // The email address to use for filtering.
  string email = 2;
  // The page token to use for pagination.
  string page_token = 3;
}

message ListOrganizationsResponse {
  // The organizations returned by the ListOrganizations request.
  repeated openauth.v1.Organization organizations = 1;
  // The next page token to use for pagination.
  string next_page_token = 2;
}

message ListUsersRequest {
  // The ID of the organization to use for filtering.
  string organization_id = 1;
  // The page token to use for pagination.
  string page_token = 2;
}

message ListUsersResponse {
  // The users returned by the ListUsers request.
  repeated openauth.v1.User users = 1;
  // The next page token to use for pagination.
  string next_page_token = 2;
}

message SignInWithEmailRequest {
  // The email address to sign in with.
  string email = 1;
}

message SignInWithEmailResponse {
  // The token for the intermediate session or session created by the SignInWithEmail request.
  string SessionToken = 1;
}

message UpdateUserRequest {
  // The ID of the user to update.
  string id = 1;
  // The user updates to apply.
  openauth.v1.User user = 2;
}

message UpdateUserResponse {
  // The user updated by the UpdateUser request.
  openauth.v1.User user = 1;
}

message WhoAmIRequest {
}

message WhoAmIResponse {
  // The user ID that is currently authenticated.
  string id = 1;
  // The display name for the user.
  string display_name = 2;
  // The email address for the user.
  string email = 3;
}