syntax = "proto3";

package backend.v1;

import "google/api/annotations.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/field_mask.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/struct.proto";

service BackendService {
  // Creates an organization.
  rpc CreateOrganization(CreateOrganizationRequest) returns (CreateOrganizationResponse) {
    option (google.api.http) = {
      post: "/v1/organizations",
      body: "organization"
    };
  }

  // Gets an organization.
  rpc GetOrganization(GetOrganizationRequest) returns (GetOrganizationResponse) {
    option (google.api.http) = {
      get: "/v1/organizations/{id}"
    };
  }

  // Gets a list of organizations.
  rpc ListOrganizations(ListOrganizationsRequest) returns (ListOrganizationsResponse) {
    option (google.api.http) = {
      get: "/v1/organizations"
    };
  }

  // Updates an organization.
  rpc UpdateOrganization(UpdateOrganizationRequest) returns (UpdateOrganizationResponse) {
    option (google.api.http) = {
      patch: "/v1/organizations/{id}",
      body: "organization"
    };
  }

  // Creates a project.
  rpc CreateProject(CreateProjectRequest) returns (CreateProjectResponse) {
    option (google.api.http) = {
      post: "/v1/projects",
      body: "project"
    };
  }

  // Gets a project.
  rpc GetProject(GetProjectRequest) returns (GetProjectResponse) {
    option (google.api.http) = {
      get: "/v1/projects/{id}"
    };
  }

  // Gets a list of projects.
  rpc ListProjects(ListProjectsRequest) returns (ListProjectsResponse) {
    option (google.api.http) = {
      get: "/v1/projects"
    };
  }

  // Updates a project.
  rpc UpdateProject(UpdateProjectRequest) returns (UpdateProjectResponse) {
    option (google.api.http) = {
      patch: "/v1/projects/{id}",
      body: "project"
    };
  }

  // Creates a user.
  rpc CreateUser(CreateUserRequest) returns (CreateUserResponse) {
    option (google.api.http) = {
      post: "/v1/users",
      body: "user"
    };
  }

  // Gets a user.
  rpc GetUser(GetUserRequest) returns (GetUserResponse) {
    option (google.api.http) = {
      get: "/v1/users/{id}"
    };
  }

  // Gets a list of users.
  rpc ListUsers(ListUsersRequest) returns (ListUsersResponse) {
    option (google.api.http) = {
      get: "/v1/users"
    };
  }

  // Updates a user.
  rpc UpdateUser(UpdateUserRequest) returns (UpdateUserResponse) {
    option (google.api.http) = {
      patch: "/v1/users/{id}",
      body: "user"
    };
  }
}

message Organization {
  // Unique identifier for this organization.
  string id = 1;
  // The project this organization belongs to.
  string project_id = 2;
  // An optional human-friendly name for this organization.
  string display_name = 3;
  // Override setting for whether login with password is enabled.
  bool override_log_in_with_password_enabled = 4;
  // Override setting for whether login with Google is enabled.
  bool override_log_in_with_google_enabled = 5;
  // Override setting for whether login with Microsoft is enabled.
  bool override_log_in_with_microsoft_enabled = 6;
  // Google hosted domain.
  string google_hosted_domain = 7;
  // The tenant ID for Microsoft auth.
  string microsoft_tenant_id = 8;
}

message Project {
  // Unique identifier for this project.
  string id = 1;
  // The organization this project belongs to.
  string organization_id = 2;
  // Top-level setting for whether login with password is enabled (inherited by organizations by default).
  bool log_in_with_password_enabled = 3;
  // Top-level setting for whether login with Google is enabled (inherited by organizations by default).
  bool log_in_with_google_enabled = 4;
  // Top-level setting for whether login with Microsoft is enabled (inherited by organizations by default).
  bool log_in_with_microsoft_enabled = 5;
  // The oAuth Client ID to be used for Google Auth.
  string google_oauth_client_id = 6;
  // The oAuth Client secret to be used for Google Auth.
  string google_oauth_client_secret = 7;
  // The oAuth Client ID to be used for Microsoft Auth.
  string microsoft_oauth_client_id = 8;
  // The oAuth Client secret to be used for Microsoft Auth.
  string microsoft_oauth_client_secret = 9;
}

message User {
  // Unique identifier for this user.
  string id = 1;
  // The organization this user belongs to.
  string organization_id = 2;
  // The user's email (pending verification).
  string unverified_email = 3;
  // The user's email (after verification).
  string verified_email = 4;
  // The hash of the user's password.
  string password_bcrypt = 5;
  // The user's Google User ID.
  string google_user_id = 6;
  // The user's Microsoft User ID.
  string microsoft_user_id = 7;
}

message CreateOrganizationRequest {
  Organization organization = 1;
}

message CreateOrganizationResponse {
  Organization organization = 1;
}

message GetOrganizationRequest {
  string id = 1;
}

message GetOrganizationResponse {
  Organization organization = 1;
}

message ListOrganizationsRequest {
  string project_id = 1;
  string page_token = 2;
}

message ListOrganizationsResponse {
  repeated Organization organizations = 1;
  string next_page_token = 2;
}

message UpdateOrganizationRequest {
  string id = 1;
  Organization organization = 2;
}

message UpdateOrganizationResponse {
  Organization organization = 1;
}

message CreateProjectRequest {
  Project project = 1;
}

message CreateProjectResponse {
  Project project = 1;
}

message GetProjectRequest {
  string id = 1;
}

message GetProjectResponse {
  Project project = 1;
}

message ListProjectsRequest {
  string page_token = 1;
}

message ListProjectsResponse {
  repeated Project projects = 1;
  string next_page_token = 2;
}

message UpdateProjectRequest {
  string id = 1;
  Project project = 2;
}

message UpdateProjectResponse {
  Project project = 1;
}

message CreateUserRequest {
  User user = 1;
}

message CreateUserResponse {
  User user = 1;
}

message GetUserRequest {
  string id = 1;
}

message GetUserResponse {
  User user = 1;
}

message ListUsersRequest {
  string organization_id = 1;
  string page_token = 2;
}

message ListUsersResponse {
  repeated User users = 1;
  string next_page_token = 2;
}

message UpdateUserRequest {
  string id = 1;
  User user = 2;
}

message UpdateUserResponse {
  User user = 1;
}