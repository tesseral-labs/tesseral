// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0

package queries

import (
	"database/sql/driver"
	"fmt"
	"time"

	"github.com/google/uuid"
)

type AuthMethod string

const (
	AuthMethodEmail     AuthMethod = "email"
	AuthMethodGoogle    AuthMethod = "google"
	AuthMethodMicrosoft AuthMethod = "microsoft"
)

func (e *AuthMethod) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = AuthMethod(s)
	case string:
		*e = AuthMethod(s)
	default:
		return fmt.Errorf("unsupported scan type for AuthMethod: %T", src)
	}
	return nil
}

type NullAuthMethod struct {
	AuthMethod AuthMethod
	Valid      bool // Valid is true if AuthMethod is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullAuthMethod) Scan(value interface{}) error {
	if value == nil {
		ns.AuthMethod, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.AuthMethod.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullAuthMethod) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.AuthMethod), nil
}

type EmailVerificationChallenge struct {
	ID                    uuid.UUID
	ProjectID             uuid.UUID
	ChallengeSha256       []byte
	CompleteTime          *time.Time
	CreateTime            *time.Time
	ExpireTime            *time.Time
	IntermediateSessionID uuid.UUID
	Revoked               bool
}

type IntermediateSession struct {
	ID                        uuid.UUID
	ProjectID                 uuid.UUID
	CreateTime                *time.Time
	ExpireTime                *time.Time
	TokenSha256               []byte
	Revoked                   bool
	Email                     *string
	GoogleOauthStateSha256    []byte
	MicrosoftOauthStateSha256 []byte
	GoogleHostedDomain        *string
	GoogleUserID              *string
	MicrosoftTenantID         *string
	MicrosoftUserID           *string
}

type IntermediateSessionSigningKey struct {
	ID                   uuid.UUID
	ProjectID            uuid.UUID
	PublicKey            []byte
	PrivateKeyCipherText []byte
	CreateTime           *time.Time
	ExpireTime           *time.Time
}

type Organization struct {
	ID                                uuid.UUID
	ProjectID                         uuid.UUID
	DisplayName                       string
	OverrideLogInWithPasswordEnabled  *bool
	OverrideLogInWithGoogleEnabled    *bool
	OverrideLogInWithMicrosoftEnabled *bool
	GoogleHostedDomain                *string
	MicrosoftTenantID                 *string
}

type OrganizationDomain struct {
	ID             uuid.UUID
	OrganizationID uuid.UUID
	Domain         string
}

type Project struct {
	ID                                   uuid.UUID
	OrganizationID                       *uuid.UUID
	LogInWithPasswordEnabled             bool
	LogInWithGoogleEnabled               bool
	LogInWithMicrosoftEnabled            bool
	GoogleOauthClientID                  *string
	MicrosoftOauthClientID               *string
	GoogleOauthClientSecretCiphertext    []byte
	MicrosoftOauthClientSecretCiphertext []byte
}

type ProjectApiKey struct {
	ID                uuid.UUID
	ProjectID         uuid.UUID
	CreateTime        *time.Time
	Revoked           bool
	SecretTokenSha256 []byte
}

type SamlConnection struct {
	ID                 uuid.UUID
	OrganizationID     uuid.UUID
	CreateTime         *time.Time
	IsPrimary          bool
	IdpRedirectUrl     *string
	IdpX509Certificate []byte
	IdpEntityID        *string
}

type ScimApiKey struct {
	ID             uuid.UUID
	OrganizationID uuid.UUID
	CreateTime     *time.Time
	RevokeTime     *time.Time
	TokenSha256    []byte
}

type Session struct {
	ID                 uuid.UUID
	UserID             uuid.UUID
	CreateTime         *time.Time
	ExpireTime         *time.Time
	Revoked            bool
	RefreshTokenSha256 []byte
}

type SessionSigningKey struct {
	ID                   uuid.UUID
	ProjectID            uuid.UUID
	PublicKey            []byte
	PrivateKeyCipherText []byte
	CreateTime           *time.Time
	ExpireTime           *time.Time
}

type User struct {
	ID              uuid.UUID
	OrganizationID  uuid.UUID
	PasswordBcrypt  *string
	GoogleUserID    *string
	MicrosoftUserID *string
	Email           string
	CreateTime      *time.Time
	UpdateTime      *time.Time
	DeactivateTime  *time.Time
}

type VerifiedEmail struct {
	ID                 uuid.UUID
	ProjectID          uuid.UUID
	CreateTime         *time.Time
	Email              string
	GoogleUserID       *string
	MicrosoftUserID    *string
	GoogleHostedDomain *string
	MicrosoftTenantID  *string
}
