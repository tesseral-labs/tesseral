// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: queries-configapi.sql

package queries

import (
	"context"

	"github.com/google/uuid"
)

const getPublishableKeyConfiguration = `-- name: GetPublishableKeyConfiguration :one
SELECT
    projects.id AS project_id,
    projects.vault_domain,
    publishable_keys.dev_mode
FROM
    publishable_keys
    JOIN projects ON publishable_keys.project_id = projects.id
WHERE
    publishable_keys.id = $1
`

type GetPublishableKeyConfigurationRow struct {
	ProjectID   uuid.UUID
	VaultDomain string
	DevMode     bool
}

func (q *Queries) GetPublishableKeyConfiguration(ctx context.Context, id uuid.UUID) (GetPublishableKeyConfigurationRow, error) {
	row := q.db.QueryRow(ctx, getPublishableKeyConfiguration, id)
	var i GetPublishableKeyConfigurationRow
	err := row.Scan(&i.ProjectID, &i.VaultDomain, &i.DevMode)
	return i, err
}

const getPublishableKeySessionSigningPublicKeys = `-- name: GetPublishableKeySessionSigningPublicKeys :many
SELECT
    session_signing_keys.id,
    session_signing_keys.public_key
FROM
    publishable_keys
    JOIN projects ON publishable_keys.project_id = projects.id
    JOIN session_signing_keys ON projects.id = session_signing_keys.project_id
WHERE
    publishable_keys.id = $1
`

type GetPublishableKeySessionSigningPublicKeysRow struct {
	ID        uuid.UUID
	PublicKey []byte
}

func (q *Queries) GetPublishableKeySessionSigningPublicKeys(ctx context.Context, id uuid.UUID) ([]GetPublishableKeySessionSigningPublicKeysRow, error) {
	rows, err := q.db.Query(ctx, getPublishableKeySessionSigningPublicKeys, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetPublishableKeySessionSigningPublicKeysRow
	for rows.Next() {
		var i GetPublishableKeySessionSigningPublicKeysRow
		if err := rows.Scan(&i.ID, &i.PublicKey); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPublishableKeyTrustedDomains = `-- name: GetPublishableKeyTrustedDomains :many
SELECT
    project_trusted_domains.domain
FROM
    publishable_keys
    JOIN projects ON publishable_keys.project_id = projects.id
    JOIN project_trusted_domains ON projects.id = project_trusted_domains.project_id
WHERE
    publishable_keys.id = $1
`

func (q *Queries) GetPublishableKeyTrustedDomains(ctx context.Context, id uuid.UUID) ([]string, error) {
	rows, err := q.db.Query(ctx, getPublishableKeyTrustedDomains, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var domain string
		if err := rows.Scan(&domain); err != nil {
			return nil, err
		}
		items = append(items, domain)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
