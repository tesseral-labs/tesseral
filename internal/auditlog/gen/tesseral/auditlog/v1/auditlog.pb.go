// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        (unknown)
// source: tesseral/auditlog/v1/auditlog.proto

package auditlogv1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type AssignAPIKeyRole struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	ApiKeyRoleAssignment *APIKeyRoleAssignment  `protobuf:"bytes,1,opt,name=api_key_role_assignment,json=apiKeyRoleAssignment,proto3" json:"api_key_role_assignment,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *AssignAPIKeyRole) Reset() {
	*x = AssignAPIKeyRole{}
	mi := &file_tesseral_auditlog_v1_auditlog_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AssignAPIKeyRole) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssignAPIKeyRole) ProtoMessage() {}

func (x *AssignAPIKeyRole) ProtoReflect() protoreflect.Message {
	mi := &file_tesseral_auditlog_v1_auditlog_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssignAPIKeyRole.ProtoReflect.Descriptor instead.
func (*AssignAPIKeyRole) Descriptor() ([]byte, []int) {
	return file_tesseral_auditlog_v1_auditlog_proto_rawDescGZIP(), []int{0}
}

func (x *AssignAPIKeyRole) GetApiKeyRoleAssignment() *APIKeyRoleAssignment {
	if x != nil {
		return x.ApiKeyRoleAssignment
	}
	return nil
}

type UnassignAPIKeyRole struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	ApiKeyRoleAssignment *APIKeyRoleAssignment  `protobuf:"bytes,1,opt,name=api_key_role_assignment,json=apiKeyRoleAssignment,proto3" json:"api_key_role_assignment,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *UnassignAPIKeyRole) Reset() {
	*x = UnassignAPIKeyRole{}
	mi := &file_tesseral_auditlog_v1_auditlog_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UnassignAPIKeyRole) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnassignAPIKeyRole) ProtoMessage() {}

func (x *UnassignAPIKeyRole) ProtoReflect() protoreflect.Message {
	mi := &file_tesseral_auditlog_v1_auditlog_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnassignAPIKeyRole.ProtoReflect.Descriptor instead.
func (*UnassignAPIKeyRole) Descriptor() ([]byte, []int) {
	return file_tesseral_auditlog_v1_auditlog_proto_rawDescGZIP(), []int{1}
}

func (x *UnassignAPIKeyRole) GetApiKeyRoleAssignment() *APIKeyRoleAssignment {
	if x != nil {
		return x.ApiKeyRoleAssignment
	}
	return nil
}

type CreateAPIKey struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ApiKey        *APIKey                `protobuf:"bytes,1,opt,name=api_key,json=apiKey,proto3" json:"api_key,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateAPIKey) Reset() {
	*x = CreateAPIKey{}
	mi := &file_tesseral_auditlog_v1_auditlog_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateAPIKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateAPIKey) ProtoMessage() {}

func (x *CreateAPIKey) ProtoReflect() protoreflect.Message {
	mi := &file_tesseral_auditlog_v1_auditlog_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateAPIKey.ProtoReflect.Descriptor instead.
func (*CreateAPIKey) Descriptor() ([]byte, []int) {
	return file_tesseral_auditlog_v1_auditlog_proto_rawDescGZIP(), []int{2}
}

func (x *CreateAPIKey) GetApiKey() *APIKey {
	if x != nil {
		return x.ApiKey
	}
	return nil
}

type UpdateAPIKey struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	ApiKey         *APIKey                `protobuf:"bytes,1,opt,name=api_key,json=apiKey,proto3" json:"api_key,omitempty"`
	PreviousApiKey *APIKey                `protobuf:"bytes,2,opt,name=previous_api_key,json=previousApiKey,proto3" json:"previous_api_key,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *UpdateAPIKey) Reset() {
	*x = UpdateAPIKey{}
	mi := &file_tesseral_auditlog_v1_auditlog_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateAPIKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateAPIKey) ProtoMessage() {}

func (x *UpdateAPIKey) ProtoReflect() protoreflect.Message {
	mi := &file_tesseral_auditlog_v1_auditlog_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateAPIKey.ProtoReflect.Descriptor instead.
func (*UpdateAPIKey) Descriptor() ([]byte, []int) {
	return file_tesseral_auditlog_v1_auditlog_proto_rawDescGZIP(), []int{3}
}

func (x *UpdateAPIKey) GetApiKey() *APIKey {
	if x != nil {
		return x.ApiKey
	}
	return nil
}

func (x *UpdateAPIKey) GetPreviousApiKey() *APIKey {
	if x != nil {
		return x.PreviousApiKey
	}
	return nil
}

type RevokeAPIKey struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	ApiKey         *APIKey                `protobuf:"bytes,1,opt,name=api_key,json=apiKey,proto3" json:"api_key,omitempty"`
	PreviousApiKey *APIKey                `protobuf:"bytes,2,opt,name=previous_api_key,json=previousApiKey,proto3" json:"previous_api_key,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *RevokeAPIKey) Reset() {
	*x = RevokeAPIKey{}
	mi := &file_tesseral_auditlog_v1_auditlog_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RevokeAPIKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RevokeAPIKey) ProtoMessage() {}

func (x *RevokeAPIKey) ProtoReflect() protoreflect.Message {
	mi := &file_tesseral_auditlog_v1_auditlog_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RevokeAPIKey.ProtoReflect.Descriptor instead.
func (*RevokeAPIKey) Descriptor() ([]byte, []int) {
	return file_tesseral_auditlog_v1_auditlog_proto_rawDescGZIP(), []int{4}
}

func (x *RevokeAPIKey) GetApiKey() *APIKey {
	if x != nil {
		return x.ApiKey
	}
	return nil
}

func (x *RevokeAPIKey) GetPreviousApiKey() *APIKey {
	if x != nil {
		return x.PreviousApiKey
	}
	return nil
}

type DeleteAPIKey struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ApiKey        *APIKey                `protobuf:"bytes,1,opt,name=api_key,json=apiKey,proto3" json:"api_key,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteAPIKey) Reset() {
	*x = DeleteAPIKey{}
	mi := &file_tesseral_auditlog_v1_auditlog_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteAPIKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteAPIKey) ProtoMessage() {}

func (x *DeleteAPIKey) ProtoReflect() protoreflect.Message {
	mi := &file_tesseral_auditlog_v1_auditlog_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteAPIKey.ProtoReflect.Descriptor instead.
func (*DeleteAPIKey) Descriptor() ([]byte, []int) {
	return file_tesseral_auditlog_v1_auditlog_proto_rawDescGZIP(), []int{5}
}

func (x *DeleteAPIKey) GetApiKey() *APIKey {
	if x != nil {
		return x.ApiKey
	}
	return nil
}

type UpdateOrganizationDomains struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	Domains         []string               `protobuf:"bytes,1,rep,name=domains,proto3" json:"domains,omitempty"`
	PreviousDomains []string               `protobuf:"bytes,2,rep,name=previous_domains,json=previousDomains,proto3" json:"previous_domains,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *UpdateOrganizationDomains) Reset() {
	*x = UpdateOrganizationDomains{}
	mi := &file_tesseral_auditlog_v1_auditlog_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateOrganizationDomains) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateOrganizationDomains) ProtoMessage() {}

func (x *UpdateOrganizationDomains) ProtoReflect() protoreflect.Message {
	mi := &file_tesseral_auditlog_v1_auditlog_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateOrganizationDomains.ProtoReflect.Descriptor instead.
func (*UpdateOrganizationDomains) Descriptor() ([]byte, []int) {
	return file_tesseral_auditlog_v1_auditlog_proto_rawDescGZIP(), []int{6}
}

func (x *UpdateOrganizationDomains) GetDomains() []string {
	if x != nil {
		return x.Domains
	}
	return nil
}

func (x *UpdateOrganizationDomains) GetPreviousDomains() []string {
	if x != nil {
		return x.PreviousDomains
	}
	return nil
}

type UpdateOrganizationGoogleHostedDomains struct {
	state                       protoimpl.MessageState `protogen:"open.v1"`
	GoogleHostedDomains         []string               `protobuf:"bytes,1,rep,name=google_hosted_domains,json=googleHostedDomains,proto3" json:"google_hosted_domains,omitempty"`
	PreviousGoogleHostedDomains []string               `protobuf:"bytes,2,rep,name=previous_google_hosted_domains,json=previousGoogleHostedDomains,proto3" json:"previous_google_hosted_domains,omitempty"`
	unknownFields               protoimpl.UnknownFields
	sizeCache                   protoimpl.SizeCache
}

func (x *UpdateOrganizationGoogleHostedDomains) Reset() {
	*x = UpdateOrganizationGoogleHostedDomains{}
	mi := &file_tesseral_auditlog_v1_auditlog_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateOrganizationGoogleHostedDomains) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateOrganizationGoogleHostedDomains) ProtoMessage() {}

func (x *UpdateOrganizationGoogleHostedDomains) ProtoReflect() protoreflect.Message {
	mi := &file_tesseral_auditlog_v1_auditlog_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateOrganizationGoogleHostedDomains.ProtoReflect.Descriptor instead.
func (*UpdateOrganizationGoogleHostedDomains) Descriptor() ([]byte, []int) {
	return file_tesseral_auditlog_v1_auditlog_proto_rawDescGZIP(), []int{7}
}

func (x *UpdateOrganizationGoogleHostedDomains) GetGoogleHostedDomains() []string {
	if x != nil {
		return x.GoogleHostedDomains
	}
	return nil
}

func (x *UpdateOrganizationGoogleHostedDomains) GetPreviousGoogleHostedDomains() []string {
	if x != nil {
		return x.PreviousGoogleHostedDomains
	}
	return nil
}

type UpdateOrganizationMicrosoftTenantIDs struct {
	state                      protoimpl.MessageState `protogen:"open.v1"`
	MicrosoftTenantIds         []string               `protobuf:"bytes,1,rep,name=microsoft_tenant_ids,json=microsoftTenantIds,proto3" json:"microsoft_tenant_ids,omitempty"`
	PreviousMicrosoftTenantIds []string               `protobuf:"bytes,2,rep,name=previous_microsoft_tenant_ids,json=previousMicrosoftTenantIds,proto3" json:"previous_microsoft_tenant_ids,omitempty"`
	unknownFields              protoimpl.UnknownFields
	sizeCache                  protoimpl.SizeCache
}

func (x *UpdateOrganizationMicrosoftTenantIDs) Reset() {
	*x = UpdateOrganizationMicrosoftTenantIDs{}
	mi := &file_tesseral_auditlog_v1_auditlog_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateOrganizationMicrosoftTenantIDs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateOrganizationMicrosoftTenantIDs) ProtoMessage() {}

func (x *UpdateOrganizationMicrosoftTenantIDs) ProtoReflect() protoreflect.Message {
	mi := &file_tesseral_auditlog_v1_auditlog_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateOrganizationMicrosoftTenantIDs.ProtoReflect.Descriptor instead.
func (*UpdateOrganizationMicrosoftTenantIDs) Descriptor() ([]byte, []int) {
	return file_tesseral_auditlog_v1_auditlog_proto_rawDescGZIP(), []int{8}
}

func (x *UpdateOrganizationMicrosoftTenantIDs) GetMicrosoftTenantIds() []string {
	if x != nil {
		return x.MicrosoftTenantIds
	}
	return nil
}

func (x *UpdateOrganizationMicrosoftTenantIDs) GetPreviousMicrosoftTenantIds() []string {
	if x != nil {
		return x.PreviousMicrosoftTenantIds
	}
	return nil
}

type CreateOrganization struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Organization  *Organization          `protobuf:"bytes,1,opt,name=organization,proto3" json:"organization,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateOrganization) Reset() {
	*x = CreateOrganization{}
	mi := &file_tesseral_auditlog_v1_auditlog_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateOrganization) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateOrganization) ProtoMessage() {}

func (x *CreateOrganization) ProtoReflect() protoreflect.Message {
	mi := &file_tesseral_auditlog_v1_auditlog_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateOrganization.ProtoReflect.Descriptor instead.
func (*CreateOrganization) Descriptor() ([]byte, []int) {
	return file_tesseral_auditlog_v1_auditlog_proto_rawDescGZIP(), []int{9}
}

func (x *CreateOrganization) GetOrganization() *Organization {
	if x != nil {
		return x.Organization
	}
	return nil
}

type UpdateOrganization struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	Organization         *Organization          `protobuf:"bytes,1,opt,name=organization,proto3" json:"organization,omitempty"`
	PreviousOrganization *Organization          `protobuf:"bytes,2,opt,name=previous_organization,json=previousOrganization,proto3" json:"previous_organization,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *UpdateOrganization) Reset() {
	*x = UpdateOrganization{}
	mi := &file_tesseral_auditlog_v1_auditlog_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateOrganization) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateOrganization) ProtoMessage() {}

func (x *UpdateOrganization) ProtoReflect() protoreflect.Message {
	mi := &file_tesseral_auditlog_v1_auditlog_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateOrganization.ProtoReflect.Descriptor instead.
func (*UpdateOrganization) Descriptor() ([]byte, []int) {
	return file_tesseral_auditlog_v1_auditlog_proto_rawDescGZIP(), []int{10}
}

func (x *UpdateOrganization) GetOrganization() *Organization {
	if x != nil {
		return x.Organization
	}
	return nil
}

func (x *UpdateOrganization) GetPreviousOrganization() *Organization {
	if x != nil {
		return x.PreviousOrganization
	}
	return nil
}

type DeleteOrganization struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Organization  *Organization          `protobuf:"bytes,1,opt,name=organization,proto3" json:"organization,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteOrganization) Reset() {
	*x = DeleteOrganization{}
	mi := &file_tesseral_auditlog_v1_auditlog_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteOrganization) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteOrganization) ProtoMessage() {}

func (x *DeleteOrganization) ProtoReflect() protoreflect.Message {
	mi := &file_tesseral_auditlog_v1_auditlog_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteOrganization.ProtoReflect.Descriptor instead.
func (*DeleteOrganization) Descriptor() ([]byte, []int) {
	return file_tesseral_auditlog_v1_auditlog_proto_rawDescGZIP(), []int{11}
}

func (x *DeleteOrganization) GetOrganization() *Organization {
	if x != nil {
		return x.Organization
	}
	return nil
}

type CreatePasskey struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Passkey       *Passkey               `protobuf:"bytes,1,opt,name=passkey,proto3" json:"passkey,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreatePasskey) Reset() {
	*x = CreatePasskey{}
	mi := &file_tesseral_auditlog_v1_auditlog_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreatePasskey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePasskey) ProtoMessage() {}

func (x *CreatePasskey) ProtoReflect() protoreflect.Message {
	mi := &file_tesseral_auditlog_v1_auditlog_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePasskey.ProtoReflect.Descriptor instead.
func (*CreatePasskey) Descriptor() ([]byte, []int) {
	return file_tesseral_auditlog_v1_auditlog_proto_rawDescGZIP(), []int{12}
}

func (x *CreatePasskey) GetPasskey() *Passkey {
	if x != nil {
		return x.Passkey
	}
	return nil
}

type UpdatePasskey struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	Passkey         *Passkey               `protobuf:"bytes,1,opt,name=passkey,proto3" json:"passkey,omitempty"`
	PreviousPasskey *Passkey               `protobuf:"bytes,2,opt,name=previous_passkey,json=previousPasskey,proto3" json:"previous_passkey,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *UpdatePasskey) Reset() {
	*x = UpdatePasskey{}
	mi := &file_tesseral_auditlog_v1_auditlog_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdatePasskey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdatePasskey) ProtoMessage() {}

func (x *UpdatePasskey) ProtoReflect() protoreflect.Message {
	mi := &file_tesseral_auditlog_v1_auditlog_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdatePasskey.ProtoReflect.Descriptor instead.
func (*UpdatePasskey) Descriptor() ([]byte, []int) {
	return file_tesseral_auditlog_v1_auditlog_proto_rawDescGZIP(), []int{13}
}

func (x *UpdatePasskey) GetPasskey() *Passkey {
	if x != nil {
		return x.Passkey
	}
	return nil
}

func (x *UpdatePasskey) GetPreviousPasskey() *Passkey {
	if x != nil {
		return x.PreviousPasskey
	}
	return nil
}

type DeletePasskey struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Passkey       *Passkey               `protobuf:"bytes,1,opt,name=passkey,proto3" json:"passkey,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeletePasskey) Reset() {
	*x = DeletePasskey{}
	mi := &file_tesseral_auditlog_v1_auditlog_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeletePasskey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeletePasskey) ProtoMessage() {}

func (x *DeletePasskey) ProtoReflect() protoreflect.Message {
	mi := &file_tesseral_auditlog_v1_auditlog_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeletePasskey.ProtoReflect.Descriptor instead.
func (*DeletePasskey) Descriptor() ([]byte, []int) {
	return file_tesseral_auditlog_v1_auditlog_proto_rawDescGZIP(), []int{14}
}

func (x *DeletePasskey) GetPasskey() *Passkey {
	if x != nil {
		return x.Passkey
	}
	return nil
}

type CreateRole struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Role          *Role                  `protobuf:"bytes,1,opt,name=role,proto3" json:"role,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateRole) Reset() {
	*x = CreateRole{}
	mi := &file_tesseral_auditlog_v1_auditlog_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateRole) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateRole) ProtoMessage() {}

func (x *CreateRole) ProtoReflect() protoreflect.Message {
	mi := &file_tesseral_auditlog_v1_auditlog_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateRole.ProtoReflect.Descriptor instead.
func (*CreateRole) Descriptor() ([]byte, []int) {
	return file_tesseral_auditlog_v1_auditlog_proto_rawDescGZIP(), []int{15}
}

func (x *CreateRole) GetRole() *Role {
	if x != nil {
		return x.Role
	}
	return nil
}

type UpdateRole struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Role          *Role                  `protobuf:"bytes,1,opt,name=role,proto3" json:"role,omitempty"`
	PreviousRole  *Role                  `protobuf:"bytes,2,opt,name=previous_role,json=previousRole,proto3" json:"previous_role,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateRole) Reset() {
	*x = UpdateRole{}
	mi := &file_tesseral_auditlog_v1_auditlog_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateRole) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateRole) ProtoMessage() {}

func (x *UpdateRole) ProtoReflect() protoreflect.Message {
	mi := &file_tesseral_auditlog_v1_auditlog_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateRole.ProtoReflect.Descriptor instead.
func (*UpdateRole) Descriptor() ([]byte, []int) {
	return file_tesseral_auditlog_v1_auditlog_proto_rawDescGZIP(), []int{16}
}

func (x *UpdateRole) GetRole() *Role {
	if x != nil {
		return x.Role
	}
	return nil
}

func (x *UpdateRole) GetPreviousRole() *Role {
	if x != nil {
		return x.PreviousRole
	}
	return nil
}

type DeleteRole struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Role          *Role                  `protobuf:"bytes,1,opt,name=role,proto3" json:"role,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteRole) Reset() {
	*x = DeleteRole{}
	mi := &file_tesseral_auditlog_v1_auditlog_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteRole) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteRole) ProtoMessage() {}

func (x *DeleteRole) ProtoReflect() protoreflect.Message {
	mi := &file_tesseral_auditlog_v1_auditlog_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteRole.ProtoReflect.Descriptor instead.
func (*DeleteRole) Descriptor() ([]byte, []int) {
	return file_tesseral_auditlog_v1_auditlog_proto_rawDescGZIP(), []int{17}
}

func (x *DeleteRole) GetRole() *Role {
	if x != nil {
		return x.Role
	}
	return nil
}

type CreateSAMLConnection struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	SamlConnection *SAMLConnection        `protobuf:"bytes,1,opt,name=saml_connection,json=samlConnection,proto3" json:"saml_connection,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *CreateSAMLConnection) Reset() {
	*x = CreateSAMLConnection{}
	mi := &file_tesseral_auditlog_v1_auditlog_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateSAMLConnection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSAMLConnection) ProtoMessage() {}

func (x *CreateSAMLConnection) ProtoReflect() protoreflect.Message {
	mi := &file_tesseral_auditlog_v1_auditlog_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSAMLConnection.ProtoReflect.Descriptor instead.
func (*CreateSAMLConnection) Descriptor() ([]byte, []int) {
	return file_tesseral_auditlog_v1_auditlog_proto_rawDescGZIP(), []int{18}
}

func (x *CreateSAMLConnection) GetSamlConnection() *SAMLConnection {
	if x != nil {
		return x.SamlConnection
	}
	return nil
}

type UpdateSAMLConnection struct {
	state                  protoimpl.MessageState `protogen:"open.v1"`
	SamlConnection         *SAMLConnection        `protobuf:"bytes,1,opt,name=saml_connection,json=samlConnection,proto3" json:"saml_connection,omitempty"`
	PreviousSamlConnection *SAMLConnection        `protobuf:"bytes,2,opt,name=previous_saml_connection,json=previousSamlConnection,proto3" json:"previous_saml_connection,omitempty"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *UpdateSAMLConnection) Reset() {
	*x = UpdateSAMLConnection{}
	mi := &file_tesseral_auditlog_v1_auditlog_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateSAMLConnection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSAMLConnection) ProtoMessage() {}

func (x *UpdateSAMLConnection) ProtoReflect() protoreflect.Message {
	mi := &file_tesseral_auditlog_v1_auditlog_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSAMLConnection.ProtoReflect.Descriptor instead.
func (*UpdateSAMLConnection) Descriptor() ([]byte, []int) {
	return file_tesseral_auditlog_v1_auditlog_proto_rawDescGZIP(), []int{19}
}

func (x *UpdateSAMLConnection) GetSamlConnection() *SAMLConnection {
	if x != nil {
		return x.SamlConnection
	}
	return nil
}

func (x *UpdateSAMLConnection) GetPreviousSamlConnection() *SAMLConnection {
	if x != nil {
		return x.PreviousSamlConnection
	}
	return nil
}

type DeleteSAMLConnection struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	SamlConnection *SAMLConnection        `protobuf:"bytes,1,opt,name=saml_connection,json=samlConnection,proto3" json:"saml_connection,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *DeleteSAMLConnection) Reset() {
	*x = DeleteSAMLConnection{}
	mi := &file_tesseral_auditlog_v1_auditlog_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteSAMLConnection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteSAMLConnection) ProtoMessage() {}

func (x *DeleteSAMLConnection) ProtoReflect() protoreflect.Message {
	mi := &file_tesseral_auditlog_v1_auditlog_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteSAMLConnection.ProtoReflect.Descriptor instead.
func (*DeleteSAMLConnection) Descriptor() ([]byte, []int) {
	return file_tesseral_auditlog_v1_auditlog_proto_rawDescGZIP(), []int{20}
}

func (x *DeleteSAMLConnection) GetSamlConnection() *SAMLConnection {
	if x != nil {
		return x.SamlConnection
	}
	return nil
}

type InitiateSAMLConnection struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	SamlConnection *SAMLConnection        `protobuf:"bytes,1,opt,name=saml_connection,json=samlConnection,proto3" json:"saml_connection,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *InitiateSAMLConnection) Reset() {
	*x = InitiateSAMLConnection{}
	mi := &file_tesseral_auditlog_v1_auditlog_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InitiateSAMLConnection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InitiateSAMLConnection) ProtoMessage() {}

func (x *InitiateSAMLConnection) ProtoReflect() protoreflect.Message {
	mi := &file_tesseral_auditlog_v1_auditlog_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InitiateSAMLConnection.ProtoReflect.Descriptor instead.
func (*InitiateSAMLConnection) Descriptor() ([]byte, []int) {
	return file_tesseral_auditlog_v1_auditlog_proto_rawDescGZIP(), []int{21}
}

func (x *InitiateSAMLConnection) GetSamlConnection() *SAMLConnection {
	if x != nil {
		return x.SamlConnection
	}
	return nil
}

type CreateSCIMAPIKey struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ScimApiKey    *SCIMAPIKey            `protobuf:"bytes,1,opt,name=scim_api_key,json=scimApiKey,proto3" json:"scim_api_key,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateSCIMAPIKey) Reset() {
	*x = CreateSCIMAPIKey{}
	mi := &file_tesseral_auditlog_v1_auditlog_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateSCIMAPIKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSCIMAPIKey) ProtoMessage() {}

func (x *CreateSCIMAPIKey) ProtoReflect() protoreflect.Message {
	mi := &file_tesseral_auditlog_v1_auditlog_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSCIMAPIKey.ProtoReflect.Descriptor instead.
func (*CreateSCIMAPIKey) Descriptor() ([]byte, []int) {
	return file_tesseral_auditlog_v1_auditlog_proto_rawDescGZIP(), []int{22}
}

func (x *CreateSCIMAPIKey) GetScimApiKey() *SCIMAPIKey {
	if x != nil {
		return x.ScimApiKey
	}
	return nil
}

type UpdateSCIMAPIKey struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	ScimApiKey         *SCIMAPIKey            `protobuf:"bytes,1,opt,name=scim_api_key,json=scimApiKey,proto3" json:"scim_api_key,omitempty"`
	PreviousScimApiKey *SCIMAPIKey            `protobuf:"bytes,2,opt,name=previous_scim_api_key,json=previousScimApiKey,proto3" json:"previous_scim_api_key,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *UpdateSCIMAPIKey) Reset() {
	*x = UpdateSCIMAPIKey{}
	mi := &file_tesseral_auditlog_v1_auditlog_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateSCIMAPIKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSCIMAPIKey) ProtoMessage() {}

func (x *UpdateSCIMAPIKey) ProtoReflect() protoreflect.Message {
	mi := &file_tesseral_auditlog_v1_auditlog_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSCIMAPIKey.ProtoReflect.Descriptor instead.
func (*UpdateSCIMAPIKey) Descriptor() ([]byte, []int) {
	return file_tesseral_auditlog_v1_auditlog_proto_rawDescGZIP(), []int{23}
}

func (x *UpdateSCIMAPIKey) GetScimApiKey() *SCIMAPIKey {
	if x != nil {
		return x.ScimApiKey
	}
	return nil
}

func (x *UpdateSCIMAPIKey) GetPreviousScimApiKey() *SCIMAPIKey {
	if x != nil {
		return x.PreviousScimApiKey
	}
	return nil
}

type RevokeSCIMAPIKey struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	ScimApiKey         *SCIMAPIKey            `protobuf:"bytes,1,opt,name=scim_api_key,json=scimApiKey,proto3" json:"scim_api_key,omitempty"`
	PreviousScimApiKey *SCIMAPIKey            `protobuf:"bytes,2,opt,name=previous_scim_api_key,json=previousScimApiKey,proto3" json:"previous_scim_api_key,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *RevokeSCIMAPIKey) Reset() {
	*x = RevokeSCIMAPIKey{}
	mi := &file_tesseral_auditlog_v1_auditlog_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RevokeSCIMAPIKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RevokeSCIMAPIKey) ProtoMessage() {}

func (x *RevokeSCIMAPIKey) ProtoReflect() protoreflect.Message {
	mi := &file_tesseral_auditlog_v1_auditlog_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RevokeSCIMAPIKey.ProtoReflect.Descriptor instead.
func (*RevokeSCIMAPIKey) Descriptor() ([]byte, []int) {
	return file_tesseral_auditlog_v1_auditlog_proto_rawDescGZIP(), []int{24}
}

func (x *RevokeSCIMAPIKey) GetScimApiKey() *SCIMAPIKey {
	if x != nil {
		return x.ScimApiKey
	}
	return nil
}

func (x *RevokeSCIMAPIKey) GetPreviousScimApiKey() *SCIMAPIKey {
	if x != nil {
		return x.PreviousScimApiKey
	}
	return nil
}

type DeleteSCIMAPIKey struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ScimApiKey    *SCIMAPIKey            `protobuf:"bytes,1,opt,name=scim_api_key,json=scimApiKey,proto3" json:"scim_api_key,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteSCIMAPIKey) Reset() {
	*x = DeleteSCIMAPIKey{}
	mi := &file_tesseral_auditlog_v1_auditlog_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteSCIMAPIKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteSCIMAPIKey) ProtoMessage() {}

func (x *DeleteSCIMAPIKey) ProtoReflect() protoreflect.Message {
	mi := &file_tesseral_auditlog_v1_auditlog_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteSCIMAPIKey.ProtoReflect.Descriptor instead.
func (*DeleteSCIMAPIKey) Descriptor() ([]byte, []int) {
	return file_tesseral_auditlog_v1_auditlog_proto_rawDescGZIP(), []int{25}
}

func (x *DeleteSCIMAPIKey) GetScimApiKey() *SCIMAPIKey {
	if x != nil {
		return x.ScimApiKey
	}
	return nil
}

type CreateUser struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	User          *User                  `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateUser) Reset() {
	*x = CreateUser{}
	mi := &file_tesseral_auditlog_v1_auditlog_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateUser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateUser) ProtoMessage() {}

func (x *CreateUser) ProtoReflect() protoreflect.Message {
	mi := &file_tesseral_auditlog_v1_auditlog_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateUser.ProtoReflect.Descriptor instead.
func (*CreateUser) Descriptor() ([]byte, []int) {
	return file_tesseral_auditlog_v1_auditlog_proto_rawDescGZIP(), []int{26}
}

func (x *CreateUser) GetUser() *User {
	if x != nil {
		return x.User
	}
	return nil
}

type UpdateUser struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	User          *User                  `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
	PreviousUser  *User                  `protobuf:"bytes,2,opt,name=previous_user,json=previousUser,proto3" json:"previous_user,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateUser) Reset() {
	*x = UpdateUser{}
	mi := &file_tesseral_auditlog_v1_auditlog_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateUser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateUser) ProtoMessage() {}

func (x *UpdateUser) ProtoReflect() protoreflect.Message {
	mi := &file_tesseral_auditlog_v1_auditlog_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateUser.ProtoReflect.Descriptor instead.
func (*UpdateUser) Descriptor() ([]byte, []int) {
	return file_tesseral_auditlog_v1_auditlog_proto_rawDescGZIP(), []int{27}
}

func (x *UpdateUser) GetUser() *User {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *UpdateUser) GetPreviousUser() *User {
	if x != nil {
		return x.PreviousUser
	}
	return nil
}

type DeleteUser struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	User          *User                  `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteUser) Reset() {
	*x = DeleteUser{}
	mi := &file_tesseral_auditlog_v1_auditlog_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteUser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteUser) ProtoMessage() {}

func (x *DeleteUser) ProtoReflect() protoreflect.Message {
	mi := &file_tesseral_auditlog_v1_auditlog_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteUser.ProtoReflect.Descriptor instead.
func (*DeleteUser) Descriptor() ([]byte, []int) {
	return file_tesseral_auditlog_v1_auditlog_proto_rawDescGZIP(), []int{28}
}

func (x *DeleteUser) GetUser() *User {
	if x != nil {
		return x.User
	}
	return nil
}

type CreateUserInvite struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserInvite    *UserInvite            `protobuf:"bytes,1,opt,name=user_invite,json=userInvite,proto3" json:"user_invite,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateUserInvite) Reset() {
	*x = CreateUserInvite{}
	mi := &file_tesseral_auditlog_v1_auditlog_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateUserInvite) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateUserInvite) ProtoMessage() {}

func (x *CreateUserInvite) ProtoReflect() protoreflect.Message {
	mi := &file_tesseral_auditlog_v1_auditlog_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateUserInvite.ProtoReflect.Descriptor instead.
func (*CreateUserInvite) Descriptor() ([]byte, []int) {
	return file_tesseral_auditlog_v1_auditlog_proto_rawDescGZIP(), []int{29}
}

func (x *CreateUserInvite) GetUserInvite() *UserInvite {
	if x != nil {
		return x.UserInvite
	}
	return nil
}

type DeleteUserInvite struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserInvite    *UserInvite            `protobuf:"bytes,1,opt,name=user_invite,json=userInvite,proto3" json:"user_invite,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteUserInvite) Reset() {
	*x = DeleteUserInvite{}
	mi := &file_tesseral_auditlog_v1_auditlog_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteUserInvite) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteUserInvite) ProtoMessage() {}

func (x *DeleteUserInvite) ProtoReflect() protoreflect.Message {
	mi := &file_tesseral_auditlog_v1_auditlog_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteUserInvite.ProtoReflect.Descriptor instead.
func (*DeleteUserInvite) Descriptor() ([]byte, []int) {
	return file_tesseral_auditlog_v1_auditlog_proto_rawDescGZIP(), []int{30}
}

func (x *DeleteUserInvite) GetUserInvite() *UserInvite {
	if x != nil {
		return x.UserInvite
	}
	return nil
}

type AssignUserRole struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	UserRoleAssignment *UserRoleAssignment    `protobuf:"bytes,1,opt,name=user_role_assignment,json=userRoleAssignment,proto3" json:"user_role_assignment,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *AssignUserRole) Reset() {
	*x = AssignUserRole{}
	mi := &file_tesseral_auditlog_v1_auditlog_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AssignUserRole) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssignUserRole) ProtoMessage() {}

func (x *AssignUserRole) ProtoReflect() protoreflect.Message {
	mi := &file_tesseral_auditlog_v1_auditlog_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssignUserRole.ProtoReflect.Descriptor instead.
func (*AssignUserRole) Descriptor() ([]byte, []int) {
	return file_tesseral_auditlog_v1_auditlog_proto_rawDescGZIP(), []int{31}
}

func (x *AssignUserRole) GetUserRoleAssignment() *UserRoleAssignment {
	if x != nil {
		return x.UserRoleAssignment
	}
	return nil
}

type UnassignUserRole struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	UserRoleAssignment *UserRoleAssignment    `protobuf:"bytes,1,opt,name=user_role_assignment,json=userRoleAssignment,proto3" json:"user_role_assignment,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *UnassignUserRole) Reset() {
	*x = UnassignUserRole{}
	mi := &file_tesseral_auditlog_v1_auditlog_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UnassignUserRole) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnassignUserRole) ProtoMessage() {}

func (x *UnassignUserRole) ProtoReflect() protoreflect.Message {
	mi := &file_tesseral_auditlog_v1_auditlog_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnassignUserRole.ProtoReflect.Descriptor instead.
func (*UnassignUserRole) Descriptor() ([]byte, []int) {
	return file_tesseral_auditlog_v1_auditlog_proto_rawDescGZIP(), []int{32}
}

func (x *UnassignUserRole) GetUserRoleAssignment() *UserRoleAssignment {
	if x != nil {
		return x.UserRoleAssignment
	}
	return nil
}

type CreateSession struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	Session          *Session               `protobuf:"bytes,1,opt,name=session,proto3" json:"session,omitempty"`
	SamlConnectionId *string                `protobuf:"bytes,2,opt,name=saml_connection_id,json=samlConnectionId,proto3,oneof" json:"saml_connection_id,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *CreateSession) Reset() {
	*x = CreateSession{}
	mi := &file_tesseral_auditlog_v1_auditlog_proto_msgTypes[33]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateSession) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSession) ProtoMessage() {}

func (x *CreateSession) ProtoReflect() protoreflect.Message {
	mi := &file_tesseral_auditlog_v1_auditlog_proto_msgTypes[33]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSession.ProtoReflect.Descriptor instead.
func (*CreateSession) Descriptor() ([]byte, []int) {
	return file_tesseral_auditlog_v1_auditlog_proto_rawDescGZIP(), []int{33}
}

func (x *CreateSession) GetSession() *Session {
	if x != nil {
		return x.Session
	}
	return nil
}

func (x *CreateSession) GetSamlConnectionId() string {
	if x != nil && x.SamlConnectionId != nil {
		return *x.SamlConnectionId
	}
	return ""
}

var File_tesseral_auditlog_v1_auditlog_proto protoreflect.FileDescriptor

var file_tesseral_auditlog_v1_auditlog_proto_rawDesc = string([]byte{
	0x0a, 0x23, 0x74, 0x65, 0x73, 0x73, 0x65, 0x72, 0x61, 0x6c, 0x2f, 0x61, 0x75, 0x64, 0x69, 0x74,
	0x6c, 0x6f, 0x67, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x75, 0x64, 0x69, 0x74, 0x6c, 0x6f, 0x67, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x14, 0x74, 0x65, 0x73, 0x73, 0x65, 0x72, 0x61, 0x6c, 0x2e,
	0x61, 0x75, 0x64, 0x69, 0x74, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x1a, 0x21, 0x74, 0x65, 0x73,
	0x73, 0x65, 0x72, 0x61, 0x6c, 0x2f, 0x61, 0x75, 0x64, 0x69, 0x74, 0x6c, 0x6f, 0x67, 0x2f, 0x76,
	0x31, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x75,
	0x0a, 0x10, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x41, 0x50, 0x49, 0x4b, 0x65, 0x79, 0x52, 0x6f,
	0x6c, 0x65, 0x12, 0x61, 0x0a, 0x17, 0x61, 0x70, 0x69, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x72, 0x6f,
	0x6c, 0x65, 0x5f, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x74, 0x65, 0x73, 0x73, 0x65, 0x72, 0x61, 0x6c, 0x2e, 0x61,
	0x75, 0x64, 0x69, 0x74, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x50, 0x49, 0x4b, 0x65,
	0x79, 0x52, 0x6f, 0x6c, 0x65, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x14, 0x61, 0x70, 0x69, 0x4b, 0x65, 0x79, 0x52, 0x6f, 0x6c, 0x65, 0x41, 0x73, 0x73, 0x69, 0x67,
	0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x77, 0x0a, 0x12, 0x55, 0x6e, 0x61, 0x73, 0x73, 0x69, 0x67,
	0x6e, 0x41, 0x50, 0x49, 0x4b, 0x65, 0x79, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x61, 0x0a, 0x17, 0x61,
	0x70, 0x69, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x5f, 0x61, 0x73, 0x73, 0x69,
	0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x74,
	0x65, 0x73, 0x73, 0x65, 0x72, 0x61, 0x6c, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x6c, 0x6f, 0x67,
	0x2e, 0x76, 0x31, 0x2e, 0x41, 0x50, 0x49, 0x4b, 0x65, 0x79, 0x52, 0x6f, 0x6c, 0x65, 0x41, 0x73,
	0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x14, 0x61, 0x70, 0x69, 0x4b, 0x65, 0x79,
	0x52, 0x6f, 0x6c, 0x65, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x45,
	0x0a, 0x0c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x50, 0x49, 0x4b, 0x65, 0x79, 0x12, 0x35,
	0x0a, 0x07, 0x61, 0x70, 0x69, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x74, 0x65, 0x73, 0x73, 0x65, 0x72, 0x61, 0x6c, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74,
	0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x50, 0x49, 0x4b, 0x65, 0x79, 0x52, 0x06, 0x61,
	0x70, 0x69, 0x4b, 0x65, 0x79, 0x22, 0x8d, 0x01, 0x0a, 0x0c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x41, 0x50, 0x49, 0x4b, 0x65, 0x79, 0x12, 0x35, 0x0a, 0x07, 0x61, 0x70, 0x69, 0x5f, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x74, 0x65, 0x73, 0x73, 0x65, 0x72,
	0x61, 0x6c, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x41,
	0x50, 0x49, 0x4b, 0x65, 0x79, 0x52, 0x06, 0x61, 0x70, 0x69, 0x4b, 0x65, 0x79, 0x12, 0x46, 0x0a,
	0x10, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x5f, 0x61, 0x70, 0x69, 0x5f, 0x6b, 0x65,
	0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x74, 0x65, 0x73, 0x73, 0x65, 0x72,
	0x61, 0x6c, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x41,
	0x50, 0x49, 0x4b, 0x65, 0x79, 0x52, 0x0e, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x41,
	0x70, 0x69, 0x4b, 0x65, 0x79, 0x22, 0x8d, 0x01, 0x0a, 0x0c, 0x52, 0x65, 0x76, 0x6f, 0x6b, 0x65,
	0x41, 0x50, 0x49, 0x4b, 0x65, 0x79, 0x12, 0x35, 0x0a, 0x07, 0x61, 0x70, 0x69, 0x5f, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x74, 0x65, 0x73, 0x73, 0x65, 0x72,
	0x61, 0x6c, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x41,
	0x50, 0x49, 0x4b, 0x65, 0x79, 0x52, 0x06, 0x61, 0x70, 0x69, 0x4b, 0x65, 0x79, 0x12, 0x46, 0x0a,
	0x10, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x5f, 0x61, 0x70, 0x69, 0x5f, 0x6b, 0x65,
	0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x74, 0x65, 0x73, 0x73, 0x65, 0x72,
	0x61, 0x6c, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x41,
	0x50, 0x49, 0x4b, 0x65, 0x79, 0x52, 0x0e, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x41,
	0x70, 0x69, 0x4b, 0x65, 0x79, 0x22, 0x45, 0x0a, 0x0c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41,
	0x50, 0x49, 0x4b, 0x65, 0x79, 0x12, 0x35, 0x0a, 0x07, 0x61, 0x70, 0x69, 0x5f, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x74, 0x65, 0x73, 0x73, 0x65, 0x72, 0x61,
	0x6c, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x50,
	0x49, 0x4b, 0x65, 0x79, 0x52, 0x06, 0x61, 0x70, 0x69, 0x4b, 0x65, 0x79, 0x22, 0x60, 0x0a, 0x19,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x64, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x5f,
	0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x70,
	0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x22, 0xa0,
	0x01, 0x0a, 0x25, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x48, 0x6f, 0x73, 0x74, 0x65,
	0x64, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x12, 0x32, 0x0a, 0x15, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x5f, 0x68, 0x6f, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x13, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x48,
	0x6f, 0x73, 0x74, 0x65, 0x64, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x12, 0x43, 0x0a, 0x1e,
	0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x5f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x5f,
	0x68, 0x6f, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x1b, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x47, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x48, 0x6f, 0x73, 0x74, 0x65, 0x64, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x73, 0x22, 0x9b, 0x01, 0x0a, 0x24, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x6f, 0x66,
	0x74, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x44, 0x73, 0x12, 0x30, 0x0a, 0x14, 0x6d, 0x69,
	0x63, 0x72, 0x6f, 0x73, 0x6f, 0x66, 0x74, 0x5f, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x12, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73,
	0x6f, 0x66, 0x74, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x73, 0x12, 0x41, 0x0a, 0x1d,
	0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x5f, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x6f,
	0x66, 0x74, 0x5f, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x1a, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x4d, 0x69, 0x63,
	0x72, 0x6f, 0x73, 0x6f, 0x66, 0x74, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x73, 0x22,
	0x5c, 0x0a, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x46, 0x0a, 0x0c, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x74, 0x65,
	0x73, 0x73, 0x65, 0x72, 0x61, 0x6c, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x6c, 0x6f, 0x67, 0x2e,
	0x76, 0x31, 0x2e, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x0c, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xb5, 0x01,
	0x0a, 0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x46, 0x0a, 0x0c, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x74, 0x65, 0x73,
	0x73, 0x65, 0x72, 0x61, 0x6c, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x6c, 0x6f, 0x67, 0x2e, 0x76,
	0x31, 0x2e, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c,
	0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x57, 0x0a, 0x15,
	0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x5f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x74, 0x65,
	0x73, 0x73, 0x65, 0x72, 0x61, 0x6c, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x6c, 0x6f, 0x67, 0x2e,
	0x76, 0x31, 0x2e, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x14, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x5c, 0x0a, 0x12, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x46, 0x0a, 0x0c, 0x6f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x74, 0x65, 0x73, 0x73, 0x65, 0x72, 0x61, 0x6c, 0x2e, 0x61, 0x75, 0x64,
	0x69, 0x74, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x22, 0x48, 0x0a, 0x0d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x61, 0x73,
	0x73, 0x6b, 0x65, 0x79, 0x12, 0x37, 0x0a, 0x07, 0x70, 0x61, 0x73, 0x73, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x74, 0x65, 0x73, 0x73, 0x65, 0x72, 0x61, 0x6c,
	0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x73,
	0x73, 0x6b, 0x65, 0x79, 0x52, 0x07, 0x70, 0x61, 0x73, 0x73, 0x6b, 0x65, 0x79, 0x22, 0x92, 0x01,
	0x0a, 0x0d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x61, 0x73, 0x73, 0x6b, 0x65, 0x79, 0x12,
	0x37, 0x0a, 0x07, 0x70, 0x61, 0x73, 0x73, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x74, 0x65, 0x73, 0x73, 0x65, 0x72, 0x61, 0x6c, 0x2e, 0x61, 0x75, 0x64, 0x69,
	0x74, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x73, 0x73, 0x6b, 0x65, 0x79, 0x52,
	0x07, 0x70, 0x61, 0x73, 0x73, 0x6b, 0x65, 0x79, 0x12, 0x48, 0x0a, 0x10, 0x70, 0x72, 0x65, 0x76,
	0x69, 0x6f, 0x75, 0x73, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x74, 0x65, 0x73, 0x73, 0x65, 0x72, 0x61, 0x6c, 0x2e, 0x61, 0x75,
	0x64, 0x69, 0x74, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x73, 0x73, 0x6b, 0x65,
	0x79, 0x52, 0x0f, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x50, 0x61, 0x73, 0x73, 0x6b,
	0x65, 0x79, 0x22, 0x48, 0x0a, 0x0d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x61, 0x73, 0x73,
	0x6b, 0x65, 0x79, 0x12, 0x37, 0x0a, 0x07, 0x70, 0x61, 0x73, 0x73, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x74, 0x65, 0x73, 0x73, 0x65, 0x72, 0x61, 0x6c, 0x2e,
	0x61, 0x75, 0x64, 0x69, 0x74, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x73, 0x73,
	0x6b, 0x65, 0x79, 0x52, 0x07, 0x70, 0x61, 0x73, 0x73, 0x6b, 0x65, 0x79, 0x22, 0x3c, 0x0a, 0x0a,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x72, 0x6f,
	0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x74, 0x65, 0x73, 0x73, 0x65,
	0x72, 0x61, 0x6c, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e,
	0x52, 0x6f, 0x6c, 0x65, 0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x22, 0x7d, 0x0a, 0x0a, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x74, 0x65, 0x73, 0x73, 0x65, 0x72, 0x61,
	0x6c, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x6f,
	0x6c, 0x65, 0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x12, 0x3f, 0x0a, 0x0d, 0x70, 0x72, 0x65, 0x76,
	0x69, 0x6f, 0x75, 0x73, 0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x74, 0x65, 0x73, 0x73, 0x65, 0x72, 0x61, 0x6c, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74,
	0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x0c, 0x70, 0x72, 0x65,
	0x76, 0x69, 0x6f, 0x75, 0x73, 0x52, 0x6f, 0x6c, 0x65, 0x22, 0x3c, 0x0a, 0x0a, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x74, 0x65, 0x73, 0x73, 0x65, 0x72, 0x61, 0x6c,
	0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x6f, 0x6c,
	0x65, 0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x22, 0x65, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x53, 0x41, 0x4d, 0x4c, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x4d, 0x0a, 0x0f, 0x73, 0x61, 0x6d, 0x6c, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x74, 0x65, 0x73, 0x73, 0x65,
	0x72, 0x61, 0x6c, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x41, 0x4d, 0x4c, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0e,
	0x73, 0x61, 0x6d, 0x6c, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xc5,
	0x01, 0x0a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x41, 0x4d, 0x4c, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x0f, 0x73, 0x61, 0x6d, 0x6c, 0x5f,
	0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x74, 0x65, 0x73, 0x73, 0x65, 0x72, 0x61, 0x6c, 0x2e, 0x61, 0x75, 0x64, 0x69,
	0x74, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x41, 0x4d, 0x4c, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x73, 0x61, 0x6d, 0x6c, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x5e, 0x0a, 0x18, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f,
	0x75, 0x73, 0x5f, 0x73, 0x61, 0x6d, 0x6c, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x74, 0x65, 0x73, 0x73, 0x65,
	0x72, 0x61, 0x6c, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x41, 0x4d, 0x4c, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x16,
	0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x53, 0x61, 0x6d, 0x6c, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x65, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x53, 0x41, 0x4d, 0x4c, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4d,
	0x0a, 0x0f, 0x73, 0x61, 0x6d, 0x6c, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x74, 0x65, 0x73, 0x73, 0x65, 0x72,
	0x61, 0x6c, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x41, 0x4d, 0x4c, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x73,
	0x61, 0x6d, 0x6c, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x67, 0x0a,
	0x16, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x65, 0x53, 0x41, 0x4d, 0x4c, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x0f, 0x73, 0x61, 0x6d, 0x6c, 0x5f,
	0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x74, 0x65, 0x73, 0x73, 0x65, 0x72, 0x61, 0x6c, 0x2e, 0x61, 0x75, 0x64, 0x69,
	0x74, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x41, 0x4d, 0x4c, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x73, 0x61, 0x6d, 0x6c, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x56, 0x0a, 0x10, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x53, 0x43, 0x49, 0x4d, 0x41, 0x50, 0x49, 0x4b, 0x65, 0x79, 0x12, 0x42, 0x0a, 0x0c, 0x73, 0x63,
	0x69, 0x6d, 0x5f, 0x61, 0x70, 0x69, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x74, 0x65, 0x73, 0x73, 0x65, 0x72, 0x61, 0x6c, 0x2e, 0x61, 0x75, 0x64, 0x69,
	0x74, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x43, 0x49, 0x4d, 0x41, 0x50, 0x49, 0x4b,
	0x65, 0x79, 0x52, 0x0a, 0x73, 0x63, 0x69, 0x6d, 0x41, 0x70, 0x69, 0x4b, 0x65, 0x79, 0x22, 0xab,
	0x01, 0x0a, 0x10, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x43, 0x49, 0x4d, 0x41, 0x50, 0x49,
	0x4b, 0x65, 0x79, 0x12, 0x42, 0x0a, 0x0c, 0x73, 0x63, 0x69, 0x6d, 0x5f, 0x61, 0x70, 0x69, 0x5f,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x74, 0x65, 0x73, 0x73,
	0x65, 0x72, 0x61, 0x6c, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x43, 0x49, 0x4d, 0x41, 0x50, 0x49, 0x4b, 0x65, 0x79, 0x52, 0x0a, 0x73, 0x63, 0x69,
	0x6d, 0x41, 0x70, 0x69, 0x4b, 0x65, 0x79, 0x12, 0x53, 0x0a, 0x15, 0x70, 0x72, 0x65, 0x76, 0x69,
	0x6f, 0x75, 0x73, 0x5f, 0x73, 0x63, 0x69, 0x6d, 0x5f, 0x61, 0x70, 0x69, 0x5f, 0x6b, 0x65, 0x79,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x74, 0x65, 0x73, 0x73, 0x65, 0x72, 0x61,
	0x6c, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x43,
	0x49, 0x4d, 0x41, 0x50, 0x49, 0x4b, 0x65, 0x79, 0x52, 0x12, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f,
	0x75, 0x73, 0x53, 0x63, 0x69, 0x6d, 0x41, 0x70, 0x69, 0x4b, 0x65, 0x79, 0x22, 0xab, 0x01, 0x0a,
	0x10, 0x52, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x53, 0x43, 0x49, 0x4d, 0x41, 0x50, 0x49, 0x4b, 0x65,
	0x79, 0x12, 0x42, 0x0a, 0x0c, 0x73, 0x63, 0x69, 0x6d, 0x5f, 0x61, 0x70, 0x69, 0x5f, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x74, 0x65, 0x73, 0x73, 0x65, 0x72,
	0x61, 0x6c, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x43, 0x49, 0x4d, 0x41, 0x50, 0x49, 0x4b, 0x65, 0x79, 0x52, 0x0a, 0x73, 0x63, 0x69, 0x6d, 0x41,
	0x70, 0x69, 0x4b, 0x65, 0x79, 0x12, 0x53, 0x0a, 0x15, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75,
	0x73, 0x5f, 0x73, 0x63, 0x69, 0x6d, 0x5f, 0x61, 0x70, 0x69, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x74, 0x65, 0x73, 0x73, 0x65, 0x72, 0x61, 0x6c, 0x2e,
	0x61, 0x75, 0x64, 0x69, 0x74, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x43, 0x49, 0x4d,
	0x41, 0x50, 0x49, 0x4b, 0x65, 0x79, 0x52, 0x12, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73,
	0x53, 0x63, 0x69, 0x6d, 0x41, 0x70, 0x69, 0x4b, 0x65, 0x79, 0x22, 0x56, 0x0a, 0x10, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x53, 0x43, 0x49, 0x4d, 0x41, 0x50, 0x49, 0x4b, 0x65, 0x79, 0x12, 0x42,
	0x0a, 0x0c, 0x73, 0x63, 0x69, 0x6d, 0x5f, 0x61, 0x70, 0x69, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x74, 0x65, 0x73, 0x73, 0x65, 0x72, 0x61, 0x6c, 0x2e,
	0x61, 0x75, 0x64, 0x69, 0x74, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x43, 0x49, 0x4d,
	0x41, 0x50, 0x49, 0x4b, 0x65, 0x79, 0x52, 0x0a, 0x73, 0x63, 0x69, 0x6d, 0x41, 0x70, 0x69, 0x4b,
	0x65, 0x79, 0x22, 0x3c, 0x0a, 0x0a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72,
	0x12, 0x2e, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x74, 0x65, 0x73, 0x73, 0x65, 0x72, 0x61, 0x6c, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x6c,
	0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72,
	0x22, 0x7d, 0x0a, 0x0a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x12, 0x2e,
	0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x74,
	0x65, 0x73, 0x73, 0x65, 0x72, 0x61, 0x6c, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x6c, 0x6f, 0x67,
	0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x3f,
	0x0a, 0x0d, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x74, 0x65, 0x73, 0x73, 0x65, 0x72, 0x61, 0x6c,
	0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x52, 0x0c, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x55, 0x73, 0x65, 0x72, 0x22,
	0x3c, 0x0a, 0x0a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x12, 0x2e, 0x0a,
	0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x74, 0x65,
	0x73, 0x73, 0x65, 0x72, 0x61, 0x6c, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x6c, 0x6f, 0x67, 0x2e,
	0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x22, 0x55, 0x0a,
	0x10, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x76, 0x69, 0x74,
	0x65, 0x12, 0x41, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x74, 0x65, 0x73, 0x73, 0x65, 0x72, 0x61,
	0x6c, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x52, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x49, 0x6e,
	0x76, 0x69, 0x74, 0x65, 0x22, 0x55, 0x0a, 0x10, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x12, 0x41, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x74, 0x65, 0x73, 0x73, 0x65, 0x72, 0x61, 0x6c, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x6c, 0x6f,
	0x67, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x52,
	0x0a, 0x75, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x22, 0x6c, 0x0a, 0x0e, 0x41,
	0x73, 0x73, 0x69, 0x67, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x5a, 0x0a,
	0x14, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x5f, 0x61, 0x73, 0x73, 0x69, 0x67,
	0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x74, 0x65,
	0x73, 0x73, 0x65, 0x72, 0x61, 0x6c, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x6c, 0x6f, 0x67, 0x2e,
	0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0x41, 0x73, 0x73, 0x69, 0x67,
	0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x12, 0x75, 0x73, 0x65, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0x41,
	0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x6e, 0x0a, 0x10, 0x55, 0x6e, 0x61,
	0x73, 0x73, 0x69, 0x67, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x5a, 0x0a,
	0x14, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x5f, 0x61, 0x73, 0x73, 0x69, 0x67,
	0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x74, 0x65,
	0x73, 0x73, 0x65, 0x72, 0x61, 0x6c, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x6c, 0x6f, 0x67, 0x2e,
	0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0x41, 0x73, 0x73, 0x69, 0x67,
	0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x12, 0x75, 0x73, 0x65, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0x41,
	0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x92, 0x01, 0x0a, 0x0d, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x37, 0x0a, 0x07, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x74,
	0x65, 0x73, 0x73, 0x65, 0x72, 0x61, 0x6c, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x6c, 0x6f, 0x67,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x31, 0x0a, 0x12, 0x73, 0x61, 0x6d, 0x6c, 0x5f, 0x63, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x00, 0x52, 0x10, 0x73, 0x61, 0x6d, 0x6c, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x88, 0x01, 0x01, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x73, 0x61, 0x6d, 0x6c,
	0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x42, 0xf4,
	0x01, 0x0a, 0x18, 0x63, 0x6f, 0x6d, 0x2e, 0x74, 0x65, 0x73, 0x73, 0x65, 0x72, 0x61, 0x6c, 0x2e,
	0x61, 0x75, 0x64, 0x69, 0x74, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x42, 0x0d, 0x41, 0x75, 0x64,
	0x69, 0x74, 0x6c, 0x6f, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x57, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x74, 0x65, 0x73, 0x73, 0x65, 0x72, 0x61,
	0x6c, 0x2d, 0x6c, 0x61, 0x62, 0x73, 0x2f, 0x74, 0x65, 0x73, 0x73, 0x65, 0x72, 0x61, 0x6c, 0x2f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x61, 0x75, 0x64, 0x69, 0x74, 0x6c, 0x6f,
	0x67, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x74, 0x65, 0x73, 0x73, 0x65, 0x72, 0x61, 0x6c, 0x2f, 0x61,
	0x75, 0x64, 0x69, 0x74, 0x6c, 0x6f, 0x67, 0x2f, 0x76, 0x31, 0x3b, 0x61, 0x75, 0x64, 0x69, 0x74,
	0x6c, 0x6f, 0x67, 0x76, 0x31, 0xa2, 0x02, 0x03, 0x54, 0x41, 0x58, 0xaa, 0x02, 0x14, 0x54, 0x65,
	0x73, 0x73, 0x65, 0x72, 0x61, 0x6c, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x74, 0x6c, 0x6f, 0x67, 0x2e,
	0x56, 0x31, 0xca, 0x02, 0x14, 0x54, 0x65, 0x73, 0x73, 0x65, 0x72, 0x61, 0x6c, 0x5c, 0x41, 0x75,
	0x64, 0x69, 0x74, 0x6c, 0x6f, 0x67, 0x5c, 0x56, 0x31, 0xe2, 0x02, 0x20, 0x54, 0x65, 0x73, 0x73,
	0x65, 0x72, 0x61, 0x6c, 0x5c, 0x41, 0x75, 0x64, 0x69, 0x74, 0x6c, 0x6f, 0x67, 0x5c, 0x56, 0x31,
	0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x16, 0x54,
	0x65, 0x73, 0x73, 0x65, 0x72, 0x61, 0x6c, 0x3a, 0x3a, 0x41, 0x75, 0x64, 0x69, 0x74, 0x6c, 0x6f,
	0x67, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_tesseral_auditlog_v1_auditlog_proto_rawDescOnce sync.Once
	file_tesseral_auditlog_v1_auditlog_proto_rawDescData []byte
)

func file_tesseral_auditlog_v1_auditlog_proto_rawDescGZIP() []byte {
	file_tesseral_auditlog_v1_auditlog_proto_rawDescOnce.Do(func() {
		file_tesseral_auditlog_v1_auditlog_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_tesseral_auditlog_v1_auditlog_proto_rawDesc), len(file_tesseral_auditlog_v1_auditlog_proto_rawDesc)))
	})
	return file_tesseral_auditlog_v1_auditlog_proto_rawDescData
}

var file_tesseral_auditlog_v1_auditlog_proto_msgTypes = make([]protoimpl.MessageInfo, 34)
var file_tesseral_auditlog_v1_auditlog_proto_goTypes = []any{
	(*AssignAPIKeyRole)(nil),                      // 0: tesseral.auditlog.v1.AssignAPIKeyRole
	(*UnassignAPIKeyRole)(nil),                    // 1: tesseral.auditlog.v1.UnassignAPIKeyRole
	(*CreateAPIKey)(nil),                          // 2: tesseral.auditlog.v1.CreateAPIKey
	(*UpdateAPIKey)(nil),                          // 3: tesseral.auditlog.v1.UpdateAPIKey
	(*RevokeAPIKey)(nil),                          // 4: tesseral.auditlog.v1.RevokeAPIKey
	(*DeleteAPIKey)(nil),                          // 5: tesseral.auditlog.v1.DeleteAPIKey
	(*UpdateOrganizationDomains)(nil),             // 6: tesseral.auditlog.v1.UpdateOrganizationDomains
	(*UpdateOrganizationGoogleHostedDomains)(nil), // 7: tesseral.auditlog.v1.UpdateOrganizationGoogleHostedDomains
	(*UpdateOrganizationMicrosoftTenantIDs)(nil),  // 8: tesseral.auditlog.v1.UpdateOrganizationMicrosoftTenantIDs
	(*CreateOrganization)(nil),                    // 9: tesseral.auditlog.v1.CreateOrganization
	(*UpdateOrganization)(nil),                    // 10: tesseral.auditlog.v1.UpdateOrganization
	(*DeleteOrganization)(nil),                    // 11: tesseral.auditlog.v1.DeleteOrganization
	(*CreatePasskey)(nil),                         // 12: tesseral.auditlog.v1.CreatePasskey
	(*UpdatePasskey)(nil),                         // 13: tesseral.auditlog.v1.UpdatePasskey
	(*DeletePasskey)(nil),                         // 14: tesseral.auditlog.v1.DeletePasskey
	(*CreateRole)(nil),                            // 15: tesseral.auditlog.v1.CreateRole
	(*UpdateRole)(nil),                            // 16: tesseral.auditlog.v1.UpdateRole
	(*DeleteRole)(nil),                            // 17: tesseral.auditlog.v1.DeleteRole
	(*CreateSAMLConnection)(nil),                  // 18: tesseral.auditlog.v1.CreateSAMLConnection
	(*UpdateSAMLConnection)(nil),                  // 19: tesseral.auditlog.v1.UpdateSAMLConnection
	(*DeleteSAMLConnection)(nil),                  // 20: tesseral.auditlog.v1.DeleteSAMLConnection
	(*InitiateSAMLConnection)(nil),                // 21: tesseral.auditlog.v1.InitiateSAMLConnection
	(*CreateSCIMAPIKey)(nil),                      // 22: tesseral.auditlog.v1.CreateSCIMAPIKey
	(*UpdateSCIMAPIKey)(nil),                      // 23: tesseral.auditlog.v1.UpdateSCIMAPIKey
	(*RevokeSCIMAPIKey)(nil),                      // 24: tesseral.auditlog.v1.RevokeSCIMAPIKey
	(*DeleteSCIMAPIKey)(nil),                      // 25: tesseral.auditlog.v1.DeleteSCIMAPIKey
	(*CreateUser)(nil),                            // 26: tesseral.auditlog.v1.CreateUser
	(*UpdateUser)(nil),                            // 27: tesseral.auditlog.v1.UpdateUser
	(*DeleteUser)(nil),                            // 28: tesseral.auditlog.v1.DeleteUser
	(*CreateUserInvite)(nil),                      // 29: tesseral.auditlog.v1.CreateUserInvite
	(*DeleteUserInvite)(nil),                      // 30: tesseral.auditlog.v1.DeleteUserInvite
	(*AssignUserRole)(nil),                        // 31: tesseral.auditlog.v1.AssignUserRole
	(*UnassignUserRole)(nil),                      // 32: tesseral.auditlog.v1.UnassignUserRole
	(*CreateSession)(nil),                         // 33: tesseral.auditlog.v1.CreateSession
	(*APIKeyRoleAssignment)(nil),                  // 34: tesseral.auditlog.v1.APIKeyRoleAssignment
	(*APIKey)(nil),                                // 35: tesseral.auditlog.v1.APIKey
	(*Organization)(nil),                          // 36: tesseral.auditlog.v1.Organization
	(*Passkey)(nil),                               // 37: tesseral.auditlog.v1.Passkey
	(*Role)(nil),                                  // 38: tesseral.auditlog.v1.Role
	(*SAMLConnection)(nil),                        // 39: tesseral.auditlog.v1.SAMLConnection
	(*SCIMAPIKey)(nil),                            // 40: tesseral.auditlog.v1.SCIMAPIKey
	(*User)(nil),                                  // 41: tesseral.auditlog.v1.User
	(*UserInvite)(nil),                            // 42: tesseral.auditlog.v1.UserInvite
	(*UserRoleAssignment)(nil),                    // 43: tesseral.auditlog.v1.UserRoleAssignment
	(*Session)(nil),                               // 44: tesseral.auditlog.v1.Session
}
var file_tesseral_auditlog_v1_auditlog_proto_depIdxs = []int32{
	34, // 0: tesseral.auditlog.v1.AssignAPIKeyRole.api_key_role_assignment:type_name -> tesseral.auditlog.v1.APIKeyRoleAssignment
	34, // 1: tesseral.auditlog.v1.UnassignAPIKeyRole.api_key_role_assignment:type_name -> tesseral.auditlog.v1.APIKeyRoleAssignment
	35, // 2: tesseral.auditlog.v1.CreateAPIKey.api_key:type_name -> tesseral.auditlog.v1.APIKey
	35, // 3: tesseral.auditlog.v1.UpdateAPIKey.api_key:type_name -> tesseral.auditlog.v1.APIKey
	35, // 4: tesseral.auditlog.v1.UpdateAPIKey.previous_api_key:type_name -> tesseral.auditlog.v1.APIKey
	35, // 5: tesseral.auditlog.v1.RevokeAPIKey.api_key:type_name -> tesseral.auditlog.v1.APIKey
	35, // 6: tesseral.auditlog.v1.RevokeAPIKey.previous_api_key:type_name -> tesseral.auditlog.v1.APIKey
	35, // 7: tesseral.auditlog.v1.DeleteAPIKey.api_key:type_name -> tesseral.auditlog.v1.APIKey
	36, // 8: tesseral.auditlog.v1.CreateOrganization.organization:type_name -> tesseral.auditlog.v1.Organization
	36, // 9: tesseral.auditlog.v1.UpdateOrganization.organization:type_name -> tesseral.auditlog.v1.Organization
	36, // 10: tesseral.auditlog.v1.UpdateOrganization.previous_organization:type_name -> tesseral.auditlog.v1.Organization
	36, // 11: tesseral.auditlog.v1.DeleteOrganization.organization:type_name -> tesseral.auditlog.v1.Organization
	37, // 12: tesseral.auditlog.v1.CreatePasskey.passkey:type_name -> tesseral.auditlog.v1.Passkey
	37, // 13: tesseral.auditlog.v1.UpdatePasskey.passkey:type_name -> tesseral.auditlog.v1.Passkey
	37, // 14: tesseral.auditlog.v1.UpdatePasskey.previous_passkey:type_name -> tesseral.auditlog.v1.Passkey
	37, // 15: tesseral.auditlog.v1.DeletePasskey.passkey:type_name -> tesseral.auditlog.v1.Passkey
	38, // 16: tesseral.auditlog.v1.CreateRole.role:type_name -> tesseral.auditlog.v1.Role
	38, // 17: tesseral.auditlog.v1.UpdateRole.role:type_name -> tesseral.auditlog.v1.Role
	38, // 18: tesseral.auditlog.v1.UpdateRole.previous_role:type_name -> tesseral.auditlog.v1.Role
	38, // 19: tesseral.auditlog.v1.DeleteRole.role:type_name -> tesseral.auditlog.v1.Role
	39, // 20: tesseral.auditlog.v1.CreateSAMLConnection.saml_connection:type_name -> tesseral.auditlog.v1.SAMLConnection
	39, // 21: tesseral.auditlog.v1.UpdateSAMLConnection.saml_connection:type_name -> tesseral.auditlog.v1.SAMLConnection
	39, // 22: tesseral.auditlog.v1.UpdateSAMLConnection.previous_saml_connection:type_name -> tesseral.auditlog.v1.SAMLConnection
	39, // 23: tesseral.auditlog.v1.DeleteSAMLConnection.saml_connection:type_name -> tesseral.auditlog.v1.SAMLConnection
	39, // 24: tesseral.auditlog.v1.InitiateSAMLConnection.saml_connection:type_name -> tesseral.auditlog.v1.SAMLConnection
	40, // 25: tesseral.auditlog.v1.CreateSCIMAPIKey.scim_api_key:type_name -> tesseral.auditlog.v1.SCIMAPIKey
	40, // 26: tesseral.auditlog.v1.UpdateSCIMAPIKey.scim_api_key:type_name -> tesseral.auditlog.v1.SCIMAPIKey
	40, // 27: tesseral.auditlog.v1.UpdateSCIMAPIKey.previous_scim_api_key:type_name -> tesseral.auditlog.v1.SCIMAPIKey
	40, // 28: tesseral.auditlog.v1.RevokeSCIMAPIKey.scim_api_key:type_name -> tesseral.auditlog.v1.SCIMAPIKey
	40, // 29: tesseral.auditlog.v1.RevokeSCIMAPIKey.previous_scim_api_key:type_name -> tesseral.auditlog.v1.SCIMAPIKey
	40, // 30: tesseral.auditlog.v1.DeleteSCIMAPIKey.scim_api_key:type_name -> tesseral.auditlog.v1.SCIMAPIKey
	41, // 31: tesseral.auditlog.v1.CreateUser.user:type_name -> tesseral.auditlog.v1.User
	41, // 32: tesseral.auditlog.v1.UpdateUser.user:type_name -> tesseral.auditlog.v1.User
	41, // 33: tesseral.auditlog.v1.UpdateUser.previous_user:type_name -> tesseral.auditlog.v1.User
	41, // 34: tesseral.auditlog.v1.DeleteUser.user:type_name -> tesseral.auditlog.v1.User
	42, // 35: tesseral.auditlog.v1.CreateUserInvite.user_invite:type_name -> tesseral.auditlog.v1.UserInvite
	42, // 36: tesseral.auditlog.v1.DeleteUserInvite.user_invite:type_name -> tesseral.auditlog.v1.UserInvite
	43, // 37: tesseral.auditlog.v1.AssignUserRole.user_role_assignment:type_name -> tesseral.auditlog.v1.UserRoleAssignment
	43, // 38: tesseral.auditlog.v1.UnassignUserRole.user_role_assignment:type_name -> tesseral.auditlog.v1.UserRoleAssignment
	44, // 39: tesseral.auditlog.v1.CreateSession.session:type_name -> tesseral.auditlog.v1.Session
	40, // [40:40] is the sub-list for method output_type
	40, // [40:40] is the sub-list for method input_type
	40, // [40:40] is the sub-list for extension type_name
	40, // [40:40] is the sub-list for extension extendee
	0,  // [0:40] is the sub-list for field type_name
}

func init() { file_tesseral_auditlog_v1_auditlog_proto_init() }
func file_tesseral_auditlog_v1_auditlog_proto_init() {
	if File_tesseral_auditlog_v1_auditlog_proto != nil {
		return
	}
	file_tesseral_auditlog_v1_models_proto_init()
	file_tesseral_auditlog_v1_auditlog_proto_msgTypes[33].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_tesseral_auditlog_v1_auditlog_proto_rawDesc), len(file_tesseral_auditlog_v1_auditlog_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   34,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_tesseral_auditlog_v1_auditlog_proto_goTypes,
		DependencyIndexes: file_tesseral_auditlog_v1_auditlog_proto_depIdxs,
		MessageInfos:      file_tesseral_auditlog_v1_auditlog_proto_msgTypes,
	}.Build()
	File_tesseral_auditlog_v1_auditlog_proto = out.File
	file_tesseral_auditlog_v1_auditlog_proto_goTypes = nil
	file_tesseral_auditlog_v1_auditlog_proto_depIdxs = nil
}
