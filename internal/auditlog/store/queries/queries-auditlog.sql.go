// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: queries-auditlog.sql

package queries

import (
	"context"

	"github.com/google/uuid"
)

const batchGetRoleActionsByRoleID = `-- name: BatchGetRoleActionsByRoleID :many
SELECT
    id, role_id, action_id
FROM
    role_actions
WHERE
    role_id = ANY ($1::uuid[])
`

func (q *Queries) BatchGetRoleActionsByRoleID(ctx context.Context, dollar_1 []uuid.UUID) ([]RoleAction, error) {
	rows, err := q.db.Query(ctx, batchGetRoleActionsByRoleID, dollar_1)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []RoleAction
	for rows.Next() {
		var i RoleAction
		if err := rows.Scan(&i.ID, &i.RoleID, &i.ActionID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAPIKey = `-- name: GetAPIKey :one
SELECT
    id, organization_id, display_name, secret_token_sha256, secret_token_suffix, expire_time, create_time, update_time
FROM
    api_keys
WHERE
    id = $1
`

func (q *Queries) GetAPIKey(ctx context.Context, id uuid.UUID) (ApiKey, error) {
	row := q.db.QueryRow(ctx, getAPIKey, id)
	var i ApiKey
	err := row.Scan(
		&i.ID,
		&i.OrganizationID,
		&i.DisplayName,
		&i.SecretTokenSha256,
		&i.SecretTokenSuffix,
		&i.ExpireTime,
		&i.CreateTime,
		&i.UpdateTime,
	)
	return i, err
}

const getAPIKeyRoleAssignment = `-- name: GetAPIKeyRoleAssignment :one
SELECT
    id, api_key_id, role_id, create_time
FROM
    api_key_role_assignments
WHERE
    id = $1
`

func (q *Queries) GetAPIKeyRoleAssignment(ctx context.Context, id uuid.UUID) (ApiKeyRoleAssignment, error) {
	row := q.db.QueryRow(ctx, getAPIKeyRoleAssignment, id)
	var i ApiKeyRoleAssignment
	err := row.Scan(
		&i.ID,
		&i.ApiKeyID,
		&i.RoleID,
		&i.CreateTime,
	)
	return i, err
}

const getActions = `-- name: GetActions :many
SELECT
    id, project_id, name, description
FROM
    actions
WHERE
    project_id = $1
`

func (q *Queries) GetActions(ctx context.Context, projectID uuid.UUID) ([]Action, error) {
	rows, err := q.db.Query(ctx, getActions, projectID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Action
	for rows.Next() {
		var i Action
		if err := rows.Scan(
			&i.ID,
			&i.ProjectID,
			&i.Name,
			&i.Description,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getOIDCConnection = `-- name: GetOIDCConnection :one
SELECT
    id, organization_id, create_time, update_time, is_primary, configuration_url, client_id, client_secret_ciphertext
FROM
    oidc_connections
WHERE
    id = $1
`

func (q *Queries) GetOIDCConnection(ctx context.Context, id uuid.UUID) (OidcConnection, error) {
	row := q.db.QueryRow(ctx, getOIDCConnection, id)
	var i OidcConnection
	err := row.Scan(
		&i.ID,
		&i.OrganizationID,
		&i.CreateTime,
		&i.UpdateTime,
		&i.IsPrimary,
		&i.ConfigurationUrl,
		&i.ClientID,
		&i.ClientSecretCiphertext,
	)
	return i, err
}

const getOrganization = `-- name: GetOrganization :one
SELECT
    id, project_id, display_name, scim_enabled, create_time, update_time, logins_disabled, log_in_with_google, log_in_with_microsoft, log_in_with_password, log_in_with_authenticator_app, log_in_with_passkey, require_mfa, log_in_with_email, log_in_with_saml, custom_roles_enabled, log_in_with_github, api_keys_enabled, log_in_with_oidc
FROM
    organizations
WHERE
    id = $1
`

func (q *Queries) GetOrganization(ctx context.Context, id uuid.UUID) (Organization, error) {
	row := q.db.QueryRow(ctx, getOrganization, id)
	var i Organization
	err := row.Scan(
		&i.ID,
		&i.ProjectID,
		&i.DisplayName,
		&i.ScimEnabled,
		&i.CreateTime,
		&i.UpdateTime,
		&i.LoginsDisabled,
		&i.LogInWithGoogle,
		&i.LogInWithMicrosoft,
		&i.LogInWithPassword,
		&i.LogInWithAuthenticatorApp,
		&i.LogInWithPasskey,
		&i.RequireMfa,
		&i.LogInWithEmail,
		&i.LogInWithSaml,
		&i.CustomRolesEnabled,
		&i.LogInWithGithub,
		&i.ApiKeysEnabled,
		&i.LogInWithOidc,
	)
	return i, err
}

const getPasskey = `-- name: GetPasskey :one
SELECT
    id, user_id, create_time, update_time, credential_id, public_key, aaguid, disabled, rp_id
FROM
    passkeys
WHERE
    id = $1
`

func (q *Queries) GetPasskey(ctx context.Context, id uuid.UUID) (Passkey, error) {
	row := q.db.QueryRow(ctx, getPasskey, id)
	var i Passkey
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.CreateTime,
		&i.UpdateTime,
		&i.CredentialID,
		&i.PublicKey,
		&i.Aaguid,
		&i.Disabled,
		&i.RpID,
	)
	return i, err
}

const getProject = `-- name: GetProject :one
SELECT
    id, organization_id, log_in_with_password, log_in_with_google, log_in_with_microsoft, google_oauth_client_id, microsoft_oauth_client_id, google_oauth_client_secret_ciphertext, microsoft_oauth_client_secret_ciphertext, display_name, create_time, update_time, logins_disabled, log_in_with_authenticator_app, log_in_with_passkey, log_in_with_email, log_in_with_saml, redirect_uri, after_login_redirect_uri, after_signup_redirect_uri, vault_domain, email_send_from_domain, cookie_domain, email_quota_daily, stripe_customer_id, entitled_custom_vault_domains, entitled_backend_api_keys, log_in_with_github, github_oauth_client_id, github_oauth_client_secret_ciphertext, api_keys_enabled, api_key_secret_token_prefix, audit_logs_enabled, log_in_with_oidc
FROM
    projects
WHERE
    id = $1
`

func (q *Queries) GetProject(ctx context.Context, id uuid.UUID) (Project, error) {
	row := q.db.QueryRow(ctx, getProject, id)
	var i Project
	err := row.Scan(
		&i.ID,
		&i.OrganizationID,
		&i.LogInWithPassword,
		&i.LogInWithGoogle,
		&i.LogInWithMicrosoft,
		&i.GoogleOauthClientID,
		&i.MicrosoftOauthClientID,
		&i.GoogleOauthClientSecretCiphertext,
		&i.MicrosoftOauthClientSecretCiphertext,
		&i.DisplayName,
		&i.CreateTime,
		&i.UpdateTime,
		&i.LoginsDisabled,
		&i.LogInWithAuthenticatorApp,
		&i.LogInWithPasskey,
		&i.LogInWithEmail,
		&i.LogInWithSaml,
		&i.RedirectUri,
		&i.AfterLoginRedirectUri,
		&i.AfterSignupRedirectUri,
		&i.VaultDomain,
		&i.EmailSendFromDomain,
		&i.CookieDomain,
		&i.EmailQuotaDaily,
		&i.StripeCustomerID,
		&i.EntitledCustomVaultDomains,
		&i.EntitledBackendApiKeys,
		&i.LogInWithGithub,
		&i.GithubOauthClientID,
		&i.GithubOauthClientSecretCiphertext,
		&i.ApiKeysEnabled,
		&i.ApiKeySecretTokenPrefix,
		&i.AuditLogsEnabled,
		&i.LogInWithOidc,
	)
	return i, err
}

const getRole = `-- name: GetRole :one
SELECT
    id, project_id, organization_id, create_time, update_time, display_name, description
FROM
    roles
WHERE
    id = $1
`

func (q *Queries) GetRole(ctx context.Context, id uuid.UUID) (Role, error) {
	row := q.db.QueryRow(ctx, getRole, id)
	var i Role
	err := row.Scan(
		&i.ID,
		&i.ProjectID,
		&i.OrganizationID,
		&i.CreateTime,
		&i.UpdateTime,
		&i.DisplayName,
		&i.Description,
	)
	return i, err
}

const getSAMLConnection = `-- name: GetSAMLConnection :one
SELECT
    id, organization_id, create_time, is_primary, idp_redirect_url, idp_x509_certificate, idp_entity_id, update_time
FROM
    saml_connections
WHERE
    id = $1
`

func (q *Queries) GetSAMLConnection(ctx context.Context, id uuid.UUID) (SamlConnection, error) {
	row := q.db.QueryRow(ctx, getSAMLConnection, id)
	var i SamlConnection
	err := row.Scan(
		&i.ID,
		&i.OrganizationID,
		&i.CreateTime,
		&i.IsPrimary,
		&i.IdpRedirectUrl,
		&i.IdpX509Certificate,
		&i.IdpEntityID,
		&i.UpdateTime,
	)
	return i, err
}

const getSCIMAPIKey = `-- name: GetSCIMAPIKey :one
SELECT
    id, organization_id, secret_token_sha256, display_name, create_time, update_time
FROM
    scim_api_keys
WHERE
    id = $1
`

func (q *Queries) GetSCIMAPIKey(ctx context.Context, id uuid.UUID) (ScimApiKey, error) {
	row := q.db.QueryRow(ctx, getSCIMAPIKey, id)
	var i ScimApiKey
	err := row.Scan(
		&i.ID,
		&i.OrganizationID,
		&i.SecretTokenSha256,
		&i.DisplayName,
		&i.CreateTime,
		&i.UpdateTime,
	)
	return i, err
}

const getSession = `-- name: GetSession :one
SELECT
    id, user_id, create_time, expire_time, refresh_token_sha256, impersonator_user_id, last_active_time, primary_auth_factor
FROM
    sessions
WHERE
    id = $1
`

func (q *Queries) GetSession(ctx context.Context, id uuid.UUID) (Session, error) {
	row := q.db.QueryRow(ctx, getSession, id)
	var i Session
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.CreateTime,
		&i.ExpireTime,
		&i.RefreshTokenSha256,
		&i.ImpersonatorUserID,
		&i.LastActiveTime,
		&i.PrimaryAuthFactor,
	)
	return i, err
}

const getUser = `-- name: GetUser :one
SELECT
    id, organization_id, password_bcrypt, google_user_id, microsoft_user_id, email, create_time, update_time, deactivate_time, is_owner, failed_password_attempts, password_lockout_expire_time, authenticator_app_secret_ciphertext, failed_authenticator_app_attempts, authenticator_app_lockout_expire_time, authenticator_app_recovery_code_sha256s, display_name, profile_picture_url, github_user_id
FROM
    users
WHERE
    id = $1
`

func (q *Queries) GetUser(ctx context.Context, id uuid.UUID) (User, error) {
	row := q.db.QueryRow(ctx, getUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.OrganizationID,
		&i.PasswordBcrypt,
		&i.GoogleUserID,
		&i.MicrosoftUserID,
		&i.Email,
		&i.CreateTime,
		&i.UpdateTime,
		&i.DeactivateTime,
		&i.IsOwner,
		&i.FailedPasswordAttempts,
		&i.PasswordLockoutExpireTime,
		&i.AuthenticatorAppSecretCiphertext,
		&i.FailedAuthenticatorAppAttempts,
		&i.AuthenticatorAppLockoutExpireTime,
		&i.AuthenticatorAppRecoveryCodeSha256s,
		&i.DisplayName,
		&i.ProfilePictureUrl,
		&i.GithubUserID,
	)
	return i, err
}

const getUserInvite = `-- name: GetUserInvite :one
SELECT
    id, organization_id, create_time, update_time, email, is_owner, role_id
FROM
    user_invites
WHERE
    id = $1
`

func (q *Queries) GetUserInvite(ctx context.Context, id uuid.UUID) (UserInvite, error) {
	row := q.db.QueryRow(ctx, getUserInvite, id)
	var i UserInvite
	err := row.Scan(
		&i.ID,
		&i.OrganizationID,
		&i.CreateTime,
		&i.UpdateTime,
		&i.Email,
		&i.IsOwner,
		&i.RoleID,
	)
	return i, err
}

const getUserRoleAssignment = `-- name: GetUserRoleAssignment :one
SELECT
    id, role_id, user_id
FROM
    user_role_assignments
WHERE
    id = $1
`

func (q *Queries) GetUserRoleAssignment(ctx context.Context, id uuid.UUID) (UserRoleAssignment, error) {
	row := q.db.QueryRow(ctx, getUserRoleAssignment, id)
	var i UserRoleAssignment
	err := row.Scan(&i.ID, &i.RoleID, &i.UserID)
	return i, err
}
