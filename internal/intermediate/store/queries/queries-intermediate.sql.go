// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: queries-intermediate.sql

package queries

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createImpersonatedSession = `-- name: CreateImpersonatedSession :one
INSERT INTO sessions (id, user_id, expire_time, refresh_token_sha256, impersonator_user_id)
    VALUES ($1, $2, $3, $4, $5)
RETURNING
    id, user_id, create_time, expire_time, refresh_token_sha256, impersonator_user_id, last_active_time
`

type CreateImpersonatedSessionParams struct {
	ID                 uuid.UUID
	UserID             uuid.UUID
	ExpireTime         *time.Time
	RefreshTokenSha256 []byte
	ImpersonatorUserID *uuid.UUID
}

func (q *Queries) CreateImpersonatedSession(ctx context.Context, arg CreateImpersonatedSessionParams) (Session, error) {
	row := q.db.QueryRow(ctx, createImpersonatedSession,
		arg.ID,
		arg.UserID,
		arg.ExpireTime,
		arg.RefreshTokenSha256,
		arg.ImpersonatorUserID,
	)
	var i Session
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.CreateTime,
		&i.ExpireTime,
		&i.RefreshTokenSha256,
		&i.ImpersonatorUserID,
		&i.LastActiveTime,
	)
	return i, err
}

const createIntermediateSession = `-- name: CreateIntermediateSession :one
INSERT INTO intermediate_sessions (id, project_id, expire_time, email, google_user_id, microsoft_user_id, secret_token_sha256)
    VALUES ($1, $2, $3, $4, $5, $6, $7)
RETURNING
    id, project_id, create_time, expire_time, email, google_oauth_state_sha256, microsoft_oauth_state_sha256, google_hosted_domain, google_user_id, microsoft_tenant_id, microsoft_user_id, password_verified, organization_id, update_time, secret_token_sha256, new_user_password_bcrypt, email_verification_challenge_sha256, email_verification_challenge_completed, passkey_credential_id, passkey_public_key, passkey_aaguid, passkey_verify_challenge_sha256, passkey_verified, authenticator_app_secret_ciphertext, authenticator_app_verified, authenticator_app_recovery_code_bcrypts, primary_login_factor
`

type CreateIntermediateSessionParams struct {
	ID                uuid.UUID
	ProjectID         uuid.UUID
	ExpireTime        *time.Time
	Email             *string
	GoogleUserID      *string
	MicrosoftUserID   *string
	SecretTokenSha256 []byte
}

func (q *Queries) CreateIntermediateSession(ctx context.Context, arg CreateIntermediateSessionParams) (IntermediateSession, error) {
	row := q.db.QueryRow(ctx, createIntermediateSession,
		arg.ID,
		arg.ProjectID,
		arg.ExpireTime,
		arg.Email,
		arg.GoogleUserID,
		arg.MicrosoftUserID,
		arg.SecretTokenSha256,
	)
	var i IntermediateSession
	err := row.Scan(
		&i.ID,
		&i.ProjectID,
		&i.CreateTime,
		&i.ExpireTime,
		&i.Email,
		&i.GoogleOauthStateSha256,
		&i.MicrosoftOauthStateSha256,
		&i.GoogleHostedDomain,
		&i.GoogleUserID,
		&i.MicrosoftTenantID,
		&i.MicrosoftUserID,
		&i.PasswordVerified,
		&i.OrganizationID,
		&i.UpdateTime,
		&i.SecretTokenSha256,
		&i.NewUserPasswordBcrypt,
		&i.EmailVerificationChallengeSha256,
		&i.EmailVerificationChallengeCompleted,
		&i.PasskeyCredentialID,
		&i.PasskeyPublicKey,
		&i.PasskeyAaguid,
		&i.PasskeyVerifyChallengeSha256,
		&i.PasskeyVerified,
		&i.AuthenticatorAppSecretCiphertext,
		&i.AuthenticatorAppVerified,
		&i.AuthenticatorAppRecoveryCodeBcrypts,
		&i.PrimaryLoginFactor,
	)
	return i, err
}

const createOrganization = `-- name: CreateOrganization :one
INSERT INTO organizations (id, project_id, display_name, log_in_with_google, log_in_with_microsoft, log_in_with_password, scim_enabled)
    VALUES ($1, $2, $3, $4, $5, $6, $7)
RETURNING
    id, project_id, display_name, scim_enabled, create_time, update_time, logins_disabled, log_in_with_google, log_in_with_microsoft, log_in_with_password, log_in_with_authenticator_app, log_in_with_passkey, require_mfa, log_in_with_email, log_in_with_saml
`

type CreateOrganizationParams struct {
	ID                 uuid.UUID
	ProjectID          uuid.UUID
	DisplayName        string
	LogInWithGoogle    bool
	LogInWithMicrosoft bool
	LogInWithPassword  bool
	ScimEnabled        bool
}

func (q *Queries) CreateOrganization(ctx context.Context, arg CreateOrganizationParams) (Organization, error) {
	row := q.db.QueryRow(ctx, createOrganization,
		arg.ID,
		arg.ProjectID,
		arg.DisplayName,
		arg.LogInWithGoogle,
		arg.LogInWithMicrosoft,
		arg.LogInWithPassword,
		arg.ScimEnabled,
	)
	var i Organization
	err := row.Scan(
		&i.ID,
		&i.ProjectID,
		&i.DisplayName,
		&i.ScimEnabled,
		&i.CreateTime,
		&i.UpdateTime,
		&i.LoginsDisabled,
		&i.LogInWithGoogle,
		&i.LogInWithMicrosoft,
		&i.LogInWithPassword,
		&i.LogInWithAuthenticatorApp,
		&i.LogInWithPasskey,
		&i.RequireMfa,
		&i.LogInWithEmail,
		&i.LogInWithSaml,
	)
	return i, err
}

const createOrganizationGoogleHostedDomain = `-- name: CreateOrganizationGoogleHostedDomain :one
INSERT INTO organization_google_hosted_domains (id, organization_id, google_hosted_domain)
    VALUES ($1, $2, $3)
RETURNING
    id, organization_id, google_hosted_domain
`

type CreateOrganizationGoogleHostedDomainParams struct {
	ID                 uuid.UUID
	OrganizationID     uuid.UUID
	GoogleHostedDomain string
}

func (q *Queries) CreateOrganizationGoogleHostedDomain(ctx context.Context, arg CreateOrganizationGoogleHostedDomainParams) (OrganizationGoogleHostedDomain, error) {
	row := q.db.QueryRow(ctx, createOrganizationGoogleHostedDomain, arg.ID, arg.OrganizationID, arg.GoogleHostedDomain)
	var i OrganizationGoogleHostedDomain
	err := row.Scan(&i.ID, &i.OrganizationID, &i.GoogleHostedDomain)
	return i, err
}

const createOrganizationMicrosoftTenantID = `-- name: CreateOrganizationMicrosoftTenantID :one
INSERT INTO organization_microsoft_tenant_ids (id, organization_id, microsoft_tenant_id)
    VALUES ($1, $2, $3)
RETURNING
    id, organization_id, microsoft_tenant_id
`

type CreateOrganizationMicrosoftTenantIDParams struct {
	ID                uuid.UUID
	OrganizationID    uuid.UUID
	MicrosoftTenantID string
}

func (q *Queries) CreateOrganizationMicrosoftTenantID(ctx context.Context, arg CreateOrganizationMicrosoftTenantIDParams) (OrganizationMicrosoftTenantID, error) {
	row := q.db.QueryRow(ctx, createOrganizationMicrosoftTenantID, arg.ID, arg.OrganizationID, arg.MicrosoftTenantID)
	var i OrganizationMicrosoftTenantID
	err := row.Scan(&i.ID, &i.OrganizationID, &i.MicrosoftTenantID)
	return i, err
}

const createPasskey = `-- name: CreatePasskey :one
INSERT INTO passkeys (id, user_id, credential_id, public_key, aaguid)
    VALUES ($1, $2, $3, $4, $5)
RETURNING
    id, user_id, create_time, update_time, credential_id, public_key, aaguid, disabled, rp_id
`

type CreatePasskeyParams struct {
	ID           uuid.UUID
	UserID       uuid.UUID
	CredentialID []byte
	PublicKey    []byte
	Aaguid       string
}

func (q *Queries) CreatePasskey(ctx context.Context, arg CreatePasskeyParams) (Passkey, error) {
	row := q.db.QueryRow(ctx, createPasskey,
		arg.ID,
		arg.UserID,
		arg.CredentialID,
		arg.PublicKey,
		arg.Aaguid,
	)
	var i Passkey
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.CreateTime,
		&i.UpdateTime,
		&i.CredentialID,
		&i.PublicKey,
		&i.Aaguid,
		&i.Disabled,
		&i.RpID,
	)
	return i, err
}

const createSession = `-- name: CreateSession :one
INSERT INTO sessions (id, user_id, expire_time, refresh_token_sha256)
    VALUES ($1, $2, $3, $4)
RETURNING
    id, user_id, create_time, expire_time, refresh_token_sha256, impersonator_user_id, last_active_time
`

type CreateSessionParams struct {
	ID                 uuid.UUID
	UserID             uuid.UUID
	ExpireTime         *time.Time
	RefreshTokenSha256 []byte
}

func (q *Queries) CreateSession(ctx context.Context, arg CreateSessionParams) (Session, error) {
	row := q.db.QueryRow(ctx, createSession,
		arg.ID,
		arg.UserID,
		arg.ExpireTime,
		arg.RefreshTokenSha256,
	)
	var i Session
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.CreateTime,
		&i.ExpireTime,
		&i.RefreshTokenSha256,
		&i.ImpersonatorUserID,
		&i.LastActiveTime,
	)
	return i, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users (id, organization_id, email, google_user_id, microsoft_user_id, is_owner, password_bcrypt)
    VALUES ($1, $2, $3, $4, $5, $6, $7)
RETURNING
    id, organization_id, password_bcrypt, google_user_id, microsoft_user_id, email, create_time, update_time, deactivate_time, is_owner, failed_password_attempts, password_lockout_expire_time, authenticator_app_secret_ciphertext, authenticator_app_recovery_code_bcrypts, failed_authenticator_app_attempts, authenticator_app_lockout_expire_time
`

type CreateUserParams struct {
	ID              uuid.UUID
	OrganizationID  uuid.UUID
	Email           string
	GoogleUserID    *string
	MicrosoftUserID *string
	IsOwner         bool
	PasswordBcrypt  *string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.ID,
		arg.OrganizationID,
		arg.Email,
		arg.GoogleUserID,
		arg.MicrosoftUserID,
		arg.IsOwner,
		arg.PasswordBcrypt,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.OrganizationID,
		&i.PasswordBcrypt,
		&i.GoogleUserID,
		&i.MicrosoftUserID,
		&i.Email,
		&i.CreateTime,
		&i.UpdateTime,
		&i.DeactivateTime,
		&i.IsOwner,
		&i.FailedPasswordAttempts,
		&i.PasswordLockoutExpireTime,
		&i.AuthenticatorAppSecretCiphertext,
		&i.AuthenticatorAppRecoveryCodeBcrypts,
		&i.FailedAuthenticatorAppAttempts,
		&i.AuthenticatorAppLockoutExpireTime,
	)
	return i, err
}

const createVerifiedEmail = `-- name: CreateVerifiedEmail :one
INSERT INTO oauth_verified_emails (id, project_id, email, google_user_id, microsoft_user_id)
    VALUES ($1, $2, $3, $4, $5)
RETURNING
    id, project_id, create_time, email, google_user_id, microsoft_user_id
`

type CreateVerifiedEmailParams struct {
	ID              uuid.UUID
	ProjectID       uuid.UUID
	Email           string
	GoogleUserID    *string
	MicrosoftUserID *string
}

func (q *Queries) CreateVerifiedEmail(ctx context.Context, arg CreateVerifiedEmailParams) (OauthVerifiedEmail, error) {
	row := q.db.QueryRow(ctx, createVerifiedEmail,
		arg.ID,
		arg.ProjectID,
		arg.Email,
		arg.GoogleUserID,
		arg.MicrosoftUserID,
	)
	var i OauthVerifiedEmail
	err := row.Scan(
		&i.ID,
		&i.ProjectID,
		&i.CreateTime,
		&i.Email,
		&i.GoogleUserID,
		&i.MicrosoftUserID,
	)
	return i, err
}

const deleteIntermediateSessionUserInvite = `-- name: DeleteIntermediateSessionUserInvite :one
DELETE FROM user_invites
WHERE organization_id = $1
    AND email = $2
RETURNING
    id, organization_id, create_time, update_time, email, is_owner
`

type DeleteIntermediateSessionUserInviteParams struct {
	OrganizationID uuid.UUID
	Email          string
}

func (q *Queries) DeleteIntermediateSessionUserInvite(ctx context.Context, arg DeleteIntermediateSessionUserInviteParams) (UserInvite, error) {
	row := q.db.QueryRow(ctx, deleteIntermediateSessionUserInvite, arg.OrganizationID, arg.Email)
	var i UserInvite
	err := row.Scan(
		&i.ID,
		&i.OrganizationID,
		&i.CreateTime,
		&i.UpdateTime,
		&i.Email,
		&i.IsOwner,
	)
	return i, err
}

const getEmailVerifiedByGoogleUserID = `-- name: GetEmailVerifiedByGoogleUserID :one
SELECT
    EXISTS (
        SELECT
            id, project_id, create_time, email, google_user_id, microsoft_user_id
        FROM
            oauth_verified_emails
        WHERE
            project_id = $1
            AND email = $2
            AND google_user_id = $3)
`

type GetEmailVerifiedByGoogleUserIDParams struct {
	ProjectID    uuid.UUID
	Email        string
	GoogleUserID *string
}

func (q *Queries) GetEmailVerifiedByGoogleUserID(ctx context.Context, arg GetEmailVerifiedByGoogleUserIDParams) (bool, error) {
	row := q.db.QueryRow(ctx, getEmailVerifiedByGoogleUserID, arg.ProjectID, arg.Email, arg.GoogleUserID)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const getEmailVerifiedByMicrosoftUserID = `-- name: GetEmailVerifiedByMicrosoftUserID :one
SELECT
    EXISTS (
        SELECT
            id, project_id, create_time, email, google_user_id, microsoft_user_id
        FROM
            oauth_verified_emails
        WHERE
            project_id = $1
            AND email = $2
            AND microsoft_user_id = $3)
`

type GetEmailVerifiedByMicrosoftUserIDParams struct {
	ProjectID       uuid.UUID
	Email           string
	MicrosoftUserID *string
}

func (q *Queries) GetEmailVerifiedByMicrosoftUserID(ctx context.Context, arg GetEmailVerifiedByMicrosoftUserIDParams) (bool, error) {
	row := q.db.QueryRow(ctx, getEmailVerifiedByMicrosoftUserID, arg.ProjectID, arg.Email, arg.MicrosoftUserID)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const getIntermediateSessionByID = `-- name: GetIntermediateSessionByID :one
SELECT
    id, project_id, create_time, expire_time, email, google_oauth_state_sha256, microsoft_oauth_state_sha256, google_hosted_domain, google_user_id, microsoft_tenant_id, microsoft_user_id, password_verified, organization_id, update_time, secret_token_sha256, new_user_password_bcrypt, email_verification_challenge_sha256, email_verification_challenge_completed, passkey_credential_id, passkey_public_key, passkey_aaguid, passkey_verify_challenge_sha256, passkey_verified, authenticator_app_secret_ciphertext, authenticator_app_verified, authenticator_app_recovery_code_bcrypts, primary_login_factor
FROM
    intermediate_sessions
WHERE
    id = $1
`

func (q *Queries) GetIntermediateSessionByID(ctx context.Context, id uuid.UUID) (IntermediateSession, error) {
	row := q.db.QueryRow(ctx, getIntermediateSessionByID, id)
	var i IntermediateSession
	err := row.Scan(
		&i.ID,
		&i.ProjectID,
		&i.CreateTime,
		&i.ExpireTime,
		&i.Email,
		&i.GoogleOauthStateSha256,
		&i.MicrosoftOauthStateSha256,
		&i.GoogleHostedDomain,
		&i.GoogleUserID,
		&i.MicrosoftTenantID,
		&i.MicrosoftUserID,
		&i.PasswordVerified,
		&i.OrganizationID,
		&i.UpdateTime,
		&i.SecretTokenSha256,
		&i.NewUserPasswordBcrypt,
		&i.EmailVerificationChallengeSha256,
		&i.EmailVerificationChallengeCompleted,
		&i.PasskeyCredentialID,
		&i.PasskeyPublicKey,
		&i.PasskeyAaguid,
		&i.PasskeyVerifyChallengeSha256,
		&i.PasskeyVerified,
		&i.AuthenticatorAppSecretCiphertext,
		&i.AuthenticatorAppVerified,
		&i.AuthenticatorAppRecoveryCodeBcrypts,
		&i.PrimaryLoginFactor,
	)
	return i, err
}

const getIntermediateSessionByTokenSHA256AndProjectID = `-- name: GetIntermediateSessionByTokenSHA256AndProjectID :one
SELECT
    id, project_id, create_time, expire_time, email, google_oauth_state_sha256, microsoft_oauth_state_sha256, google_hosted_domain, google_user_id, microsoft_tenant_id, microsoft_user_id, password_verified, organization_id, update_time, secret_token_sha256, new_user_password_bcrypt, email_verification_challenge_sha256, email_verification_challenge_completed, passkey_credential_id, passkey_public_key, passkey_aaguid, passkey_verify_challenge_sha256, passkey_verified, authenticator_app_secret_ciphertext, authenticator_app_verified, authenticator_app_recovery_code_bcrypts, primary_login_factor
FROM
    intermediate_sessions
WHERE
    secret_token_sha256 = $1
    AND project_id = $2
`

type GetIntermediateSessionByTokenSHA256AndProjectIDParams struct {
	SecretTokenSha256 []byte
	ProjectID         uuid.UUID
}

func (q *Queries) GetIntermediateSessionByTokenSHA256AndProjectID(ctx context.Context, arg GetIntermediateSessionByTokenSHA256AndProjectIDParams) (IntermediateSession, error) {
	row := q.db.QueryRow(ctx, getIntermediateSessionByTokenSHA256AndProjectID, arg.SecretTokenSha256, arg.ProjectID)
	var i IntermediateSession
	err := row.Scan(
		&i.ID,
		&i.ProjectID,
		&i.CreateTime,
		&i.ExpireTime,
		&i.Email,
		&i.GoogleOauthStateSha256,
		&i.MicrosoftOauthStateSha256,
		&i.GoogleHostedDomain,
		&i.GoogleUserID,
		&i.MicrosoftTenantID,
		&i.MicrosoftUserID,
		&i.PasswordVerified,
		&i.OrganizationID,
		&i.UpdateTime,
		&i.SecretTokenSha256,
		&i.NewUserPasswordBcrypt,
		&i.EmailVerificationChallengeSha256,
		&i.EmailVerificationChallengeCompleted,
		&i.PasskeyCredentialID,
		&i.PasskeyPublicKey,
		&i.PasskeyAaguid,
		&i.PasskeyVerifyChallengeSha256,
		&i.PasskeyVerified,
		&i.AuthenticatorAppSecretCiphertext,
		&i.AuthenticatorAppVerified,
		&i.AuthenticatorAppRecoveryCodeBcrypts,
		&i.PrimaryLoginFactor,
	)
	return i, err
}

const getOrganizationPrimarySAMLConnection = `-- name: GetOrganizationPrimarySAMLConnection :one
SELECT
    id, organization_id, create_time, is_primary, idp_redirect_url, idp_x509_certificate, idp_entity_id, update_time
FROM
    saml_connections
WHERE
    organization_id = $1
    AND is_primary = TRUE
LIMIT 1
`

func (q *Queries) GetOrganizationPrimarySAMLConnection(ctx context.Context, organizationID uuid.UUID) (SamlConnection, error) {
	row := q.db.QueryRow(ctx, getOrganizationPrimarySAMLConnection, organizationID)
	var i SamlConnection
	err := row.Scan(
		&i.ID,
		&i.OrganizationID,
		&i.CreateTime,
		&i.IsPrimary,
		&i.IdpRedirectUrl,
		&i.IdpX509Certificate,
		&i.IdpEntityID,
		&i.UpdateTime,
	)
	return i, err
}

const getOrganizationUserByEmail = `-- name: GetOrganizationUserByEmail :one
SELECT
    id, organization_id, password_bcrypt, google_user_id, microsoft_user_id, email, create_time, update_time, deactivate_time, is_owner, failed_password_attempts, password_lockout_expire_time, authenticator_app_secret_ciphertext, authenticator_app_recovery_code_bcrypts, failed_authenticator_app_attempts, authenticator_app_lockout_expire_time
FROM
    users
WHERE
    organization_id = $1
    AND email = $2
`

type GetOrganizationUserByEmailParams struct {
	OrganizationID uuid.UUID
	Email          string
}

func (q *Queries) GetOrganizationUserByEmail(ctx context.Context, arg GetOrganizationUserByEmailParams) (User, error) {
	row := q.db.QueryRow(ctx, getOrganizationUserByEmail, arg.OrganizationID, arg.Email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.OrganizationID,
		&i.PasswordBcrypt,
		&i.GoogleUserID,
		&i.MicrosoftUserID,
		&i.Email,
		&i.CreateTime,
		&i.UpdateTime,
		&i.DeactivateTime,
		&i.IsOwner,
		&i.FailedPasswordAttempts,
		&i.PasswordLockoutExpireTime,
		&i.AuthenticatorAppSecretCiphertext,
		&i.AuthenticatorAppRecoveryCodeBcrypts,
		&i.FailedAuthenticatorAppAttempts,
		&i.AuthenticatorAppLockoutExpireTime,
	)
	return i, err
}

const getOrganizationUserByGoogleUserID = `-- name: GetOrganizationUserByGoogleUserID :one
SELECT
    id, organization_id, password_bcrypt, google_user_id, microsoft_user_id, email, create_time, update_time, deactivate_time, is_owner, failed_password_attempts, password_lockout_expire_time, authenticator_app_secret_ciphertext, authenticator_app_recovery_code_bcrypts, failed_authenticator_app_attempts, authenticator_app_lockout_expire_time
FROM
    users
WHERE
    organization_id = $1
    AND google_user_id = $2
`

type GetOrganizationUserByGoogleUserIDParams struct {
	OrganizationID uuid.UUID
	GoogleUserID   *string
}

func (q *Queries) GetOrganizationUserByGoogleUserID(ctx context.Context, arg GetOrganizationUserByGoogleUserIDParams) (User, error) {
	row := q.db.QueryRow(ctx, getOrganizationUserByGoogleUserID, arg.OrganizationID, arg.GoogleUserID)
	var i User
	err := row.Scan(
		&i.ID,
		&i.OrganizationID,
		&i.PasswordBcrypt,
		&i.GoogleUserID,
		&i.MicrosoftUserID,
		&i.Email,
		&i.CreateTime,
		&i.UpdateTime,
		&i.DeactivateTime,
		&i.IsOwner,
		&i.FailedPasswordAttempts,
		&i.PasswordLockoutExpireTime,
		&i.AuthenticatorAppSecretCiphertext,
		&i.AuthenticatorAppRecoveryCodeBcrypts,
		&i.FailedAuthenticatorAppAttempts,
		&i.AuthenticatorAppLockoutExpireTime,
	)
	return i, err
}

const getOrganizationUserByMicrosoftUserID = `-- name: GetOrganizationUserByMicrosoftUserID :one
SELECT
    id, organization_id, password_bcrypt, google_user_id, microsoft_user_id, email, create_time, update_time, deactivate_time, is_owner, failed_password_attempts, password_lockout_expire_time, authenticator_app_secret_ciphertext, authenticator_app_recovery_code_bcrypts, failed_authenticator_app_attempts, authenticator_app_lockout_expire_time
FROM
    users
WHERE
    organization_id = $1
    AND microsoft_user_id = $2
`

type GetOrganizationUserByMicrosoftUserIDParams struct {
	OrganizationID  uuid.UUID
	MicrosoftUserID *string
}

func (q *Queries) GetOrganizationUserByMicrosoftUserID(ctx context.Context, arg GetOrganizationUserByMicrosoftUserIDParams) (User, error) {
	row := q.db.QueryRow(ctx, getOrganizationUserByMicrosoftUserID, arg.OrganizationID, arg.MicrosoftUserID)
	var i User
	err := row.Scan(
		&i.ID,
		&i.OrganizationID,
		&i.PasswordBcrypt,
		&i.GoogleUserID,
		&i.MicrosoftUserID,
		&i.Email,
		&i.CreateTime,
		&i.UpdateTime,
		&i.DeactivateTime,
		&i.IsOwner,
		&i.FailedPasswordAttempts,
		&i.PasswordLockoutExpireTime,
		&i.AuthenticatorAppSecretCiphertext,
		&i.AuthenticatorAppRecoveryCodeBcrypts,
		&i.FailedAuthenticatorAppAttempts,
		&i.AuthenticatorAppLockoutExpireTime,
	)
	return i, err
}

const getPasskeyByCredentialID = `-- name: GetPasskeyByCredentialID :one
SELECT
    id, user_id, create_time, update_time, credential_id, public_key, aaguid, disabled, rp_id
FROM
    passkeys
WHERE
    credential_id = $1
    AND user_id = $2
`

type GetPasskeyByCredentialIDParams struct {
	CredentialID []byte
	UserID       uuid.UUID
}

func (q *Queries) GetPasskeyByCredentialID(ctx context.Context, arg GetPasskeyByCredentialIDParams) (Passkey, error) {
	row := q.db.QueryRow(ctx, getPasskeyByCredentialID, arg.CredentialID, arg.UserID)
	var i Passkey
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.CreateTime,
		&i.UpdateTime,
		&i.CredentialID,
		&i.PublicKey,
		&i.Aaguid,
		&i.Disabled,
		&i.RpID,
	)
	return i, err
}

const getProjectByID = `-- name: GetProjectByID :one
SELECT
    id, organization_id, log_in_with_password, log_in_with_google, log_in_with_microsoft, google_oauth_client_id, microsoft_oauth_client_id, google_oauth_client_secret_ciphertext, microsoft_oauth_client_secret_ciphertext, display_name, create_time, update_time, custom_auth_domain, auth_domain, logins_disabled, log_in_with_authenticator_app, log_in_with_passkey, log_in_with_email, log_in_with_saml
FROM
    projects
WHERE
    id = $1
`

func (q *Queries) GetProjectByID(ctx context.Context, id uuid.UUID) (Project, error) {
	row := q.db.QueryRow(ctx, getProjectByID, id)
	var i Project
	err := row.Scan(
		&i.ID,
		&i.OrganizationID,
		&i.LogInWithPassword,
		&i.LogInWithGoogle,
		&i.LogInWithMicrosoft,
		&i.GoogleOauthClientID,
		&i.MicrosoftOauthClientID,
		&i.GoogleOauthClientSecretCiphertext,
		&i.MicrosoftOauthClientSecretCiphertext,
		&i.DisplayName,
		&i.CreateTime,
		&i.UpdateTime,
		&i.CustomAuthDomain,
		&i.AuthDomain,
		&i.LoginsDisabled,
		&i.LogInWithAuthenticatorApp,
		&i.LogInWithPasskey,
		&i.LogInWithEmail,
		&i.LogInWithSaml,
	)
	return i, err
}

const getProjectOrganizationByID = `-- name: GetProjectOrganizationByID :one
SELECT
    id, project_id, display_name, scim_enabled, create_time, update_time, logins_disabled, log_in_with_google, log_in_with_microsoft, log_in_with_password, log_in_with_authenticator_app, log_in_with_passkey, require_mfa, log_in_with_email, log_in_with_saml
FROM
    organizations
WHERE
    id = $1
    AND project_id = $2
`

type GetProjectOrganizationByIDParams struct {
	ID        uuid.UUID
	ProjectID uuid.UUID
}

func (q *Queries) GetProjectOrganizationByID(ctx context.Context, arg GetProjectOrganizationByIDParams) (Organization, error) {
	row := q.db.QueryRow(ctx, getProjectOrganizationByID, arg.ID, arg.ProjectID)
	var i Organization
	err := row.Scan(
		&i.ID,
		&i.ProjectID,
		&i.DisplayName,
		&i.ScimEnabled,
		&i.CreateTime,
		&i.UpdateTime,
		&i.LoginsDisabled,
		&i.LogInWithGoogle,
		&i.LogInWithMicrosoft,
		&i.LogInWithPassword,
		&i.LogInWithAuthenticatorApp,
		&i.LogInWithPasskey,
		&i.RequireMfa,
		&i.LogInWithEmail,
		&i.LogInWithSaml,
	)
	return i, err
}

const getProjectPasskeyRPIDs = `-- name: GetProjectPasskeyRPIDs :many
SELECT
    project_id, rp_id
FROM
    project_passkey_rp_ids
WHERE
    project_id = $1
`

func (q *Queries) GetProjectPasskeyRPIDs(ctx context.Context, projectID uuid.UUID) ([]ProjectPasskeyRpID, error) {
	rows, err := q.db.Query(ctx, getProjectPasskeyRPIDs, projectID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ProjectPasskeyRpID
	for rows.Next() {
		var i ProjectPasskeyRpID
		if err := rows.Scan(&i.ProjectID, &i.RpID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getProjectUISettings = `-- name: GetProjectUISettings :one
SELECT
    id, project_id, primary_color, detect_dark_mode_enabled, dark_mode_primary_color, create_time, update_time, log_in_layout
FROM
    project_ui_settings
WHERE
    project_id = $1
`

func (q *Queries) GetProjectUISettings(ctx context.Context, projectID uuid.UUID) (ProjectUiSetting, error) {
	row := q.db.QueryRow(ctx, getProjectUISettings, projectID)
	var i ProjectUiSetting
	err := row.Scan(
		&i.ID,
		&i.ProjectID,
		&i.PrimaryColor,
		&i.DetectDarkModeEnabled,
		&i.DarkModePrimaryColor,
		&i.CreateTime,
		&i.UpdateTime,
		&i.LogInLayout,
	)
	return i, err
}

const getUserHasActivePasskey = `-- name: GetUserHasActivePasskey :one
SELECT
    EXISTS (
        SELECT
            id, user_id, create_time, update_time, credential_id, public_key, aaguid, disabled, rp_id
        FROM
            passkeys
        WHERE
            user_id = $1
            AND disabled = FALSE)
`

func (q *Queries) GetUserHasActivePasskey(ctx context.Context, userID uuid.UUID) (bool, error) {
	row := q.db.QueryRow(ctx, getUserHasActivePasskey, userID)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const getUserImpersonationTokenBySecretTokenSHA256 = `-- name: GetUserImpersonationTokenBySecretTokenSHA256 :one
SELECT
    id, impersonator_id, create_time, expire_time, impersonated_id, secret_token_sha256
FROM
    user_impersonation_tokens
WHERE
    secret_token_sha256 = $1
    AND expire_time > now()
`

func (q *Queries) GetUserImpersonationTokenBySecretTokenSHA256(ctx context.Context, secretTokenSha256 []byte) (UserImpersonationToken, error) {
	row := q.db.QueryRow(ctx, getUserImpersonationTokenBySecretTokenSHA256, secretTokenSha256)
	var i UserImpersonationToken
	err := row.Scan(
		&i.ID,
		&i.ImpersonatorID,
		&i.CreateTime,
		&i.ExpireTime,
		&i.ImpersonatedID,
		&i.SecretTokenSha256,
	)
	return i, err
}

const getUserPasskeyCredentialIDs = `-- name: GetUserPasskeyCredentialIDs :many
SELECT
    credential_id
FROM
    passkeys
WHERE
    user_id = $1
`

func (q *Queries) GetUserPasskeyCredentialIDs(ctx context.Context, userID uuid.UUID) ([][]byte, error) {
	rows, err := q.db.Query(ctx, getUserPasskeyCredentialIDs, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items [][]byte
	for rows.Next() {
		var credential_id []byte
		if err := rows.Scan(&credential_id); err != nil {
			return nil, err
		}
		items = append(items, credential_id)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listOrganizationsByGoogleHostedDomain = `-- name: ListOrganizationsByGoogleHostedDomain :many
SELECT
    organizations.id, organizations.project_id, organizations.display_name, organizations.scim_enabled, organizations.create_time, organizations.update_time, organizations.logins_disabled, organizations.log_in_with_google, organizations.log_in_with_microsoft, organizations.log_in_with_password, organizations.log_in_with_authenticator_app, organizations.log_in_with_passkey, organizations.require_mfa, organizations.log_in_with_email, organizations.log_in_with_saml
FROM
    organizations
    JOIN organization_google_hosted_domains ON organizations.id = organization_google_hosted_domains.organization_id
WHERE
    organizations.project_id = $1
    AND organization_google_hosted_domains.google_hosted_domain = $2
    AND NOT organizations.logins_disabled
`

type ListOrganizationsByGoogleHostedDomainParams struct {
	ProjectID          uuid.UUID
	GoogleHostedDomain string
}

func (q *Queries) ListOrganizationsByGoogleHostedDomain(ctx context.Context, arg ListOrganizationsByGoogleHostedDomainParams) ([]Organization, error) {
	rows, err := q.db.Query(ctx, listOrganizationsByGoogleHostedDomain, arg.ProjectID, arg.GoogleHostedDomain)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Organization
	for rows.Next() {
		var i Organization
		if err := rows.Scan(
			&i.ID,
			&i.ProjectID,
			&i.DisplayName,
			&i.ScimEnabled,
			&i.CreateTime,
			&i.UpdateTime,
			&i.LoginsDisabled,
			&i.LogInWithGoogle,
			&i.LogInWithMicrosoft,
			&i.LogInWithPassword,
			&i.LogInWithAuthenticatorApp,
			&i.LogInWithPasskey,
			&i.RequireMfa,
			&i.LogInWithEmail,
			&i.LogInWithSaml,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listOrganizationsByMatchingUser = `-- name: ListOrganizationsByMatchingUser :many
SELECT
    organizations.id, organizations.project_id, organizations.display_name, organizations.scim_enabled, organizations.create_time, organizations.update_time, organizations.logins_disabled, organizations.log_in_with_google, organizations.log_in_with_microsoft, organizations.log_in_with_password, organizations.log_in_with_authenticator_app, organizations.log_in_with_passkey, organizations.require_mfa, organizations.log_in_with_email, organizations.log_in_with_saml
FROM
    organizations
    JOIN users ON organizations.id = users.organization_id
WHERE
    organizations.project_id = $1
    AND (users.email = $2
        OR (users.google_user_id IS NOT NULL
            AND users.google_user_id = $3)
        OR (users.microsoft_user_id IS NOT NULL
            AND users.microsoft_user_id = $4))
    AND NOT organizations.logins_disabled
`

type ListOrganizationsByMatchingUserParams struct {
	ProjectID       uuid.UUID
	Email           string
	GoogleUserID    *string
	MicrosoftUserID *string
}

func (q *Queries) ListOrganizationsByMatchingUser(ctx context.Context, arg ListOrganizationsByMatchingUserParams) ([]Organization, error) {
	rows, err := q.db.Query(ctx, listOrganizationsByMatchingUser,
		arg.ProjectID,
		arg.Email,
		arg.GoogleUserID,
		arg.MicrosoftUserID,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Organization
	for rows.Next() {
		var i Organization
		if err := rows.Scan(
			&i.ID,
			&i.ProjectID,
			&i.DisplayName,
			&i.ScimEnabled,
			&i.CreateTime,
			&i.UpdateTime,
			&i.LoginsDisabled,
			&i.LogInWithGoogle,
			&i.LogInWithMicrosoft,
			&i.LogInWithPassword,
			&i.LogInWithAuthenticatorApp,
			&i.LogInWithPasskey,
			&i.RequireMfa,
			&i.LogInWithEmail,
			&i.LogInWithSaml,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listOrganizationsByMatchingUserInvite = `-- name: ListOrganizationsByMatchingUserInvite :many
SELECT
    organizations.id, organizations.project_id, organizations.display_name, organizations.scim_enabled, organizations.create_time, organizations.update_time, organizations.logins_disabled, organizations.log_in_with_google, organizations.log_in_with_microsoft, organizations.log_in_with_password, organizations.log_in_with_authenticator_app, organizations.log_in_with_passkey, organizations.require_mfa, organizations.log_in_with_email, organizations.log_in_with_saml
FROM
    organizations
    JOIN user_invites ON organizations.id = user_invites.organization_id
WHERE
    organizations.project_id = $1
    AND user_invites.email = $2
`

type ListOrganizationsByMatchingUserInviteParams struct {
	ProjectID uuid.UUID
	Email     string
}

func (q *Queries) ListOrganizationsByMatchingUserInvite(ctx context.Context, arg ListOrganizationsByMatchingUserInviteParams) ([]Organization, error) {
	rows, err := q.db.Query(ctx, listOrganizationsByMatchingUserInvite, arg.ProjectID, arg.Email)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Organization
	for rows.Next() {
		var i Organization
		if err := rows.Scan(
			&i.ID,
			&i.ProjectID,
			&i.DisplayName,
			&i.ScimEnabled,
			&i.CreateTime,
			&i.UpdateTime,
			&i.LoginsDisabled,
			&i.LogInWithGoogle,
			&i.LogInWithMicrosoft,
			&i.LogInWithPassword,
			&i.LogInWithAuthenticatorApp,
			&i.LogInWithPasskey,
			&i.RequireMfa,
			&i.LogInWithEmail,
			&i.LogInWithSaml,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listOrganizationsByMicrosoftTenantID = `-- name: ListOrganizationsByMicrosoftTenantID :many
SELECT
    organizations.id, organizations.project_id, organizations.display_name, organizations.scim_enabled, organizations.create_time, organizations.update_time, organizations.logins_disabled, organizations.log_in_with_google, organizations.log_in_with_microsoft, organizations.log_in_with_password, organizations.log_in_with_authenticator_app, organizations.log_in_with_passkey, organizations.require_mfa, organizations.log_in_with_email, organizations.log_in_with_saml
FROM
    organizations
    JOIN organization_microsoft_tenant_ids ON organizations.id = organization_microsoft_tenant_ids.organization_id
WHERE
    organizations.project_id = $1
    AND organization_microsoft_tenant_ids.microsoft_tenant_id = $2
    AND NOT organizations.logins_disabled
`

type ListOrganizationsByMicrosoftTenantIDParams struct {
	ProjectID         uuid.UUID
	MicrosoftTenantID string
}

func (q *Queries) ListOrganizationsByMicrosoftTenantID(ctx context.Context, arg ListOrganizationsByMicrosoftTenantIDParams) ([]Organization, error) {
	rows, err := q.db.Query(ctx, listOrganizationsByMicrosoftTenantID, arg.ProjectID, arg.MicrosoftTenantID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Organization
	for rows.Next() {
		var i Organization
		if err := rows.Scan(
			&i.ID,
			&i.ProjectID,
			&i.DisplayName,
			&i.ScimEnabled,
			&i.CreateTime,
			&i.UpdateTime,
			&i.LoginsDisabled,
			&i.LogInWithGoogle,
			&i.LogInWithMicrosoft,
			&i.LogInWithPassword,
			&i.LogInWithAuthenticatorApp,
			&i.LogInWithPasskey,
			&i.RequireMfa,
			&i.LogInWithEmail,
			&i.LogInWithSaml,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listSAMLOrganizations = `-- name: ListSAMLOrganizations :many
SELECT
    organizations.id, organizations.project_id, organizations.display_name, organizations.scim_enabled, organizations.create_time, organizations.update_time, organizations.logins_disabled, organizations.log_in_with_google, organizations.log_in_with_microsoft, organizations.log_in_with_password, organizations.log_in_with_authenticator_app, organizations.log_in_with_passkey, organizations.require_mfa, organizations.log_in_with_email, organizations.log_in_with_saml
FROM
    organizations
    JOIN organization_domains ON organizations.id = organization_domains.organization_id
WHERE
    organizations.project_id = $1
    AND organizations.log_in_with_saml = TRUE
    AND organization_domains.domain = $2
`

type ListSAMLOrganizationsParams struct {
	ProjectID uuid.UUID
	Domain    string
}

func (q *Queries) ListSAMLOrganizations(ctx context.Context, arg ListSAMLOrganizationsParams) ([]Organization, error) {
	rows, err := q.db.Query(ctx, listSAMLOrganizations, arg.ProjectID, arg.Domain)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Organization
	for rows.Next() {
		var i Organization
		if err := rows.Scan(
			&i.ID,
			&i.ProjectID,
			&i.DisplayName,
			&i.ScimEnabled,
			&i.CreateTime,
			&i.UpdateTime,
			&i.LoginsDisabled,
			&i.LogInWithGoogle,
			&i.LogInWithMicrosoft,
			&i.LogInWithPassword,
			&i.LogInWithAuthenticatorApp,
			&i.LogInWithPasskey,
			&i.RequireMfa,
			&i.LogInWithEmail,
			&i.LogInWithSaml,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const revokeIntermediateSession = `-- name: RevokeIntermediateSession :one
UPDATE
    intermediate_sessions
SET
    secret_token_sha256 = NULL
WHERE
    id = $1
RETURNING
    id, project_id, create_time, expire_time, email, google_oauth_state_sha256, microsoft_oauth_state_sha256, google_hosted_domain, google_user_id, microsoft_tenant_id, microsoft_user_id, password_verified, organization_id, update_time, secret_token_sha256, new_user_password_bcrypt, email_verification_challenge_sha256, email_verification_challenge_completed, passkey_credential_id, passkey_public_key, passkey_aaguid, passkey_verify_challenge_sha256, passkey_verified, authenticator_app_secret_ciphertext, authenticator_app_verified, authenticator_app_recovery_code_bcrypts, primary_login_factor
`

func (q *Queries) RevokeIntermediateSession(ctx context.Context, id uuid.UUID) (IntermediateSession, error) {
	row := q.db.QueryRow(ctx, revokeIntermediateSession, id)
	var i IntermediateSession
	err := row.Scan(
		&i.ID,
		&i.ProjectID,
		&i.CreateTime,
		&i.ExpireTime,
		&i.Email,
		&i.GoogleOauthStateSha256,
		&i.MicrosoftOauthStateSha256,
		&i.GoogleHostedDomain,
		&i.GoogleUserID,
		&i.MicrosoftTenantID,
		&i.MicrosoftUserID,
		&i.PasswordVerified,
		&i.OrganizationID,
		&i.UpdateTime,
		&i.SecretTokenSha256,
		&i.NewUserPasswordBcrypt,
		&i.EmailVerificationChallengeSha256,
		&i.EmailVerificationChallengeCompleted,
		&i.PasskeyCredentialID,
		&i.PasskeyPublicKey,
		&i.PasskeyAaguid,
		&i.PasskeyVerifyChallengeSha256,
		&i.PasskeyVerified,
		&i.AuthenticatorAppSecretCiphertext,
		&i.AuthenticatorAppVerified,
		&i.AuthenticatorAppRecoveryCodeBcrypts,
		&i.PrimaryLoginFactor,
	)
	return i, err
}

const revokeUserImpersonationToken = `-- name: RevokeUserImpersonationToken :one
UPDATE
    user_impersonation_tokens
SET
    secret_token_sha256 = NULL
WHERE
    id = $1
RETURNING
    id, impersonator_id, create_time, expire_time, impersonated_id, secret_token_sha256
`

func (q *Queries) RevokeUserImpersonationToken(ctx context.Context, id uuid.UUID) (UserImpersonationToken, error) {
	row := q.db.QueryRow(ctx, revokeUserImpersonationToken, id)
	var i UserImpersonationToken
	err := row.Scan(
		&i.ID,
		&i.ImpersonatorID,
		&i.CreateTime,
		&i.ExpireTime,
		&i.ImpersonatedID,
		&i.SecretTokenSha256,
	)
	return i, err
}

const updateIntermediateSessionAuthenticatorAppBackupCodeBcrypts = `-- name: UpdateIntermediateSessionAuthenticatorAppBackupCodeBcrypts :one
UPDATE
    intermediate_sessions
SET
    authenticator_app_recovery_code_bcrypts = $1,
    update_time = now()
WHERE
    id = $2
RETURNING
    id, project_id, create_time, expire_time, email, google_oauth_state_sha256, microsoft_oauth_state_sha256, google_hosted_domain, google_user_id, microsoft_tenant_id, microsoft_user_id, password_verified, organization_id, update_time, secret_token_sha256, new_user_password_bcrypt, email_verification_challenge_sha256, email_verification_challenge_completed, passkey_credential_id, passkey_public_key, passkey_aaguid, passkey_verify_challenge_sha256, passkey_verified, authenticator_app_secret_ciphertext, authenticator_app_verified, authenticator_app_recovery_code_bcrypts, primary_login_factor
`

type UpdateIntermediateSessionAuthenticatorAppBackupCodeBcryptsParams struct {
	AuthenticatorAppRecoveryCodeBcrypts [][]byte
	ID                                  uuid.UUID
}

func (q *Queries) UpdateIntermediateSessionAuthenticatorAppBackupCodeBcrypts(ctx context.Context, arg UpdateIntermediateSessionAuthenticatorAppBackupCodeBcryptsParams) (IntermediateSession, error) {
	row := q.db.QueryRow(ctx, updateIntermediateSessionAuthenticatorAppBackupCodeBcrypts, arg.AuthenticatorAppRecoveryCodeBcrypts, arg.ID)
	var i IntermediateSession
	err := row.Scan(
		&i.ID,
		&i.ProjectID,
		&i.CreateTime,
		&i.ExpireTime,
		&i.Email,
		&i.GoogleOauthStateSha256,
		&i.MicrosoftOauthStateSha256,
		&i.GoogleHostedDomain,
		&i.GoogleUserID,
		&i.MicrosoftTenantID,
		&i.MicrosoftUserID,
		&i.PasswordVerified,
		&i.OrganizationID,
		&i.UpdateTime,
		&i.SecretTokenSha256,
		&i.NewUserPasswordBcrypt,
		&i.EmailVerificationChallengeSha256,
		&i.EmailVerificationChallengeCompleted,
		&i.PasskeyCredentialID,
		&i.PasskeyPublicKey,
		&i.PasskeyAaguid,
		&i.PasskeyVerifyChallengeSha256,
		&i.PasskeyVerified,
		&i.AuthenticatorAppSecretCiphertext,
		&i.AuthenticatorAppVerified,
		&i.AuthenticatorAppRecoveryCodeBcrypts,
		&i.PrimaryLoginFactor,
	)
	return i, err
}

const updateIntermediateSessionAuthenticatorAppSecretCiphertext = `-- name: UpdateIntermediateSessionAuthenticatorAppSecretCiphertext :one
UPDATE
    intermediate_sessions
SET
    authenticator_app_secret_ciphertext = $1,
    update_time = now()
WHERE
    id = $2
RETURNING
    id, project_id, create_time, expire_time, email, google_oauth_state_sha256, microsoft_oauth_state_sha256, google_hosted_domain, google_user_id, microsoft_tenant_id, microsoft_user_id, password_verified, organization_id, update_time, secret_token_sha256, new_user_password_bcrypt, email_verification_challenge_sha256, email_verification_challenge_completed, passkey_credential_id, passkey_public_key, passkey_aaguid, passkey_verify_challenge_sha256, passkey_verified, authenticator_app_secret_ciphertext, authenticator_app_verified, authenticator_app_recovery_code_bcrypts, primary_login_factor
`

type UpdateIntermediateSessionAuthenticatorAppSecretCiphertextParams struct {
	AuthenticatorAppSecretCiphertext []byte
	ID                               uuid.UUID
}

func (q *Queries) UpdateIntermediateSessionAuthenticatorAppSecretCiphertext(ctx context.Context, arg UpdateIntermediateSessionAuthenticatorAppSecretCiphertextParams) (IntermediateSession, error) {
	row := q.db.QueryRow(ctx, updateIntermediateSessionAuthenticatorAppSecretCiphertext, arg.AuthenticatorAppSecretCiphertext, arg.ID)
	var i IntermediateSession
	err := row.Scan(
		&i.ID,
		&i.ProjectID,
		&i.CreateTime,
		&i.ExpireTime,
		&i.Email,
		&i.GoogleOauthStateSha256,
		&i.MicrosoftOauthStateSha256,
		&i.GoogleHostedDomain,
		&i.GoogleUserID,
		&i.MicrosoftTenantID,
		&i.MicrosoftUserID,
		&i.PasswordVerified,
		&i.OrganizationID,
		&i.UpdateTime,
		&i.SecretTokenSha256,
		&i.NewUserPasswordBcrypt,
		&i.EmailVerificationChallengeSha256,
		&i.EmailVerificationChallengeCompleted,
		&i.PasskeyCredentialID,
		&i.PasskeyPublicKey,
		&i.PasskeyAaguid,
		&i.PasskeyVerifyChallengeSha256,
		&i.PasskeyVerified,
		&i.AuthenticatorAppSecretCiphertext,
		&i.AuthenticatorAppVerified,
		&i.AuthenticatorAppRecoveryCodeBcrypts,
		&i.PrimaryLoginFactor,
	)
	return i, err
}

const updateIntermediateSessionAuthenticatorAppVerified = `-- name: UpdateIntermediateSessionAuthenticatorAppVerified :one
UPDATE
    intermediate_sessions
SET
    authenticator_app_verified = TRUE,
    update_time = now()
WHERE
    id = $1
RETURNING
    id, project_id, create_time, expire_time, email, google_oauth_state_sha256, microsoft_oauth_state_sha256, google_hosted_domain, google_user_id, microsoft_tenant_id, microsoft_user_id, password_verified, organization_id, update_time, secret_token_sha256, new_user_password_bcrypt, email_verification_challenge_sha256, email_verification_challenge_completed, passkey_credential_id, passkey_public_key, passkey_aaguid, passkey_verify_challenge_sha256, passkey_verified, authenticator_app_secret_ciphertext, authenticator_app_verified, authenticator_app_recovery_code_bcrypts, primary_login_factor
`

func (q *Queries) UpdateIntermediateSessionAuthenticatorAppVerified(ctx context.Context, id uuid.UUID) (IntermediateSession, error) {
	row := q.db.QueryRow(ctx, updateIntermediateSessionAuthenticatorAppVerified, id)
	var i IntermediateSession
	err := row.Scan(
		&i.ID,
		&i.ProjectID,
		&i.CreateTime,
		&i.ExpireTime,
		&i.Email,
		&i.GoogleOauthStateSha256,
		&i.MicrosoftOauthStateSha256,
		&i.GoogleHostedDomain,
		&i.GoogleUserID,
		&i.MicrosoftTenantID,
		&i.MicrosoftUserID,
		&i.PasswordVerified,
		&i.OrganizationID,
		&i.UpdateTime,
		&i.SecretTokenSha256,
		&i.NewUserPasswordBcrypt,
		&i.EmailVerificationChallengeSha256,
		&i.EmailVerificationChallengeCompleted,
		&i.PasskeyCredentialID,
		&i.PasskeyPublicKey,
		&i.PasskeyAaguid,
		&i.PasskeyVerifyChallengeSha256,
		&i.PasskeyVerified,
		&i.AuthenticatorAppSecretCiphertext,
		&i.AuthenticatorAppVerified,
		&i.AuthenticatorAppRecoveryCodeBcrypts,
		&i.PrimaryLoginFactor,
	)
	return i, err
}

const updateIntermediateSessionEmail = `-- name: UpdateIntermediateSessionEmail :one
UPDATE
    intermediate_sessions
SET
    email = $1
WHERE
    id = $2
    AND (email IS NULL
        OR email = $1)
RETURNING
    id, project_id, create_time, expire_time, email, google_oauth_state_sha256, microsoft_oauth_state_sha256, google_hosted_domain, google_user_id, microsoft_tenant_id, microsoft_user_id, password_verified, organization_id, update_time, secret_token_sha256, new_user_password_bcrypt, email_verification_challenge_sha256, email_verification_challenge_completed, passkey_credential_id, passkey_public_key, passkey_aaguid, passkey_verify_challenge_sha256, passkey_verified, authenticator_app_secret_ciphertext, authenticator_app_verified, authenticator_app_recovery_code_bcrypts, primary_login_factor
`

type UpdateIntermediateSessionEmailParams struct {
	Email *string
	ID    uuid.UUID
}

func (q *Queries) UpdateIntermediateSessionEmail(ctx context.Context, arg UpdateIntermediateSessionEmailParams) (IntermediateSession, error) {
	row := q.db.QueryRow(ctx, updateIntermediateSessionEmail, arg.Email, arg.ID)
	var i IntermediateSession
	err := row.Scan(
		&i.ID,
		&i.ProjectID,
		&i.CreateTime,
		&i.ExpireTime,
		&i.Email,
		&i.GoogleOauthStateSha256,
		&i.MicrosoftOauthStateSha256,
		&i.GoogleHostedDomain,
		&i.GoogleUserID,
		&i.MicrosoftTenantID,
		&i.MicrosoftUserID,
		&i.PasswordVerified,
		&i.OrganizationID,
		&i.UpdateTime,
		&i.SecretTokenSha256,
		&i.NewUserPasswordBcrypt,
		&i.EmailVerificationChallengeSha256,
		&i.EmailVerificationChallengeCompleted,
		&i.PasskeyCredentialID,
		&i.PasskeyPublicKey,
		&i.PasskeyAaguid,
		&i.PasskeyVerifyChallengeSha256,
		&i.PasskeyVerified,
		&i.AuthenticatorAppSecretCiphertext,
		&i.AuthenticatorAppVerified,
		&i.AuthenticatorAppRecoveryCodeBcrypts,
		&i.PrimaryLoginFactor,
	)
	return i, err
}

const updateIntermediateSessionEmailVerificationChallengeCompleted = `-- name: UpdateIntermediateSessionEmailVerificationChallengeCompleted :one
UPDATE
    intermediate_sessions
SET
    email_verification_challenge_completed = TRUE
WHERE
    id = $1
RETURNING
    id, project_id, create_time, expire_time, email, google_oauth_state_sha256, microsoft_oauth_state_sha256, google_hosted_domain, google_user_id, microsoft_tenant_id, microsoft_user_id, password_verified, organization_id, update_time, secret_token_sha256, new_user_password_bcrypt, email_verification_challenge_sha256, email_verification_challenge_completed, passkey_credential_id, passkey_public_key, passkey_aaguid, passkey_verify_challenge_sha256, passkey_verified, authenticator_app_secret_ciphertext, authenticator_app_verified, authenticator_app_recovery_code_bcrypts, primary_login_factor
`

func (q *Queries) UpdateIntermediateSessionEmailVerificationChallengeCompleted(ctx context.Context, id uuid.UUID) (IntermediateSession, error) {
	row := q.db.QueryRow(ctx, updateIntermediateSessionEmailVerificationChallengeCompleted, id)
	var i IntermediateSession
	err := row.Scan(
		&i.ID,
		&i.ProjectID,
		&i.CreateTime,
		&i.ExpireTime,
		&i.Email,
		&i.GoogleOauthStateSha256,
		&i.MicrosoftOauthStateSha256,
		&i.GoogleHostedDomain,
		&i.GoogleUserID,
		&i.MicrosoftTenantID,
		&i.MicrosoftUserID,
		&i.PasswordVerified,
		&i.OrganizationID,
		&i.UpdateTime,
		&i.SecretTokenSha256,
		&i.NewUserPasswordBcrypt,
		&i.EmailVerificationChallengeSha256,
		&i.EmailVerificationChallengeCompleted,
		&i.PasskeyCredentialID,
		&i.PasskeyPublicKey,
		&i.PasskeyAaguid,
		&i.PasskeyVerifyChallengeSha256,
		&i.PasskeyVerified,
		&i.AuthenticatorAppSecretCiphertext,
		&i.AuthenticatorAppVerified,
		&i.AuthenticatorAppRecoveryCodeBcrypts,
		&i.PrimaryLoginFactor,
	)
	return i, err
}

const updateIntermediateSessionEmailVerificationChallengeSha256 = `-- name: UpdateIntermediateSessionEmailVerificationChallengeSha256 :one
UPDATE
    intermediate_sessions
SET
    email_verification_challenge_sha256 = $1
WHERE
    id = $2
RETURNING
    id, project_id, create_time, expire_time, email, google_oauth_state_sha256, microsoft_oauth_state_sha256, google_hosted_domain, google_user_id, microsoft_tenant_id, microsoft_user_id, password_verified, organization_id, update_time, secret_token_sha256, new_user_password_bcrypt, email_verification_challenge_sha256, email_verification_challenge_completed, passkey_credential_id, passkey_public_key, passkey_aaguid, passkey_verify_challenge_sha256, passkey_verified, authenticator_app_secret_ciphertext, authenticator_app_verified, authenticator_app_recovery_code_bcrypts, primary_login_factor
`

type UpdateIntermediateSessionEmailVerificationChallengeSha256Params struct {
	EmailVerificationChallengeSha256 []byte
	ID                               uuid.UUID
}

func (q *Queries) UpdateIntermediateSessionEmailVerificationChallengeSha256(ctx context.Context, arg UpdateIntermediateSessionEmailVerificationChallengeSha256Params) (IntermediateSession, error) {
	row := q.db.QueryRow(ctx, updateIntermediateSessionEmailVerificationChallengeSha256, arg.EmailVerificationChallengeSha256, arg.ID)
	var i IntermediateSession
	err := row.Scan(
		&i.ID,
		&i.ProjectID,
		&i.CreateTime,
		&i.ExpireTime,
		&i.Email,
		&i.GoogleOauthStateSha256,
		&i.MicrosoftOauthStateSha256,
		&i.GoogleHostedDomain,
		&i.GoogleUserID,
		&i.MicrosoftTenantID,
		&i.MicrosoftUserID,
		&i.PasswordVerified,
		&i.OrganizationID,
		&i.UpdateTime,
		&i.SecretTokenSha256,
		&i.NewUserPasswordBcrypt,
		&i.EmailVerificationChallengeSha256,
		&i.EmailVerificationChallengeCompleted,
		&i.PasskeyCredentialID,
		&i.PasskeyPublicKey,
		&i.PasskeyAaguid,
		&i.PasskeyVerifyChallengeSha256,
		&i.PasskeyVerified,
		&i.AuthenticatorAppSecretCiphertext,
		&i.AuthenticatorAppVerified,
		&i.AuthenticatorAppRecoveryCodeBcrypts,
		&i.PrimaryLoginFactor,
	)
	return i, err
}

const updateIntermediateSessionGoogleDetails = `-- name: UpdateIntermediateSessionGoogleDetails :one
UPDATE
    intermediate_sessions
SET
    email = $1,
    google_user_id = $2,
    google_hosted_domain = $3
WHERE
    id = $4
RETURNING
    id, project_id, create_time, expire_time, email, google_oauth_state_sha256, microsoft_oauth_state_sha256, google_hosted_domain, google_user_id, microsoft_tenant_id, microsoft_user_id, password_verified, organization_id, update_time, secret_token_sha256, new_user_password_bcrypt, email_verification_challenge_sha256, email_verification_challenge_completed, passkey_credential_id, passkey_public_key, passkey_aaguid, passkey_verify_challenge_sha256, passkey_verified, authenticator_app_secret_ciphertext, authenticator_app_verified, authenticator_app_recovery_code_bcrypts, primary_login_factor
`

type UpdateIntermediateSessionGoogleDetailsParams struct {
	Email              *string
	GoogleUserID       *string
	GoogleHostedDomain *string
	ID                 uuid.UUID
}

func (q *Queries) UpdateIntermediateSessionGoogleDetails(ctx context.Context, arg UpdateIntermediateSessionGoogleDetailsParams) (IntermediateSession, error) {
	row := q.db.QueryRow(ctx, updateIntermediateSessionGoogleDetails,
		arg.Email,
		arg.GoogleUserID,
		arg.GoogleHostedDomain,
		arg.ID,
	)
	var i IntermediateSession
	err := row.Scan(
		&i.ID,
		&i.ProjectID,
		&i.CreateTime,
		&i.ExpireTime,
		&i.Email,
		&i.GoogleOauthStateSha256,
		&i.MicrosoftOauthStateSha256,
		&i.GoogleHostedDomain,
		&i.GoogleUserID,
		&i.MicrosoftTenantID,
		&i.MicrosoftUserID,
		&i.PasswordVerified,
		&i.OrganizationID,
		&i.UpdateTime,
		&i.SecretTokenSha256,
		&i.NewUserPasswordBcrypt,
		&i.EmailVerificationChallengeSha256,
		&i.EmailVerificationChallengeCompleted,
		&i.PasskeyCredentialID,
		&i.PasskeyPublicKey,
		&i.PasskeyAaguid,
		&i.PasskeyVerifyChallengeSha256,
		&i.PasskeyVerified,
		&i.AuthenticatorAppSecretCiphertext,
		&i.AuthenticatorAppVerified,
		&i.AuthenticatorAppRecoveryCodeBcrypts,
		&i.PrimaryLoginFactor,
	)
	return i, err
}

const updateIntermediateSessionGoogleOAuthStateSHA256 = `-- name: UpdateIntermediateSessionGoogleOAuthStateSHA256 :one
UPDATE
    intermediate_sessions
SET
    google_oauth_state_sha256 = $1
WHERE
    id = $2
RETURNING
    id, project_id, create_time, expire_time, email, google_oauth_state_sha256, microsoft_oauth_state_sha256, google_hosted_domain, google_user_id, microsoft_tenant_id, microsoft_user_id, password_verified, organization_id, update_time, secret_token_sha256, new_user_password_bcrypt, email_verification_challenge_sha256, email_verification_challenge_completed, passkey_credential_id, passkey_public_key, passkey_aaguid, passkey_verify_challenge_sha256, passkey_verified, authenticator_app_secret_ciphertext, authenticator_app_verified, authenticator_app_recovery_code_bcrypts, primary_login_factor
`

type UpdateIntermediateSessionGoogleOAuthStateSHA256Params struct {
	GoogleOauthStateSha256 []byte
	ID                     uuid.UUID
}

func (q *Queries) UpdateIntermediateSessionGoogleOAuthStateSHA256(ctx context.Context, arg UpdateIntermediateSessionGoogleOAuthStateSHA256Params) (IntermediateSession, error) {
	row := q.db.QueryRow(ctx, updateIntermediateSessionGoogleOAuthStateSHA256, arg.GoogleOauthStateSha256, arg.ID)
	var i IntermediateSession
	err := row.Scan(
		&i.ID,
		&i.ProjectID,
		&i.CreateTime,
		&i.ExpireTime,
		&i.Email,
		&i.GoogleOauthStateSha256,
		&i.MicrosoftOauthStateSha256,
		&i.GoogleHostedDomain,
		&i.GoogleUserID,
		&i.MicrosoftTenantID,
		&i.MicrosoftUserID,
		&i.PasswordVerified,
		&i.OrganizationID,
		&i.UpdateTime,
		&i.SecretTokenSha256,
		&i.NewUserPasswordBcrypt,
		&i.EmailVerificationChallengeSha256,
		&i.EmailVerificationChallengeCompleted,
		&i.PasskeyCredentialID,
		&i.PasskeyPublicKey,
		&i.PasskeyAaguid,
		&i.PasskeyVerifyChallengeSha256,
		&i.PasskeyVerified,
		&i.AuthenticatorAppSecretCiphertext,
		&i.AuthenticatorAppVerified,
		&i.AuthenticatorAppRecoveryCodeBcrypts,
		&i.PrimaryLoginFactor,
	)
	return i, err
}

const updateIntermediateSessionMicrosoftDetails = `-- name: UpdateIntermediateSessionMicrosoftDetails :one
UPDATE
    intermediate_sessions
SET
    email = $1,
    microsoft_user_id = $2,
    microsoft_tenant_id = $3
WHERE
    id = $4
RETURNING
    id, project_id, create_time, expire_time, email, google_oauth_state_sha256, microsoft_oauth_state_sha256, google_hosted_domain, google_user_id, microsoft_tenant_id, microsoft_user_id, password_verified, organization_id, update_time, secret_token_sha256, new_user_password_bcrypt, email_verification_challenge_sha256, email_verification_challenge_completed, passkey_credential_id, passkey_public_key, passkey_aaguid, passkey_verify_challenge_sha256, passkey_verified, authenticator_app_secret_ciphertext, authenticator_app_verified, authenticator_app_recovery_code_bcrypts, primary_login_factor
`

type UpdateIntermediateSessionMicrosoftDetailsParams struct {
	Email             *string
	MicrosoftUserID   *string
	MicrosoftTenantID *string
	ID                uuid.UUID
}

func (q *Queries) UpdateIntermediateSessionMicrosoftDetails(ctx context.Context, arg UpdateIntermediateSessionMicrosoftDetailsParams) (IntermediateSession, error) {
	row := q.db.QueryRow(ctx, updateIntermediateSessionMicrosoftDetails,
		arg.Email,
		arg.MicrosoftUserID,
		arg.MicrosoftTenantID,
		arg.ID,
	)
	var i IntermediateSession
	err := row.Scan(
		&i.ID,
		&i.ProjectID,
		&i.CreateTime,
		&i.ExpireTime,
		&i.Email,
		&i.GoogleOauthStateSha256,
		&i.MicrosoftOauthStateSha256,
		&i.GoogleHostedDomain,
		&i.GoogleUserID,
		&i.MicrosoftTenantID,
		&i.MicrosoftUserID,
		&i.PasswordVerified,
		&i.OrganizationID,
		&i.UpdateTime,
		&i.SecretTokenSha256,
		&i.NewUserPasswordBcrypt,
		&i.EmailVerificationChallengeSha256,
		&i.EmailVerificationChallengeCompleted,
		&i.PasskeyCredentialID,
		&i.PasskeyPublicKey,
		&i.PasskeyAaguid,
		&i.PasskeyVerifyChallengeSha256,
		&i.PasskeyVerified,
		&i.AuthenticatorAppSecretCiphertext,
		&i.AuthenticatorAppVerified,
		&i.AuthenticatorAppRecoveryCodeBcrypts,
		&i.PrimaryLoginFactor,
	)
	return i, err
}

const updateIntermediateSessionMicrosoftOAuthStateSHA256 = `-- name: UpdateIntermediateSessionMicrosoftOAuthStateSHA256 :one
UPDATE
    intermediate_sessions
SET
    microsoft_oauth_state_sha256 = $1
WHERE
    id = $2
RETURNING
    id, project_id, create_time, expire_time, email, google_oauth_state_sha256, microsoft_oauth_state_sha256, google_hosted_domain, google_user_id, microsoft_tenant_id, microsoft_user_id, password_verified, organization_id, update_time, secret_token_sha256, new_user_password_bcrypt, email_verification_challenge_sha256, email_verification_challenge_completed, passkey_credential_id, passkey_public_key, passkey_aaguid, passkey_verify_challenge_sha256, passkey_verified, authenticator_app_secret_ciphertext, authenticator_app_verified, authenticator_app_recovery_code_bcrypts, primary_login_factor
`

type UpdateIntermediateSessionMicrosoftOAuthStateSHA256Params struct {
	MicrosoftOauthStateSha256 []byte
	ID                        uuid.UUID
}

func (q *Queries) UpdateIntermediateSessionMicrosoftOAuthStateSHA256(ctx context.Context, arg UpdateIntermediateSessionMicrosoftOAuthStateSHA256Params) (IntermediateSession, error) {
	row := q.db.QueryRow(ctx, updateIntermediateSessionMicrosoftOAuthStateSHA256, arg.MicrosoftOauthStateSha256, arg.ID)
	var i IntermediateSession
	err := row.Scan(
		&i.ID,
		&i.ProjectID,
		&i.CreateTime,
		&i.ExpireTime,
		&i.Email,
		&i.GoogleOauthStateSha256,
		&i.MicrosoftOauthStateSha256,
		&i.GoogleHostedDomain,
		&i.GoogleUserID,
		&i.MicrosoftTenantID,
		&i.MicrosoftUserID,
		&i.PasswordVerified,
		&i.OrganizationID,
		&i.UpdateTime,
		&i.SecretTokenSha256,
		&i.NewUserPasswordBcrypt,
		&i.EmailVerificationChallengeSha256,
		&i.EmailVerificationChallengeCompleted,
		&i.PasskeyCredentialID,
		&i.PasskeyPublicKey,
		&i.PasskeyAaguid,
		&i.PasskeyVerifyChallengeSha256,
		&i.PasskeyVerified,
		&i.AuthenticatorAppSecretCiphertext,
		&i.AuthenticatorAppVerified,
		&i.AuthenticatorAppRecoveryCodeBcrypts,
		&i.PrimaryLoginFactor,
	)
	return i, err
}

const updateIntermediateSessionNewUserPasswordBcrypt = `-- name: UpdateIntermediateSessionNewUserPasswordBcrypt :one
UPDATE
    intermediate_sessions
SET
    new_user_password_bcrypt = $1,
    password_verified = TRUE
WHERE
    id = $2
RETURNING
    id, project_id, create_time, expire_time, email, google_oauth_state_sha256, microsoft_oauth_state_sha256, google_hosted_domain, google_user_id, microsoft_tenant_id, microsoft_user_id, password_verified, organization_id, update_time, secret_token_sha256, new_user_password_bcrypt, email_verification_challenge_sha256, email_verification_challenge_completed, passkey_credential_id, passkey_public_key, passkey_aaguid, passkey_verify_challenge_sha256, passkey_verified, authenticator_app_secret_ciphertext, authenticator_app_verified, authenticator_app_recovery_code_bcrypts, primary_login_factor
`

type UpdateIntermediateSessionNewUserPasswordBcryptParams struct {
	NewUserPasswordBcrypt *string
	ID                    uuid.UUID
}

func (q *Queries) UpdateIntermediateSessionNewUserPasswordBcrypt(ctx context.Context, arg UpdateIntermediateSessionNewUserPasswordBcryptParams) (IntermediateSession, error) {
	row := q.db.QueryRow(ctx, updateIntermediateSessionNewUserPasswordBcrypt, arg.NewUserPasswordBcrypt, arg.ID)
	var i IntermediateSession
	err := row.Scan(
		&i.ID,
		&i.ProjectID,
		&i.CreateTime,
		&i.ExpireTime,
		&i.Email,
		&i.GoogleOauthStateSha256,
		&i.MicrosoftOauthStateSha256,
		&i.GoogleHostedDomain,
		&i.GoogleUserID,
		&i.MicrosoftTenantID,
		&i.MicrosoftUserID,
		&i.PasswordVerified,
		&i.OrganizationID,
		&i.UpdateTime,
		&i.SecretTokenSha256,
		&i.NewUserPasswordBcrypt,
		&i.EmailVerificationChallengeSha256,
		&i.EmailVerificationChallengeCompleted,
		&i.PasskeyCredentialID,
		&i.PasskeyPublicKey,
		&i.PasskeyAaguid,
		&i.PasskeyVerifyChallengeSha256,
		&i.PasskeyVerified,
		&i.AuthenticatorAppSecretCiphertext,
		&i.AuthenticatorAppVerified,
		&i.AuthenticatorAppRecoveryCodeBcrypts,
		&i.PrimaryLoginFactor,
	)
	return i, err
}

const updateIntermediateSessionOrganizationID = `-- name: UpdateIntermediateSessionOrganizationID :one
UPDATE
    intermediate_sessions
SET
    organization_id = $1
WHERE
    id = $2
RETURNING
    id, project_id, create_time, expire_time, email, google_oauth_state_sha256, microsoft_oauth_state_sha256, google_hosted_domain, google_user_id, microsoft_tenant_id, microsoft_user_id, password_verified, organization_id, update_time, secret_token_sha256, new_user_password_bcrypt, email_verification_challenge_sha256, email_verification_challenge_completed, passkey_credential_id, passkey_public_key, passkey_aaguid, passkey_verify_challenge_sha256, passkey_verified, authenticator_app_secret_ciphertext, authenticator_app_verified, authenticator_app_recovery_code_bcrypts, primary_login_factor
`

type UpdateIntermediateSessionOrganizationIDParams struct {
	OrganizationID *uuid.UUID
	ID             uuid.UUID
}

func (q *Queries) UpdateIntermediateSessionOrganizationID(ctx context.Context, arg UpdateIntermediateSessionOrganizationIDParams) (IntermediateSession, error) {
	row := q.db.QueryRow(ctx, updateIntermediateSessionOrganizationID, arg.OrganizationID, arg.ID)
	var i IntermediateSession
	err := row.Scan(
		&i.ID,
		&i.ProjectID,
		&i.CreateTime,
		&i.ExpireTime,
		&i.Email,
		&i.GoogleOauthStateSha256,
		&i.MicrosoftOauthStateSha256,
		&i.GoogleHostedDomain,
		&i.GoogleUserID,
		&i.MicrosoftTenantID,
		&i.MicrosoftUserID,
		&i.PasswordVerified,
		&i.OrganizationID,
		&i.UpdateTime,
		&i.SecretTokenSha256,
		&i.NewUserPasswordBcrypt,
		&i.EmailVerificationChallengeSha256,
		&i.EmailVerificationChallengeCompleted,
		&i.PasskeyCredentialID,
		&i.PasskeyPublicKey,
		&i.PasskeyAaguid,
		&i.PasskeyVerifyChallengeSha256,
		&i.PasskeyVerified,
		&i.AuthenticatorAppSecretCiphertext,
		&i.AuthenticatorAppVerified,
		&i.AuthenticatorAppRecoveryCodeBcrypts,
		&i.PrimaryLoginFactor,
	)
	return i, err
}

const updateIntermediateSessionPasskeyVerified = `-- name: UpdateIntermediateSessionPasskeyVerified :one
UPDATE
    intermediate_sessions
SET
    passkey_verify_challenge_sha256 = NULL,
    passkey_verified = TRUE,
    update_time = now()
WHERE
    id = $1
RETURNING
    id, project_id, create_time, expire_time, email, google_oauth_state_sha256, microsoft_oauth_state_sha256, google_hosted_domain, google_user_id, microsoft_tenant_id, microsoft_user_id, password_verified, organization_id, update_time, secret_token_sha256, new_user_password_bcrypt, email_verification_challenge_sha256, email_verification_challenge_completed, passkey_credential_id, passkey_public_key, passkey_aaguid, passkey_verify_challenge_sha256, passkey_verified, authenticator_app_secret_ciphertext, authenticator_app_verified, authenticator_app_recovery_code_bcrypts, primary_login_factor
`

func (q *Queries) UpdateIntermediateSessionPasskeyVerified(ctx context.Context, id uuid.UUID) (IntermediateSession, error) {
	row := q.db.QueryRow(ctx, updateIntermediateSessionPasskeyVerified, id)
	var i IntermediateSession
	err := row.Scan(
		&i.ID,
		&i.ProjectID,
		&i.CreateTime,
		&i.ExpireTime,
		&i.Email,
		&i.GoogleOauthStateSha256,
		&i.MicrosoftOauthStateSha256,
		&i.GoogleHostedDomain,
		&i.GoogleUserID,
		&i.MicrosoftTenantID,
		&i.MicrosoftUserID,
		&i.PasswordVerified,
		&i.OrganizationID,
		&i.UpdateTime,
		&i.SecretTokenSha256,
		&i.NewUserPasswordBcrypt,
		&i.EmailVerificationChallengeSha256,
		&i.EmailVerificationChallengeCompleted,
		&i.PasskeyCredentialID,
		&i.PasskeyPublicKey,
		&i.PasskeyAaguid,
		&i.PasskeyVerifyChallengeSha256,
		&i.PasskeyVerified,
		&i.AuthenticatorAppSecretCiphertext,
		&i.AuthenticatorAppVerified,
		&i.AuthenticatorAppRecoveryCodeBcrypts,
		&i.PrimaryLoginFactor,
	)
	return i, err
}

const updateIntermediateSessionPasskeyVerifyChallengeSHA256 = `-- name: UpdateIntermediateSessionPasskeyVerifyChallengeSHA256 :one
UPDATE
    intermediate_sessions
SET
    passkey_verify_challenge_sha256 = $1,
    update_time = now()
WHERE
    id = $2
RETURNING
    id, project_id, create_time, expire_time, email, google_oauth_state_sha256, microsoft_oauth_state_sha256, google_hosted_domain, google_user_id, microsoft_tenant_id, microsoft_user_id, password_verified, organization_id, update_time, secret_token_sha256, new_user_password_bcrypt, email_verification_challenge_sha256, email_verification_challenge_completed, passkey_credential_id, passkey_public_key, passkey_aaguid, passkey_verify_challenge_sha256, passkey_verified, authenticator_app_secret_ciphertext, authenticator_app_verified, authenticator_app_recovery_code_bcrypts, primary_login_factor
`

type UpdateIntermediateSessionPasskeyVerifyChallengeSHA256Params struct {
	PasskeyVerifyChallengeSha256 []byte
	ID                           uuid.UUID
}

func (q *Queries) UpdateIntermediateSessionPasskeyVerifyChallengeSHA256(ctx context.Context, arg UpdateIntermediateSessionPasskeyVerifyChallengeSHA256Params) (IntermediateSession, error) {
	row := q.db.QueryRow(ctx, updateIntermediateSessionPasskeyVerifyChallengeSHA256, arg.PasskeyVerifyChallengeSha256, arg.ID)
	var i IntermediateSession
	err := row.Scan(
		&i.ID,
		&i.ProjectID,
		&i.CreateTime,
		&i.ExpireTime,
		&i.Email,
		&i.GoogleOauthStateSha256,
		&i.MicrosoftOauthStateSha256,
		&i.GoogleHostedDomain,
		&i.GoogleUserID,
		&i.MicrosoftTenantID,
		&i.MicrosoftUserID,
		&i.PasswordVerified,
		&i.OrganizationID,
		&i.UpdateTime,
		&i.SecretTokenSha256,
		&i.NewUserPasswordBcrypt,
		&i.EmailVerificationChallengeSha256,
		&i.EmailVerificationChallengeCompleted,
		&i.PasskeyCredentialID,
		&i.PasskeyPublicKey,
		&i.PasskeyAaguid,
		&i.PasskeyVerifyChallengeSha256,
		&i.PasskeyVerified,
		&i.AuthenticatorAppSecretCiphertext,
		&i.AuthenticatorAppVerified,
		&i.AuthenticatorAppRecoveryCodeBcrypts,
		&i.PrimaryLoginFactor,
	)
	return i, err
}

const updateIntermediateSessionPasswordVerified = `-- name: UpdateIntermediateSessionPasswordVerified :one
UPDATE
    intermediate_sessions
SET
    password_verified = TRUE,
    organization_id = $1
WHERE
    id = $2
RETURNING
    id, project_id, create_time, expire_time, email, google_oauth_state_sha256, microsoft_oauth_state_sha256, google_hosted_domain, google_user_id, microsoft_tenant_id, microsoft_user_id, password_verified, organization_id, update_time, secret_token_sha256, new_user_password_bcrypt, email_verification_challenge_sha256, email_verification_challenge_completed, passkey_credential_id, passkey_public_key, passkey_aaguid, passkey_verify_challenge_sha256, passkey_verified, authenticator_app_secret_ciphertext, authenticator_app_verified, authenticator_app_recovery_code_bcrypts, primary_login_factor
`

type UpdateIntermediateSessionPasswordVerifiedParams struct {
	OrganizationID *uuid.UUID
	ID             uuid.UUID
}

func (q *Queries) UpdateIntermediateSessionPasswordVerified(ctx context.Context, arg UpdateIntermediateSessionPasswordVerifiedParams) (IntermediateSession, error) {
	row := q.db.QueryRow(ctx, updateIntermediateSessionPasswordVerified, arg.OrganizationID, arg.ID)
	var i IntermediateSession
	err := row.Scan(
		&i.ID,
		&i.ProjectID,
		&i.CreateTime,
		&i.ExpireTime,
		&i.Email,
		&i.GoogleOauthStateSha256,
		&i.MicrosoftOauthStateSha256,
		&i.GoogleHostedDomain,
		&i.GoogleUserID,
		&i.MicrosoftTenantID,
		&i.MicrosoftUserID,
		&i.PasswordVerified,
		&i.OrganizationID,
		&i.UpdateTime,
		&i.SecretTokenSha256,
		&i.NewUserPasswordBcrypt,
		&i.EmailVerificationChallengeSha256,
		&i.EmailVerificationChallengeCompleted,
		&i.PasskeyCredentialID,
		&i.PasskeyPublicKey,
		&i.PasskeyAaguid,
		&i.PasskeyVerifyChallengeSha256,
		&i.PasskeyVerified,
		&i.AuthenticatorAppSecretCiphertext,
		&i.AuthenticatorAppVerified,
		&i.AuthenticatorAppRecoveryCodeBcrypts,
		&i.PrimaryLoginFactor,
	)
	return i, err
}

const updateIntermediateSessionPrimaryLoginFactor = `-- name: UpdateIntermediateSessionPrimaryLoginFactor :one
UPDATE
    intermediate_sessions
SET
    primary_login_factor = $1
WHERE
    id = $2
RETURNING
    id, project_id, create_time, expire_time, email, google_oauth_state_sha256, microsoft_oauth_state_sha256, google_hosted_domain, google_user_id, microsoft_tenant_id, microsoft_user_id, password_verified, organization_id, update_time, secret_token_sha256, new_user_password_bcrypt, email_verification_challenge_sha256, email_verification_challenge_completed, passkey_credential_id, passkey_public_key, passkey_aaguid, passkey_verify_challenge_sha256, passkey_verified, authenticator_app_secret_ciphertext, authenticator_app_verified, authenticator_app_recovery_code_bcrypts, primary_login_factor
`

type UpdateIntermediateSessionPrimaryLoginFactorParams struct {
	PrimaryLoginFactor *PrimaryLoginFactor
	ID                 uuid.UUID
}

func (q *Queries) UpdateIntermediateSessionPrimaryLoginFactor(ctx context.Context, arg UpdateIntermediateSessionPrimaryLoginFactorParams) (IntermediateSession, error) {
	row := q.db.QueryRow(ctx, updateIntermediateSessionPrimaryLoginFactor, arg.PrimaryLoginFactor, arg.ID)
	var i IntermediateSession
	err := row.Scan(
		&i.ID,
		&i.ProjectID,
		&i.CreateTime,
		&i.ExpireTime,
		&i.Email,
		&i.GoogleOauthStateSha256,
		&i.MicrosoftOauthStateSha256,
		&i.GoogleHostedDomain,
		&i.GoogleUserID,
		&i.MicrosoftTenantID,
		&i.MicrosoftUserID,
		&i.PasswordVerified,
		&i.OrganizationID,
		&i.UpdateTime,
		&i.SecretTokenSha256,
		&i.NewUserPasswordBcrypt,
		&i.EmailVerificationChallengeSha256,
		&i.EmailVerificationChallengeCompleted,
		&i.PasskeyCredentialID,
		&i.PasskeyPublicKey,
		&i.PasskeyAaguid,
		&i.PasskeyVerifyChallengeSha256,
		&i.PasskeyVerified,
		&i.AuthenticatorAppSecretCiphertext,
		&i.AuthenticatorAppVerified,
		&i.AuthenticatorAppRecoveryCodeBcrypts,
		&i.PrimaryLoginFactor,
	)
	return i, err
}

const updateIntermediateSessionRegisterPasskey = `-- name: UpdateIntermediateSessionRegisterPasskey :one
UPDATE
    intermediate_sessions
SET
    passkey_credential_id = $1,
    passkey_public_key = $2,
    passkey_aaguid = $3,
    passkey_verified = TRUE,
    update_time = now()
WHERE
    id = $4
RETURNING
    id, project_id, create_time, expire_time, email, google_oauth_state_sha256, microsoft_oauth_state_sha256, google_hosted_domain, google_user_id, microsoft_tenant_id, microsoft_user_id, password_verified, organization_id, update_time, secret_token_sha256, new_user_password_bcrypt, email_verification_challenge_sha256, email_verification_challenge_completed, passkey_credential_id, passkey_public_key, passkey_aaguid, passkey_verify_challenge_sha256, passkey_verified, authenticator_app_secret_ciphertext, authenticator_app_verified, authenticator_app_recovery_code_bcrypts, primary_login_factor
`

type UpdateIntermediateSessionRegisterPasskeyParams struct {
	PasskeyCredentialID []byte
	PasskeyPublicKey    []byte
	PasskeyAaguid       *string
	ID                  uuid.UUID
}

func (q *Queries) UpdateIntermediateSessionRegisterPasskey(ctx context.Context, arg UpdateIntermediateSessionRegisterPasskeyParams) (IntermediateSession, error) {
	row := q.db.QueryRow(ctx, updateIntermediateSessionRegisterPasskey,
		arg.PasskeyCredentialID,
		arg.PasskeyPublicKey,
		arg.PasskeyAaguid,
		arg.ID,
	)
	var i IntermediateSession
	err := row.Scan(
		&i.ID,
		&i.ProjectID,
		&i.CreateTime,
		&i.ExpireTime,
		&i.Email,
		&i.GoogleOauthStateSha256,
		&i.MicrosoftOauthStateSha256,
		&i.GoogleHostedDomain,
		&i.GoogleUserID,
		&i.MicrosoftTenantID,
		&i.MicrosoftUserID,
		&i.PasswordVerified,
		&i.OrganizationID,
		&i.UpdateTime,
		&i.SecretTokenSha256,
		&i.NewUserPasswordBcrypt,
		&i.EmailVerificationChallengeSha256,
		&i.EmailVerificationChallengeCompleted,
		&i.PasskeyCredentialID,
		&i.PasskeyPublicKey,
		&i.PasskeyAaguid,
		&i.PasskeyVerifyChallengeSha256,
		&i.PasskeyVerified,
		&i.AuthenticatorAppSecretCiphertext,
		&i.AuthenticatorAppVerified,
		&i.AuthenticatorAppRecoveryCodeBcrypts,
		&i.PrimaryLoginFactor,
	)
	return i, err
}

const updateUserAuthenticatorApp = `-- name: UpdateUserAuthenticatorApp :one
UPDATE
    users
SET
    authenticator_app_secret_ciphertext = $1,
    authenticator_app_recovery_code_bcrypts = $2
WHERE
    id = $3
RETURNING
    id, organization_id, password_bcrypt, google_user_id, microsoft_user_id, email, create_time, update_time, deactivate_time, is_owner, failed_password_attempts, password_lockout_expire_time, authenticator_app_secret_ciphertext, authenticator_app_recovery_code_bcrypts, failed_authenticator_app_attempts, authenticator_app_lockout_expire_time
`

type UpdateUserAuthenticatorAppParams struct {
	AuthenticatorAppSecretCiphertext    []byte
	AuthenticatorAppRecoveryCodeBcrypts [][]byte
	ID                                  uuid.UUID
}

func (q *Queries) UpdateUserAuthenticatorApp(ctx context.Context, arg UpdateUserAuthenticatorAppParams) (User, error) {
	row := q.db.QueryRow(ctx, updateUserAuthenticatorApp, arg.AuthenticatorAppSecretCiphertext, arg.AuthenticatorAppRecoveryCodeBcrypts, arg.ID)
	var i User
	err := row.Scan(
		&i.ID,
		&i.OrganizationID,
		&i.PasswordBcrypt,
		&i.GoogleUserID,
		&i.MicrosoftUserID,
		&i.Email,
		&i.CreateTime,
		&i.UpdateTime,
		&i.DeactivateTime,
		&i.IsOwner,
		&i.FailedPasswordAttempts,
		&i.PasswordLockoutExpireTime,
		&i.AuthenticatorAppSecretCiphertext,
		&i.AuthenticatorAppRecoveryCodeBcrypts,
		&i.FailedAuthenticatorAppAttempts,
		&i.AuthenticatorAppLockoutExpireTime,
	)
	return i, err
}

const updateUserAuthenticatorAppLockoutExpireTime = `-- name: UpdateUserAuthenticatorAppLockoutExpireTime :one
UPDATE
    users
SET
    authenticator_app_lockout_expire_time = $1
WHERE
    id = $2
RETURNING
    id, organization_id, password_bcrypt, google_user_id, microsoft_user_id, email, create_time, update_time, deactivate_time, is_owner, failed_password_attempts, password_lockout_expire_time, authenticator_app_secret_ciphertext, authenticator_app_recovery_code_bcrypts, failed_authenticator_app_attempts, authenticator_app_lockout_expire_time
`

type UpdateUserAuthenticatorAppLockoutExpireTimeParams struct {
	AuthenticatorAppLockoutExpireTime *time.Time
	ID                                uuid.UUID
}

func (q *Queries) UpdateUserAuthenticatorAppLockoutExpireTime(ctx context.Context, arg UpdateUserAuthenticatorAppLockoutExpireTimeParams) (User, error) {
	row := q.db.QueryRow(ctx, updateUserAuthenticatorAppLockoutExpireTime, arg.AuthenticatorAppLockoutExpireTime, arg.ID)
	var i User
	err := row.Scan(
		&i.ID,
		&i.OrganizationID,
		&i.PasswordBcrypt,
		&i.GoogleUserID,
		&i.MicrosoftUserID,
		&i.Email,
		&i.CreateTime,
		&i.UpdateTime,
		&i.DeactivateTime,
		&i.IsOwner,
		&i.FailedPasswordAttempts,
		&i.PasswordLockoutExpireTime,
		&i.AuthenticatorAppSecretCiphertext,
		&i.AuthenticatorAppRecoveryCodeBcrypts,
		&i.FailedAuthenticatorAppAttempts,
		&i.AuthenticatorAppLockoutExpireTime,
	)
	return i, err
}

const updateUserAuthenticatorAppRecoveryCodeBcrypts = `-- name: UpdateUserAuthenticatorAppRecoveryCodeBcrypts :one
UPDATE
    users
SET
    authenticator_app_recovery_code_bcrypts = $1
WHERE
    id = $2
RETURNING
    id, organization_id, password_bcrypt, google_user_id, microsoft_user_id, email, create_time, update_time, deactivate_time, is_owner, failed_password_attempts, password_lockout_expire_time, authenticator_app_secret_ciphertext, authenticator_app_recovery_code_bcrypts, failed_authenticator_app_attempts, authenticator_app_lockout_expire_time
`

type UpdateUserAuthenticatorAppRecoveryCodeBcryptsParams struct {
	AuthenticatorAppRecoveryCodeBcrypts [][]byte
	ID                                  uuid.UUID
}

func (q *Queries) UpdateUserAuthenticatorAppRecoveryCodeBcrypts(ctx context.Context, arg UpdateUserAuthenticatorAppRecoveryCodeBcryptsParams) (User, error) {
	row := q.db.QueryRow(ctx, updateUserAuthenticatorAppRecoveryCodeBcrypts, arg.AuthenticatorAppRecoveryCodeBcrypts, arg.ID)
	var i User
	err := row.Scan(
		&i.ID,
		&i.OrganizationID,
		&i.PasswordBcrypt,
		&i.GoogleUserID,
		&i.MicrosoftUserID,
		&i.Email,
		&i.CreateTime,
		&i.UpdateTime,
		&i.DeactivateTime,
		&i.IsOwner,
		&i.FailedPasswordAttempts,
		&i.PasswordLockoutExpireTime,
		&i.AuthenticatorAppSecretCiphertext,
		&i.AuthenticatorAppRecoveryCodeBcrypts,
		&i.FailedAuthenticatorAppAttempts,
		&i.AuthenticatorAppLockoutExpireTime,
	)
	return i, err
}

const updateUserFailedAuthenticatorAppAttempts = `-- name: UpdateUserFailedAuthenticatorAppAttempts :one
UPDATE
    users
SET
    failed_authenticator_app_attempts = $1
WHERE
    id = $2
RETURNING
    id, organization_id, password_bcrypt, google_user_id, microsoft_user_id, email, create_time, update_time, deactivate_time, is_owner, failed_password_attempts, password_lockout_expire_time, authenticator_app_secret_ciphertext, authenticator_app_recovery_code_bcrypts, failed_authenticator_app_attempts, authenticator_app_lockout_expire_time
`

type UpdateUserFailedAuthenticatorAppAttemptsParams struct {
	FailedAuthenticatorAppAttempts int32
	ID                             uuid.UUID
}

func (q *Queries) UpdateUserFailedAuthenticatorAppAttempts(ctx context.Context, arg UpdateUserFailedAuthenticatorAppAttemptsParams) (User, error) {
	row := q.db.QueryRow(ctx, updateUserFailedAuthenticatorAppAttempts, arg.FailedAuthenticatorAppAttempts, arg.ID)
	var i User
	err := row.Scan(
		&i.ID,
		&i.OrganizationID,
		&i.PasswordBcrypt,
		&i.GoogleUserID,
		&i.MicrosoftUserID,
		&i.Email,
		&i.CreateTime,
		&i.UpdateTime,
		&i.DeactivateTime,
		&i.IsOwner,
		&i.FailedPasswordAttempts,
		&i.PasswordLockoutExpireTime,
		&i.AuthenticatorAppSecretCiphertext,
		&i.AuthenticatorAppRecoveryCodeBcrypts,
		&i.FailedAuthenticatorAppAttempts,
		&i.AuthenticatorAppLockoutExpireTime,
	)
	return i, err
}

const updateUserFailedPasswordAttempts = `-- name: UpdateUserFailedPasswordAttempts :one
UPDATE
    users
SET
    failed_password_attempts = $1
WHERE
    id = $2
RETURNING
    id, organization_id, password_bcrypt, google_user_id, microsoft_user_id, email, create_time, update_time, deactivate_time, is_owner, failed_password_attempts, password_lockout_expire_time, authenticator_app_secret_ciphertext, authenticator_app_recovery_code_bcrypts, failed_authenticator_app_attempts, authenticator_app_lockout_expire_time
`

type UpdateUserFailedPasswordAttemptsParams struct {
	FailedPasswordAttempts int32
	ID                     uuid.UUID
}

func (q *Queries) UpdateUserFailedPasswordAttempts(ctx context.Context, arg UpdateUserFailedPasswordAttemptsParams) (User, error) {
	row := q.db.QueryRow(ctx, updateUserFailedPasswordAttempts, arg.FailedPasswordAttempts, arg.ID)
	var i User
	err := row.Scan(
		&i.ID,
		&i.OrganizationID,
		&i.PasswordBcrypt,
		&i.GoogleUserID,
		&i.MicrosoftUserID,
		&i.Email,
		&i.CreateTime,
		&i.UpdateTime,
		&i.DeactivateTime,
		&i.IsOwner,
		&i.FailedPasswordAttempts,
		&i.PasswordLockoutExpireTime,
		&i.AuthenticatorAppSecretCiphertext,
		&i.AuthenticatorAppRecoveryCodeBcrypts,
		&i.FailedAuthenticatorAppAttempts,
		&i.AuthenticatorAppLockoutExpireTime,
	)
	return i, err
}

const updateUserIsOwner = `-- name: UpdateUserIsOwner :one
UPDATE
    users
SET
    is_owner = $1
WHERE
    id = $2
RETURNING
    id, organization_id, password_bcrypt, google_user_id, microsoft_user_id, email, create_time, update_time, deactivate_time, is_owner, failed_password_attempts, password_lockout_expire_time, authenticator_app_secret_ciphertext, authenticator_app_recovery_code_bcrypts, failed_authenticator_app_attempts, authenticator_app_lockout_expire_time
`

type UpdateUserIsOwnerParams struct {
	IsOwner bool
	ID      uuid.UUID
}

func (q *Queries) UpdateUserIsOwner(ctx context.Context, arg UpdateUserIsOwnerParams) (User, error) {
	row := q.db.QueryRow(ctx, updateUserIsOwner, arg.IsOwner, arg.ID)
	var i User
	err := row.Scan(
		&i.ID,
		&i.OrganizationID,
		&i.PasswordBcrypt,
		&i.GoogleUserID,
		&i.MicrosoftUserID,
		&i.Email,
		&i.CreateTime,
		&i.UpdateTime,
		&i.DeactivateTime,
		&i.IsOwner,
		&i.FailedPasswordAttempts,
		&i.PasswordLockoutExpireTime,
		&i.AuthenticatorAppSecretCiphertext,
		&i.AuthenticatorAppRecoveryCodeBcrypts,
		&i.FailedAuthenticatorAppAttempts,
		&i.AuthenticatorAppLockoutExpireTime,
	)
	return i, err
}

const updateUserPasswordBcrypt = `-- name: UpdateUserPasswordBcrypt :one
UPDATE
    users
SET
    password_bcrypt = $1
WHERE
    id = $2
RETURNING
    id, organization_id, password_bcrypt, google_user_id, microsoft_user_id, email, create_time, update_time, deactivate_time, is_owner, failed_password_attempts, password_lockout_expire_time, authenticator_app_secret_ciphertext, authenticator_app_recovery_code_bcrypts, failed_authenticator_app_attempts, authenticator_app_lockout_expire_time
`

type UpdateUserPasswordBcryptParams struct {
	PasswordBcrypt *string
	ID             uuid.UUID
}

func (q *Queries) UpdateUserPasswordBcrypt(ctx context.Context, arg UpdateUserPasswordBcryptParams) (User, error) {
	row := q.db.QueryRow(ctx, updateUserPasswordBcrypt, arg.PasswordBcrypt, arg.ID)
	var i User
	err := row.Scan(
		&i.ID,
		&i.OrganizationID,
		&i.PasswordBcrypt,
		&i.GoogleUserID,
		&i.MicrosoftUserID,
		&i.Email,
		&i.CreateTime,
		&i.UpdateTime,
		&i.DeactivateTime,
		&i.IsOwner,
		&i.FailedPasswordAttempts,
		&i.PasswordLockoutExpireTime,
		&i.AuthenticatorAppSecretCiphertext,
		&i.AuthenticatorAppRecoveryCodeBcrypts,
		&i.FailedAuthenticatorAppAttempts,
		&i.AuthenticatorAppLockoutExpireTime,
	)
	return i, err
}

const updateUserPasswordLockoutExpireTime = `-- name: UpdateUserPasswordLockoutExpireTime :one
UPDATE
    users
SET
    password_lockout_expire_time = $1
WHERE
    id = $2
RETURNING
    id, organization_id, password_bcrypt, google_user_id, microsoft_user_id, email, create_time, update_time, deactivate_time, is_owner, failed_password_attempts, password_lockout_expire_time, authenticator_app_secret_ciphertext, authenticator_app_recovery_code_bcrypts, failed_authenticator_app_attempts, authenticator_app_lockout_expire_time
`

type UpdateUserPasswordLockoutExpireTimeParams struct {
	PasswordLockoutExpireTime *time.Time
	ID                        uuid.UUID
}

func (q *Queries) UpdateUserPasswordLockoutExpireTime(ctx context.Context, arg UpdateUserPasswordLockoutExpireTimeParams) (User, error) {
	row := q.db.QueryRow(ctx, updateUserPasswordLockoutExpireTime, arg.PasswordLockoutExpireTime, arg.ID)
	var i User
	err := row.Scan(
		&i.ID,
		&i.OrganizationID,
		&i.PasswordBcrypt,
		&i.GoogleUserID,
		&i.MicrosoftUserID,
		&i.Email,
		&i.CreateTime,
		&i.UpdateTime,
		&i.DeactivateTime,
		&i.IsOwner,
		&i.FailedPasswordAttempts,
		&i.PasswordLockoutExpireTime,
		&i.AuthenticatorAppSecretCiphertext,
		&i.AuthenticatorAppRecoveryCodeBcrypts,
		&i.FailedAuthenticatorAppAttempts,
		&i.AuthenticatorAppLockoutExpireTime,
	)
	return i, err
}
