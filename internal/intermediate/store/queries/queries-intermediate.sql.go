// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: queries-intermediate.sql

package queries

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const completeEmailVerificationChallenge = `-- name: CompleteEmailVerificationChallenge :one
UPDATE
    email_verification_challenges
SET
    complete_time = $1
WHERE
    id = $2
RETURNING
    id, project_id, challenge_sha256, complete_time, create_time, expire_time, intermediate_session_id, revoked
`

type CompleteEmailVerificationChallengeParams struct {
	CompleteTime *time.Time
	ID           uuid.UUID
}

func (q *Queries) CompleteEmailVerificationChallenge(ctx context.Context, arg CompleteEmailVerificationChallengeParams) (EmailVerificationChallenge, error) {
	row := q.db.QueryRow(ctx, completeEmailVerificationChallenge, arg.CompleteTime, arg.ID)
	var i EmailVerificationChallenge
	err := row.Scan(
		&i.ID,
		&i.ProjectID,
		&i.ChallengeSha256,
		&i.CompleteTime,
		&i.CreateTime,
		&i.ExpireTime,
		&i.IntermediateSessionID,
		&i.Revoked,
	)
	return i, err
}

const createEmailVerificationChallenge = `-- name: CreateEmailVerificationChallenge :one
INSERT INTO email_verification_challenges (id, project_id, intermediate_session_id, challenge_sha256, expire_time)
    VALUES ($1, $2, $3, $4, $5)
RETURNING
    id, project_id, challenge_sha256, complete_time, create_time, expire_time, intermediate_session_id, revoked
`

type CreateEmailVerificationChallengeParams struct {
	ID                    uuid.UUID
	ProjectID             uuid.UUID
	IntermediateSessionID uuid.UUID
	ChallengeSha256       []byte
	ExpireTime            *time.Time
}

func (q *Queries) CreateEmailVerificationChallenge(ctx context.Context, arg CreateEmailVerificationChallengeParams) (EmailVerificationChallenge, error) {
	row := q.db.QueryRow(ctx, createEmailVerificationChallenge,
		arg.ID,
		arg.ProjectID,
		arg.IntermediateSessionID,
		arg.ChallengeSha256,
		arg.ExpireTime,
	)
	var i EmailVerificationChallenge
	err := row.Scan(
		&i.ID,
		&i.ProjectID,
		&i.ChallengeSha256,
		&i.CompleteTime,
		&i.CreateTime,
		&i.ExpireTime,
		&i.IntermediateSessionID,
		&i.Revoked,
	)
	return i, err
}

const createIntermediateSession = `-- name: CreateIntermediateSession :one
INSERT INTO intermediate_sessions (id, project_id, expire_time, email, google_user_id, microsoft_user_id, token_sha256)
    VALUES ($1, $2, $3, $4, $5, $6, $7)
RETURNING
    id, project_id, create_time, expire_time, token_sha256, revoked, email, google_oauth_state_sha256, microsoft_oauth_state_sha256, google_hosted_domain, google_user_id, microsoft_tenant_id, microsoft_user_id, password_verified, organization_id
`

type CreateIntermediateSessionParams struct {
	ID              uuid.UUID
	ProjectID       uuid.UUID
	ExpireTime      *time.Time
	Email           *string
	GoogleUserID    *string
	MicrosoftUserID *string
	TokenSha256     []byte
}

func (q *Queries) CreateIntermediateSession(ctx context.Context, arg CreateIntermediateSessionParams) (IntermediateSession, error) {
	row := q.db.QueryRow(ctx, createIntermediateSession,
		arg.ID,
		arg.ProjectID,
		arg.ExpireTime,
		arg.Email,
		arg.GoogleUserID,
		arg.MicrosoftUserID,
		arg.TokenSha256,
	)
	var i IntermediateSession
	err := row.Scan(
		&i.ID,
		&i.ProjectID,
		&i.CreateTime,
		&i.ExpireTime,
		&i.TokenSha256,
		&i.Revoked,
		&i.Email,
		&i.GoogleOauthStateSha256,
		&i.MicrosoftOauthStateSha256,
		&i.GoogleHostedDomain,
		&i.GoogleUserID,
		&i.MicrosoftTenantID,
		&i.MicrosoftUserID,
		&i.PasswordVerified,
		&i.OrganizationID,
	)
	return i, err
}

const createOrganization = `-- name: CreateOrganization :one
INSERT INTO organizations (id, project_id, display_name, google_hosted_domain, microsoft_tenant_id, override_log_in_methods, override_log_in_with_google_enabled, override_log_in_with_microsoft_enabled, override_log_in_with_password_enabled, saml_enabled, scim_enabled)
    VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11)
RETURNING
    id, project_id, display_name, override_log_in_with_password_enabled, override_log_in_with_google_enabled, override_log_in_with_microsoft_enabled, google_hosted_domain, microsoft_tenant_id, override_log_in_methods, saml_enabled, scim_enabled, create_time, update_time
`

type CreateOrganizationParams struct {
	ID                                uuid.UUID
	ProjectID                         uuid.UUID
	DisplayName                       string
	GoogleHostedDomain                *string
	MicrosoftTenantID                 *string
	OverrideLogInMethods              bool
	OverrideLogInWithGoogleEnabled    *bool
	OverrideLogInWithMicrosoftEnabled *bool
	OverrideLogInWithPasswordEnabled  *bool
	SamlEnabled                       bool
	ScimEnabled                       bool
}

func (q *Queries) CreateOrganization(ctx context.Context, arg CreateOrganizationParams) (Organization, error) {
	row := q.db.QueryRow(ctx, createOrganization,
		arg.ID,
		arg.ProjectID,
		arg.DisplayName,
		arg.GoogleHostedDomain,
		arg.MicrosoftTenantID,
		arg.OverrideLogInMethods,
		arg.OverrideLogInWithGoogleEnabled,
		arg.OverrideLogInWithMicrosoftEnabled,
		arg.OverrideLogInWithPasswordEnabled,
		arg.SamlEnabled,
		arg.ScimEnabled,
	)
	var i Organization
	err := row.Scan(
		&i.ID,
		&i.ProjectID,
		&i.DisplayName,
		&i.OverrideLogInWithPasswordEnabled,
		&i.OverrideLogInWithGoogleEnabled,
		&i.OverrideLogInWithMicrosoftEnabled,
		&i.GoogleHostedDomain,
		&i.MicrosoftTenantID,
		&i.OverrideLogInMethods,
		&i.SamlEnabled,
		&i.ScimEnabled,
		&i.CreateTime,
		&i.UpdateTime,
	)
	return i, err
}

const createSession = `-- name: CreateSession :one
INSERT INTO sessions (id, user_id, expire_time, refresh_token_sha256, revoked)
    VALUES ($1, $2, $3, $4, $5)
RETURNING
    id, user_id, create_time, expire_time, revoked, refresh_token_sha256
`

type CreateSessionParams struct {
	ID                 uuid.UUID
	UserID             uuid.UUID
	ExpireTime         *time.Time
	RefreshTokenSha256 []byte
	Revoked            bool
}

func (q *Queries) CreateSession(ctx context.Context, arg CreateSessionParams) (Session, error) {
	row := q.db.QueryRow(ctx, createSession,
		arg.ID,
		arg.UserID,
		arg.ExpireTime,
		arg.RefreshTokenSha256,
		arg.Revoked,
	)
	var i Session
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.CreateTime,
		&i.ExpireTime,
		&i.Revoked,
		&i.RefreshTokenSha256,
	)
	return i, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users (id, organization_id, email, google_user_id, microsoft_user_id, is_owner)
    VALUES ($1, $2, $3, $4, $5, $6)
RETURNING
    id, organization_id, password_bcrypt, google_user_id, microsoft_user_id, email, create_time, update_time, deactivate_time, is_owner
`

type CreateUserParams struct {
	ID              uuid.UUID
	OrganizationID  uuid.UUID
	Email           string
	GoogleUserID    *string
	MicrosoftUserID *string
	IsOwner         bool
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.ID,
		arg.OrganizationID,
		arg.Email,
		arg.GoogleUserID,
		arg.MicrosoftUserID,
		arg.IsOwner,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.OrganizationID,
		&i.PasswordBcrypt,
		&i.GoogleUserID,
		&i.MicrosoftUserID,
		&i.Email,
		&i.CreateTime,
		&i.UpdateTime,
		&i.DeactivateTime,
		&i.IsOwner,
	)
	return i, err
}

const createVerifiedEmail = `-- name: CreateVerifiedEmail :one
INSERT INTO verified_emails (id, project_id, email, google_user_id, google_hosted_domain, microsoft_user_id, microsoft_tenant_id)
    VALUES ($1, $2, $3, $4, $5, $6, $7)
RETURNING
    id, project_id, create_time, email, google_user_id, microsoft_user_id, google_hosted_domain, microsoft_tenant_id
`

type CreateVerifiedEmailParams struct {
	ID                 uuid.UUID
	ProjectID          uuid.UUID
	Email              string
	GoogleUserID       *string
	GoogleHostedDomain *string
	MicrosoftUserID    *string
	MicrosoftTenantID  *string
}

func (q *Queries) CreateVerifiedEmail(ctx context.Context, arg CreateVerifiedEmailParams) (VerifiedEmail, error) {
	row := q.db.QueryRow(ctx, createVerifiedEmail,
		arg.ID,
		arg.ProjectID,
		arg.Email,
		arg.GoogleUserID,
		arg.GoogleHostedDomain,
		arg.MicrosoftUserID,
		arg.MicrosoftTenantID,
	)
	var i VerifiedEmail
	err := row.Scan(
		&i.ID,
		&i.ProjectID,
		&i.CreateTime,
		&i.Email,
		&i.GoogleUserID,
		&i.MicrosoftUserID,
		&i.GoogleHostedDomain,
		&i.MicrosoftTenantID,
	)
	return i, err
}

const getCurrentSessionKeyByProjectID = `-- name: GetCurrentSessionKeyByProjectID :one
SELECT
    id, project_id, public_key, private_key_cipher_text, create_time, expire_time
FROM
    session_signing_keys
WHERE
    project_id = $1
ORDER BY
    create_time DESC
LIMIT 1
`

func (q *Queries) GetCurrentSessionKeyByProjectID(ctx context.Context, projectID uuid.UUID) (SessionSigningKey, error) {
	row := q.db.QueryRow(ctx, getCurrentSessionKeyByProjectID, projectID)
	var i SessionSigningKey
	err := row.Scan(
		&i.ID,
		&i.ProjectID,
		&i.PublicKey,
		&i.PrivateKeyCipherText,
		&i.CreateTime,
		&i.ExpireTime,
	)
	return i, err
}

const getEmailVerificationChallengeByID = `-- name: GetEmailVerificationChallengeByID :one
SELECT
    id, project_id, challenge_sha256, complete_time, create_time, expire_time, intermediate_session_id, revoked
FROM
    email_verification_challenges
WHERE
    id = $1
`

func (q *Queries) GetEmailVerificationChallengeByID(ctx context.Context, id uuid.UUID) (EmailVerificationChallenge, error) {
	row := q.db.QueryRow(ctx, getEmailVerificationChallengeByID, id)
	var i EmailVerificationChallenge
	err := row.Scan(
		&i.ID,
		&i.ProjectID,
		&i.ChallengeSha256,
		&i.CompleteTime,
		&i.CreateTime,
		&i.ExpireTime,
		&i.IntermediateSessionID,
		&i.Revoked,
	)
	return i, err
}

const getEmailVerificationChallengeForCompletion = `-- name: GetEmailVerificationChallengeForCompletion :one
SELECT
    id, project_id, challenge_sha256, complete_time, create_time, expire_time, intermediate_session_id, revoked
FROM
    email_verification_challenges
WHERE
    project_id = $1
    AND intermediate_session_id = $2
    AND expire_time > $3
    AND revoked = FALSE
    AND complete_time IS NULL
ORDER BY
    create_time DESC
LIMIT 1
`

type GetEmailVerificationChallengeForCompletionParams struct {
	ProjectID             uuid.UUID
	IntermediateSessionID uuid.UUID
	ExpireTime            *time.Time
}

func (q *Queries) GetEmailVerificationChallengeForCompletion(ctx context.Context, arg GetEmailVerificationChallengeForCompletionParams) (EmailVerificationChallenge, error) {
	row := q.db.QueryRow(ctx, getEmailVerificationChallengeForCompletion, arg.ProjectID, arg.IntermediateSessionID, arg.ExpireTime)
	var i EmailVerificationChallenge
	err := row.Scan(
		&i.ID,
		&i.ProjectID,
		&i.ChallengeSha256,
		&i.CompleteTime,
		&i.CreateTime,
		&i.ExpireTime,
		&i.IntermediateSessionID,
		&i.Revoked,
	)
	return i, err
}

const getIntermediateSessionByID = `-- name: GetIntermediateSessionByID :one
SELECT
    id, project_id, create_time, expire_time, token_sha256, revoked, email, google_oauth_state_sha256, microsoft_oauth_state_sha256, google_hosted_domain, google_user_id, microsoft_tenant_id, microsoft_user_id, password_verified, organization_id
FROM
    intermediate_sessions
WHERE
    id = $1
`

func (q *Queries) GetIntermediateSessionByID(ctx context.Context, id uuid.UUID) (IntermediateSession, error) {
	row := q.db.QueryRow(ctx, getIntermediateSessionByID, id)
	var i IntermediateSession
	err := row.Scan(
		&i.ID,
		&i.ProjectID,
		&i.CreateTime,
		&i.ExpireTime,
		&i.TokenSha256,
		&i.Revoked,
		&i.Email,
		&i.GoogleOauthStateSha256,
		&i.MicrosoftOauthStateSha256,
		&i.GoogleHostedDomain,
		&i.GoogleUserID,
		&i.MicrosoftTenantID,
		&i.MicrosoftUserID,
		&i.PasswordVerified,
		&i.OrganizationID,
	)
	return i, err
}

const getIntermediateSessionByTokenSHA256 = `-- name: GetIntermediateSessionByTokenSHA256 :one
SELECT
    id, project_id, create_time, expire_time, token_sha256, revoked, email, google_oauth_state_sha256, microsoft_oauth_state_sha256, google_hosted_domain, google_user_id, microsoft_tenant_id, microsoft_user_id, password_verified, organization_id
FROM
    intermediate_sessions
WHERE
    token_sha256 = $1
`

func (q *Queries) GetIntermediateSessionByTokenSHA256(ctx context.Context, tokenSha256 []byte) (IntermediateSession, error) {
	row := q.db.QueryRow(ctx, getIntermediateSessionByTokenSHA256, tokenSha256)
	var i IntermediateSession
	err := row.Scan(
		&i.ID,
		&i.ProjectID,
		&i.CreateTime,
		&i.ExpireTime,
		&i.TokenSha256,
		&i.Revoked,
		&i.Email,
		&i.GoogleOauthStateSha256,
		&i.MicrosoftOauthStateSha256,
		&i.GoogleHostedDomain,
		&i.GoogleUserID,
		&i.MicrosoftTenantID,
		&i.MicrosoftUserID,
		&i.PasswordVerified,
		&i.OrganizationID,
	)
	return i, err
}

const getIntermediateSessionSigningKeyByID = `-- name: GetIntermediateSessionSigningKeyByID :one
SELECT
    id, project_id, public_key, private_key_cipher_text, create_time, expire_time
FROM
    intermediate_session_signing_keys
WHERE
    id = $1
`

func (q *Queries) GetIntermediateSessionSigningKeyByID(ctx context.Context, id uuid.UUID) (IntermediateSessionSigningKey, error) {
	row := q.db.QueryRow(ctx, getIntermediateSessionSigningKeyByID, id)
	var i IntermediateSessionSigningKey
	err := row.Scan(
		&i.ID,
		&i.ProjectID,
		&i.PublicKey,
		&i.PrivateKeyCipherText,
		&i.CreateTime,
		&i.ExpireTime,
	)
	return i, err
}

const getIntermediateSessionSigningKeyByProjectID = `-- name: GetIntermediateSessionSigningKeyByProjectID :one
SELECT
    id, project_id, public_key, private_key_cipher_text, create_time, expire_time
FROM
    intermediate_session_signing_keys
WHERE
    project_id = $1
ORDER BY
    create_time DESC
LIMIT 1
`

func (q *Queries) GetIntermediateSessionSigningKeyByProjectID(ctx context.Context, projectID uuid.UUID) (IntermediateSessionSigningKey, error) {
	row := q.db.QueryRow(ctx, getIntermediateSessionSigningKeyByProjectID, projectID)
	var i IntermediateSessionSigningKey
	err := row.Scan(
		&i.ID,
		&i.ProjectID,
		&i.PublicKey,
		&i.PrivateKeyCipherText,
		&i.CreateTime,
		&i.ExpireTime,
	)
	return i, err
}

const getOrganizationPrimarySAMLConnection = `-- name: GetOrganizationPrimarySAMLConnection :one
SELECT
    id, organization_id, create_time, is_primary, idp_redirect_url, idp_x509_certificate, idp_entity_id, update_time
FROM
    saml_connections
WHERE
    organization_id = $1
    AND is_primary = TRUE
LIMIT 1
`

func (q *Queries) GetOrganizationPrimarySAMLConnection(ctx context.Context, organizationID uuid.UUID) (SamlConnection, error) {
	row := q.db.QueryRow(ctx, getOrganizationPrimarySAMLConnection, organizationID)
	var i SamlConnection
	err := row.Scan(
		&i.ID,
		&i.OrganizationID,
		&i.CreateTime,
		&i.IsPrimary,
		&i.IdpRedirectUrl,
		&i.IdpX509Certificate,
		&i.IdpEntityID,
		&i.UpdateTime,
	)
	return i, err
}

const getOrganizationUserByEmail = `-- name: GetOrganizationUserByEmail :one
SELECT
    id, organization_id, password_bcrypt, google_user_id, microsoft_user_id, email, create_time, update_time, deactivate_time, is_owner
FROM
    users
WHERE
    organization_id = $1
    AND email = $2
`

type GetOrganizationUserByEmailParams struct {
	OrganizationID uuid.UUID
	Email          string
}

func (q *Queries) GetOrganizationUserByEmail(ctx context.Context, arg GetOrganizationUserByEmailParams) (User, error) {
	row := q.db.QueryRow(ctx, getOrganizationUserByEmail, arg.OrganizationID, arg.Email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.OrganizationID,
		&i.PasswordBcrypt,
		&i.GoogleUserID,
		&i.MicrosoftUserID,
		&i.Email,
		&i.CreateTime,
		&i.UpdateTime,
		&i.DeactivateTime,
		&i.IsOwner,
	)
	return i, err
}

const getOrganizationUserByGoogleUserID = `-- name: GetOrganizationUserByGoogleUserID :one
SELECT
    id, organization_id, password_bcrypt, google_user_id, microsoft_user_id, email, create_time, update_time, deactivate_time, is_owner
FROM
    users
WHERE
    organization_id = $1
    AND google_user_id = $2
`

type GetOrganizationUserByGoogleUserIDParams struct {
	OrganizationID uuid.UUID
	GoogleUserID   *string
}

func (q *Queries) GetOrganizationUserByGoogleUserID(ctx context.Context, arg GetOrganizationUserByGoogleUserIDParams) (User, error) {
	row := q.db.QueryRow(ctx, getOrganizationUserByGoogleUserID, arg.OrganizationID, arg.GoogleUserID)
	var i User
	err := row.Scan(
		&i.ID,
		&i.OrganizationID,
		&i.PasswordBcrypt,
		&i.GoogleUserID,
		&i.MicrosoftUserID,
		&i.Email,
		&i.CreateTime,
		&i.UpdateTime,
		&i.DeactivateTime,
		&i.IsOwner,
	)
	return i, err
}

const getOrganizationUserByMicrosoftUserID = `-- name: GetOrganizationUserByMicrosoftUserID :one
SELECT
    id, organization_id, password_bcrypt, google_user_id, microsoft_user_id, email, create_time, update_time, deactivate_time, is_owner
FROM
    users
WHERE
    organization_id = $1
    AND microsoft_user_id = $2
`

type GetOrganizationUserByMicrosoftUserIDParams struct {
	OrganizationID  uuid.UUID
	MicrosoftUserID *string
}

func (q *Queries) GetOrganizationUserByMicrosoftUserID(ctx context.Context, arg GetOrganizationUserByMicrosoftUserIDParams) (User, error) {
	row := q.db.QueryRow(ctx, getOrganizationUserByMicrosoftUserID, arg.OrganizationID, arg.MicrosoftUserID)
	var i User
	err := row.Scan(
		&i.ID,
		&i.OrganizationID,
		&i.PasswordBcrypt,
		&i.GoogleUserID,
		&i.MicrosoftUserID,
		&i.Email,
		&i.CreateTime,
		&i.UpdateTime,
		&i.DeactivateTime,
		&i.IsOwner,
	)
	return i, err
}

const getProjectByID = `-- name: GetProjectByID :one
SELECT
    id, organization_id, log_in_with_password_enabled, log_in_with_google_enabled, log_in_with_microsoft_enabled, google_oauth_client_id, microsoft_oauth_client_id, google_oauth_client_secret_ciphertext, microsoft_oauth_client_secret_ciphertext, display_name, organizations_saml_enabled_default, organizations_scim_enabled_default, create_time, update_time, custom_auth_domain, auth_domain
FROM
    projects
WHERE
    id = $1
`

func (q *Queries) GetProjectByID(ctx context.Context, id uuid.UUID) (Project, error) {
	row := q.db.QueryRow(ctx, getProjectByID, id)
	var i Project
	err := row.Scan(
		&i.ID,
		&i.OrganizationID,
		&i.LogInWithPasswordEnabled,
		&i.LogInWithGoogleEnabled,
		&i.LogInWithMicrosoftEnabled,
		&i.GoogleOauthClientID,
		&i.MicrosoftOauthClientID,
		&i.GoogleOauthClientSecretCiphertext,
		&i.MicrosoftOauthClientSecretCiphertext,
		&i.DisplayName,
		&i.OrganizationsSamlEnabledDefault,
		&i.OrganizationsScimEnabledDefault,
		&i.CreateTime,
		&i.UpdateTime,
		&i.CustomAuthDomain,
		&i.AuthDomain,
	)
	return i, err
}

const getProjectOrganizationByID = `-- name: GetProjectOrganizationByID :one
SELECT
    id, project_id, display_name, override_log_in_with_password_enabled, override_log_in_with_google_enabled, override_log_in_with_microsoft_enabled, google_hosted_domain, microsoft_tenant_id, override_log_in_methods, saml_enabled, scim_enabled, create_time, update_time
FROM
    organizations
WHERE
    id = $1
    AND project_id = $2
`

type GetProjectOrganizationByIDParams struct {
	ID        uuid.UUID
	ProjectID uuid.UUID
}

func (q *Queries) GetProjectOrganizationByID(ctx context.Context, arg GetProjectOrganizationByIDParams) (Organization, error) {
	row := q.db.QueryRow(ctx, getProjectOrganizationByID, arg.ID, arg.ProjectID)
	var i Organization
	err := row.Scan(
		&i.ID,
		&i.ProjectID,
		&i.DisplayName,
		&i.OverrideLogInWithPasswordEnabled,
		&i.OverrideLogInWithGoogleEnabled,
		&i.OverrideLogInWithMicrosoftEnabled,
		&i.GoogleHostedDomain,
		&i.MicrosoftTenantID,
		&i.OverrideLogInMethods,
		&i.SamlEnabled,
		&i.ScimEnabled,
		&i.CreateTime,
		&i.UpdateTime,
	)
	return i, err
}

const getProjectUISettings = `-- name: GetProjectUISettings :one
SELECT
    id, project_id, primary_color, detect_dark_mode_enabled, dark_mode_primary_color, create_time, update_time
FROM
    project_ui_settings
WHERE
    project_id = $1
`

func (q *Queries) GetProjectUISettings(ctx context.Context, projectID uuid.UUID) (ProjectUiSetting, error) {
	row := q.db.QueryRow(ctx, getProjectUISettings, projectID)
	var i ProjectUiSetting
	err := row.Scan(
		&i.ID,
		&i.ProjectID,
		&i.PrimaryColor,
		&i.DetectDarkModeEnabled,
		&i.DarkModePrimaryColor,
		&i.CreateTime,
		&i.UpdateTime,
	)
	return i, err
}

const getSessionSigningKeysByProjectID = `-- name: GetSessionSigningKeysByProjectID :many
SELECT
    id, project_id, public_key, private_key_cipher_text, create_time, expire_time
FROM
    session_signing_keys
WHERE
    project_id = $1
`

func (q *Queries) GetSessionSigningKeysByProjectID(ctx context.Context, projectID uuid.UUID) ([]SessionSigningKey, error) {
	rows, err := q.db.Query(ctx, getSessionSigningKeysByProjectID, projectID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SessionSigningKey
	for rows.Next() {
		var i SessionSigningKey
		if err := rows.Scan(
			&i.ID,
			&i.ProjectID,
			&i.PublicKey,
			&i.PrivateKeyCipherText,
			&i.CreateTime,
			&i.ExpireTime,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserByOrganizationIDAndFactors = `-- name: GetUserByOrganizationIDAndFactors :one
SELECT
    id, organization_id, password_bcrypt, google_user_id, microsoft_user_id, email, create_time, update_time, deactivate_time, is_owner
FROM
    users
WHERE
    organization_id = $1
    AND (google_user_id = $2
        OR microsoft_user_id = $3
        OR email = $4)
`

type GetUserByOrganizationIDAndFactorsParams struct {
	OrganizationID  uuid.UUID
	GoogleUserID    *string
	MicrosoftUserID *string
	Email           string
}

func (q *Queries) GetUserByOrganizationIDAndFactors(ctx context.Context, arg GetUserByOrganizationIDAndFactorsParams) (User, error) {
	row := q.db.QueryRow(ctx, getUserByOrganizationIDAndFactors,
		arg.OrganizationID,
		arg.GoogleUserID,
		arg.MicrosoftUserID,
		arg.Email,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.OrganizationID,
		&i.PasswordBcrypt,
		&i.GoogleUserID,
		&i.MicrosoftUserID,
		&i.Email,
		&i.CreateTime,
		&i.UpdateTime,
		&i.DeactivateTime,
		&i.IsOwner,
	)
	return i, err
}

const isGoogleEmailVerified = `-- name: IsGoogleEmailVerified :one
SELECT
    count(*) > 0
FROM
    verified_emails
WHERE
    project_id = $1
    AND email = $2
    AND google_user_id = $3
`

type IsGoogleEmailVerifiedParams struct {
	ProjectID    uuid.UUID
	Email        string
	GoogleUserID *string
}

func (q *Queries) IsGoogleEmailVerified(ctx context.Context, arg IsGoogleEmailVerifiedParams) (bool, error) {
	row := q.db.QueryRow(ctx, isGoogleEmailVerified, arg.ProjectID, arg.Email, arg.GoogleUserID)
	var column_1 bool
	err := row.Scan(&column_1)
	return column_1, err
}

const isMicrosoftEmailVerified = `-- name: IsMicrosoftEmailVerified :one
SELECT
    count(*) > 0
FROM
    verified_emails
WHERE
    project_id = $1
    AND email = $2
    AND microsoft_user_id = $3
`

type IsMicrosoftEmailVerifiedParams struct {
	ProjectID       uuid.UUID
	Email           string
	MicrosoftUserID *string
}

func (q *Queries) IsMicrosoftEmailVerified(ctx context.Context, arg IsMicrosoftEmailVerifiedParams) (bool, error) {
	row := q.db.QueryRow(ctx, isMicrosoftEmailVerified, arg.ProjectID, arg.Email, arg.MicrosoftUserID)
	var column_1 bool
	err := row.Scan(&column_1)
	return column_1, err
}

const listOrganizationsByEmail = `-- name: ListOrganizationsByEmail :many
SELECT
    organizations.id, organizations.project_id, organizations.display_name, organizations.override_log_in_with_password_enabled, organizations.override_log_in_with_google_enabled, organizations.override_log_in_with_microsoft_enabled, organizations.google_hosted_domain, organizations.microsoft_tenant_id, organizations.override_log_in_methods, organizations.saml_enabled, organizations.scim_enabled, organizations.create_time, organizations.update_time
FROM
    organizations
    JOIN users ON organizations.id = users.organization_id
WHERE
    organizations.project_id = $1
    AND users.email = $2
    AND users.google_user_id IS NULL
    AND users.microsoft_user_id IS NULL
    AND organizations.id >= $3
ORDER BY
    organizations.id
LIMIT $4
`

type ListOrganizationsByEmailParams struct {
	ProjectID uuid.UUID
	Email     string
	ID        uuid.UUID
	Limit     int32
}

func (q *Queries) ListOrganizationsByEmail(ctx context.Context, arg ListOrganizationsByEmailParams) ([]Organization, error) {
	rows, err := q.db.Query(ctx, listOrganizationsByEmail,
		arg.ProjectID,
		arg.Email,
		arg.ID,
		arg.Limit,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Organization
	for rows.Next() {
		var i Organization
		if err := rows.Scan(
			&i.ID,
			&i.ProjectID,
			&i.DisplayName,
			&i.OverrideLogInWithPasswordEnabled,
			&i.OverrideLogInWithGoogleEnabled,
			&i.OverrideLogInWithMicrosoftEnabled,
			&i.GoogleHostedDomain,
			&i.MicrosoftTenantID,
			&i.OverrideLogInMethods,
			&i.SamlEnabled,
			&i.ScimEnabled,
			&i.CreateTime,
			&i.UpdateTime,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listOrganizationsByGoogleUserID = `-- name: ListOrganizationsByGoogleUserID :many
SELECT
    organizations.id, organizations.project_id, organizations.display_name, organizations.override_log_in_with_password_enabled, organizations.override_log_in_with_google_enabled, organizations.override_log_in_with_microsoft_enabled, organizations.google_hosted_domain, organizations.microsoft_tenant_id, organizations.override_log_in_methods, organizations.saml_enabled, organizations.scim_enabled, organizations.create_time, organizations.update_time
FROM
    organizations
    JOIN users ON organizations.id = users.organization_id
WHERE
    organizations.project_id = $1
    AND users.email = $2
    AND users.google_user_id = $3
    AND organizations.id >= $4
ORDER BY
    organizations.id
LIMIT $5
`

type ListOrganizationsByGoogleUserIDParams struct {
	ProjectID    uuid.UUID
	Email        string
	GoogleUserID *string
	ID           uuid.UUID
	Limit        int32
}

func (q *Queries) ListOrganizationsByGoogleUserID(ctx context.Context, arg ListOrganizationsByGoogleUserIDParams) ([]Organization, error) {
	rows, err := q.db.Query(ctx, listOrganizationsByGoogleUserID,
		arg.ProjectID,
		arg.Email,
		arg.GoogleUserID,
		arg.ID,
		arg.Limit,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Organization
	for rows.Next() {
		var i Organization
		if err := rows.Scan(
			&i.ID,
			&i.ProjectID,
			&i.DisplayName,
			&i.OverrideLogInWithPasswordEnabled,
			&i.OverrideLogInWithGoogleEnabled,
			&i.OverrideLogInWithMicrosoftEnabled,
			&i.GoogleHostedDomain,
			&i.MicrosoftTenantID,
			&i.OverrideLogInMethods,
			&i.SamlEnabled,
			&i.ScimEnabled,
			&i.CreateTime,
			&i.UpdateTime,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listOrganizationsByMicrosoftUserID = `-- name: ListOrganizationsByMicrosoftUserID :many
SELECT
    organizations.id, organizations.project_id, organizations.display_name, organizations.override_log_in_with_password_enabled, organizations.override_log_in_with_google_enabled, organizations.override_log_in_with_microsoft_enabled, organizations.google_hosted_domain, organizations.microsoft_tenant_id, organizations.override_log_in_methods, organizations.saml_enabled, organizations.scim_enabled, organizations.create_time, organizations.update_time
FROM
    organizations
    JOIN users ON organizations.id = users.organization_id
WHERE
    organizations.project_id = $1
    AND users.email = $2
    AND users.microsoft_user_id = $3
    AND organizations.id >= $4
ORDER BY
    organizations.id
LIMIT $5
`

type ListOrganizationsByMicrosoftUserIDParams struct {
	ProjectID       uuid.UUID
	Email           string
	MicrosoftUserID *string
	ID              uuid.UUID
	Limit           int32
}

func (q *Queries) ListOrganizationsByMicrosoftUserID(ctx context.Context, arg ListOrganizationsByMicrosoftUserIDParams) ([]Organization, error) {
	rows, err := q.db.Query(ctx, listOrganizationsByMicrosoftUserID,
		arg.ProjectID,
		arg.Email,
		arg.MicrosoftUserID,
		arg.ID,
		arg.Limit,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Organization
	for rows.Next() {
		var i Organization
		if err := rows.Scan(
			&i.ID,
			&i.ProjectID,
			&i.DisplayName,
			&i.OverrideLogInWithPasswordEnabled,
			&i.OverrideLogInWithGoogleEnabled,
			&i.OverrideLogInWithMicrosoftEnabled,
			&i.GoogleHostedDomain,
			&i.MicrosoftTenantID,
			&i.OverrideLogInMethods,
			&i.SamlEnabled,
			&i.ScimEnabled,
			&i.CreateTime,
			&i.UpdateTime,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listSAMLOrganizations = `-- name: ListSAMLOrganizations :many
SELECT
    organizations.id, organizations.project_id, organizations.display_name, organizations.override_log_in_with_password_enabled, organizations.override_log_in_with_google_enabled, organizations.override_log_in_with_microsoft_enabled, organizations.google_hosted_domain, organizations.microsoft_tenant_id, organizations.override_log_in_methods, organizations.saml_enabled, organizations.scim_enabled, organizations.create_time, organizations.update_time
FROM
    organizations
    JOIN organization_domains ON organizations.id = organization_domains.organization_id
WHERE
    organizations.project_id = $1
    AND organizations.saml_enabled = TRUE
    AND organization_domains.domain = $2
`

type ListSAMLOrganizationsParams struct {
	ProjectID uuid.UUID
	Domain    string
}

func (q *Queries) ListSAMLOrganizations(ctx context.Context, arg ListSAMLOrganizationsParams) ([]Organization, error) {
	rows, err := q.db.Query(ctx, listSAMLOrganizations, arg.ProjectID, arg.Domain)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Organization
	for rows.Next() {
		var i Organization
		if err := rows.Scan(
			&i.ID,
			&i.ProjectID,
			&i.DisplayName,
			&i.OverrideLogInWithPasswordEnabled,
			&i.OverrideLogInWithGoogleEnabled,
			&i.OverrideLogInWithMicrosoftEnabled,
			&i.GoogleHostedDomain,
			&i.MicrosoftTenantID,
			&i.OverrideLogInMethods,
			&i.SamlEnabled,
			&i.ScimEnabled,
			&i.CreateTime,
			&i.UpdateTime,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listUsersByEmail = `-- name: ListUsersByEmail :many
SELECT
    id, organization_id, password_bcrypt, google_user_id, microsoft_user_id, email, create_time, update_time, deactivate_time, is_owner
FROM
    users
WHERE
    email = $1
`

func (q *Queries) ListUsersByEmail(ctx context.Context, email string) ([]User, error) {
	rows, err := q.db.Query(ctx, listUsersByEmail, email)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.OrganizationID,
			&i.PasswordBcrypt,
			&i.GoogleUserID,
			&i.MicrosoftUserID,
			&i.Email,
			&i.CreateTime,
			&i.UpdateTime,
			&i.DeactivateTime,
			&i.IsOwner,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const revokeEmailVerificationChallenge = `-- name: RevokeEmailVerificationChallenge :one
UPDATE
    email_verification_challenges
SET
    revoked = TRUE
WHERE
    id = $1
RETURNING
    id, project_id, challenge_sha256, complete_time, create_time, expire_time, intermediate_session_id, revoked
`

func (q *Queries) RevokeEmailVerificationChallenge(ctx context.Context, id uuid.UUID) (EmailVerificationChallenge, error) {
	row := q.db.QueryRow(ctx, revokeEmailVerificationChallenge, id)
	var i EmailVerificationChallenge
	err := row.Scan(
		&i.ID,
		&i.ProjectID,
		&i.ChallengeSha256,
		&i.CompleteTime,
		&i.CreateTime,
		&i.ExpireTime,
		&i.IntermediateSessionID,
		&i.Revoked,
	)
	return i, err
}

const revokeIntermediateSession = `-- name: RevokeIntermediateSession :one
UPDATE
    intermediate_sessions
SET
    revoked = TRUE
WHERE
    id = $1
RETURNING
    id, project_id, create_time, expire_time, token_sha256, revoked, email, google_oauth_state_sha256, microsoft_oauth_state_sha256, google_hosted_domain, google_user_id, microsoft_tenant_id, microsoft_user_id, password_verified, organization_id
`

func (q *Queries) RevokeIntermediateSession(ctx context.Context, id uuid.UUID) (IntermediateSession, error) {
	row := q.db.QueryRow(ctx, revokeIntermediateSession, id)
	var i IntermediateSession
	err := row.Scan(
		&i.ID,
		&i.ProjectID,
		&i.CreateTime,
		&i.ExpireTime,
		&i.TokenSha256,
		&i.Revoked,
		&i.Email,
		&i.GoogleOauthStateSha256,
		&i.MicrosoftOauthStateSha256,
		&i.GoogleHostedDomain,
		&i.GoogleUserID,
		&i.MicrosoftTenantID,
		&i.MicrosoftUserID,
		&i.PasswordVerified,
		&i.OrganizationID,
	)
	return i, err
}

const updateIntermediateSessionGoogleDetails = `-- name: UpdateIntermediateSessionGoogleDetails :one
UPDATE
    intermediate_sessions
SET
    email = $1,
    google_user_id = $2,
    google_hosted_domain = $3
WHERE
    id = $4
RETURNING
    id, project_id, create_time, expire_time, token_sha256, revoked, email, google_oauth_state_sha256, microsoft_oauth_state_sha256, google_hosted_domain, google_user_id, microsoft_tenant_id, microsoft_user_id, password_verified, organization_id
`

type UpdateIntermediateSessionGoogleDetailsParams struct {
	Email              *string
	GoogleUserID       *string
	GoogleHostedDomain *string
	ID                 uuid.UUID
}

func (q *Queries) UpdateIntermediateSessionGoogleDetails(ctx context.Context, arg UpdateIntermediateSessionGoogleDetailsParams) (IntermediateSession, error) {
	row := q.db.QueryRow(ctx, updateIntermediateSessionGoogleDetails,
		arg.Email,
		arg.GoogleUserID,
		arg.GoogleHostedDomain,
		arg.ID,
	)
	var i IntermediateSession
	err := row.Scan(
		&i.ID,
		&i.ProjectID,
		&i.CreateTime,
		&i.ExpireTime,
		&i.TokenSha256,
		&i.Revoked,
		&i.Email,
		&i.GoogleOauthStateSha256,
		&i.MicrosoftOauthStateSha256,
		&i.GoogleHostedDomain,
		&i.GoogleUserID,
		&i.MicrosoftTenantID,
		&i.MicrosoftUserID,
		&i.PasswordVerified,
		&i.OrganizationID,
	)
	return i, err
}

const updateIntermediateSessionGoogleOAuthStateSHA256 = `-- name: UpdateIntermediateSessionGoogleOAuthStateSHA256 :one
UPDATE
    intermediate_sessions
SET
    google_oauth_state_sha256 = $1
WHERE
    id = $2
RETURNING
    id, project_id, create_time, expire_time, token_sha256, revoked, email, google_oauth_state_sha256, microsoft_oauth_state_sha256, google_hosted_domain, google_user_id, microsoft_tenant_id, microsoft_user_id, password_verified, organization_id
`

type UpdateIntermediateSessionGoogleOAuthStateSHA256Params struct {
	GoogleOauthStateSha256 []byte
	ID                     uuid.UUID
}

func (q *Queries) UpdateIntermediateSessionGoogleOAuthStateSHA256(ctx context.Context, arg UpdateIntermediateSessionGoogleOAuthStateSHA256Params) (IntermediateSession, error) {
	row := q.db.QueryRow(ctx, updateIntermediateSessionGoogleOAuthStateSHA256, arg.GoogleOauthStateSha256, arg.ID)
	var i IntermediateSession
	err := row.Scan(
		&i.ID,
		&i.ProjectID,
		&i.CreateTime,
		&i.ExpireTime,
		&i.TokenSha256,
		&i.Revoked,
		&i.Email,
		&i.GoogleOauthStateSha256,
		&i.MicrosoftOauthStateSha256,
		&i.GoogleHostedDomain,
		&i.GoogleUserID,
		&i.MicrosoftTenantID,
		&i.MicrosoftUserID,
		&i.PasswordVerified,
		&i.OrganizationID,
	)
	return i, err
}

const updateIntermediateSessionMicrosoftDetails = `-- name: UpdateIntermediateSessionMicrosoftDetails :one
UPDATE
    intermediate_sessions
SET
    email = $1,
    microsoft_user_id = $2,
    microsoft_tenant_id = $3
WHERE
    id = $4
RETURNING
    id, project_id, create_time, expire_time, token_sha256, revoked, email, google_oauth_state_sha256, microsoft_oauth_state_sha256, google_hosted_domain, google_user_id, microsoft_tenant_id, microsoft_user_id, password_verified, organization_id
`

type UpdateIntermediateSessionMicrosoftDetailsParams struct {
	Email             *string
	MicrosoftUserID   *string
	MicrosoftTenantID *string
	ID                uuid.UUID
}

func (q *Queries) UpdateIntermediateSessionMicrosoftDetails(ctx context.Context, arg UpdateIntermediateSessionMicrosoftDetailsParams) (IntermediateSession, error) {
	row := q.db.QueryRow(ctx, updateIntermediateSessionMicrosoftDetails,
		arg.Email,
		arg.MicrosoftUserID,
		arg.MicrosoftTenantID,
		arg.ID,
	)
	var i IntermediateSession
	err := row.Scan(
		&i.ID,
		&i.ProjectID,
		&i.CreateTime,
		&i.ExpireTime,
		&i.TokenSha256,
		&i.Revoked,
		&i.Email,
		&i.GoogleOauthStateSha256,
		&i.MicrosoftOauthStateSha256,
		&i.GoogleHostedDomain,
		&i.GoogleUserID,
		&i.MicrosoftTenantID,
		&i.MicrosoftUserID,
		&i.PasswordVerified,
		&i.OrganizationID,
	)
	return i, err
}

const updateIntermediateSessionMicrosoftOAuthStateSHA256 = `-- name: UpdateIntermediateSessionMicrosoftOAuthStateSHA256 :one
UPDATE
    intermediate_sessions
SET
    microsoft_oauth_state_sha256 = $1
WHERE
    id = $2
RETURNING
    id, project_id, create_time, expire_time, token_sha256, revoked, email, google_oauth_state_sha256, microsoft_oauth_state_sha256, google_hosted_domain, google_user_id, microsoft_tenant_id, microsoft_user_id, password_verified, organization_id
`

type UpdateIntermediateSessionMicrosoftOAuthStateSHA256Params struct {
	MicrosoftOauthStateSha256 []byte
	ID                        uuid.UUID
}

func (q *Queries) UpdateIntermediateSessionMicrosoftOAuthStateSHA256(ctx context.Context, arg UpdateIntermediateSessionMicrosoftOAuthStateSHA256Params) (IntermediateSession, error) {
	row := q.db.QueryRow(ctx, updateIntermediateSessionMicrosoftOAuthStateSHA256, arg.MicrosoftOauthStateSha256, arg.ID)
	var i IntermediateSession
	err := row.Scan(
		&i.ID,
		&i.ProjectID,
		&i.CreateTime,
		&i.ExpireTime,
		&i.TokenSha256,
		&i.Revoked,
		&i.Email,
		&i.GoogleOauthStateSha256,
		&i.MicrosoftOauthStateSha256,
		&i.GoogleHostedDomain,
		&i.GoogleUserID,
		&i.MicrosoftTenantID,
		&i.MicrosoftUserID,
		&i.PasswordVerified,
		&i.OrganizationID,
	)
	return i, err
}

const updateIntermediateSessionPasswordVerified = `-- name: UpdateIntermediateSessionPasswordVerified :one
UPDATE
    intermediate_sessions
SET
    password_verified = TRUE,
    organization_id = $1
WHERE
    id = $2
RETURNING
    id, project_id, create_time, expire_time, token_sha256, revoked, email, google_oauth_state_sha256, microsoft_oauth_state_sha256, google_hosted_domain, google_user_id, microsoft_tenant_id, microsoft_user_id, password_verified, organization_id
`

type UpdateIntermediateSessionPasswordVerifiedParams struct {
	OrganizationID *uuid.UUID
	ID             uuid.UUID
}

func (q *Queries) UpdateIntermediateSessionPasswordVerified(ctx context.Context, arg UpdateIntermediateSessionPasswordVerifiedParams) (IntermediateSession, error) {
	row := q.db.QueryRow(ctx, updateIntermediateSessionPasswordVerified, arg.OrganizationID, arg.ID)
	var i IntermediateSession
	err := row.Scan(
		&i.ID,
		&i.ProjectID,
		&i.CreateTime,
		&i.ExpireTime,
		&i.TokenSha256,
		&i.Revoked,
		&i.Email,
		&i.GoogleOauthStateSha256,
		&i.MicrosoftOauthStateSha256,
		&i.GoogleHostedDomain,
		&i.GoogleUserID,
		&i.MicrosoftTenantID,
		&i.MicrosoftUserID,
		&i.PasswordVerified,
		&i.OrganizationID,
	)
	return i, err
}
