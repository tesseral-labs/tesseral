// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: openauth/intermediate/v1/intermediate.proto

package intermediatev1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/openauth/openauth/internal/intermediate/gen/openauth/intermediate/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// IntermediateServiceName is the fully-qualified name of the IntermediateService service.
	IntermediateServiceName = "openauth.intermediate.v1.IntermediateService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// IntermediateServiceListSAMLOrganizationsProcedure is the fully-qualified name of the
	// IntermediateService's ListSAMLOrganizations RPC.
	IntermediateServiceListSAMLOrganizationsProcedure = "/openauth.intermediate.v1.IntermediateService/ListSAMLOrganizations"
	// IntermediateServiceGetSettingsProcedure is the fully-qualified name of the IntermediateService's
	// GetSettings RPC.
	IntermediateServiceGetSettingsProcedure = "/openauth.intermediate.v1.IntermediateService/GetSettings"
	// IntermediateServiceRedeemUserImpersonationTokenProcedure is the fully-qualified name of the
	// IntermediateService's RedeemUserImpersonationToken RPC.
	IntermediateServiceRedeemUserImpersonationTokenProcedure = "/openauth.intermediate.v1.IntermediateService/RedeemUserImpersonationToken"
	// IntermediateServiceCreateIntermediateSessionProcedure is the fully-qualified name of the
	// IntermediateService's CreateIntermediateSession RPC.
	IntermediateServiceCreateIntermediateSessionProcedure = "/openauth.intermediate.v1.IntermediateService/CreateIntermediateSession"
	// IntermediateServiceWhoamiProcedure is the fully-qualified name of the IntermediateService's
	// Whoami RPC.
	IntermediateServiceWhoamiProcedure = "/openauth.intermediate.v1.IntermediateService/Whoami"
	// IntermediateServiceCreateOrganizationProcedure is the fully-qualified name of the
	// IntermediateService's CreateOrganization RPC.
	IntermediateServiceCreateOrganizationProcedure = "/openauth.intermediate.v1.IntermediateService/CreateOrganization"
	// IntermediateServiceListOrganizationsProcedure is the fully-qualified name of the
	// IntermediateService's ListOrganizations RPC.
	IntermediateServiceListOrganizationsProcedure = "/openauth.intermediate.v1.IntermediateService/ListOrganizations"
	// IntermediateServiceSetOrganizationProcedure is the fully-qualified name of the
	// IntermediateService's SetOrganization RPC.
	IntermediateServiceSetOrganizationProcedure = "/openauth.intermediate.v1.IntermediateService/SetOrganization"
	// IntermediateServiceExchangeIntermediateSessionForSessionProcedure is the fully-qualified name of
	// the IntermediateService's ExchangeIntermediateSessionForSession RPC.
	IntermediateServiceExchangeIntermediateSessionForSessionProcedure = "/openauth.intermediate.v1.IntermediateService/ExchangeIntermediateSessionForSession"
	// IntermediateServiceGetGoogleOAuthRedirectURLProcedure is the fully-qualified name of the
	// IntermediateService's GetGoogleOAuthRedirectURL RPC.
	IntermediateServiceGetGoogleOAuthRedirectURLProcedure = "/openauth.intermediate.v1.IntermediateService/GetGoogleOAuthRedirectURL"
	// IntermediateServiceRedeemGoogleOAuthCodeProcedure is the fully-qualified name of the
	// IntermediateService's RedeemGoogleOAuthCode RPC.
	IntermediateServiceRedeemGoogleOAuthCodeProcedure = "/openauth.intermediate.v1.IntermediateService/RedeemGoogleOAuthCode"
	// IntermediateServiceGetMicrosoftOAuthRedirectURLProcedure is the fully-qualified name of the
	// IntermediateService's GetMicrosoftOAuthRedirectURL RPC.
	IntermediateServiceGetMicrosoftOAuthRedirectURLProcedure = "/openauth.intermediate.v1.IntermediateService/GetMicrosoftOAuthRedirectURL"
	// IntermediateServiceRedeemMicrosoftOAuthCodeProcedure is the fully-qualified name of the
	// IntermediateService's RedeemMicrosoftOAuthCode RPC.
	IntermediateServiceRedeemMicrosoftOAuthCodeProcedure = "/openauth.intermediate.v1.IntermediateService/RedeemMicrosoftOAuthCode"
	// IntermediateServiceIssueEmailVerificationChallengeProcedure is the fully-qualified name of the
	// IntermediateService's IssueEmailVerificationChallenge RPC.
	IntermediateServiceIssueEmailVerificationChallengeProcedure = "/openauth.intermediate.v1.IntermediateService/IssueEmailVerificationChallenge"
	// IntermediateServiceVerifyEmailChallengeProcedure is the fully-qualified name of the
	// IntermediateService's VerifyEmailChallenge RPC.
	IntermediateServiceVerifyEmailChallengeProcedure = "/openauth.intermediate.v1.IntermediateService/VerifyEmailChallenge"
	// IntermediateServiceRegisterPasswordProcedure is the fully-qualified name of the
	// IntermediateService's RegisterPassword RPC.
	IntermediateServiceRegisterPasswordProcedure = "/openauth.intermediate.v1.IntermediateService/RegisterPassword"
	// IntermediateServiceVerifyPasswordProcedure is the fully-qualified name of the
	// IntermediateService's VerifyPassword RPC.
	IntermediateServiceVerifyPasswordProcedure = "/openauth.intermediate.v1.IntermediateService/VerifyPassword"
	// IntermediateServiceGetPasskeyOptionsProcedure is the fully-qualified name of the
	// IntermediateService's GetPasskeyOptions RPC.
	IntermediateServiceGetPasskeyOptionsProcedure = "/openauth.intermediate.v1.IntermediateService/GetPasskeyOptions"
	// IntermediateServiceRegisterPasskeyProcedure is the fully-qualified name of the
	// IntermediateService's RegisterPasskey RPC.
	IntermediateServiceRegisterPasskeyProcedure = "/openauth.intermediate.v1.IntermediateService/RegisterPasskey"
	// IntermediateServiceIssuePasskeyChallengeProcedure is the fully-qualified name of the
	// IntermediateService's IssuePasskeyChallenge RPC.
	IntermediateServiceIssuePasskeyChallengeProcedure = "/openauth.intermediate.v1.IntermediateService/IssuePasskeyChallenge"
	// IntermediateServiceVerifyPasskeyProcedure is the fully-qualified name of the
	// IntermediateService's VerifyPasskey RPC.
	IntermediateServiceVerifyPasskeyProcedure = "/openauth.intermediate.v1.IntermediateService/VerifyPasskey"
	// IntermediateServiceGetAuthenticatorAppOptionsProcedure is the fully-qualified name of the
	// IntermediateService's GetAuthenticatorAppOptions RPC.
	IntermediateServiceGetAuthenticatorAppOptionsProcedure = "/openauth.intermediate.v1.IntermediateService/GetAuthenticatorAppOptions"
	// IntermediateServiceRegisterAuthenticatorAppProcedure is the fully-qualified name of the
	// IntermediateService's RegisterAuthenticatorApp RPC.
	IntermediateServiceRegisterAuthenticatorAppProcedure = "/openauth.intermediate.v1.IntermediateService/RegisterAuthenticatorApp"
	// IntermediateServiceVerifyAuthenticatorAppProcedure is the fully-qualified name of the
	// IntermediateService's VerifyAuthenticatorApp RPC.
	IntermediateServiceVerifyAuthenticatorAppProcedure = "/openauth.intermediate.v1.IntermediateService/VerifyAuthenticatorApp"
	// IntermediateServiceSetEmailAsPrimaryLoginFactorProcedure is the fully-qualified name of the
	// IntermediateService's SetEmailAsPrimaryLoginFactor RPC.
	IntermediateServiceSetEmailAsPrimaryLoginFactorProcedure = "/openauth.intermediate.v1.IntermediateService/SetEmailAsPrimaryLoginFactor"
	// IntermediateServiceCreateProjectProcedure is the fully-qualified name of the
	// IntermediateService's CreateProject RPC.
	IntermediateServiceCreateProjectProcedure = "/openauth.intermediate.v1.IntermediateService/CreateProject"
)

// IntermediateServiceClient is a client for the openauth.intermediate.v1.IntermediateService
// service.
type IntermediateServiceClient interface {
	ListSAMLOrganizations(context.Context, *connect.Request[v1.ListSAMLOrganizationsRequest]) (*connect.Response[v1.ListSAMLOrganizationsResponse], error)
	GetSettings(context.Context, *connect.Request[v1.GetSettingsRequest]) (*connect.Response[v1.GetSettingsResponse], error)
	RedeemUserImpersonationToken(context.Context, *connect.Request[v1.RedeemUserImpersonationTokenRequest]) (*connect.Response[v1.RedeemUserImpersonationTokenResponse], error)
	CreateIntermediateSession(context.Context, *connect.Request[v1.CreateIntermediateSessionRequest]) (*connect.Response[v1.CreateIntermediateSessionResponse], error)
	Whoami(context.Context, *connect.Request[v1.WhoamiRequest]) (*connect.Response[v1.WhoamiResponse], error)
	CreateOrganization(context.Context, *connect.Request[v1.CreateOrganizationRequest]) (*connect.Response[v1.CreateOrganizationResponse], error)
	ListOrganizations(context.Context, *connect.Request[v1.ListOrganizationsRequest]) (*connect.Response[v1.ListOrganizationsResponse], error)
	SetOrganization(context.Context, *connect.Request[v1.SetOrganizationRequest]) (*connect.Response[v1.SetOrganizationResponse], error)
	ExchangeIntermediateSessionForSession(context.Context, *connect.Request[v1.ExchangeIntermediateSessionForSessionRequest]) (*connect.Response[v1.ExchangeIntermediateSessionForSessionResponse], error)
	GetGoogleOAuthRedirectURL(context.Context, *connect.Request[v1.GetGoogleOAuthRedirectURLRequest]) (*connect.Response[v1.GetGoogleOAuthRedirectURLResponse], error)
	RedeemGoogleOAuthCode(context.Context, *connect.Request[v1.RedeemGoogleOAuthCodeRequest]) (*connect.Response[v1.RedeemGoogleOAuthCodeResponse], error)
	GetMicrosoftOAuthRedirectURL(context.Context, *connect.Request[v1.GetMicrosoftOAuthRedirectURLRequest]) (*connect.Response[v1.GetMicrosoftOAuthRedirectURLResponse], error)
	RedeemMicrosoftOAuthCode(context.Context, *connect.Request[v1.RedeemMicrosoftOAuthCodeRequest]) (*connect.Response[v1.RedeemMicrosoftOAuthCodeResponse], error)
	IssueEmailVerificationChallenge(context.Context, *connect.Request[v1.IssueEmailVerificationChallengeRequest]) (*connect.Response[v1.IssueEmailVerificationChallengeResponse], error)
	VerifyEmailChallenge(context.Context, *connect.Request[v1.VerifyEmailChallengeRequest]) (*connect.Response[v1.VerifyEmailChallengeResponse], error)
	RegisterPassword(context.Context, *connect.Request[v1.RegisterPasswordRequest]) (*connect.Response[v1.RegisterPasswordResponse], error)
	VerifyPassword(context.Context, *connect.Request[v1.VerifyPasswordRequest]) (*connect.Response[v1.VerifyPasswordResponse], error)
	GetPasskeyOptions(context.Context, *connect.Request[v1.GetPasskeyOptionsRequest]) (*connect.Response[v1.GetPasskeyOptionsResponse], error)
	RegisterPasskey(context.Context, *connect.Request[v1.RegisterPasskeyRequest]) (*connect.Response[v1.RegisterPasskeyResponse], error)
	IssuePasskeyChallenge(context.Context, *connect.Request[v1.IssuePasskeyChallengeRequest]) (*connect.Response[v1.IssuePasskeyChallengeResponse], error)
	VerifyPasskey(context.Context, *connect.Request[v1.VerifyPasskeyRequest]) (*connect.Response[v1.VerifyPasskeyResponse], error)
	GetAuthenticatorAppOptions(context.Context, *connect.Request[v1.GetAuthenticatorAppOptionsRequest]) (*connect.Response[v1.GetAuthenticatorAppOptionsResponse], error)
	RegisterAuthenticatorApp(context.Context, *connect.Request[v1.RegisterAuthenticatorAppRequest]) (*connect.Response[v1.RegisterAuthenticatorAppResponse], error)
	VerifyAuthenticatorApp(context.Context, *connect.Request[v1.VerifyAuthenticatorAppRequest]) (*connect.Response[v1.VerifyAuthenticatorAppResponse], error)
	SetEmailAsPrimaryLoginFactor(context.Context, *connect.Request[v1.SetEmailAsPrimaryLoginFactorRequest]) (*connect.Response[v1.SetEmailAsPrimaryLoginFactorResponse], error)
	CreateProject(context.Context, *connect.Request[v1.CreateProjectRequest]) (*connect.Response[v1.CreateProjectResponse], error)
}

// NewIntermediateServiceClient constructs a client for the
// openauth.intermediate.v1.IntermediateService service. By default, it uses the Connect protocol
// with the binary Protobuf Codec, asks for gzipped responses, and sends uncompressed requests. To
// use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or connect.WithGRPCWeb()
// options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewIntermediateServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) IntermediateServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	intermediateServiceMethods := v1.File_openauth_intermediate_v1_intermediate_proto.Services().ByName("IntermediateService").Methods()
	return &intermediateServiceClient{
		listSAMLOrganizations: connect.NewClient[v1.ListSAMLOrganizationsRequest, v1.ListSAMLOrganizationsResponse](
			httpClient,
			baseURL+IntermediateServiceListSAMLOrganizationsProcedure,
			connect.WithSchema(intermediateServiceMethods.ByName("ListSAMLOrganizations")),
			connect.WithClientOptions(opts...),
		),
		getSettings: connect.NewClient[v1.GetSettingsRequest, v1.GetSettingsResponse](
			httpClient,
			baseURL+IntermediateServiceGetSettingsProcedure,
			connect.WithSchema(intermediateServiceMethods.ByName("GetSettings")),
			connect.WithClientOptions(opts...),
		),
		redeemUserImpersonationToken: connect.NewClient[v1.RedeemUserImpersonationTokenRequest, v1.RedeemUserImpersonationTokenResponse](
			httpClient,
			baseURL+IntermediateServiceRedeemUserImpersonationTokenProcedure,
			connect.WithSchema(intermediateServiceMethods.ByName("RedeemUserImpersonationToken")),
			connect.WithClientOptions(opts...),
		),
		createIntermediateSession: connect.NewClient[v1.CreateIntermediateSessionRequest, v1.CreateIntermediateSessionResponse](
			httpClient,
			baseURL+IntermediateServiceCreateIntermediateSessionProcedure,
			connect.WithSchema(intermediateServiceMethods.ByName("CreateIntermediateSession")),
			connect.WithClientOptions(opts...),
		),
		whoami: connect.NewClient[v1.WhoamiRequest, v1.WhoamiResponse](
			httpClient,
			baseURL+IntermediateServiceWhoamiProcedure,
			connect.WithSchema(intermediateServiceMethods.ByName("Whoami")),
			connect.WithClientOptions(opts...),
		),
		createOrganization: connect.NewClient[v1.CreateOrganizationRequest, v1.CreateOrganizationResponse](
			httpClient,
			baseURL+IntermediateServiceCreateOrganizationProcedure,
			connect.WithSchema(intermediateServiceMethods.ByName("CreateOrganization")),
			connect.WithClientOptions(opts...),
		),
		listOrganizations: connect.NewClient[v1.ListOrganizationsRequest, v1.ListOrganizationsResponse](
			httpClient,
			baseURL+IntermediateServiceListOrganizationsProcedure,
			connect.WithSchema(intermediateServiceMethods.ByName("ListOrganizations")),
			connect.WithClientOptions(opts...),
		),
		setOrganization: connect.NewClient[v1.SetOrganizationRequest, v1.SetOrganizationResponse](
			httpClient,
			baseURL+IntermediateServiceSetOrganizationProcedure,
			connect.WithSchema(intermediateServiceMethods.ByName("SetOrganization")),
			connect.WithClientOptions(opts...),
		),
		exchangeIntermediateSessionForSession: connect.NewClient[v1.ExchangeIntermediateSessionForSessionRequest, v1.ExchangeIntermediateSessionForSessionResponse](
			httpClient,
			baseURL+IntermediateServiceExchangeIntermediateSessionForSessionProcedure,
			connect.WithSchema(intermediateServiceMethods.ByName("ExchangeIntermediateSessionForSession")),
			connect.WithClientOptions(opts...),
		),
		getGoogleOAuthRedirectURL: connect.NewClient[v1.GetGoogleOAuthRedirectURLRequest, v1.GetGoogleOAuthRedirectURLResponse](
			httpClient,
			baseURL+IntermediateServiceGetGoogleOAuthRedirectURLProcedure,
			connect.WithSchema(intermediateServiceMethods.ByName("GetGoogleOAuthRedirectURL")),
			connect.WithClientOptions(opts...),
		),
		redeemGoogleOAuthCode: connect.NewClient[v1.RedeemGoogleOAuthCodeRequest, v1.RedeemGoogleOAuthCodeResponse](
			httpClient,
			baseURL+IntermediateServiceRedeemGoogleOAuthCodeProcedure,
			connect.WithSchema(intermediateServiceMethods.ByName("RedeemGoogleOAuthCode")),
			connect.WithClientOptions(opts...),
		),
		getMicrosoftOAuthRedirectURL: connect.NewClient[v1.GetMicrosoftOAuthRedirectURLRequest, v1.GetMicrosoftOAuthRedirectURLResponse](
			httpClient,
			baseURL+IntermediateServiceGetMicrosoftOAuthRedirectURLProcedure,
			connect.WithSchema(intermediateServiceMethods.ByName("GetMicrosoftOAuthRedirectURL")),
			connect.WithClientOptions(opts...),
		),
		redeemMicrosoftOAuthCode: connect.NewClient[v1.RedeemMicrosoftOAuthCodeRequest, v1.RedeemMicrosoftOAuthCodeResponse](
			httpClient,
			baseURL+IntermediateServiceRedeemMicrosoftOAuthCodeProcedure,
			connect.WithSchema(intermediateServiceMethods.ByName("RedeemMicrosoftOAuthCode")),
			connect.WithClientOptions(opts...),
		),
		issueEmailVerificationChallenge: connect.NewClient[v1.IssueEmailVerificationChallengeRequest, v1.IssueEmailVerificationChallengeResponse](
			httpClient,
			baseURL+IntermediateServiceIssueEmailVerificationChallengeProcedure,
			connect.WithSchema(intermediateServiceMethods.ByName("IssueEmailVerificationChallenge")),
			connect.WithClientOptions(opts...),
		),
		verifyEmailChallenge: connect.NewClient[v1.VerifyEmailChallengeRequest, v1.VerifyEmailChallengeResponse](
			httpClient,
			baseURL+IntermediateServiceVerifyEmailChallengeProcedure,
			connect.WithSchema(intermediateServiceMethods.ByName("VerifyEmailChallenge")),
			connect.WithClientOptions(opts...),
		),
		registerPassword: connect.NewClient[v1.RegisterPasswordRequest, v1.RegisterPasswordResponse](
			httpClient,
			baseURL+IntermediateServiceRegisterPasswordProcedure,
			connect.WithSchema(intermediateServiceMethods.ByName("RegisterPassword")),
			connect.WithClientOptions(opts...),
		),
		verifyPassword: connect.NewClient[v1.VerifyPasswordRequest, v1.VerifyPasswordResponse](
			httpClient,
			baseURL+IntermediateServiceVerifyPasswordProcedure,
			connect.WithSchema(intermediateServiceMethods.ByName("VerifyPassword")),
			connect.WithClientOptions(opts...),
		),
		getPasskeyOptions: connect.NewClient[v1.GetPasskeyOptionsRequest, v1.GetPasskeyOptionsResponse](
			httpClient,
			baseURL+IntermediateServiceGetPasskeyOptionsProcedure,
			connect.WithSchema(intermediateServiceMethods.ByName("GetPasskeyOptions")),
			connect.WithClientOptions(opts...),
		),
		registerPasskey: connect.NewClient[v1.RegisterPasskeyRequest, v1.RegisterPasskeyResponse](
			httpClient,
			baseURL+IntermediateServiceRegisterPasskeyProcedure,
			connect.WithSchema(intermediateServiceMethods.ByName("RegisterPasskey")),
			connect.WithClientOptions(opts...),
		),
		issuePasskeyChallenge: connect.NewClient[v1.IssuePasskeyChallengeRequest, v1.IssuePasskeyChallengeResponse](
			httpClient,
			baseURL+IntermediateServiceIssuePasskeyChallengeProcedure,
			connect.WithSchema(intermediateServiceMethods.ByName("IssuePasskeyChallenge")),
			connect.WithClientOptions(opts...),
		),
		verifyPasskey: connect.NewClient[v1.VerifyPasskeyRequest, v1.VerifyPasskeyResponse](
			httpClient,
			baseURL+IntermediateServiceVerifyPasskeyProcedure,
			connect.WithSchema(intermediateServiceMethods.ByName("VerifyPasskey")),
			connect.WithClientOptions(opts...),
		),
		getAuthenticatorAppOptions: connect.NewClient[v1.GetAuthenticatorAppOptionsRequest, v1.GetAuthenticatorAppOptionsResponse](
			httpClient,
			baseURL+IntermediateServiceGetAuthenticatorAppOptionsProcedure,
			connect.WithSchema(intermediateServiceMethods.ByName("GetAuthenticatorAppOptions")),
			connect.WithClientOptions(opts...),
		),
		registerAuthenticatorApp: connect.NewClient[v1.RegisterAuthenticatorAppRequest, v1.RegisterAuthenticatorAppResponse](
			httpClient,
			baseURL+IntermediateServiceRegisterAuthenticatorAppProcedure,
			connect.WithSchema(intermediateServiceMethods.ByName("RegisterAuthenticatorApp")),
			connect.WithClientOptions(opts...),
		),
		verifyAuthenticatorApp: connect.NewClient[v1.VerifyAuthenticatorAppRequest, v1.VerifyAuthenticatorAppResponse](
			httpClient,
			baseURL+IntermediateServiceVerifyAuthenticatorAppProcedure,
			connect.WithSchema(intermediateServiceMethods.ByName("VerifyAuthenticatorApp")),
			connect.WithClientOptions(opts...),
		),
		setEmailAsPrimaryLoginFactor: connect.NewClient[v1.SetEmailAsPrimaryLoginFactorRequest, v1.SetEmailAsPrimaryLoginFactorResponse](
			httpClient,
			baseURL+IntermediateServiceSetEmailAsPrimaryLoginFactorProcedure,
			connect.WithSchema(intermediateServiceMethods.ByName("SetEmailAsPrimaryLoginFactor")),
			connect.WithClientOptions(opts...),
		),
		createProject: connect.NewClient[v1.CreateProjectRequest, v1.CreateProjectResponse](
			httpClient,
			baseURL+IntermediateServiceCreateProjectProcedure,
			connect.WithSchema(intermediateServiceMethods.ByName("CreateProject")),
			connect.WithClientOptions(opts...),
		),
	}
}

// intermediateServiceClient implements IntermediateServiceClient.
type intermediateServiceClient struct {
	listSAMLOrganizations                 *connect.Client[v1.ListSAMLOrganizationsRequest, v1.ListSAMLOrganizationsResponse]
	getSettings                           *connect.Client[v1.GetSettingsRequest, v1.GetSettingsResponse]
	redeemUserImpersonationToken          *connect.Client[v1.RedeemUserImpersonationTokenRequest, v1.RedeemUserImpersonationTokenResponse]
	createIntermediateSession             *connect.Client[v1.CreateIntermediateSessionRequest, v1.CreateIntermediateSessionResponse]
	whoami                                *connect.Client[v1.WhoamiRequest, v1.WhoamiResponse]
	createOrganization                    *connect.Client[v1.CreateOrganizationRequest, v1.CreateOrganizationResponse]
	listOrganizations                     *connect.Client[v1.ListOrganizationsRequest, v1.ListOrganizationsResponse]
	setOrganization                       *connect.Client[v1.SetOrganizationRequest, v1.SetOrganizationResponse]
	exchangeIntermediateSessionForSession *connect.Client[v1.ExchangeIntermediateSessionForSessionRequest, v1.ExchangeIntermediateSessionForSessionResponse]
	getGoogleOAuthRedirectURL             *connect.Client[v1.GetGoogleOAuthRedirectURLRequest, v1.GetGoogleOAuthRedirectURLResponse]
	redeemGoogleOAuthCode                 *connect.Client[v1.RedeemGoogleOAuthCodeRequest, v1.RedeemGoogleOAuthCodeResponse]
	getMicrosoftOAuthRedirectURL          *connect.Client[v1.GetMicrosoftOAuthRedirectURLRequest, v1.GetMicrosoftOAuthRedirectURLResponse]
	redeemMicrosoftOAuthCode              *connect.Client[v1.RedeemMicrosoftOAuthCodeRequest, v1.RedeemMicrosoftOAuthCodeResponse]
	issueEmailVerificationChallenge       *connect.Client[v1.IssueEmailVerificationChallengeRequest, v1.IssueEmailVerificationChallengeResponse]
	verifyEmailChallenge                  *connect.Client[v1.VerifyEmailChallengeRequest, v1.VerifyEmailChallengeResponse]
	registerPassword                      *connect.Client[v1.RegisterPasswordRequest, v1.RegisterPasswordResponse]
	verifyPassword                        *connect.Client[v1.VerifyPasswordRequest, v1.VerifyPasswordResponse]
	getPasskeyOptions                     *connect.Client[v1.GetPasskeyOptionsRequest, v1.GetPasskeyOptionsResponse]
	registerPasskey                       *connect.Client[v1.RegisterPasskeyRequest, v1.RegisterPasskeyResponse]
	issuePasskeyChallenge                 *connect.Client[v1.IssuePasskeyChallengeRequest, v1.IssuePasskeyChallengeResponse]
	verifyPasskey                         *connect.Client[v1.VerifyPasskeyRequest, v1.VerifyPasskeyResponse]
	getAuthenticatorAppOptions            *connect.Client[v1.GetAuthenticatorAppOptionsRequest, v1.GetAuthenticatorAppOptionsResponse]
	registerAuthenticatorApp              *connect.Client[v1.RegisterAuthenticatorAppRequest, v1.RegisterAuthenticatorAppResponse]
	verifyAuthenticatorApp                *connect.Client[v1.VerifyAuthenticatorAppRequest, v1.VerifyAuthenticatorAppResponse]
	setEmailAsPrimaryLoginFactor          *connect.Client[v1.SetEmailAsPrimaryLoginFactorRequest, v1.SetEmailAsPrimaryLoginFactorResponse]
	createProject                         *connect.Client[v1.CreateProjectRequest, v1.CreateProjectResponse]
}

// ListSAMLOrganizations calls openauth.intermediate.v1.IntermediateService.ListSAMLOrganizations.
func (c *intermediateServiceClient) ListSAMLOrganizations(ctx context.Context, req *connect.Request[v1.ListSAMLOrganizationsRequest]) (*connect.Response[v1.ListSAMLOrganizationsResponse], error) {
	return c.listSAMLOrganizations.CallUnary(ctx, req)
}

// GetSettings calls openauth.intermediate.v1.IntermediateService.GetSettings.
func (c *intermediateServiceClient) GetSettings(ctx context.Context, req *connect.Request[v1.GetSettingsRequest]) (*connect.Response[v1.GetSettingsResponse], error) {
	return c.getSettings.CallUnary(ctx, req)
}

// RedeemUserImpersonationToken calls
// openauth.intermediate.v1.IntermediateService.RedeemUserImpersonationToken.
func (c *intermediateServiceClient) RedeemUserImpersonationToken(ctx context.Context, req *connect.Request[v1.RedeemUserImpersonationTokenRequest]) (*connect.Response[v1.RedeemUserImpersonationTokenResponse], error) {
	return c.redeemUserImpersonationToken.CallUnary(ctx, req)
}

// CreateIntermediateSession calls
// openauth.intermediate.v1.IntermediateService.CreateIntermediateSession.
func (c *intermediateServiceClient) CreateIntermediateSession(ctx context.Context, req *connect.Request[v1.CreateIntermediateSessionRequest]) (*connect.Response[v1.CreateIntermediateSessionResponse], error) {
	return c.createIntermediateSession.CallUnary(ctx, req)
}

// Whoami calls openauth.intermediate.v1.IntermediateService.Whoami.
func (c *intermediateServiceClient) Whoami(ctx context.Context, req *connect.Request[v1.WhoamiRequest]) (*connect.Response[v1.WhoamiResponse], error) {
	return c.whoami.CallUnary(ctx, req)
}

// CreateOrganization calls openauth.intermediate.v1.IntermediateService.CreateOrganization.
func (c *intermediateServiceClient) CreateOrganization(ctx context.Context, req *connect.Request[v1.CreateOrganizationRequest]) (*connect.Response[v1.CreateOrganizationResponse], error) {
	return c.createOrganization.CallUnary(ctx, req)
}

// ListOrganizations calls openauth.intermediate.v1.IntermediateService.ListOrganizations.
func (c *intermediateServiceClient) ListOrganizations(ctx context.Context, req *connect.Request[v1.ListOrganizationsRequest]) (*connect.Response[v1.ListOrganizationsResponse], error) {
	return c.listOrganizations.CallUnary(ctx, req)
}

// SetOrganization calls openauth.intermediate.v1.IntermediateService.SetOrganization.
func (c *intermediateServiceClient) SetOrganization(ctx context.Context, req *connect.Request[v1.SetOrganizationRequest]) (*connect.Response[v1.SetOrganizationResponse], error) {
	return c.setOrganization.CallUnary(ctx, req)
}

// ExchangeIntermediateSessionForSession calls
// openauth.intermediate.v1.IntermediateService.ExchangeIntermediateSessionForSession.
func (c *intermediateServiceClient) ExchangeIntermediateSessionForSession(ctx context.Context, req *connect.Request[v1.ExchangeIntermediateSessionForSessionRequest]) (*connect.Response[v1.ExchangeIntermediateSessionForSessionResponse], error) {
	return c.exchangeIntermediateSessionForSession.CallUnary(ctx, req)
}

// GetGoogleOAuthRedirectURL calls
// openauth.intermediate.v1.IntermediateService.GetGoogleOAuthRedirectURL.
func (c *intermediateServiceClient) GetGoogleOAuthRedirectURL(ctx context.Context, req *connect.Request[v1.GetGoogleOAuthRedirectURLRequest]) (*connect.Response[v1.GetGoogleOAuthRedirectURLResponse], error) {
	return c.getGoogleOAuthRedirectURL.CallUnary(ctx, req)
}

// RedeemGoogleOAuthCode calls openauth.intermediate.v1.IntermediateService.RedeemGoogleOAuthCode.
func (c *intermediateServiceClient) RedeemGoogleOAuthCode(ctx context.Context, req *connect.Request[v1.RedeemGoogleOAuthCodeRequest]) (*connect.Response[v1.RedeemGoogleOAuthCodeResponse], error) {
	return c.redeemGoogleOAuthCode.CallUnary(ctx, req)
}

// GetMicrosoftOAuthRedirectURL calls
// openauth.intermediate.v1.IntermediateService.GetMicrosoftOAuthRedirectURL.
func (c *intermediateServiceClient) GetMicrosoftOAuthRedirectURL(ctx context.Context, req *connect.Request[v1.GetMicrosoftOAuthRedirectURLRequest]) (*connect.Response[v1.GetMicrosoftOAuthRedirectURLResponse], error) {
	return c.getMicrosoftOAuthRedirectURL.CallUnary(ctx, req)
}

// RedeemMicrosoftOAuthCode calls
// openauth.intermediate.v1.IntermediateService.RedeemMicrosoftOAuthCode.
func (c *intermediateServiceClient) RedeemMicrosoftOAuthCode(ctx context.Context, req *connect.Request[v1.RedeemMicrosoftOAuthCodeRequest]) (*connect.Response[v1.RedeemMicrosoftOAuthCodeResponse], error) {
	return c.redeemMicrosoftOAuthCode.CallUnary(ctx, req)
}

// IssueEmailVerificationChallenge calls
// openauth.intermediate.v1.IntermediateService.IssueEmailVerificationChallenge.
func (c *intermediateServiceClient) IssueEmailVerificationChallenge(ctx context.Context, req *connect.Request[v1.IssueEmailVerificationChallengeRequest]) (*connect.Response[v1.IssueEmailVerificationChallengeResponse], error) {
	return c.issueEmailVerificationChallenge.CallUnary(ctx, req)
}

// VerifyEmailChallenge calls openauth.intermediate.v1.IntermediateService.VerifyEmailChallenge.
func (c *intermediateServiceClient) VerifyEmailChallenge(ctx context.Context, req *connect.Request[v1.VerifyEmailChallengeRequest]) (*connect.Response[v1.VerifyEmailChallengeResponse], error) {
	return c.verifyEmailChallenge.CallUnary(ctx, req)
}

// RegisterPassword calls openauth.intermediate.v1.IntermediateService.RegisterPassword.
func (c *intermediateServiceClient) RegisterPassword(ctx context.Context, req *connect.Request[v1.RegisterPasswordRequest]) (*connect.Response[v1.RegisterPasswordResponse], error) {
	return c.registerPassword.CallUnary(ctx, req)
}

// VerifyPassword calls openauth.intermediate.v1.IntermediateService.VerifyPassword.
func (c *intermediateServiceClient) VerifyPassword(ctx context.Context, req *connect.Request[v1.VerifyPasswordRequest]) (*connect.Response[v1.VerifyPasswordResponse], error) {
	return c.verifyPassword.CallUnary(ctx, req)
}

// GetPasskeyOptions calls openauth.intermediate.v1.IntermediateService.GetPasskeyOptions.
func (c *intermediateServiceClient) GetPasskeyOptions(ctx context.Context, req *connect.Request[v1.GetPasskeyOptionsRequest]) (*connect.Response[v1.GetPasskeyOptionsResponse], error) {
	return c.getPasskeyOptions.CallUnary(ctx, req)
}

// RegisterPasskey calls openauth.intermediate.v1.IntermediateService.RegisterPasskey.
func (c *intermediateServiceClient) RegisterPasskey(ctx context.Context, req *connect.Request[v1.RegisterPasskeyRequest]) (*connect.Response[v1.RegisterPasskeyResponse], error) {
	return c.registerPasskey.CallUnary(ctx, req)
}

// IssuePasskeyChallenge calls openauth.intermediate.v1.IntermediateService.IssuePasskeyChallenge.
func (c *intermediateServiceClient) IssuePasskeyChallenge(ctx context.Context, req *connect.Request[v1.IssuePasskeyChallengeRequest]) (*connect.Response[v1.IssuePasskeyChallengeResponse], error) {
	return c.issuePasskeyChallenge.CallUnary(ctx, req)
}

// VerifyPasskey calls openauth.intermediate.v1.IntermediateService.VerifyPasskey.
func (c *intermediateServiceClient) VerifyPasskey(ctx context.Context, req *connect.Request[v1.VerifyPasskeyRequest]) (*connect.Response[v1.VerifyPasskeyResponse], error) {
	return c.verifyPasskey.CallUnary(ctx, req)
}

// GetAuthenticatorAppOptions calls
// openauth.intermediate.v1.IntermediateService.GetAuthenticatorAppOptions.
func (c *intermediateServiceClient) GetAuthenticatorAppOptions(ctx context.Context, req *connect.Request[v1.GetAuthenticatorAppOptionsRequest]) (*connect.Response[v1.GetAuthenticatorAppOptionsResponse], error) {
	return c.getAuthenticatorAppOptions.CallUnary(ctx, req)
}

// RegisterAuthenticatorApp calls
// openauth.intermediate.v1.IntermediateService.RegisterAuthenticatorApp.
func (c *intermediateServiceClient) RegisterAuthenticatorApp(ctx context.Context, req *connect.Request[v1.RegisterAuthenticatorAppRequest]) (*connect.Response[v1.RegisterAuthenticatorAppResponse], error) {
	return c.registerAuthenticatorApp.CallUnary(ctx, req)
}

// VerifyAuthenticatorApp calls openauth.intermediate.v1.IntermediateService.VerifyAuthenticatorApp.
func (c *intermediateServiceClient) VerifyAuthenticatorApp(ctx context.Context, req *connect.Request[v1.VerifyAuthenticatorAppRequest]) (*connect.Response[v1.VerifyAuthenticatorAppResponse], error) {
	return c.verifyAuthenticatorApp.CallUnary(ctx, req)
}

// SetEmailAsPrimaryLoginFactor calls
// openauth.intermediate.v1.IntermediateService.SetEmailAsPrimaryLoginFactor.
func (c *intermediateServiceClient) SetEmailAsPrimaryLoginFactor(ctx context.Context, req *connect.Request[v1.SetEmailAsPrimaryLoginFactorRequest]) (*connect.Response[v1.SetEmailAsPrimaryLoginFactorResponse], error) {
	return c.setEmailAsPrimaryLoginFactor.CallUnary(ctx, req)
}

// CreateProject calls openauth.intermediate.v1.IntermediateService.CreateProject.
func (c *intermediateServiceClient) CreateProject(ctx context.Context, req *connect.Request[v1.CreateProjectRequest]) (*connect.Response[v1.CreateProjectResponse], error) {
	return c.createProject.CallUnary(ctx, req)
}

// IntermediateServiceHandler is an implementation of the
// openauth.intermediate.v1.IntermediateService service.
type IntermediateServiceHandler interface {
	ListSAMLOrganizations(context.Context, *connect.Request[v1.ListSAMLOrganizationsRequest]) (*connect.Response[v1.ListSAMLOrganizationsResponse], error)
	GetSettings(context.Context, *connect.Request[v1.GetSettingsRequest]) (*connect.Response[v1.GetSettingsResponse], error)
	RedeemUserImpersonationToken(context.Context, *connect.Request[v1.RedeemUserImpersonationTokenRequest]) (*connect.Response[v1.RedeemUserImpersonationTokenResponse], error)
	CreateIntermediateSession(context.Context, *connect.Request[v1.CreateIntermediateSessionRequest]) (*connect.Response[v1.CreateIntermediateSessionResponse], error)
	Whoami(context.Context, *connect.Request[v1.WhoamiRequest]) (*connect.Response[v1.WhoamiResponse], error)
	CreateOrganization(context.Context, *connect.Request[v1.CreateOrganizationRequest]) (*connect.Response[v1.CreateOrganizationResponse], error)
	ListOrganizations(context.Context, *connect.Request[v1.ListOrganizationsRequest]) (*connect.Response[v1.ListOrganizationsResponse], error)
	SetOrganization(context.Context, *connect.Request[v1.SetOrganizationRequest]) (*connect.Response[v1.SetOrganizationResponse], error)
	ExchangeIntermediateSessionForSession(context.Context, *connect.Request[v1.ExchangeIntermediateSessionForSessionRequest]) (*connect.Response[v1.ExchangeIntermediateSessionForSessionResponse], error)
	GetGoogleOAuthRedirectURL(context.Context, *connect.Request[v1.GetGoogleOAuthRedirectURLRequest]) (*connect.Response[v1.GetGoogleOAuthRedirectURLResponse], error)
	RedeemGoogleOAuthCode(context.Context, *connect.Request[v1.RedeemGoogleOAuthCodeRequest]) (*connect.Response[v1.RedeemGoogleOAuthCodeResponse], error)
	GetMicrosoftOAuthRedirectURL(context.Context, *connect.Request[v1.GetMicrosoftOAuthRedirectURLRequest]) (*connect.Response[v1.GetMicrosoftOAuthRedirectURLResponse], error)
	RedeemMicrosoftOAuthCode(context.Context, *connect.Request[v1.RedeemMicrosoftOAuthCodeRequest]) (*connect.Response[v1.RedeemMicrosoftOAuthCodeResponse], error)
	IssueEmailVerificationChallenge(context.Context, *connect.Request[v1.IssueEmailVerificationChallengeRequest]) (*connect.Response[v1.IssueEmailVerificationChallengeResponse], error)
	VerifyEmailChallenge(context.Context, *connect.Request[v1.VerifyEmailChallengeRequest]) (*connect.Response[v1.VerifyEmailChallengeResponse], error)
	RegisterPassword(context.Context, *connect.Request[v1.RegisterPasswordRequest]) (*connect.Response[v1.RegisterPasswordResponse], error)
	VerifyPassword(context.Context, *connect.Request[v1.VerifyPasswordRequest]) (*connect.Response[v1.VerifyPasswordResponse], error)
	GetPasskeyOptions(context.Context, *connect.Request[v1.GetPasskeyOptionsRequest]) (*connect.Response[v1.GetPasskeyOptionsResponse], error)
	RegisterPasskey(context.Context, *connect.Request[v1.RegisterPasskeyRequest]) (*connect.Response[v1.RegisterPasskeyResponse], error)
	IssuePasskeyChallenge(context.Context, *connect.Request[v1.IssuePasskeyChallengeRequest]) (*connect.Response[v1.IssuePasskeyChallengeResponse], error)
	VerifyPasskey(context.Context, *connect.Request[v1.VerifyPasskeyRequest]) (*connect.Response[v1.VerifyPasskeyResponse], error)
	GetAuthenticatorAppOptions(context.Context, *connect.Request[v1.GetAuthenticatorAppOptionsRequest]) (*connect.Response[v1.GetAuthenticatorAppOptionsResponse], error)
	RegisterAuthenticatorApp(context.Context, *connect.Request[v1.RegisterAuthenticatorAppRequest]) (*connect.Response[v1.RegisterAuthenticatorAppResponse], error)
	VerifyAuthenticatorApp(context.Context, *connect.Request[v1.VerifyAuthenticatorAppRequest]) (*connect.Response[v1.VerifyAuthenticatorAppResponse], error)
	SetEmailAsPrimaryLoginFactor(context.Context, *connect.Request[v1.SetEmailAsPrimaryLoginFactorRequest]) (*connect.Response[v1.SetEmailAsPrimaryLoginFactorResponse], error)
	CreateProject(context.Context, *connect.Request[v1.CreateProjectRequest]) (*connect.Response[v1.CreateProjectResponse], error)
}

// NewIntermediateServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewIntermediateServiceHandler(svc IntermediateServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	intermediateServiceMethods := v1.File_openauth_intermediate_v1_intermediate_proto.Services().ByName("IntermediateService").Methods()
	intermediateServiceListSAMLOrganizationsHandler := connect.NewUnaryHandler(
		IntermediateServiceListSAMLOrganizationsProcedure,
		svc.ListSAMLOrganizations,
		connect.WithSchema(intermediateServiceMethods.ByName("ListSAMLOrganizations")),
		connect.WithHandlerOptions(opts...),
	)
	intermediateServiceGetSettingsHandler := connect.NewUnaryHandler(
		IntermediateServiceGetSettingsProcedure,
		svc.GetSettings,
		connect.WithSchema(intermediateServiceMethods.ByName("GetSettings")),
		connect.WithHandlerOptions(opts...),
	)
	intermediateServiceRedeemUserImpersonationTokenHandler := connect.NewUnaryHandler(
		IntermediateServiceRedeemUserImpersonationTokenProcedure,
		svc.RedeemUserImpersonationToken,
		connect.WithSchema(intermediateServiceMethods.ByName("RedeemUserImpersonationToken")),
		connect.WithHandlerOptions(opts...),
	)
	intermediateServiceCreateIntermediateSessionHandler := connect.NewUnaryHandler(
		IntermediateServiceCreateIntermediateSessionProcedure,
		svc.CreateIntermediateSession,
		connect.WithSchema(intermediateServiceMethods.ByName("CreateIntermediateSession")),
		connect.WithHandlerOptions(opts...),
	)
	intermediateServiceWhoamiHandler := connect.NewUnaryHandler(
		IntermediateServiceWhoamiProcedure,
		svc.Whoami,
		connect.WithSchema(intermediateServiceMethods.ByName("Whoami")),
		connect.WithHandlerOptions(opts...),
	)
	intermediateServiceCreateOrganizationHandler := connect.NewUnaryHandler(
		IntermediateServiceCreateOrganizationProcedure,
		svc.CreateOrganization,
		connect.WithSchema(intermediateServiceMethods.ByName("CreateOrganization")),
		connect.WithHandlerOptions(opts...),
	)
	intermediateServiceListOrganizationsHandler := connect.NewUnaryHandler(
		IntermediateServiceListOrganizationsProcedure,
		svc.ListOrganizations,
		connect.WithSchema(intermediateServiceMethods.ByName("ListOrganizations")),
		connect.WithHandlerOptions(opts...),
	)
	intermediateServiceSetOrganizationHandler := connect.NewUnaryHandler(
		IntermediateServiceSetOrganizationProcedure,
		svc.SetOrganization,
		connect.WithSchema(intermediateServiceMethods.ByName("SetOrganization")),
		connect.WithHandlerOptions(opts...),
	)
	intermediateServiceExchangeIntermediateSessionForSessionHandler := connect.NewUnaryHandler(
		IntermediateServiceExchangeIntermediateSessionForSessionProcedure,
		svc.ExchangeIntermediateSessionForSession,
		connect.WithSchema(intermediateServiceMethods.ByName("ExchangeIntermediateSessionForSession")),
		connect.WithHandlerOptions(opts...),
	)
	intermediateServiceGetGoogleOAuthRedirectURLHandler := connect.NewUnaryHandler(
		IntermediateServiceGetGoogleOAuthRedirectURLProcedure,
		svc.GetGoogleOAuthRedirectURL,
		connect.WithSchema(intermediateServiceMethods.ByName("GetGoogleOAuthRedirectURL")),
		connect.WithHandlerOptions(opts...),
	)
	intermediateServiceRedeemGoogleOAuthCodeHandler := connect.NewUnaryHandler(
		IntermediateServiceRedeemGoogleOAuthCodeProcedure,
		svc.RedeemGoogleOAuthCode,
		connect.WithSchema(intermediateServiceMethods.ByName("RedeemGoogleOAuthCode")),
		connect.WithHandlerOptions(opts...),
	)
	intermediateServiceGetMicrosoftOAuthRedirectURLHandler := connect.NewUnaryHandler(
		IntermediateServiceGetMicrosoftOAuthRedirectURLProcedure,
		svc.GetMicrosoftOAuthRedirectURL,
		connect.WithSchema(intermediateServiceMethods.ByName("GetMicrosoftOAuthRedirectURL")),
		connect.WithHandlerOptions(opts...),
	)
	intermediateServiceRedeemMicrosoftOAuthCodeHandler := connect.NewUnaryHandler(
		IntermediateServiceRedeemMicrosoftOAuthCodeProcedure,
		svc.RedeemMicrosoftOAuthCode,
		connect.WithSchema(intermediateServiceMethods.ByName("RedeemMicrosoftOAuthCode")),
		connect.WithHandlerOptions(opts...),
	)
	intermediateServiceIssueEmailVerificationChallengeHandler := connect.NewUnaryHandler(
		IntermediateServiceIssueEmailVerificationChallengeProcedure,
		svc.IssueEmailVerificationChallenge,
		connect.WithSchema(intermediateServiceMethods.ByName("IssueEmailVerificationChallenge")),
		connect.WithHandlerOptions(opts...),
	)
	intermediateServiceVerifyEmailChallengeHandler := connect.NewUnaryHandler(
		IntermediateServiceVerifyEmailChallengeProcedure,
		svc.VerifyEmailChallenge,
		connect.WithSchema(intermediateServiceMethods.ByName("VerifyEmailChallenge")),
		connect.WithHandlerOptions(opts...),
	)
	intermediateServiceRegisterPasswordHandler := connect.NewUnaryHandler(
		IntermediateServiceRegisterPasswordProcedure,
		svc.RegisterPassword,
		connect.WithSchema(intermediateServiceMethods.ByName("RegisterPassword")),
		connect.WithHandlerOptions(opts...),
	)
	intermediateServiceVerifyPasswordHandler := connect.NewUnaryHandler(
		IntermediateServiceVerifyPasswordProcedure,
		svc.VerifyPassword,
		connect.WithSchema(intermediateServiceMethods.ByName("VerifyPassword")),
		connect.WithHandlerOptions(opts...),
	)
	intermediateServiceGetPasskeyOptionsHandler := connect.NewUnaryHandler(
		IntermediateServiceGetPasskeyOptionsProcedure,
		svc.GetPasskeyOptions,
		connect.WithSchema(intermediateServiceMethods.ByName("GetPasskeyOptions")),
		connect.WithHandlerOptions(opts...),
	)
	intermediateServiceRegisterPasskeyHandler := connect.NewUnaryHandler(
		IntermediateServiceRegisterPasskeyProcedure,
		svc.RegisterPasskey,
		connect.WithSchema(intermediateServiceMethods.ByName("RegisterPasskey")),
		connect.WithHandlerOptions(opts...),
	)
	intermediateServiceIssuePasskeyChallengeHandler := connect.NewUnaryHandler(
		IntermediateServiceIssuePasskeyChallengeProcedure,
		svc.IssuePasskeyChallenge,
		connect.WithSchema(intermediateServiceMethods.ByName("IssuePasskeyChallenge")),
		connect.WithHandlerOptions(opts...),
	)
	intermediateServiceVerifyPasskeyHandler := connect.NewUnaryHandler(
		IntermediateServiceVerifyPasskeyProcedure,
		svc.VerifyPasskey,
		connect.WithSchema(intermediateServiceMethods.ByName("VerifyPasskey")),
		connect.WithHandlerOptions(opts...),
	)
	intermediateServiceGetAuthenticatorAppOptionsHandler := connect.NewUnaryHandler(
		IntermediateServiceGetAuthenticatorAppOptionsProcedure,
		svc.GetAuthenticatorAppOptions,
		connect.WithSchema(intermediateServiceMethods.ByName("GetAuthenticatorAppOptions")),
		connect.WithHandlerOptions(opts...),
	)
	intermediateServiceRegisterAuthenticatorAppHandler := connect.NewUnaryHandler(
		IntermediateServiceRegisterAuthenticatorAppProcedure,
		svc.RegisterAuthenticatorApp,
		connect.WithSchema(intermediateServiceMethods.ByName("RegisterAuthenticatorApp")),
		connect.WithHandlerOptions(opts...),
	)
	intermediateServiceVerifyAuthenticatorAppHandler := connect.NewUnaryHandler(
		IntermediateServiceVerifyAuthenticatorAppProcedure,
		svc.VerifyAuthenticatorApp,
		connect.WithSchema(intermediateServiceMethods.ByName("VerifyAuthenticatorApp")),
		connect.WithHandlerOptions(opts...),
	)
	intermediateServiceSetEmailAsPrimaryLoginFactorHandler := connect.NewUnaryHandler(
		IntermediateServiceSetEmailAsPrimaryLoginFactorProcedure,
		svc.SetEmailAsPrimaryLoginFactor,
		connect.WithSchema(intermediateServiceMethods.ByName("SetEmailAsPrimaryLoginFactor")),
		connect.WithHandlerOptions(opts...),
	)
	intermediateServiceCreateProjectHandler := connect.NewUnaryHandler(
		IntermediateServiceCreateProjectProcedure,
		svc.CreateProject,
		connect.WithSchema(intermediateServiceMethods.ByName("CreateProject")),
		connect.WithHandlerOptions(opts...),
	)
	return "/openauth.intermediate.v1.IntermediateService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case IntermediateServiceListSAMLOrganizationsProcedure:
			intermediateServiceListSAMLOrganizationsHandler.ServeHTTP(w, r)
		case IntermediateServiceGetSettingsProcedure:
			intermediateServiceGetSettingsHandler.ServeHTTP(w, r)
		case IntermediateServiceRedeemUserImpersonationTokenProcedure:
			intermediateServiceRedeemUserImpersonationTokenHandler.ServeHTTP(w, r)
		case IntermediateServiceCreateIntermediateSessionProcedure:
			intermediateServiceCreateIntermediateSessionHandler.ServeHTTP(w, r)
		case IntermediateServiceWhoamiProcedure:
			intermediateServiceWhoamiHandler.ServeHTTP(w, r)
		case IntermediateServiceCreateOrganizationProcedure:
			intermediateServiceCreateOrganizationHandler.ServeHTTP(w, r)
		case IntermediateServiceListOrganizationsProcedure:
			intermediateServiceListOrganizationsHandler.ServeHTTP(w, r)
		case IntermediateServiceSetOrganizationProcedure:
			intermediateServiceSetOrganizationHandler.ServeHTTP(w, r)
		case IntermediateServiceExchangeIntermediateSessionForSessionProcedure:
			intermediateServiceExchangeIntermediateSessionForSessionHandler.ServeHTTP(w, r)
		case IntermediateServiceGetGoogleOAuthRedirectURLProcedure:
			intermediateServiceGetGoogleOAuthRedirectURLHandler.ServeHTTP(w, r)
		case IntermediateServiceRedeemGoogleOAuthCodeProcedure:
			intermediateServiceRedeemGoogleOAuthCodeHandler.ServeHTTP(w, r)
		case IntermediateServiceGetMicrosoftOAuthRedirectURLProcedure:
			intermediateServiceGetMicrosoftOAuthRedirectURLHandler.ServeHTTP(w, r)
		case IntermediateServiceRedeemMicrosoftOAuthCodeProcedure:
			intermediateServiceRedeemMicrosoftOAuthCodeHandler.ServeHTTP(w, r)
		case IntermediateServiceIssueEmailVerificationChallengeProcedure:
			intermediateServiceIssueEmailVerificationChallengeHandler.ServeHTTP(w, r)
		case IntermediateServiceVerifyEmailChallengeProcedure:
			intermediateServiceVerifyEmailChallengeHandler.ServeHTTP(w, r)
		case IntermediateServiceRegisterPasswordProcedure:
			intermediateServiceRegisterPasswordHandler.ServeHTTP(w, r)
		case IntermediateServiceVerifyPasswordProcedure:
			intermediateServiceVerifyPasswordHandler.ServeHTTP(w, r)
		case IntermediateServiceGetPasskeyOptionsProcedure:
			intermediateServiceGetPasskeyOptionsHandler.ServeHTTP(w, r)
		case IntermediateServiceRegisterPasskeyProcedure:
			intermediateServiceRegisterPasskeyHandler.ServeHTTP(w, r)
		case IntermediateServiceIssuePasskeyChallengeProcedure:
			intermediateServiceIssuePasskeyChallengeHandler.ServeHTTP(w, r)
		case IntermediateServiceVerifyPasskeyProcedure:
			intermediateServiceVerifyPasskeyHandler.ServeHTTP(w, r)
		case IntermediateServiceGetAuthenticatorAppOptionsProcedure:
			intermediateServiceGetAuthenticatorAppOptionsHandler.ServeHTTP(w, r)
		case IntermediateServiceRegisterAuthenticatorAppProcedure:
			intermediateServiceRegisterAuthenticatorAppHandler.ServeHTTP(w, r)
		case IntermediateServiceVerifyAuthenticatorAppProcedure:
			intermediateServiceVerifyAuthenticatorAppHandler.ServeHTTP(w, r)
		case IntermediateServiceSetEmailAsPrimaryLoginFactorProcedure:
			intermediateServiceSetEmailAsPrimaryLoginFactorHandler.ServeHTTP(w, r)
		case IntermediateServiceCreateProjectProcedure:
			intermediateServiceCreateProjectHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedIntermediateServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedIntermediateServiceHandler struct{}

func (UnimplementedIntermediateServiceHandler) ListSAMLOrganizations(context.Context, *connect.Request[v1.ListSAMLOrganizationsRequest]) (*connect.Response[v1.ListSAMLOrganizationsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("openauth.intermediate.v1.IntermediateService.ListSAMLOrganizations is not implemented"))
}

func (UnimplementedIntermediateServiceHandler) GetSettings(context.Context, *connect.Request[v1.GetSettingsRequest]) (*connect.Response[v1.GetSettingsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("openauth.intermediate.v1.IntermediateService.GetSettings is not implemented"))
}

func (UnimplementedIntermediateServiceHandler) RedeemUserImpersonationToken(context.Context, *connect.Request[v1.RedeemUserImpersonationTokenRequest]) (*connect.Response[v1.RedeemUserImpersonationTokenResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("openauth.intermediate.v1.IntermediateService.RedeemUserImpersonationToken is not implemented"))
}

func (UnimplementedIntermediateServiceHandler) CreateIntermediateSession(context.Context, *connect.Request[v1.CreateIntermediateSessionRequest]) (*connect.Response[v1.CreateIntermediateSessionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("openauth.intermediate.v1.IntermediateService.CreateIntermediateSession is not implemented"))
}

func (UnimplementedIntermediateServiceHandler) Whoami(context.Context, *connect.Request[v1.WhoamiRequest]) (*connect.Response[v1.WhoamiResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("openauth.intermediate.v1.IntermediateService.Whoami is not implemented"))
}

func (UnimplementedIntermediateServiceHandler) CreateOrganization(context.Context, *connect.Request[v1.CreateOrganizationRequest]) (*connect.Response[v1.CreateOrganizationResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("openauth.intermediate.v1.IntermediateService.CreateOrganization is not implemented"))
}

func (UnimplementedIntermediateServiceHandler) ListOrganizations(context.Context, *connect.Request[v1.ListOrganizationsRequest]) (*connect.Response[v1.ListOrganizationsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("openauth.intermediate.v1.IntermediateService.ListOrganizations is not implemented"))
}

func (UnimplementedIntermediateServiceHandler) SetOrganization(context.Context, *connect.Request[v1.SetOrganizationRequest]) (*connect.Response[v1.SetOrganizationResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("openauth.intermediate.v1.IntermediateService.SetOrganization is not implemented"))
}

func (UnimplementedIntermediateServiceHandler) ExchangeIntermediateSessionForSession(context.Context, *connect.Request[v1.ExchangeIntermediateSessionForSessionRequest]) (*connect.Response[v1.ExchangeIntermediateSessionForSessionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("openauth.intermediate.v1.IntermediateService.ExchangeIntermediateSessionForSession is not implemented"))
}

func (UnimplementedIntermediateServiceHandler) GetGoogleOAuthRedirectURL(context.Context, *connect.Request[v1.GetGoogleOAuthRedirectURLRequest]) (*connect.Response[v1.GetGoogleOAuthRedirectURLResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("openauth.intermediate.v1.IntermediateService.GetGoogleOAuthRedirectURL is not implemented"))
}

func (UnimplementedIntermediateServiceHandler) RedeemGoogleOAuthCode(context.Context, *connect.Request[v1.RedeemGoogleOAuthCodeRequest]) (*connect.Response[v1.RedeemGoogleOAuthCodeResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("openauth.intermediate.v1.IntermediateService.RedeemGoogleOAuthCode is not implemented"))
}

func (UnimplementedIntermediateServiceHandler) GetMicrosoftOAuthRedirectURL(context.Context, *connect.Request[v1.GetMicrosoftOAuthRedirectURLRequest]) (*connect.Response[v1.GetMicrosoftOAuthRedirectURLResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("openauth.intermediate.v1.IntermediateService.GetMicrosoftOAuthRedirectURL is not implemented"))
}

func (UnimplementedIntermediateServiceHandler) RedeemMicrosoftOAuthCode(context.Context, *connect.Request[v1.RedeemMicrosoftOAuthCodeRequest]) (*connect.Response[v1.RedeemMicrosoftOAuthCodeResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("openauth.intermediate.v1.IntermediateService.RedeemMicrosoftOAuthCode is not implemented"))
}

func (UnimplementedIntermediateServiceHandler) IssueEmailVerificationChallenge(context.Context, *connect.Request[v1.IssueEmailVerificationChallengeRequest]) (*connect.Response[v1.IssueEmailVerificationChallengeResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("openauth.intermediate.v1.IntermediateService.IssueEmailVerificationChallenge is not implemented"))
}

func (UnimplementedIntermediateServiceHandler) VerifyEmailChallenge(context.Context, *connect.Request[v1.VerifyEmailChallengeRequest]) (*connect.Response[v1.VerifyEmailChallengeResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("openauth.intermediate.v1.IntermediateService.VerifyEmailChallenge is not implemented"))
}

func (UnimplementedIntermediateServiceHandler) RegisterPassword(context.Context, *connect.Request[v1.RegisterPasswordRequest]) (*connect.Response[v1.RegisterPasswordResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("openauth.intermediate.v1.IntermediateService.RegisterPassword is not implemented"))
}

func (UnimplementedIntermediateServiceHandler) VerifyPassword(context.Context, *connect.Request[v1.VerifyPasswordRequest]) (*connect.Response[v1.VerifyPasswordResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("openauth.intermediate.v1.IntermediateService.VerifyPassword is not implemented"))
}

func (UnimplementedIntermediateServiceHandler) GetPasskeyOptions(context.Context, *connect.Request[v1.GetPasskeyOptionsRequest]) (*connect.Response[v1.GetPasskeyOptionsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("openauth.intermediate.v1.IntermediateService.GetPasskeyOptions is not implemented"))
}

func (UnimplementedIntermediateServiceHandler) RegisterPasskey(context.Context, *connect.Request[v1.RegisterPasskeyRequest]) (*connect.Response[v1.RegisterPasskeyResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("openauth.intermediate.v1.IntermediateService.RegisterPasskey is not implemented"))
}

func (UnimplementedIntermediateServiceHandler) IssuePasskeyChallenge(context.Context, *connect.Request[v1.IssuePasskeyChallengeRequest]) (*connect.Response[v1.IssuePasskeyChallengeResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("openauth.intermediate.v1.IntermediateService.IssuePasskeyChallenge is not implemented"))
}

func (UnimplementedIntermediateServiceHandler) VerifyPasskey(context.Context, *connect.Request[v1.VerifyPasskeyRequest]) (*connect.Response[v1.VerifyPasskeyResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("openauth.intermediate.v1.IntermediateService.VerifyPasskey is not implemented"))
}

func (UnimplementedIntermediateServiceHandler) GetAuthenticatorAppOptions(context.Context, *connect.Request[v1.GetAuthenticatorAppOptionsRequest]) (*connect.Response[v1.GetAuthenticatorAppOptionsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("openauth.intermediate.v1.IntermediateService.GetAuthenticatorAppOptions is not implemented"))
}

func (UnimplementedIntermediateServiceHandler) RegisterAuthenticatorApp(context.Context, *connect.Request[v1.RegisterAuthenticatorAppRequest]) (*connect.Response[v1.RegisterAuthenticatorAppResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("openauth.intermediate.v1.IntermediateService.RegisterAuthenticatorApp is not implemented"))
}

func (UnimplementedIntermediateServiceHandler) VerifyAuthenticatorApp(context.Context, *connect.Request[v1.VerifyAuthenticatorAppRequest]) (*connect.Response[v1.VerifyAuthenticatorAppResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("openauth.intermediate.v1.IntermediateService.VerifyAuthenticatorApp is not implemented"))
}

func (UnimplementedIntermediateServiceHandler) SetEmailAsPrimaryLoginFactor(context.Context, *connect.Request[v1.SetEmailAsPrimaryLoginFactorRequest]) (*connect.Response[v1.SetEmailAsPrimaryLoginFactorResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("openauth.intermediate.v1.IntermediateService.SetEmailAsPrimaryLoginFactor is not implemented"))
}

func (UnimplementedIntermediateServiceHandler) CreateProject(context.Context, *connect.Request[v1.CreateProjectRequest]) (*connect.Response[v1.CreateProjectResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("openauth.intermediate.v1.IntermediateService.CreateProject is not implemented"))
}
