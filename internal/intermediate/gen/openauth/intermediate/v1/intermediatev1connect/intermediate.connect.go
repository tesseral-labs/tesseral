// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: openauth/intermediate/v1/intermediate.proto

package intermediatev1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/openauth/openauth/internal/intermediate/gen/openauth/intermediate/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// IntermediateServiceName is the fully-qualified name of the IntermediateService service.
	IntermediateServiceName = "openauth.intermediate.v1.IntermediateService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// IntermediateServiceWhoamiProcedure is the fully-qualified name of the IntermediateService's
	// Whoami RPC.
	IntermediateServiceWhoamiProcedure = "/openauth.intermediate.v1.IntermediateService/Whoami"
	// IntermediateServiceExchangeIntermediateSessionForSessionProcedure is the fully-qualified name of
	// the IntermediateService's ExchangeIntermediateSessionForSession RPC.
	IntermediateServiceExchangeIntermediateSessionForSessionProcedure = "/openauth.intermediate.v1.IntermediateService/ExchangeIntermediateSessionForSession"
	// IntermediateServiceExchangeIntermediateSessionForNewOrganizationSessionProcedure is the
	// fully-qualified name of the IntermediateService's
	// ExchangeIntermediateSessionForNewOrganizationSession RPC.
	IntermediateServiceExchangeIntermediateSessionForNewOrganizationSessionProcedure = "/openauth.intermediate.v1.IntermediateService/ExchangeIntermediateSessionForNewOrganizationSession"
	// IntermediateServiceGetGoogleOAuthRedirectURLProcedure is the fully-qualified name of the
	// IntermediateService's GetGoogleOAuthRedirectURL RPC.
	IntermediateServiceGetGoogleOAuthRedirectURLProcedure = "/openauth.intermediate.v1.IntermediateService/GetGoogleOAuthRedirectURL"
	// IntermediateServiceRedeemGoogleOAuthCodeProcedure is the fully-qualified name of the
	// IntermediateService's RedeemGoogleOAuthCode RPC.
	IntermediateServiceRedeemGoogleOAuthCodeProcedure = "/openauth.intermediate.v1.IntermediateService/RedeemGoogleOAuthCode"
	// IntermediateServiceGetMicrosoftOAuthRedirectURLProcedure is the fully-qualified name of the
	// IntermediateService's GetMicrosoftOAuthRedirectURL RPC.
	IntermediateServiceGetMicrosoftOAuthRedirectURLProcedure = "/openauth.intermediate.v1.IntermediateService/GetMicrosoftOAuthRedirectURL"
	// IntermediateServiceRedeemMicrosoftOAuthCodeProcedure is the fully-qualified name of the
	// IntermediateService's RedeemMicrosoftOAuthCode RPC.
	IntermediateServiceRedeemMicrosoftOAuthCodeProcedure = "/openauth.intermediate.v1.IntermediateService/RedeemMicrosoftOAuthCode"
	// IntermediateServiceIssueEmailVerificationChallengeProcedure is the fully-qualified name of the
	// IntermediateService's IssueEmailVerificationChallenge RPC.
	IntermediateServiceIssueEmailVerificationChallengeProcedure = "/openauth.intermediate.v1.IntermediateService/IssueEmailVerificationChallenge"
	// IntermediateServiceListOrganizationsProcedure is the fully-qualified name of the
	// IntermediateService's ListOrganizations RPC.
	IntermediateServiceListOrganizationsProcedure = "/openauth.intermediate.v1.IntermediateService/ListOrganizations"
	// IntermediateServiceListSAMLOrganizationsProcedure is the fully-qualified name of the
	// IntermediateService's ListSAMLOrganizations RPC.
	IntermediateServiceListSAMLOrganizationsProcedure = "/openauth.intermediate.v1.IntermediateService/ListSAMLOrganizations"
	// IntermediateServiceSignInWithEmailProcedure is the fully-qualified name of the
	// IntermediateService's SignInWithEmail RPC.
	IntermediateServiceSignInWithEmailProcedure = "/openauth.intermediate.v1.IntermediateService/SignInWithEmail"
	// IntermediateServiceVerifyEmailChallengeProcedure is the fully-qualified name of the
	// IntermediateService's VerifyEmailChallenge RPC.
	IntermediateServiceVerifyEmailChallengeProcedure = "/openauth.intermediate.v1.IntermediateService/VerifyEmailChallenge"
	// IntermediateServiceVerifyPasswordProcedure is the fully-qualified name of the
	// IntermediateService's VerifyPassword RPC.
	IntermediateServiceVerifyPasswordProcedure = "/openauth.intermediate.v1.IntermediateService/VerifyPassword"
	// IntermediateServiceGetProjectUISettingsProcedure is the fully-qualified name of the
	// IntermediateService's GetProjectUISettings RPC.
	IntermediateServiceGetProjectUISettingsProcedure = "/openauth.intermediate.v1.IntermediateService/GetProjectUISettings"
)

// IntermediateServiceClient is a client for the openauth.intermediate.v1.IntermediateService
// service.
type IntermediateServiceClient interface {
	Whoami(context.Context, *connect.Request[v1.WhoamiRequest]) (*connect.Response[v1.WhoamiResponse], error)
	ExchangeIntermediateSessionForSession(context.Context, *connect.Request[v1.ExchangeIntermediateSessionForSessionRequest]) (*connect.Response[v1.ExchangeIntermediateSessionForSessionResponse], error)
	ExchangeIntermediateSessionForNewOrganizationSession(context.Context, *connect.Request[v1.ExchangeIntermediateSessionForNewOrganizationSessionRequest]) (*connect.Response[v1.ExchangeIntermediateSessionForNewOrganizationSessionResponse], error)
	GetGoogleOAuthRedirectURL(context.Context, *connect.Request[v1.GetGoogleOAuthRedirectURLRequest]) (*connect.Response[v1.GetGoogleOAuthRedirectURLResponse], error)
	RedeemGoogleOAuthCode(context.Context, *connect.Request[v1.RedeemGoogleOAuthCodeRequest]) (*connect.Response[v1.RedeemGoogleOAuthCodeResponse], error)
	GetMicrosoftOAuthRedirectURL(context.Context, *connect.Request[v1.GetMicrosoftOAuthRedirectURLRequest]) (*connect.Response[v1.GetMicrosoftOAuthRedirectURLResponse], error)
	RedeemMicrosoftOAuthCode(context.Context, *connect.Request[v1.RedeemMicrosoftOAuthCodeRequest]) (*connect.Response[v1.RedeemMicrosoftOAuthCodeResponse], error)
	// Issues a new email verification challenge.
	IssueEmailVerificationChallenge(context.Context, *connect.Request[v1.IssueEmailVerificationChallengeRequest]) (*connect.Response[v1.IssueEmailVerificationChallengeResponse], error)
	// Gets a list of organizations.
	ListOrganizations(context.Context, *connect.Request[v1.ListOrganizationsRequest]) (*connect.Response[v1.ListOrganizationsResponse], error)
	// Gets a list of SAML organizations for a given email address.
	ListSAMLOrganizations(context.Context, *connect.Request[v1.ListSAMLOrganizationsRequest]) (*connect.Response[v1.ListSAMLOrganizationsResponse], error)
	// Creates a new intermediate session or session and cookies the requester.
	SignInWithEmail(context.Context, *connect.Request[v1.SignInWithEmailRequest]) (*connect.Response[v1.SignInWithEmailResponse], error)
	// Submits a challenge for verification of email address.
	VerifyEmailChallenge(context.Context, *connect.Request[v1.VerifyEmailChallengeRequest]) (*connect.Response[v1.VerifyEmailChallengeResponse], error)
	// Submits a password for verification of session.
	VerifyPassword(context.Context, *connect.Request[v1.VerifyPasswordRequest]) (*connect.Response[v1.VerifyPasswordResponse], error)
	GetProjectUISettings(context.Context, *connect.Request[v1.GetProjectUISettingsRequest]) (*connect.Response[v1.GetProjectUISettingsResponse], error)
}

// NewIntermediateServiceClient constructs a client for the
// openauth.intermediate.v1.IntermediateService service. By default, it uses the Connect protocol
// with the binary Protobuf Codec, asks for gzipped responses, and sends uncompressed requests. To
// use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or connect.WithGRPCWeb()
// options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewIntermediateServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) IntermediateServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	intermediateServiceMethods := v1.File_openauth_intermediate_v1_intermediate_proto.Services().ByName("IntermediateService").Methods()
	return &intermediateServiceClient{
		whoami: connect.NewClient[v1.WhoamiRequest, v1.WhoamiResponse](
			httpClient,
			baseURL+IntermediateServiceWhoamiProcedure,
			connect.WithSchema(intermediateServiceMethods.ByName("Whoami")),
			connect.WithClientOptions(opts...),
		),
		exchangeIntermediateSessionForSession: connect.NewClient[v1.ExchangeIntermediateSessionForSessionRequest, v1.ExchangeIntermediateSessionForSessionResponse](
			httpClient,
			baseURL+IntermediateServiceExchangeIntermediateSessionForSessionProcedure,
			connect.WithSchema(intermediateServiceMethods.ByName("ExchangeIntermediateSessionForSession")),
			connect.WithClientOptions(opts...),
		),
		exchangeIntermediateSessionForNewOrganizationSession: connect.NewClient[v1.ExchangeIntermediateSessionForNewOrganizationSessionRequest, v1.ExchangeIntermediateSessionForNewOrganizationSessionResponse](
			httpClient,
			baseURL+IntermediateServiceExchangeIntermediateSessionForNewOrganizationSessionProcedure,
			connect.WithSchema(intermediateServiceMethods.ByName("ExchangeIntermediateSessionForNewOrganizationSession")),
			connect.WithClientOptions(opts...),
		),
		getGoogleOAuthRedirectURL: connect.NewClient[v1.GetGoogleOAuthRedirectURLRequest, v1.GetGoogleOAuthRedirectURLResponse](
			httpClient,
			baseURL+IntermediateServiceGetGoogleOAuthRedirectURLProcedure,
			connect.WithSchema(intermediateServiceMethods.ByName("GetGoogleOAuthRedirectURL")),
			connect.WithClientOptions(opts...),
		),
		redeemGoogleOAuthCode: connect.NewClient[v1.RedeemGoogleOAuthCodeRequest, v1.RedeemGoogleOAuthCodeResponse](
			httpClient,
			baseURL+IntermediateServiceRedeemGoogleOAuthCodeProcedure,
			connect.WithSchema(intermediateServiceMethods.ByName("RedeemGoogleOAuthCode")),
			connect.WithClientOptions(opts...),
		),
		getMicrosoftOAuthRedirectURL: connect.NewClient[v1.GetMicrosoftOAuthRedirectURLRequest, v1.GetMicrosoftOAuthRedirectURLResponse](
			httpClient,
			baseURL+IntermediateServiceGetMicrosoftOAuthRedirectURLProcedure,
			connect.WithSchema(intermediateServiceMethods.ByName("GetMicrosoftOAuthRedirectURL")),
			connect.WithClientOptions(opts...),
		),
		redeemMicrosoftOAuthCode: connect.NewClient[v1.RedeemMicrosoftOAuthCodeRequest, v1.RedeemMicrosoftOAuthCodeResponse](
			httpClient,
			baseURL+IntermediateServiceRedeemMicrosoftOAuthCodeProcedure,
			connect.WithSchema(intermediateServiceMethods.ByName("RedeemMicrosoftOAuthCode")),
			connect.WithClientOptions(opts...),
		),
		issueEmailVerificationChallenge: connect.NewClient[v1.IssueEmailVerificationChallengeRequest, v1.IssueEmailVerificationChallengeResponse](
			httpClient,
			baseURL+IntermediateServiceIssueEmailVerificationChallengeProcedure,
			connect.WithSchema(intermediateServiceMethods.ByName("IssueEmailVerificationChallenge")),
			connect.WithClientOptions(opts...),
		),
		listOrganizations: connect.NewClient[v1.ListOrganizationsRequest, v1.ListOrganizationsResponse](
			httpClient,
			baseURL+IntermediateServiceListOrganizationsProcedure,
			connect.WithSchema(intermediateServiceMethods.ByName("ListOrganizations")),
			connect.WithClientOptions(opts...),
		),
		listSAMLOrganizations: connect.NewClient[v1.ListSAMLOrganizationsRequest, v1.ListSAMLOrganizationsResponse](
			httpClient,
			baseURL+IntermediateServiceListSAMLOrganizationsProcedure,
			connect.WithSchema(intermediateServiceMethods.ByName("ListSAMLOrganizations")),
			connect.WithClientOptions(opts...),
		),
		signInWithEmail: connect.NewClient[v1.SignInWithEmailRequest, v1.SignInWithEmailResponse](
			httpClient,
			baseURL+IntermediateServiceSignInWithEmailProcedure,
			connect.WithSchema(intermediateServiceMethods.ByName("SignInWithEmail")),
			connect.WithClientOptions(opts...),
		),
		verifyEmailChallenge: connect.NewClient[v1.VerifyEmailChallengeRequest, v1.VerifyEmailChallengeResponse](
			httpClient,
			baseURL+IntermediateServiceVerifyEmailChallengeProcedure,
			connect.WithSchema(intermediateServiceMethods.ByName("VerifyEmailChallenge")),
			connect.WithClientOptions(opts...),
		),
		verifyPassword: connect.NewClient[v1.VerifyPasswordRequest, v1.VerifyPasswordResponse](
			httpClient,
			baseURL+IntermediateServiceVerifyPasswordProcedure,
			connect.WithSchema(intermediateServiceMethods.ByName("VerifyPassword")),
			connect.WithClientOptions(opts...),
		),
		getProjectUISettings: connect.NewClient[v1.GetProjectUISettingsRequest, v1.GetProjectUISettingsResponse](
			httpClient,
			baseURL+IntermediateServiceGetProjectUISettingsProcedure,
			connect.WithSchema(intermediateServiceMethods.ByName("GetProjectUISettings")),
			connect.WithClientOptions(opts...),
		),
	}
}

// intermediateServiceClient implements IntermediateServiceClient.
type intermediateServiceClient struct {
	whoami                                               *connect.Client[v1.WhoamiRequest, v1.WhoamiResponse]
	exchangeIntermediateSessionForSession                *connect.Client[v1.ExchangeIntermediateSessionForSessionRequest, v1.ExchangeIntermediateSessionForSessionResponse]
	exchangeIntermediateSessionForNewOrganizationSession *connect.Client[v1.ExchangeIntermediateSessionForNewOrganizationSessionRequest, v1.ExchangeIntermediateSessionForNewOrganizationSessionResponse]
	getGoogleOAuthRedirectURL                            *connect.Client[v1.GetGoogleOAuthRedirectURLRequest, v1.GetGoogleOAuthRedirectURLResponse]
	redeemGoogleOAuthCode                                *connect.Client[v1.RedeemGoogleOAuthCodeRequest, v1.RedeemGoogleOAuthCodeResponse]
	getMicrosoftOAuthRedirectURL                         *connect.Client[v1.GetMicrosoftOAuthRedirectURLRequest, v1.GetMicrosoftOAuthRedirectURLResponse]
	redeemMicrosoftOAuthCode                             *connect.Client[v1.RedeemMicrosoftOAuthCodeRequest, v1.RedeemMicrosoftOAuthCodeResponse]
	issueEmailVerificationChallenge                      *connect.Client[v1.IssueEmailVerificationChallengeRequest, v1.IssueEmailVerificationChallengeResponse]
	listOrganizations                                    *connect.Client[v1.ListOrganizationsRequest, v1.ListOrganizationsResponse]
	listSAMLOrganizations                                *connect.Client[v1.ListSAMLOrganizationsRequest, v1.ListSAMLOrganizationsResponse]
	signInWithEmail                                      *connect.Client[v1.SignInWithEmailRequest, v1.SignInWithEmailResponse]
	verifyEmailChallenge                                 *connect.Client[v1.VerifyEmailChallengeRequest, v1.VerifyEmailChallengeResponse]
	verifyPassword                                       *connect.Client[v1.VerifyPasswordRequest, v1.VerifyPasswordResponse]
	getProjectUISettings                                 *connect.Client[v1.GetProjectUISettingsRequest, v1.GetProjectUISettingsResponse]
}

// Whoami calls openauth.intermediate.v1.IntermediateService.Whoami.
func (c *intermediateServiceClient) Whoami(ctx context.Context, req *connect.Request[v1.WhoamiRequest]) (*connect.Response[v1.WhoamiResponse], error) {
	return c.whoami.CallUnary(ctx, req)
}

// ExchangeIntermediateSessionForSession calls
// openauth.intermediate.v1.IntermediateService.ExchangeIntermediateSessionForSession.
func (c *intermediateServiceClient) ExchangeIntermediateSessionForSession(ctx context.Context, req *connect.Request[v1.ExchangeIntermediateSessionForSessionRequest]) (*connect.Response[v1.ExchangeIntermediateSessionForSessionResponse], error) {
	return c.exchangeIntermediateSessionForSession.CallUnary(ctx, req)
}

// ExchangeIntermediateSessionForNewOrganizationSession calls
// openauth.intermediate.v1.IntermediateService.ExchangeIntermediateSessionForNewOrganizationSession.
func (c *intermediateServiceClient) ExchangeIntermediateSessionForNewOrganizationSession(ctx context.Context, req *connect.Request[v1.ExchangeIntermediateSessionForNewOrganizationSessionRequest]) (*connect.Response[v1.ExchangeIntermediateSessionForNewOrganizationSessionResponse], error) {
	return c.exchangeIntermediateSessionForNewOrganizationSession.CallUnary(ctx, req)
}

// GetGoogleOAuthRedirectURL calls
// openauth.intermediate.v1.IntermediateService.GetGoogleOAuthRedirectURL.
func (c *intermediateServiceClient) GetGoogleOAuthRedirectURL(ctx context.Context, req *connect.Request[v1.GetGoogleOAuthRedirectURLRequest]) (*connect.Response[v1.GetGoogleOAuthRedirectURLResponse], error) {
	return c.getGoogleOAuthRedirectURL.CallUnary(ctx, req)
}

// RedeemGoogleOAuthCode calls openauth.intermediate.v1.IntermediateService.RedeemGoogleOAuthCode.
func (c *intermediateServiceClient) RedeemGoogleOAuthCode(ctx context.Context, req *connect.Request[v1.RedeemGoogleOAuthCodeRequest]) (*connect.Response[v1.RedeemGoogleOAuthCodeResponse], error) {
	return c.redeemGoogleOAuthCode.CallUnary(ctx, req)
}

// GetMicrosoftOAuthRedirectURL calls
// openauth.intermediate.v1.IntermediateService.GetMicrosoftOAuthRedirectURL.
func (c *intermediateServiceClient) GetMicrosoftOAuthRedirectURL(ctx context.Context, req *connect.Request[v1.GetMicrosoftOAuthRedirectURLRequest]) (*connect.Response[v1.GetMicrosoftOAuthRedirectURLResponse], error) {
	return c.getMicrosoftOAuthRedirectURL.CallUnary(ctx, req)
}

// RedeemMicrosoftOAuthCode calls
// openauth.intermediate.v1.IntermediateService.RedeemMicrosoftOAuthCode.
func (c *intermediateServiceClient) RedeemMicrosoftOAuthCode(ctx context.Context, req *connect.Request[v1.RedeemMicrosoftOAuthCodeRequest]) (*connect.Response[v1.RedeemMicrosoftOAuthCodeResponse], error) {
	return c.redeemMicrosoftOAuthCode.CallUnary(ctx, req)
}

// IssueEmailVerificationChallenge calls
// openauth.intermediate.v1.IntermediateService.IssueEmailVerificationChallenge.
func (c *intermediateServiceClient) IssueEmailVerificationChallenge(ctx context.Context, req *connect.Request[v1.IssueEmailVerificationChallengeRequest]) (*connect.Response[v1.IssueEmailVerificationChallengeResponse], error) {
	return c.issueEmailVerificationChallenge.CallUnary(ctx, req)
}

// ListOrganizations calls openauth.intermediate.v1.IntermediateService.ListOrganizations.
func (c *intermediateServiceClient) ListOrganizations(ctx context.Context, req *connect.Request[v1.ListOrganizationsRequest]) (*connect.Response[v1.ListOrganizationsResponse], error) {
	return c.listOrganizations.CallUnary(ctx, req)
}

// ListSAMLOrganizations calls openauth.intermediate.v1.IntermediateService.ListSAMLOrganizations.
func (c *intermediateServiceClient) ListSAMLOrganizations(ctx context.Context, req *connect.Request[v1.ListSAMLOrganizationsRequest]) (*connect.Response[v1.ListSAMLOrganizationsResponse], error) {
	return c.listSAMLOrganizations.CallUnary(ctx, req)
}

// SignInWithEmail calls openauth.intermediate.v1.IntermediateService.SignInWithEmail.
func (c *intermediateServiceClient) SignInWithEmail(ctx context.Context, req *connect.Request[v1.SignInWithEmailRequest]) (*connect.Response[v1.SignInWithEmailResponse], error) {
	return c.signInWithEmail.CallUnary(ctx, req)
}

// VerifyEmailChallenge calls openauth.intermediate.v1.IntermediateService.VerifyEmailChallenge.
func (c *intermediateServiceClient) VerifyEmailChallenge(ctx context.Context, req *connect.Request[v1.VerifyEmailChallengeRequest]) (*connect.Response[v1.VerifyEmailChallengeResponse], error) {
	return c.verifyEmailChallenge.CallUnary(ctx, req)
}

// VerifyPassword calls openauth.intermediate.v1.IntermediateService.VerifyPassword.
func (c *intermediateServiceClient) VerifyPassword(ctx context.Context, req *connect.Request[v1.VerifyPasswordRequest]) (*connect.Response[v1.VerifyPasswordResponse], error) {
	return c.verifyPassword.CallUnary(ctx, req)
}

// GetProjectUISettings calls openauth.intermediate.v1.IntermediateService.GetProjectUISettings.
func (c *intermediateServiceClient) GetProjectUISettings(ctx context.Context, req *connect.Request[v1.GetProjectUISettingsRequest]) (*connect.Response[v1.GetProjectUISettingsResponse], error) {
	return c.getProjectUISettings.CallUnary(ctx, req)
}

// IntermediateServiceHandler is an implementation of the
// openauth.intermediate.v1.IntermediateService service.
type IntermediateServiceHandler interface {
	Whoami(context.Context, *connect.Request[v1.WhoamiRequest]) (*connect.Response[v1.WhoamiResponse], error)
	ExchangeIntermediateSessionForSession(context.Context, *connect.Request[v1.ExchangeIntermediateSessionForSessionRequest]) (*connect.Response[v1.ExchangeIntermediateSessionForSessionResponse], error)
	ExchangeIntermediateSessionForNewOrganizationSession(context.Context, *connect.Request[v1.ExchangeIntermediateSessionForNewOrganizationSessionRequest]) (*connect.Response[v1.ExchangeIntermediateSessionForNewOrganizationSessionResponse], error)
	GetGoogleOAuthRedirectURL(context.Context, *connect.Request[v1.GetGoogleOAuthRedirectURLRequest]) (*connect.Response[v1.GetGoogleOAuthRedirectURLResponse], error)
	RedeemGoogleOAuthCode(context.Context, *connect.Request[v1.RedeemGoogleOAuthCodeRequest]) (*connect.Response[v1.RedeemGoogleOAuthCodeResponse], error)
	GetMicrosoftOAuthRedirectURL(context.Context, *connect.Request[v1.GetMicrosoftOAuthRedirectURLRequest]) (*connect.Response[v1.GetMicrosoftOAuthRedirectURLResponse], error)
	RedeemMicrosoftOAuthCode(context.Context, *connect.Request[v1.RedeemMicrosoftOAuthCodeRequest]) (*connect.Response[v1.RedeemMicrosoftOAuthCodeResponse], error)
	// Issues a new email verification challenge.
	IssueEmailVerificationChallenge(context.Context, *connect.Request[v1.IssueEmailVerificationChallengeRequest]) (*connect.Response[v1.IssueEmailVerificationChallengeResponse], error)
	// Gets a list of organizations.
	ListOrganizations(context.Context, *connect.Request[v1.ListOrganizationsRequest]) (*connect.Response[v1.ListOrganizationsResponse], error)
	// Gets a list of SAML organizations for a given email address.
	ListSAMLOrganizations(context.Context, *connect.Request[v1.ListSAMLOrganizationsRequest]) (*connect.Response[v1.ListSAMLOrganizationsResponse], error)
	// Creates a new intermediate session or session and cookies the requester.
	SignInWithEmail(context.Context, *connect.Request[v1.SignInWithEmailRequest]) (*connect.Response[v1.SignInWithEmailResponse], error)
	// Submits a challenge for verification of email address.
	VerifyEmailChallenge(context.Context, *connect.Request[v1.VerifyEmailChallengeRequest]) (*connect.Response[v1.VerifyEmailChallengeResponse], error)
	// Submits a password for verification of session.
	VerifyPassword(context.Context, *connect.Request[v1.VerifyPasswordRequest]) (*connect.Response[v1.VerifyPasswordResponse], error)
	GetProjectUISettings(context.Context, *connect.Request[v1.GetProjectUISettingsRequest]) (*connect.Response[v1.GetProjectUISettingsResponse], error)
}

// NewIntermediateServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewIntermediateServiceHandler(svc IntermediateServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	intermediateServiceMethods := v1.File_openauth_intermediate_v1_intermediate_proto.Services().ByName("IntermediateService").Methods()
	intermediateServiceWhoamiHandler := connect.NewUnaryHandler(
		IntermediateServiceWhoamiProcedure,
		svc.Whoami,
		connect.WithSchema(intermediateServiceMethods.ByName("Whoami")),
		connect.WithHandlerOptions(opts...),
	)
	intermediateServiceExchangeIntermediateSessionForSessionHandler := connect.NewUnaryHandler(
		IntermediateServiceExchangeIntermediateSessionForSessionProcedure,
		svc.ExchangeIntermediateSessionForSession,
		connect.WithSchema(intermediateServiceMethods.ByName("ExchangeIntermediateSessionForSession")),
		connect.WithHandlerOptions(opts...),
	)
	intermediateServiceExchangeIntermediateSessionForNewOrganizationSessionHandler := connect.NewUnaryHandler(
		IntermediateServiceExchangeIntermediateSessionForNewOrganizationSessionProcedure,
		svc.ExchangeIntermediateSessionForNewOrganizationSession,
		connect.WithSchema(intermediateServiceMethods.ByName("ExchangeIntermediateSessionForNewOrganizationSession")),
		connect.WithHandlerOptions(opts...),
	)
	intermediateServiceGetGoogleOAuthRedirectURLHandler := connect.NewUnaryHandler(
		IntermediateServiceGetGoogleOAuthRedirectURLProcedure,
		svc.GetGoogleOAuthRedirectURL,
		connect.WithSchema(intermediateServiceMethods.ByName("GetGoogleOAuthRedirectURL")),
		connect.WithHandlerOptions(opts...),
	)
	intermediateServiceRedeemGoogleOAuthCodeHandler := connect.NewUnaryHandler(
		IntermediateServiceRedeemGoogleOAuthCodeProcedure,
		svc.RedeemGoogleOAuthCode,
		connect.WithSchema(intermediateServiceMethods.ByName("RedeemGoogleOAuthCode")),
		connect.WithHandlerOptions(opts...),
	)
	intermediateServiceGetMicrosoftOAuthRedirectURLHandler := connect.NewUnaryHandler(
		IntermediateServiceGetMicrosoftOAuthRedirectURLProcedure,
		svc.GetMicrosoftOAuthRedirectURL,
		connect.WithSchema(intermediateServiceMethods.ByName("GetMicrosoftOAuthRedirectURL")),
		connect.WithHandlerOptions(opts...),
	)
	intermediateServiceRedeemMicrosoftOAuthCodeHandler := connect.NewUnaryHandler(
		IntermediateServiceRedeemMicrosoftOAuthCodeProcedure,
		svc.RedeemMicrosoftOAuthCode,
		connect.WithSchema(intermediateServiceMethods.ByName("RedeemMicrosoftOAuthCode")),
		connect.WithHandlerOptions(opts...),
	)
	intermediateServiceIssueEmailVerificationChallengeHandler := connect.NewUnaryHandler(
		IntermediateServiceIssueEmailVerificationChallengeProcedure,
		svc.IssueEmailVerificationChallenge,
		connect.WithSchema(intermediateServiceMethods.ByName("IssueEmailVerificationChallenge")),
		connect.WithHandlerOptions(opts...),
	)
	intermediateServiceListOrganizationsHandler := connect.NewUnaryHandler(
		IntermediateServiceListOrganizationsProcedure,
		svc.ListOrganizations,
		connect.WithSchema(intermediateServiceMethods.ByName("ListOrganizations")),
		connect.WithHandlerOptions(opts...),
	)
	intermediateServiceListSAMLOrganizationsHandler := connect.NewUnaryHandler(
		IntermediateServiceListSAMLOrganizationsProcedure,
		svc.ListSAMLOrganizations,
		connect.WithSchema(intermediateServiceMethods.ByName("ListSAMLOrganizations")),
		connect.WithHandlerOptions(opts...),
	)
	intermediateServiceSignInWithEmailHandler := connect.NewUnaryHandler(
		IntermediateServiceSignInWithEmailProcedure,
		svc.SignInWithEmail,
		connect.WithSchema(intermediateServiceMethods.ByName("SignInWithEmail")),
		connect.WithHandlerOptions(opts...),
	)
	intermediateServiceVerifyEmailChallengeHandler := connect.NewUnaryHandler(
		IntermediateServiceVerifyEmailChallengeProcedure,
		svc.VerifyEmailChallenge,
		connect.WithSchema(intermediateServiceMethods.ByName("VerifyEmailChallenge")),
		connect.WithHandlerOptions(opts...),
	)
	intermediateServiceVerifyPasswordHandler := connect.NewUnaryHandler(
		IntermediateServiceVerifyPasswordProcedure,
		svc.VerifyPassword,
		connect.WithSchema(intermediateServiceMethods.ByName("VerifyPassword")),
		connect.WithHandlerOptions(opts...),
	)
	intermediateServiceGetProjectUISettingsHandler := connect.NewUnaryHandler(
		IntermediateServiceGetProjectUISettingsProcedure,
		svc.GetProjectUISettings,
		connect.WithSchema(intermediateServiceMethods.ByName("GetProjectUISettings")),
		connect.WithHandlerOptions(opts...),
	)
	return "/openauth.intermediate.v1.IntermediateService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case IntermediateServiceWhoamiProcedure:
			intermediateServiceWhoamiHandler.ServeHTTP(w, r)
		case IntermediateServiceExchangeIntermediateSessionForSessionProcedure:
			intermediateServiceExchangeIntermediateSessionForSessionHandler.ServeHTTP(w, r)
		case IntermediateServiceExchangeIntermediateSessionForNewOrganizationSessionProcedure:
			intermediateServiceExchangeIntermediateSessionForNewOrganizationSessionHandler.ServeHTTP(w, r)
		case IntermediateServiceGetGoogleOAuthRedirectURLProcedure:
			intermediateServiceGetGoogleOAuthRedirectURLHandler.ServeHTTP(w, r)
		case IntermediateServiceRedeemGoogleOAuthCodeProcedure:
			intermediateServiceRedeemGoogleOAuthCodeHandler.ServeHTTP(w, r)
		case IntermediateServiceGetMicrosoftOAuthRedirectURLProcedure:
			intermediateServiceGetMicrosoftOAuthRedirectURLHandler.ServeHTTP(w, r)
		case IntermediateServiceRedeemMicrosoftOAuthCodeProcedure:
			intermediateServiceRedeemMicrosoftOAuthCodeHandler.ServeHTTP(w, r)
		case IntermediateServiceIssueEmailVerificationChallengeProcedure:
			intermediateServiceIssueEmailVerificationChallengeHandler.ServeHTTP(w, r)
		case IntermediateServiceListOrganizationsProcedure:
			intermediateServiceListOrganizationsHandler.ServeHTTP(w, r)
		case IntermediateServiceListSAMLOrganizationsProcedure:
			intermediateServiceListSAMLOrganizationsHandler.ServeHTTP(w, r)
		case IntermediateServiceSignInWithEmailProcedure:
			intermediateServiceSignInWithEmailHandler.ServeHTTP(w, r)
		case IntermediateServiceVerifyEmailChallengeProcedure:
			intermediateServiceVerifyEmailChallengeHandler.ServeHTTP(w, r)
		case IntermediateServiceVerifyPasswordProcedure:
			intermediateServiceVerifyPasswordHandler.ServeHTTP(w, r)
		case IntermediateServiceGetProjectUISettingsProcedure:
			intermediateServiceGetProjectUISettingsHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedIntermediateServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedIntermediateServiceHandler struct{}

func (UnimplementedIntermediateServiceHandler) Whoami(context.Context, *connect.Request[v1.WhoamiRequest]) (*connect.Response[v1.WhoamiResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("openauth.intermediate.v1.IntermediateService.Whoami is not implemented"))
}

func (UnimplementedIntermediateServiceHandler) ExchangeIntermediateSessionForSession(context.Context, *connect.Request[v1.ExchangeIntermediateSessionForSessionRequest]) (*connect.Response[v1.ExchangeIntermediateSessionForSessionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("openauth.intermediate.v1.IntermediateService.ExchangeIntermediateSessionForSession is not implemented"))
}

func (UnimplementedIntermediateServiceHandler) ExchangeIntermediateSessionForNewOrganizationSession(context.Context, *connect.Request[v1.ExchangeIntermediateSessionForNewOrganizationSessionRequest]) (*connect.Response[v1.ExchangeIntermediateSessionForNewOrganizationSessionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("openauth.intermediate.v1.IntermediateService.ExchangeIntermediateSessionForNewOrganizationSession is not implemented"))
}

func (UnimplementedIntermediateServiceHandler) GetGoogleOAuthRedirectURL(context.Context, *connect.Request[v1.GetGoogleOAuthRedirectURLRequest]) (*connect.Response[v1.GetGoogleOAuthRedirectURLResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("openauth.intermediate.v1.IntermediateService.GetGoogleOAuthRedirectURL is not implemented"))
}

func (UnimplementedIntermediateServiceHandler) RedeemGoogleOAuthCode(context.Context, *connect.Request[v1.RedeemGoogleOAuthCodeRequest]) (*connect.Response[v1.RedeemGoogleOAuthCodeResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("openauth.intermediate.v1.IntermediateService.RedeemGoogleOAuthCode is not implemented"))
}

func (UnimplementedIntermediateServiceHandler) GetMicrosoftOAuthRedirectURL(context.Context, *connect.Request[v1.GetMicrosoftOAuthRedirectURLRequest]) (*connect.Response[v1.GetMicrosoftOAuthRedirectURLResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("openauth.intermediate.v1.IntermediateService.GetMicrosoftOAuthRedirectURL is not implemented"))
}

func (UnimplementedIntermediateServiceHandler) RedeemMicrosoftOAuthCode(context.Context, *connect.Request[v1.RedeemMicrosoftOAuthCodeRequest]) (*connect.Response[v1.RedeemMicrosoftOAuthCodeResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("openauth.intermediate.v1.IntermediateService.RedeemMicrosoftOAuthCode is not implemented"))
}

func (UnimplementedIntermediateServiceHandler) IssueEmailVerificationChallenge(context.Context, *connect.Request[v1.IssueEmailVerificationChallengeRequest]) (*connect.Response[v1.IssueEmailVerificationChallengeResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("openauth.intermediate.v1.IntermediateService.IssueEmailVerificationChallenge is not implemented"))
}

func (UnimplementedIntermediateServiceHandler) ListOrganizations(context.Context, *connect.Request[v1.ListOrganizationsRequest]) (*connect.Response[v1.ListOrganizationsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("openauth.intermediate.v1.IntermediateService.ListOrganizations is not implemented"))
}

func (UnimplementedIntermediateServiceHandler) ListSAMLOrganizations(context.Context, *connect.Request[v1.ListSAMLOrganizationsRequest]) (*connect.Response[v1.ListSAMLOrganizationsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("openauth.intermediate.v1.IntermediateService.ListSAMLOrganizations is not implemented"))
}

func (UnimplementedIntermediateServiceHandler) SignInWithEmail(context.Context, *connect.Request[v1.SignInWithEmailRequest]) (*connect.Response[v1.SignInWithEmailResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("openauth.intermediate.v1.IntermediateService.SignInWithEmail is not implemented"))
}

func (UnimplementedIntermediateServiceHandler) VerifyEmailChallenge(context.Context, *connect.Request[v1.VerifyEmailChallengeRequest]) (*connect.Response[v1.VerifyEmailChallengeResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("openauth.intermediate.v1.IntermediateService.VerifyEmailChallenge is not implemented"))
}

func (UnimplementedIntermediateServiceHandler) VerifyPassword(context.Context, *connect.Request[v1.VerifyPasswordRequest]) (*connect.Response[v1.VerifyPasswordResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("openauth.intermediate.v1.IntermediateService.VerifyPassword is not implemented"))
}

func (UnimplementedIntermediateServiceHandler) GetProjectUISettings(context.Context, *connect.Request[v1.GetProjectUISettingsRequest]) (*connect.Response[v1.GetProjectUISettingsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("openauth.intermediate.v1.IntermediateService.GetProjectUISettings is not implemented"))
}
