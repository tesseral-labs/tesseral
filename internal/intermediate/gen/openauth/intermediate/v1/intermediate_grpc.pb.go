// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: openauth/intermediate/v1/intermediate.proto

package intermediatev1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	IntermediateService_ListSAMLOrganizations_FullMethodName                 = "/openauth.intermediate.v1.IntermediateService/ListSAMLOrganizations"
	IntermediateService_GetProjectUISettings_FullMethodName                  = "/openauth.intermediate.v1.IntermediateService/GetProjectUISettings"
	IntermediateService_RedeemUserImpersonationToken_FullMethodName          = "/openauth.intermediate.v1.IntermediateService/RedeemUserImpersonationToken"
	IntermediateService_CreateIntermediateSession_FullMethodName             = "/openauth.intermediate.v1.IntermediateService/CreateIntermediateSession"
	IntermediateService_Whoami_FullMethodName                                = "/openauth.intermediate.v1.IntermediateService/Whoami"
	IntermediateService_CreateOrganization_FullMethodName                    = "/openauth.intermediate.v1.IntermediateService/CreateOrganization"
	IntermediateService_ListOrganizations_FullMethodName                     = "/openauth.intermediate.v1.IntermediateService/ListOrganizations"
	IntermediateService_SetOrganization_FullMethodName                       = "/openauth.intermediate.v1.IntermediateService/SetOrganization"
	IntermediateService_ExchangeIntermediateSessionForSession_FullMethodName = "/openauth.intermediate.v1.IntermediateService/ExchangeIntermediateSessionForSession"
	IntermediateService_GetGoogleOAuthRedirectURL_FullMethodName             = "/openauth.intermediate.v1.IntermediateService/GetGoogleOAuthRedirectURL"
	IntermediateService_RedeemGoogleOAuthCode_FullMethodName                 = "/openauth.intermediate.v1.IntermediateService/RedeemGoogleOAuthCode"
	IntermediateService_GetMicrosoftOAuthRedirectURL_FullMethodName          = "/openauth.intermediate.v1.IntermediateService/GetMicrosoftOAuthRedirectURL"
	IntermediateService_RedeemMicrosoftOAuthCode_FullMethodName              = "/openauth.intermediate.v1.IntermediateService/RedeemMicrosoftOAuthCode"
	IntermediateService_IssueEmailVerificationChallenge_FullMethodName       = "/openauth.intermediate.v1.IntermediateService/IssueEmailVerificationChallenge"
	IntermediateService_VerifyEmailChallenge_FullMethodName                  = "/openauth.intermediate.v1.IntermediateService/VerifyEmailChallenge"
	IntermediateService_RegisterPassword_FullMethodName                      = "/openauth.intermediate.v1.IntermediateService/RegisterPassword"
	IntermediateService_VerifyPassword_FullMethodName                        = "/openauth.intermediate.v1.IntermediateService/VerifyPassword"
)

// IntermediateServiceClient is the client API for IntermediateService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type IntermediateServiceClient interface {
	ListSAMLOrganizations(ctx context.Context, in *ListSAMLOrganizationsRequest, opts ...grpc.CallOption) (*ListSAMLOrganizationsResponse, error)
	GetProjectUISettings(ctx context.Context, in *GetProjectUISettingsRequest, opts ...grpc.CallOption) (*GetProjectUISettingsResponse, error)
	RedeemUserImpersonationToken(ctx context.Context, in *RedeemUserImpersonationTokenRequest, opts ...grpc.CallOption) (*RedeemUserImpersonationTokenResponse, error)
	CreateIntermediateSession(ctx context.Context, in *CreateIntermediateSessionRequest, opts ...grpc.CallOption) (*CreateIntermediateSessionResponse, error)
	Whoami(ctx context.Context, in *WhoamiRequest, opts ...grpc.CallOption) (*WhoamiResponse, error)
	CreateOrganization(ctx context.Context, in *CreateOrganizationRequest, opts ...grpc.CallOption) (*CreateOrganizationResponse, error)
	ListOrganizations(ctx context.Context, in *ListOrganizationsRequest, opts ...grpc.CallOption) (*ListOrganizationsResponse, error)
	SetOrganization(ctx context.Context, in *SetOrganizationRequest, opts ...grpc.CallOption) (*SetOrganizationResponse, error)
	ExchangeIntermediateSessionForSession(ctx context.Context, in *ExchangeIntermediateSessionForSessionRequest, opts ...grpc.CallOption) (*ExchangeIntermediateSessionForSessionResponse, error)
	GetGoogleOAuthRedirectURL(ctx context.Context, in *GetGoogleOAuthRedirectURLRequest, opts ...grpc.CallOption) (*GetGoogleOAuthRedirectURLResponse, error)
	RedeemGoogleOAuthCode(ctx context.Context, in *RedeemGoogleOAuthCodeRequest, opts ...grpc.CallOption) (*RedeemGoogleOAuthCodeResponse, error)
	GetMicrosoftOAuthRedirectURL(ctx context.Context, in *GetMicrosoftOAuthRedirectURLRequest, opts ...grpc.CallOption) (*GetMicrosoftOAuthRedirectURLResponse, error)
	RedeemMicrosoftOAuthCode(ctx context.Context, in *RedeemMicrosoftOAuthCodeRequest, opts ...grpc.CallOption) (*RedeemMicrosoftOAuthCodeResponse, error)
	IssueEmailVerificationChallenge(ctx context.Context, in *IssueEmailVerificationChallengeRequest, opts ...grpc.CallOption) (*IssueEmailVerificationChallengeResponse, error)
	VerifyEmailChallenge(ctx context.Context, in *VerifyEmailChallengeRequest, opts ...grpc.CallOption) (*VerifyEmailChallengeResponse, error)
	RegisterPassword(ctx context.Context, in *RegisterPasswordRequest, opts ...grpc.CallOption) (*RegisterPasswordResponse, error)
	VerifyPassword(ctx context.Context, in *VerifyPasswordRequest, opts ...grpc.CallOption) (*VerifyPasswordResponse, error)
}

type intermediateServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewIntermediateServiceClient(cc grpc.ClientConnInterface) IntermediateServiceClient {
	return &intermediateServiceClient{cc}
}

func (c *intermediateServiceClient) ListSAMLOrganizations(ctx context.Context, in *ListSAMLOrganizationsRequest, opts ...grpc.CallOption) (*ListSAMLOrganizationsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListSAMLOrganizationsResponse)
	err := c.cc.Invoke(ctx, IntermediateService_ListSAMLOrganizations_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *intermediateServiceClient) GetProjectUISettings(ctx context.Context, in *GetProjectUISettingsRequest, opts ...grpc.CallOption) (*GetProjectUISettingsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetProjectUISettingsResponse)
	err := c.cc.Invoke(ctx, IntermediateService_GetProjectUISettings_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *intermediateServiceClient) RedeemUserImpersonationToken(ctx context.Context, in *RedeemUserImpersonationTokenRequest, opts ...grpc.CallOption) (*RedeemUserImpersonationTokenResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RedeemUserImpersonationTokenResponse)
	err := c.cc.Invoke(ctx, IntermediateService_RedeemUserImpersonationToken_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *intermediateServiceClient) CreateIntermediateSession(ctx context.Context, in *CreateIntermediateSessionRequest, opts ...grpc.CallOption) (*CreateIntermediateSessionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateIntermediateSessionResponse)
	err := c.cc.Invoke(ctx, IntermediateService_CreateIntermediateSession_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *intermediateServiceClient) Whoami(ctx context.Context, in *WhoamiRequest, opts ...grpc.CallOption) (*WhoamiResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(WhoamiResponse)
	err := c.cc.Invoke(ctx, IntermediateService_Whoami_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *intermediateServiceClient) CreateOrganization(ctx context.Context, in *CreateOrganizationRequest, opts ...grpc.CallOption) (*CreateOrganizationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateOrganizationResponse)
	err := c.cc.Invoke(ctx, IntermediateService_CreateOrganization_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *intermediateServiceClient) ListOrganizations(ctx context.Context, in *ListOrganizationsRequest, opts ...grpc.CallOption) (*ListOrganizationsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListOrganizationsResponse)
	err := c.cc.Invoke(ctx, IntermediateService_ListOrganizations_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *intermediateServiceClient) SetOrganization(ctx context.Context, in *SetOrganizationRequest, opts ...grpc.CallOption) (*SetOrganizationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetOrganizationResponse)
	err := c.cc.Invoke(ctx, IntermediateService_SetOrganization_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *intermediateServiceClient) ExchangeIntermediateSessionForSession(ctx context.Context, in *ExchangeIntermediateSessionForSessionRequest, opts ...grpc.CallOption) (*ExchangeIntermediateSessionForSessionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ExchangeIntermediateSessionForSessionResponse)
	err := c.cc.Invoke(ctx, IntermediateService_ExchangeIntermediateSessionForSession_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *intermediateServiceClient) GetGoogleOAuthRedirectURL(ctx context.Context, in *GetGoogleOAuthRedirectURLRequest, opts ...grpc.CallOption) (*GetGoogleOAuthRedirectURLResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetGoogleOAuthRedirectURLResponse)
	err := c.cc.Invoke(ctx, IntermediateService_GetGoogleOAuthRedirectURL_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *intermediateServiceClient) RedeemGoogleOAuthCode(ctx context.Context, in *RedeemGoogleOAuthCodeRequest, opts ...grpc.CallOption) (*RedeemGoogleOAuthCodeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RedeemGoogleOAuthCodeResponse)
	err := c.cc.Invoke(ctx, IntermediateService_RedeemGoogleOAuthCode_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *intermediateServiceClient) GetMicrosoftOAuthRedirectURL(ctx context.Context, in *GetMicrosoftOAuthRedirectURLRequest, opts ...grpc.CallOption) (*GetMicrosoftOAuthRedirectURLResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetMicrosoftOAuthRedirectURLResponse)
	err := c.cc.Invoke(ctx, IntermediateService_GetMicrosoftOAuthRedirectURL_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *intermediateServiceClient) RedeemMicrosoftOAuthCode(ctx context.Context, in *RedeemMicrosoftOAuthCodeRequest, opts ...grpc.CallOption) (*RedeemMicrosoftOAuthCodeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RedeemMicrosoftOAuthCodeResponse)
	err := c.cc.Invoke(ctx, IntermediateService_RedeemMicrosoftOAuthCode_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *intermediateServiceClient) IssueEmailVerificationChallenge(ctx context.Context, in *IssueEmailVerificationChallengeRequest, opts ...grpc.CallOption) (*IssueEmailVerificationChallengeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IssueEmailVerificationChallengeResponse)
	err := c.cc.Invoke(ctx, IntermediateService_IssueEmailVerificationChallenge_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *intermediateServiceClient) VerifyEmailChallenge(ctx context.Context, in *VerifyEmailChallengeRequest, opts ...grpc.CallOption) (*VerifyEmailChallengeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VerifyEmailChallengeResponse)
	err := c.cc.Invoke(ctx, IntermediateService_VerifyEmailChallenge_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *intermediateServiceClient) RegisterPassword(ctx context.Context, in *RegisterPasswordRequest, opts ...grpc.CallOption) (*RegisterPasswordResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RegisterPasswordResponse)
	err := c.cc.Invoke(ctx, IntermediateService_RegisterPassword_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *intermediateServiceClient) VerifyPassword(ctx context.Context, in *VerifyPasswordRequest, opts ...grpc.CallOption) (*VerifyPasswordResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VerifyPasswordResponse)
	err := c.cc.Invoke(ctx, IntermediateService_VerifyPassword_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IntermediateServiceServer is the server API for IntermediateService service.
// All implementations must embed UnimplementedIntermediateServiceServer
// for forward compatibility.
type IntermediateServiceServer interface {
	ListSAMLOrganizations(context.Context, *ListSAMLOrganizationsRequest) (*ListSAMLOrganizationsResponse, error)
	GetProjectUISettings(context.Context, *GetProjectUISettingsRequest) (*GetProjectUISettingsResponse, error)
	RedeemUserImpersonationToken(context.Context, *RedeemUserImpersonationTokenRequest) (*RedeemUserImpersonationTokenResponse, error)
	CreateIntermediateSession(context.Context, *CreateIntermediateSessionRequest) (*CreateIntermediateSessionResponse, error)
	Whoami(context.Context, *WhoamiRequest) (*WhoamiResponse, error)
	CreateOrganization(context.Context, *CreateOrganizationRequest) (*CreateOrganizationResponse, error)
	ListOrganizations(context.Context, *ListOrganizationsRequest) (*ListOrganizationsResponse, error)
	SetOrganization(context.Context, *SetOrganizationRequest) (*SetOrganizationResponse, error)
	ExchangeIntermediateSessionForSession(context.Context, *ExchangeIntermediateSessionForSessionRequest) (*ExchangeIntermediateSessionForSessionResponse, error)
	GetGoogleOAuthRedirectURL(context.Context, *GetGoogleOAuthRedirectURLRequest) (*GetGoogleOAuthRedirectURLResponse, error)
	RedeemGoogleOAuthCode(context.Context, *RedeemGoogleOAuthCodeRequest) (*RedeemGoogleOAuthCodeResponse, error)
	GetMicrosoftOAuthRedirectURL(context.Context, *GetMicrosoftOAuthRedirectURLRequest) (*GetMicrosoftOAuthRedirectURLResponse, error)
	RedeemMicrosoftOAuthCode(context.Context, *RedeemMicrosoftOAuthCodeRequest) (*RedeemMicrosoftOAuthCodeResponse, error)
	IssueEmailVerificationChallenge(context.Context, *IssueEmailVerificationChallengeRequest) (*IssueEmailVerificationChallengeResponse, error)
	VerifyEmailChallenge(context.Context, *VerifyEmailChallengeRequest) (*VerifyEmailChallengeResponse, error)
	RegisterPassword(context.Context, *RegisterPasswordRequest) (*RegisterPasswordResponse, error)
	VerifyPassword(context.Context, *VerifyPasswordRequest) (*VerifyPasswordResponse, error)
	mustEmbedUnimplementedIntermediateServiceServer()
}

// UnimplementedIntermediateServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedIntermediateServiceServer struct{}

func (UnimplementedIntermediateServiceServer) ListSAMLOrganizations(context.Context, *ListSAMLOrganizationsRequest) (*ListSAMLOrganizationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSAMLOrganizations not implemented")
}
func (UnimplementedIntermediateServiceServer) GetProjectUISettings(context.Context, *GetProjectUISettingsRequest) (*GetProjectUISettingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProjectUISettings not implemented")
}
func (UnimplementedIntermediateServiceServer) RedeemUserImpersonationToken(context.Context, *RedeemUserImpersonationTokenRequest) (*RedeemUserImpersonationTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RedeemUserImpersonationToken not implemented")
}
func (UnimplementedIntermediateServiceServer) CreateIntermediateSession(context.Context, *CreateIntermediateSessionRequest) (*CreateIntermediateSessionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateIntermediateSession not implemented")
}
func (UnimplementedIntermediateServiceServer) Whoami(context.Context, *WhoamiRequest) (*WhoamiResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Whoami not implemented")
}
func (UnimplementedIntermediateServiceServer) CreateOrganization(context.Context, *CreateOrganizationRequest) (*CreateOrganizationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrganization not implemented")
}
func (UnimplementedIntermediateServiceServer) ListOrganizations(context.Context, *ListOrganizationsRequest) (*ListOrganizationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOrganizations not implemented")
}
func (UnimplementedIntermediateServiceServer) SetOrganization(context.Context, *SetOrganizationRequest) (*SetOrganizationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetOrganization not implemented")
}
func (UnimplementedIntermediateServiceServer) ExchangeIntermediateSessionForSession(context.Context, *ExchangeIntermediateSessionForSessionRequest) (*ExchangeIntermediateSessionForSessionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExchangeIntermediateSessionForSession not implemented")
}
func (UnimplementedIntermediateServiceServer) GetGoogleOAuthRedirectURL(context.Context, *GetGoogleOAuthRedirectURLRequest) (*GetGoogleOAuthRedirectURLResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGoogleOAuthRedirectURL not implemented")
}
func (UnimplementedIntermediateServiceServer) RedeemGoogleOAuthCode(context.Context, *RedeemGoogleOAuthCodeRequest) (*RedeemGoogleOAuthCodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RedeemGoogleOAuthCode not implemented")
}
func (UnimplementedIntermediateServiceServer) GetMicrosoftOAuthRedirectURL(context.Context, *GetMicrosoftOAuthRedirectURLRequest) (*GetMicrosoftOAuthRedirectURLResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMicrosoftOAuthRedirectURL not implemented")
}
func (UnimplementedIntermediateServiceServer) RedeemMicrosoftOAuthCode(context.Context, *RedeemMicrosoftOAuthCodeRequest) (*RedeemMicrosoftOAuthCodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RedeemMicrosoftOAuthCode not implemented")
}
func (UnimplementedIntermediateServiceServer) IssueEmailVerificationChallenge(context.Context, *IssueEmailVerificationChallengeRequest) (*IssueEmailVerificationChallengeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IssueEmailVerificationChallenge not implemented")
}
func (UnimplementedIntermediateServiceServer) VerifyEmailChallenge(context.Context, *VerifyEmailChallengeRequest) (*VerifyEmailChallengeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyEmailChallenge not implemented")
}
func (UnimplementedIntermediateServiceServer) RegisterPassword(context.Context, *RegisterPasswordRequest) (*RegisterPasswordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterPassword not implemented")
}
func (UnimplementedIntermediateServiceServer) VerifyPassword(context.Context, *VerifyPasswordRequest) (*VerifyPasswordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyPassword not implemented")
}
func (UnimplementedIntermediateServiceServer) mustEmbedUnimplementedIntermediateServiceServer() {}
func (UnimplementedIntermediateServiceServer) testEmbeddedByValue()                             {}

// UnsafeIntermediateServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IntermediateServiceServer will
// result in compilation errors.
type UnsafeIntermediateServiceServer interface {
	mustEmbedUnimplementedIntermediateServiceServer()
}

func RegisterIntermediateServiceServer(s grpc.ServiceRegistrar, srv IntermediateServiceServer) {
	// If the following call pancis, it indicates UnimplementedIntermediateServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&IntermediateService_ServiceDesc, srv)
}

func _IntermediateService_ListSAMLOrganizations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSAMLOrganizationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IntermediateServiceServer).ListSAMLOrganizations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IntermediateService_ListSAMLOrganizations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IntermediateServiceServer).ListSAMLOrganizations(ctx, req.(*ListSAMLOrganizationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IntermediateService_GetProjectUISettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProjectUISettingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IntermediateServiceServer).GetProjectUISettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IntermediateService_GetProjectUISettings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IntermediateServiceServer).GetProjectUISettings(ctx, req.(*GetProjectUISettingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IntermediateService_RedeemUserImpersonationToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RedeemUserImpersonationTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IntermediateServiceServer).RedeemUserImpersonationToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IntermediateService_RedeemUserImpersonationToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IntermediateServiceServer).RedeemUserImpersonationToken(ctx, req.(*RedeemUserImpersonationTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IntermediateService_CreateIntermediateSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateIntermediateSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IntermediateServiceServer).CreateIntermediateSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IntermediateService_CreateIntermediateSession_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IntermediateServiceServer).CreateIntermediateSession(ctx, req.(*CreateIntermediateSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IntermediateService_Whoami_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WhoamiRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IntermediateServiceServer).Whoami(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IntermediateService_Whoami_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IntermediateServiceServer).Whoami(ctx, req.(*WhoamiRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IntermediateService_CreateOrganization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOrganizationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IntermediateServiceServer).CreateOrganization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IntermediateService_CreateOrganization_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IntermediateServiceServer).CreateOrganization(ctx, req.(*CreateOrganizationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IntermediateService_ListOrganizations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListOrganizationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IntermediateServiceServer).ListOrganizations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IntermediateService_ListOrganizations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IntermediateServiceServer).ListOrganizations(ctx, req.(*ListOrganizationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IntermediateService_SetOrganization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetOrganizationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IntermediateServiceServer).SetOrganization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IntermediateService_SetOrganization_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IntermediateServiceServer).SetOrganization(ctx, req.(*SetOrganizationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IntermediateService_ExchangeIntermediateSessionForSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExchangeIntermediateSessionForSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IntermediateServiceServer).ExchangeIntermediateSessionForSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IntermediateService_ExchangeIntermediateSessionForSession_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IntermediateServiceServer).ExchangeIntermediateSessionForSession(ctx, req.(*ExchangeIntermediateSessionForSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IntermediateService_GetGoogleOAuthRedirectURL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGoogleOAuthRedirectURLRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IntermediateServiceServer).GetGoogleOAuthRedirectURL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IntermediateService_GetGoogleOAuthRedirectURL_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IntermediateServiceServer).GetGoogleOAuthRedirectURL(ctx, req.(*GetGoogleOAuthRedirectURLRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IntermediateService_RedeemGoogleOAuthCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RedeemGoogleOAuthCodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IntermediateServiceServer).RedeemGoogleOAuthCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IntermediateService_RedeemGoogleOAuthCode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IntermediateServiceServer).RedeemGoogleOAuthCode(ctx, req.(*RedeemGoogleOAuthCodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IntermediateService_GetMicrosoftOAuthRedirectURL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMicrosoftOAuthRedirectURLRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IntermediateServiceServer).GetMicrosoftOAuthRedirectURL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IntermediateService_GetMicrosoftOAuthRedirectURL_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IntermediateServiceServer).GetMicrosoftOAuthRedirectURL(ctx, req.(*GetMicrosoftOAuthRedirectURLRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IntermediateService_RedeemMicrosoftOAuthCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RedeemMicrosoftOAuthCodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IntermediateServiceServer).RedeemMicrosoftOAuthCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IntermediateService_RedeemMicrosoftOAuthCode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IntermediateServiceServer).RedeemMicrosoftOAuthCode(ctx, req.(*RedeemMicrosoftOAuthCodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IntermediateService_IssueEmailVerificationChallenge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IssueEmailVerificationChallengeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IntermediateServiceServer).IssueEmailVerificationChallenge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IntermediateService_IssueEmailVerificationChallenge_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IntermediateServiceServer).IssueEmailVerificationChallenge(ctx, req.(*IssueEmailVerificationChallengeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IntermediateService_VerifyEmailChallenge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyEmailChallengeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IntermediateServiceServer).VerifyEmailChallenge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IntermediateService_VerifyEmailChallenge_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IntermediateServiceServer).VerifyEmailChallenge(ctx, req.(*VerifyEmailChallengeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IntermediateService_RegisterPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterPasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IntermediateServiceServer).RegisterPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IntermediateService_RegisterPassword_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IntermediateServiceServer).RegisterPassword(ctx, req.(*RegisterPasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IntermediateService_VerifyPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyPasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IntermediateServiceServer).VerifyPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IntermediateService_VerifyPassword_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IntermediateServiceServer).VerifyPassword(ctx, req.(*VerifyPasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// IntermediateService_ServiceDesc is the grpc.ServiceDesc for IntermediateService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var IntermediateService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "openauth.intermediate.v1.IntermediateService",
	HandlerType: (*IntermediateServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListSAMLOrganizations",
			Handler:    _IntermediateService_ListSAMLOrganizations_Handler,
		},
		{
			MethodName: "GetProjectUISettings",
			Handler:    _IntermediateService_GetProjectUISettings_Handler,
		},
		{
			MethodName: "RedeemUserImpersonationToken",
			Handler:    _IntermediateService_RedeemUserImpersonationToken_Handler,
		},
		{
			MethodName: "CreateIntermediateSession",
			Handler:    _IntermediateService_CreateIntermediateSession_Handler,
		},
		{
			MethodName: "Whoami",
			Handler:    _IntermediateService_Whoami_Handler,
		},
		{
			MethodName: "CreateOrganization",
			Handler:    _IntermediateService_CreateOrganization_Handler,
		},
		{
			MethodName: "ListOrganizations",
			Handler:    _IntermediateService_ListOrganizations_Handler,
		},
		{
			MethodName: "SetOrganization",
			Handler:    _IntermediateService_SetOrganization_Handler,
		},
		{
			MethodName: "ExchangeIntermediateSessionForSession",
			Handler:    _IntermediateService_ExchangeIntermediateSessionForSession_Handler,
		},
		{
			MethodName: "GetGoogleOAuthRedirectURL",
			Handler:    _IntermediateService_GetGoogleOAuthRedirectURL_Handler,
		},
		{
			MethodName: "RedeemGoogleOAuthCode",
			Handler:    _IntermediateService_RedeemGoogleOAuthCode_Handler,
		},
		{
			MethodName: "GetMicrosoftOAuthRedirectURL",
			Handler:    _IntermediateService_GetMicrosoftOAuthRedirectURL_Handler,
		},
		{
			MethodName: "RedeemMicrosoftOAuthCode",
			Handler:    _IntermediateService_RedeemMicrosoftOAuthCode_Handler,
		},
		{
			MethodName: "IssueEmailVerificationChallenge",
			Handler:    _IntermediateService_IssueEmailVerificationChallenge_Handler,
		},
		{
			MethodName: "VerifyEmailChallenge",
			Handler:    _IntermediateService_VerifyEmailChallenge_Handler,
		},
		{
			MethodName: "RegisterPassword",
			Handler:    _IntermediateService_RegisterPassword_Handler,
		},
		{
			MethodName: "VerifyPassword",
			Handler:    _IntermediateService_VerifyPassword_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "openauth/intermediate/v1/intermediate.proto",
}
