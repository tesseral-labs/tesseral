// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        (unknown)
// source: tesseral/intermediate/v1/intermediate.proto

package intermediatev1

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type PrimaryAuthFactor int32

const (
	PrimaryAuthFactor_PRIMARY_AUTH_FACTOR_UNSPECIFIED PrimaryAuthFactor = 0
	PrimaryAuthFactor_PRIMARY_AUTH_FACTOR_EMAIL       PrimaryAuthFactor = 1
	PrimaryAuthFactor_PRIMARY_AUTH_FACTOR_GOOGLE      PrimaryAuthFactor = 2
	PrimaryAuthFactor_PRIMARY_AUTH_FACTOR_MICROSOFT   PrimaryAuthFactor = 3
)

// Enum value maps for PrimaryAuthFactor.
var (
	PrimaryAuthFactor_name = map[int32]string{
		0: "PRIMARY_AUTH_FACTOR_UNSPECIFIED",
		1: "PRIMARY_AUTH_FACTOR_EMAIL",
		2: "PRIMARY_AUTH_FACTOR_GOOGLE",
		3: "PRIMARY_AUTH_FACTOR_MICROSOFT",
	}
	PrimaryAuthFactor_value = map[string]int32{
		"PRIMARY_AUTH_FACTOR_UNSPECIFIED": 0,
		"PRIMARY_AUTH_FACTOR_EMAIL":       1,
		"PRIMARY_AUTH_FACTOR_GOOGLE":      2,
		"PRIMARY_AUTH_FACTOR_MICROSOFT":   3,
	}
)

func (x PrimaryAuthFactor) Enum() *PrimaryAuthFactor {
	p := new(PrimaryAuthFactor)
	*p = x
	return p
}

func (x PrimaryAuthFactor) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PrimaryAuthFactor) Descriptor() protoreflect.EnumDescriptor {
	return file_tesseral_intermediate_v1_intermediate_proto_enumTypes[0].Descriptor()
}

func (PrimaryAuthFactor) Type() protoreflect.EnumType {
	return &file_tesseral_intermediate_v1_intermediate_proto_enumTypes[0]
}

func (x PrimaryAuthFactor) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PrimaryAuthFactor.Descriptor instead.
func (PrimaryAuthFactor) EnumDescriptor() ([]byte, []int) {
	return file_tesseral_intermediate_v1_intermediate_proto_rawDescGZIP(), []int{0}
}

type IntermediateSession struct {
	state                                protoimpl.MessageState `protogen:"open.v1"`
	Id                                   string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	ProjectId                            string                 `protobuf:"bytes,2,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	Email                                string                 `protobuf:"bytes,3,opt,name=email,proto3" json:"email,omitempty"`
	EmailVerified                        bool                   `protobuf:"varint,4,opt,name=email_verified,json=emailVerified,proto3" json:"email_verified,omitempty"`
	GoogleUserId                         string                 `protobuf:"bytes,5,opt,name=google_user_id,json=googleUserId,proto3" json:"google_user_id,omitempty"`
	GoogleHostedDomain                   string                 `protobuf:"bytes,6,opt,name=google_hosted_domain,json=googleHostedDomain,proto3" json:"google_hosted_domain,omitempty"`
	MicrosoftUserId                      string                 `protobuf:"bytes,7,opt,name=microsoft_user_id,json=microsoftUserId,proto3" json:"microsoft_user_id,omitempty"`
	MicrosoftTenantId                    string                 `protobuf:"bytes,8,opt,name=microsoft_tenant_id,json=microsoftTenantId,proto3" json:"microsoft_tenant_id,omitempty"`
	OrganizationId                       string                 `protobuf:"bytes,9,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
	PasswordVerified                     bool                   `protobuf:"varint,10,opt,name=password_verified,json=passwordVerified,proto3" json:"password_verified,omitempty"`
	AuthenticatorAppVerified             bool                   `protobuf:"varint,14,opt,name=authenticator_app_verified,json=authenticatorAppVerified,proto3" json:"authenticator_app_verified,omitempty"`
	PasskeyVerified                      bool                   `protobuf:"varint,15,opt,name=passkey_verified,json=passkeyVerified,proto3" json:"passkey_verified,omitempty"`
	NewUserPasswordRegistered            bool                   `protobuf:"varint,11,opt,name=new_user_password_registered,json=newUserPasswordRegistered,proto3" json:"new_user_password_registered,omitempty"`
	EmailVerificationChallengeRegistered bool                   `protobuf:"varint,12,opt,name=email_verification_challenge_registered,json=emailVerificationChallengeRegistered,proto3" json:"email_verification_challenge_registered,omitempty"`
	PrimaryAuthFactor                    PrimaryAuthFactor      `protobuf:"varint,13,opt,name=primary_auth_factor,json=primaryAuthFactor,proto3,enum=tesseral.intermediate.v1.PrimaryAuthFactor" json:"primary_auth_factor,omitempty"`
	unknownFields                        protoimpl.UnknownFields
	sizeCache                            protoimpl.SizeCache
}

func (x *IntermediateSession) Reset() {
	*x = IntermediateSession{}
	mi := &file_tesseral_intermediate_v1_intermediate_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IntermediateSession) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IntermediateSession) ProtoMessage() {}

func (x *IntermediateSession) ProtoReflect() protoreflect.Message {
	mi := &file_tesseral_intermediate_v1_intermediate_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IntermediateSession.ProtoReflect.Descriptor instead.
func (*IntermediateSession) Descriptor() ([]byte, []int) {
	return file_tesseral_intermediate_v1_intermediate_proto_rawDescGZIP(), []int{0}
}

func (x *IntermediateSession) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *IntermediateSession) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *IntermediateSession) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *IntermediateSession) GetEmailVerified() bool {
	if x != nil {
		return x.EmailVerified
	}
	return false
}

func (x *IntermediateSession) GetGoogleUserId() string {
	if x != nil {
		return x.GoogleUserId
	}
	return ""
}

func (x *IntermediateSession) GetGoogleHostedDomain() string {
	if x != nil {
		return x.GoogleHostedDomain
	}
	return ""
}

func (x *IntermediateSession) GetMicrosoftUserId() string {
	if x != nil {
		return x.MicrosoftUserId
	}
	return ""
}

func (x *IntermediateSession) GetMicrosoftTenantId() string {
	if x != nil {
		return x.MicrosoftTenantId
	}
	return ""
}

func (x *IntermediateSession) GetOrganizationId() string {
	if x != nil {
		return x.OrganizationId
	}
	return ""
}

func (x *IntermediateSession) GetPasswordVerified() bool {
	if x != nil {
		return x.PasswordVerified
	}
	return false
}

func (x *IntermediateSession) GetAuthenticatorAppVerified() bool {
	if x != nil {
		return x.AuthenticatorAppVerified
	}
	return false
}

func (x *IntermediateSession) GetPasskeyVerified() bool {
	if x != nil {
		return x.PasskeyVerified
	}
	return false
}

func (x *IntermediateSession) GetNewUserPasswordRegistered() bool {
	if x != nil {
		return x.NewUserPasswordRegistered
	}
	return false
}

func (x *IntermediateSession) GetEmailVerificationChallengeRegistered() bool {
	if x != nil {
		return x.EmailVerificationChallengeRegistered
	}
	return false
}

func (x *IntermediateSession) GetPrimaryAuthFactor() PrimaryAuthFactor {
	if x != nil {
		return x.PrimaryAuthFactor
	}
	return PrimaryAuthFactor_PRIMARY_AUTH_FACTOR_UNSPECIFIED
}

type Settings struct {
	state                      protoimpl.MessageState `protogen:"open.v1"`
	Id                         string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	ProjectId                  string                 `protobuf:"bytes,2,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	ProjectDisplayName         string                 `protobuf:"bytes,20,opt,name=project_display_name,json=projectDisplayName,proto3" json:"project_display_name,omitempty"`
	ProjectEmailSendFromDomain string                 `protobuf:"bytes,21,opt,name=project_email_send_from_domain,json=projectEmailSendFromDomain,proto3" json:"project_email_send_from_domain,omitempty"`
	LogoUrl                    string                 `protobuf:"bytes,5,opt,name=logo_url,json=logoUrl,proto3" json:"logo_url,omitempty"`
	PrimaryColor               string                 `protobuf:"bytes,7,opt,name=primary_color,json=primaryColor,proto3" json:"primary_color,omitempty"`
	DetectDarkModeEnabled      bool                   `protobuf:"varint,8,opt,name=detect_dark_mode_enabled,json=detectDarkModeEnabled,proto3" json:"detect_dark_mode_enabled,omitempty"`
	DarkModeLogoUrl            string                 `protobuf:"bytes,9,opt,name=dark_mode_logo_url,json=darkModeLogoUrl,proto3" json:"dark_mode_logo_url,omitempty"`
	DarkModePrimaryColor       string                 `protobuf:"bytes,10,opt,name=dark_mode_primary_color,json=darkModePrimaryColor,proto3" json:"dark_mode_primary_color,omitempty"`
	LogInLayout                string                 `protobuf:"bytes,11,opt,name=log_in_layout,json=logInLayout,proto3" json:"log_in_layout,omitempty"`
	LogInWithEmail             bool                   `protobuf:"varint,12,opt,name=log_in_with_email,json=logInWithEmail,proto3" json:"log_in_with_email,omitempty"`
	LogInWithGoogle            bool                   `protobuf:"varint,13,opt,name=log_in_with_google,json=logInWithGoogle,proto3" json:"log_in_with_google,omitempty"`
	LogInWithMicrosoft         bool                   `protobuf:"varint,14,opt,name=log_in_with_microsoft,json=logInWithMicrosoft,proto3" json:"log_in_with_microsoft,omitempty"`
	LogInWithPassword          bool                   `protobuf:"varint,15,opt,name=log_in_with_password,json=logInWithPassword,proto3" json:"log_in_with_password,omitempty"`
	LogInWithSaml              bool                   `protobuf:"varint,16,opt,name=log_in_with_saml,json=logInWithSaml,proto3" json:"log_in_with_saml,omitempty"`
	RedirectUri                string                 `protobuf:"bytes,17,opt,name=redirect_uri,json=redirectUri,proto3" json:"redirect_uri,omitempty"`
	AfterLoginRedirectUri      *string                `protobuf:"bytes,18,opt,name=after_login_redirect_uri,json=afterLoginRedirectUri,proto3,oneof" json:"after_login_redirect_uri,omitempty"`
	AfterSignupRedirectUri     *string                `protobuf:"bytes,19,opt,name=after_signup_redirect_uri,json=afterSignupRedirectUri,proto3,oneof" json:"after_signup_redirect_uri,omitempty"`
	unknownFields              protoimpl.UnknownFields
	sizeCache                  protoimpl.SizeCache
}

func (x *Settings) Reset() {
	*x = Settings{}
	mi := &file_tesseral_intermediate_v1_intermediate_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Settings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Settings) ProtoMessage() {}

func (x *Settings) ProtoReflect() protoreflect.Message {
	mi := &file_tesseral_intermediate_v1_intermediate_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Settings.ProtoReflect.Descriptor instead.
func (*Settings) Descriptor() ([]byte, []int) {
	return file_tesseral_intermediate_v1_intermediate_proto_rawDescGZIP(), []int{1}
}

func (x *Settings) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Settings) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *Settings) GetProjectDisplayName() string {
	if x != nil {
		return x.ProjectDisplayName
	}
	return ""
}

func (x *Settings) GetProjectEmailSendFromDomain() string {
	if x != nil {
		return x.ProjectEmailSendFromDomain
	}
	return ""
}

func (x *Settings) GetLogoUrl() string {
	if x != nil {
		return x.LogoUrl
	}
	return ""
}

func (x *Settings) GetPrimaryColor() string {
	if x != nil {
		return x.PrimaryColor
	}
	return ""
}

func (x *Settings) GetDetectDarkModeEnabled() bool {
	if x != nil {
		return x.DetectDarkModeEnabled
	}
	return false
}

func (x *Settings) GetDarkModeLogoUrl() string {
	if x != nil {
		return x.DarkModeLogoUrl
	}
	return ""
}

func (x *Settings) GetDarkModePrimaryColor() string {
	if x != nil {
		return x.DarkModePrimaryColor
	}
	return ""
}

func (x *Settings) GetLogInLayout() string {
	if x != nil {
		return x.LogInLayout
	}
	return ""
}

func (x *Settings) GetLogInWithEmail() bool {
	if x != nil {
		return x.LogInWithEmail
	}
	return false
}

func (x *Settings) GetLogInWithGoogle() bool {
	if x != nil {
		return x.LogInWithGoogle
	}
	return false
}

func (x *Settings) GetLogInWithMicrosoft() bool {
	if x != nil {
		return x.LogInWithMicrosoft
	}
	return false
}

func (x *Settings) GetLogInWithPassword() bool {
	if x != nil {
		return x.LogInWithPassword
	}
	return false
}

func (x *Settings) GetLogInWithSaml() bool {
	if x != nil {
		return x.LogInWithSaml
	}
	return false
}

func (x *Settings) GetRedirectUri() string {
	if x != nil {
		return x.RedirectUri
	}
	return ""
}

func (x *Settings) GetAfterLoginRedirectUri() string {
	if x != nil && x.AfterLoginRedirectUri != nil {
		return *x.AfterLoginRedirectUri
	}
	return ""
}

func (x *Settings) GetAfterSignupRedirectUri() string {
	if x != nil && x.AfterSignupRedirectUri != nil {
		return *x.AfterSignupRedirectUri
	}
	return ""
}

type CreateProjectRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	DisplayName   string                 `protobuf:"bytes,1,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	RedirectUri   string                 `protobuf:"bytes,2,opt,name=redirect_uri,json=redirectUri,proto3" json:"redirect_uri,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateProjectRequest) Reset() {
	*x = CreateProjectRequest{}
	mi := &file_tesseral_intermediate_v1_intermediate_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateProjectRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateProjectRequest) ProtoMessage() {}

func (x *CreateProjectRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tesseral_intermediate_v1_intermediate_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateProjectRequest.ProtoReflect.Descriptor instead.
func (*CreateProjectRequest) Descriptor() ([]byte, []int) {
	return file_tesseral_intermediate_v1_intermediate_proto_rawDescGZIP(), []int{2}
}

func (x *CreateProjectRequest) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *CreateProjectRequest) GetRedirectUri() string {
	if x != nil {
		return x.RedirectUri
	}
	return ""
}

type CreateProjectResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Project       *Project               `protobuf:"bytes,1,opt,name=project,proto3" json:"project,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateProjectResponse) Reset() {
	*x = CreateProjectResponse{}
	mi := &file_tesseral_intermediate_v1_intermediate_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateProjectResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateProjectResponse) ProtoMessage() {}

func (x *CreateProjectResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tesseral_intermediate_v1_intermediate_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateProjectResponse.ProtoReflect.Descriptor instead.
func (*CreateProjectResponse) Descriptor() ([]byte, []int) {
	return file_tesseral_intermediate_v1_intermediate_proto_rawDescGZIP(), []int{3}
}

func (x *CreateProjectResponse) GetProject() *Project {
	if x != nil {
		return x.Project
	}
	return nil
}

type OnboardingCreateProjectsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	DisplayName   string                 `protobuf:"bytes,1,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	ProdUrl       string                 `protobuf:"bytes,2,opt,name=prod_url,json=prodUrl,proto3" json:"prod_url,omitempty"`
	DevUrl        string                 `protobuf:"bytes,3,opt,name=dev_url,json=devUrl,proto3" json:"dev_url,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *OnboardingCreateProjectsRequest) Reset() {
	*x = OnboardingCreateProjectsRequest{}
	mi := &file_tesseral_intermediate_v1_intermediate_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OnboardingCreateProjectsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OnboardingCreateProjectsRequest) ProtoMessage() {}

func (x *OnboardingCreateProjectsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tesseral_intermediate_v1_intermediate_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OnboardingCreateProjectsRequest.ProtoReflect.Descriptor instead.
func (*OnboardingCreateProjectsRequest) Descriptor() ([]byte, []int) {
	return file_tesseral_intermediate_v1_intermediate_proto_rawDescGZIP(), []int{4}
}

func (x *OnboardingCreateProjectsRequest) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *OnboardingCreateProjectsRequest) GetProdUrl() string {
	if x != nil {
		return x.ProdUrl
	}
	return ""
}

func (x *OnboardingCreateProjectsRequest) GetDevUrl() string {
	if x != nil {
		return x.DevUrl
	}
	return ""
}

type OnboardingCreateProjectsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	RefreshToken  string                 `protobuf:"bytes,1,opt,name=refresh_token,json=refreshToken,proto3" json:"refresh_token,omitempty"`
	AccessToken   string                 `protobuf:"bytes,2,opt,name=access_token,json=accessToken,proto3" json:"access_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *OnboardingCreateProjectsResponse) Reset() {
	*x = OnboardingCreateProjectsResponse{}
	mi := &file_tesseral_intermediate_v1_intermediate_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OnboardingCreateProjectsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OnboardingCreateProjectsResponse) ProtoMessage() {}

func (x *OnboardingCreateProjectsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tesseral_intermediate_v1_intermediate_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OnboardingCreateProjectsResponse.ProtoReflect.Descriptor instead.
func (*OnboardingCreateProjectsResponse) Descriptor() ([]byte, []int) {
	return file_tesseral_intermediate_v1_intermediate_proto_rawDescGZIP(), []int{5}
}

func (x *OnboardingCreateProjectsResponse) GetRefreshToken() string {
	if x != nil {
		return x.RefreshToken
	}
	return ""
}

func (x *OnboardingCreateProjectsResponse) GetAccessToken() string {
	if x != nil {
		return x.AccessToken
	}
	return ""
}

type CreateIntermediateSessionRequest struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	RelayedSessionState string                 `protobuf:"bytes,1,opt,name=relayed_session_state,json=relayedSessionState,proto3" json:"relayed_session_state,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *CreateIntermediateSessionRequest) Reset() {
	*x = CreateIntermediateSessionRequest{}
	mi := &file_tesseral_intermediate_v1_intermediate_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateIntermediateSessionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateIntermediateSessionRequest) ProtoMessage() {}

func (x *CreateIntermediateSessionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tesseral_intermediate_v1_intermediate_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateIntermediateSessionRequest.ProtoReflect.Descriptor instead.
func (*CreateIntermediateSessionRequest) Descriptor() ([]byte, []int) {
	return file_tesseral_intermediate_v1_intermediate_proto_rawDescGZIP(), []int{6}
}

func (x *CreateIntermediateSessionRequest) GetRelayedSessionState() string {
	if x != nil {
		return x.RelayedSessionState
	}
	return ""
}

type CreateIntermediateSessionResponse struct {
	state                          protoimpl.MessageState `protogen:"open.v1"`
	IntermediateSessionSecretToken string                 `protobuf:"bytes,1,opt,name=intermediate_session_secret_token,json=intermediateSessionSecretToken,proto3" json:"intermediate_session_secret_token,omitempty"`
	unknownFields                  protoimpl.UnknownFields
	sizeCache                      protoimpl.SizeCache
}

func (x *CreateIntermediateSessionResponse) Reset() {
	*x = CreateIntermediateSessionResponse{}
	mi := &file_tesseral_intermediate_v1_intermediate_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateIntermediateSessionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateIntermediateSessionResponse) ProtoMessage() {}

func (x *CreateIntermediateSessionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tesseral_intermediate_v1_intermediate_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateIntermediateSessionResponse.ProtoReflect.Descriptor instead.
func (*CreateIntermediateSessionResponse) Descriptor() ([]byte, []int) {
	return file_tesseral_intermediate_v1_intermediate_proto_rawDescGZIP(), []int{7}
}

func (x *CreateIntermediateSessionResponse) GetIntermediateSessionSecretToken() string {
	if x != nil {
		return x.IntermediateSessionSecretToken
	}
	return ""
}

type WhoamiRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WhoamiRequest) Reset() {
	*x = WhoamiRequest{}
	mi := &file_tesseral_intermediate_v1_intermediate_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WhoamiRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WhoamiRequest) ProtoMessage() {}

func (x *WhoamiRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tesseral_intermediate_v1_intermediate_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WhoamiRequest.ProtoReflect.Descriptor instead.
func (*WhoamiRequest) Descriptor() ([]byte, []int) {
	return file_tesseral_intermediate_v1_intermediate_proto_rawDescGZIP(), []int{8}
}

type WhoamiResponse struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	IntermediateSession *IntermediateSession   `protobuf:"bytes,1,opt,name=intermediate_session,json=intermediateSession,proto3" json:"intermediate_session,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *WhoamiResponse) Reset() {
	*x = WhoamiResponse{}
	mi := &file_tesseral_intermediate_v1_intermediate_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WhoamiResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WhoamiResponse) ProtoMessage() {}

func (x *WhoamiResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tesseral_intermediate_v1_intermediate_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WhoamiResponse.ProtoReflect.Descriptor instead.
func (*WhoamiResponse) Descriptor() ([]byte, []int) {
	return file_tesseral_intermediate_v1_intermediate_proto_rawDescGZIP(), []int{9}
}

func (x *WhoamiResponse) GetIntermediateSession() *IntermediateSession {
	if x != nil {
		return x.IntermediateSession
	}
	return nil
}

type CreateOrganizationRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	DisplayName   string                 `protobuf:"bytes,1,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateOrganizationRequest) Reset() {
	*x = CreateOrganizationRequest{}
	mi := &file_tesseral_intermediate_v1_intermediate_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateOrganizationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateOrganizationRequest) ProtoMessage() {}

func (x *CreateOrganizationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tesseral_intermediate_v1_intermediate_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateOrganizationRequest.ProtoReflect.Descriptor instead.
func (*CreateOrganizationRequest) Descriptor() ([]byte, []int) {
	return file_tesseral_intermediate_v1_intermediate_proto_rawDescGZIP(), []int{10}
}

func (x *CreateOrganizationRequest) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

type CreateOrganizationResponse struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	OrganizationId string                 `protobuf:"bytes,1,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *CreateOrganizationResponse) Reset() {
	*x = CreateOrganizationResponse{}
	mi := &file_tesseral_intermediate_v1_intermediate_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateOrganizationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateOrganizationResponse) ProtoMessage() {}

func (x *CreateOrganizationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tesseral_intermediate_v1_intermediate_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateOrganizationResponse.ProtoReflect.Descriptor instead.
func (*CreateOrganizationResponse) Descriptor() ([]byte, []int) {
	return file_tesseral_intermediate_v1_intermediate_proto_rawDescGZIP(), []int{11}
}

func (x *CreateOrganizationResponse) GetOrganizationId() string {
	if x != nil {
		return x.OrganizationId
	}
	return ""
}

type SetOrganizationRequest struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	OrganizationId string                 `protobuf:"bytes,1,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *SetOrganizationRequest) Reset() {
	*x = SetOrganizationRequest{}
	mi := &file_tesseral_intermediate_v1_intermediate_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetOrganizationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetOrganizationRequest) ProtoMessage() {}

func (x *SetOrganizationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tesseral_intermediate_v1_intermediate_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetOrganizationRequest.ProtoReflect.Descriptor instead.
func (*SetOrganizationRequest) Descriptor() ([]byte, []int) {
	return file_tesseral_intermediate_v1_intermediate_proto_rawDescGZIP(), []int{12}
}

func (x *SetOrganizationRequest) GetOrganizationId() string {
	if x != nil {
		return x.OrganizationId
	}
	return ""
}

type SetOrganizationResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SetOrganizationResponse) Reset() {
	*x = SetOrganizationResponse{}
	mi := &file_tesseral_intermediate_v1_intermediate_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetOrganizationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetOrganizationResponse) ProtoMessage() {}

func (x *SetOrganizationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tesseral_intermediate_v1_intermediate_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetOrganizationResponse.ProtoReflect.Descriptor instead.
func (*SetOrganizationResponse) Descriptor() ([]byte, []int) {
	return file_tesseral_intermediate_v1_intermediate_proto_rawDescGZIP(), []int{13}
}

type ExchangeIntermediateSessionForSessionRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ExchangeIntermediateSessionForSessionRequest) Reset() {
	*x = ExchangeIntermediateSessionForSessionRequest{}
	mi := &file_tesseral_intermediate_v1_intermediate_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExchangeIntermediateSessionForSessionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExchangeIntermediateSessionForSessionRequest) ProtoMessage() {}

func (x *ExchangeIntermediateSessionForSessionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tesseral_intermediate_v1_intermediate_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExchangeIntermediateSessionForSessionRequest.ProtoReflect.Descriptor instead.
func (*ExchangeIntermediateSessionForSessionRequest) Descriptor() ([]byte, []int) {
	return file_tesseral_intermediate_v1_intermediate_proto_rawDescGZIP(), []int{14}
}

type ExchangeIntermediateSessionForSessionResponse struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	RefreshToken        string                 `protobuf:"bytes,1,opt,name=refresh_token,json=refreshToken,proto3" json:"refresh_token,omitempty"`
	AccessToken         string                 `protobuf:"bytes,2,opt,name=access_token,json=accessToken,proto3" json:"access_token,omitempty"`
	NewUser             bool                   `protobuf:"varint,3,opt,name=new_user,json=newUser,proto3" json:"new_user,omitempty"`
	RelayedSessionToken string                 `protobuf:"bytes,4,opt,name=relayed_session_token,json=relayedSessionToken,proto3" json:"relayed_session_token,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *ExchangeIntermediateSessionForSessionResponse) Reset() {
	*x = ExchangeIntermediateSessionForSessionResponse{}
	mi := &file_tesseral_intermediate_v1_intermediate_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExchangeIntermediateSessionForSessionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExchangeIntermediateSessionForSessionResponse) ProtoMessage() {}

func (x *ExchangeIntermediateSessionForSessionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tesseral_intermediate_v1_intermediate_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExchangeIntermediateSessionForSessionResponse.ProtoReflect.Descriptor instead.
func (*ExchangeIntermediateSessionForSessionResponse) Descriptor() ([]byte, []int) {
	return file_tesseral_intermediate_v1_intermediate_proto_rawDescGZIP(), []int{15}
}

func (x *ExchangeIntermediateSessionForSessionResponse) GetRefreshToken() string {
	if x != nil {
		return x.RefreshToken
	}
	return ""
}

func (x *ExchangeIntermediateSessionForSessionResponse) GetAccessToken() string {
	if x != nil {
		return x.AccessToken
	}
	return ""
}

func (x *ExchangeIntermediateSessionForSessionResponse) GetNewUser() bool {
	if x != nil {
		return x.NewUser
	}
	return false
}

func (x *ExchangeIntermediateSessionForSessionResponse) GetRelayedSessionToken() string {
	if x != nil {
		return x.RelayedSessionToken
	}
	return ""
}

type ExchangeRelayedSessionTokenForSessionRequest struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	RelayedSessionToken string                 `protobuf:"bytes,1,opt,name=relayed_session_token,json=relayedSessionToken,proto3" json:"relayed_session_token,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *ExchangeRelayedSessionTokenForSessionRequest) Reset() {
	*x = ExchangeRelayedSessionTokenForSessionRequest{}
	mi := &file_tesseral_intermediate_v1_intermediate_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExchangeRelayedSessionTokenForSessionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExchangeRelayedSessionTokenForSessionRequest) ProtoMessage() {}

func (x *ExchangeRelayedSessionTokenForSessionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tesseral_intermediate_v1_intermediate_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExchangeRelayedSessionTokenForSessionRequest.ProtoReflect.Descriptor instead.
func (*ExchangeRelayedSessionTokenForSessionRequest) Descriptor() ([]byte, []int) {
	return file_tesseral_intermediate_v1_intermediate_proto_rawDescGZIP(), []int{16}
}

func (x *ExchangeRelayedSessionTokenForSessionRequest) GetRelayedSessionToken() string {
	if x != nil {
		return x.RelayedSessionToken
	}
	return ""
}

type ExchangeRelayedSessionTokenForSessionResponse struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	RefreshToken        string                 `protobuf:"bytes,1,opt,name=refresh_token,json=refreshToken,proto3" json:"refresh_token,omitempty"`
	AccessToken         string                 `protobuf:"bytes,2,opt,name=access_token,json=accessToken,proto3" json:"access_token,omitempty"`
	RelayedSessionState string                 `protobuf:"bytes,3,opt,name=relayed_session_state,json=relayedSessionState,proto3" json:"relayed_session_state,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *ExchangeRelayedSessionTokenForSessionResponse) Reset() {
	*x = ExchangeRelayedSessionTokenForSessionResponse{}
	mi := &file_tesseral_intermediate_v1_intermediate_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExchangeRelayedSessionTokenForSessionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExchangeRelayedSessionTokenForSessionResponse) ProtoMessage() {}

func (x *ExchangeRelayedSessionTokenForSessionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tesseral_intermediate_v1_intermediate_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExchangeRelayedSessionTokenForSessionResponse.ProtoReflect.Descriptor instead.
func (*ExchangeRelayedSessionTokenForSessionResponse) Descriptor() ([]byte, []int) {
	return file_tesseral_intermediate_v1_intermediate_proto_rawDescGZIP(), []int{17}
}

func (x *ExchangeRelayedSessionTokenForSessionResponse) GetRefreshToken() string {
	if x != nil {
		return x.RefreshToken
	}
	return ""
}

func (x *ExchangeRelayedSessionTokenForSessionResponse) GetAccessToken() string {
	if x != nil {
		return x.AccessToken
	}
	return ""
}

func (x *ExchangeRelayedSessionTokenForSessionResponse) GetRelayedSessionState() string {
	if x != nil {
		return x.RelayedSessionState
	}
	return ""
}

type GetGoogleOAuthRedirectURLRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	RedirectUrl   string                 `protobuf:"bytes,1,opt,name=redirect_url,json=redirectUrl,proto3" json:"redirect_url,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetGoogleOAuthRedirectURLRequest) Reset() {
	*x = GetGoogleOAuthRedirectURLRequest{}
	mi := &file_tesseral_intermediate_v1_intermediate_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetGoogleOAuthRedirectURLRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGoogleOAuthRedirectURLRequest) ProtoMessage() {}

func (x *GetGoogleOAuthRedirectURLRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tesseral_intermediate_v1_intermediate_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGoogleOAuthRedirectURLRequest.ProtoReflect.Descriptor instead.
func (*GetGoogleOAuthRedirectURLRequest) Descriptor() ([]byte, []int) {
	return file_tesseral_intermediate_v1_intermediate_proto_rawDescGZIP(), []int{18}
}

func (x *GetGoogleOAuthRedirectURLRequest) GetRedirectUrl() string {
	if x != nil {
		return x.RedirectUrl
	}
	return ""
}

type GetGoogleOAuthRedirectURLResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Url           string                 `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetGoogleOAuthRedirectURLResponse) Reset() {
	*x = GetGoogleOAuthRedirectURLResponse{}
	mi := &file_tesseral_intermediate_v1_intermediate_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetGoogleOAuthRedirectURLResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGoogleOAuthRedirectURLResponse) ProtoMessage() {}

func (x *GetGoogleOAuthRedirectURLResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tesseral_intermediate_v1_intermediate_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGoogleOAuthRedirectURLResponse.ProtoReflect.Descriptor instead.
func (*GetGoogleOAuthRedirectURLResponse) Descriptor() ([]byte, []int) {
	return file_tesseral_intermediate_v1_intermediate_proto_rawDescGZIP(), []int{19}
}

func (x *GetGoogleOAuthRedirectURLResponse) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

type RedeemGoogleOAuthCodeRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Code          string                 `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`
	State         string                 `protobuf:"bytes,2,opt,name=state,proto3" json:"state,omitempty"`
	RedirectUrl   string                 `protobuf:"bytes,3,opt,name=redirect_url,json=redirectUrl,proto3" json:"redirect_url,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RedeemGoogleOAuthCodeRequest) Reset() {
	*x = RedeemGoogleOAuthCodeRequest{}
	mi := &file_tesseral_intermediate_v1_intermediate_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RedeemGoogleOAuthCodeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RedeemGoogleOAuthCodeRequest) ProtoMessage() {}

func (x *RedeemGoogleOAuthCodeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tesseral_intermediate_v1_intermediate_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RedeemGoogleOAuthCodeRequest.ProtoReflect.Descriptor instead.
func (*RedeemGoogleOAuthCodeRequest) Descriptor() ([]byte, []int) {
	return file_tesseral_intermediate_v1_intermediate_proto_rawDescGZIP(), []int{20}
}

func (x *RedeemGoogleOAuthCodeRequest) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *RedeemGoogleOAuthCodeRequest) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *RedeemGoogleOAuthCodeRequest) GetRedirectUrl() string {
	if x != nil {
		return x.RedirectUrl
	}
	return ""
}

type RedeemGoogleOAuthCodeResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RedeemGoogleOAuthCodeResponse) Reset() {
	*x = RedeemGoogleOAuthCodeResponse{}
	mi := &file_tesseral_intermediate_v1_intermediate_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RedeemGoogleOAuthCodeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RedeemGoogleOAuthCodeResponse) ProtoMessage() {}

func (x *RedeemGoogleOAuthCodeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tesseral_intermediate_v1_intermediate_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RedeemGoogleOAuthCodeResponse.ProtoReflect.Descriptor instead.
func (*RedeemGoogleOAuthCodeResponse) Descriptor() ([]byte, []int) {
	return file_tesseral_intermediate_v1_intermediate_proto_rawDescGZIP(), []int{21}
}

type GetMicrosoftOAuthRedirectURLRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	RedirectUrl   string                 `protobuf:"bytes,1,opt,name=redirect_url,json=redirectUrl,proto3" json:"redirect_url,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetMicrosoftOAuthRedirectURLRequest) Reset() {
	*x = GetMicrosoftOAuthRedirectURLRequest{}
	mi := &file_tesseral_intermediate_v1_intermediate_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetMicrosoftOAuthRedirectURLRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMicrosoftOAuthRedirectURLRequest) ProtoMessage() {}

func (x *GetMicrosoftOAuthRedirectURLRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tesseral_intermediate_v1_intermediate_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMicrosoftOAuthRedirectURLRequest.ProtoReflect.Descriptor instead.
func (*GetMicrosoftOAuthRedirectURLRequest) Descriptor() ([]byte, []int) {
	return file_tesseral_intermediate_v1_intermediate_proto_rawDescGZIP(), []int{22}
}

func (x *GetMicrosoftOAuthRedirectURLRequest) GetRedirectUrl() string {
	if x != nil {
		return x.RedirectUrl
	}
	return ""
}

type GetMicrosoftOAuthRedirectURLResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Url           string                 `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetMicrosoftOAuthRedirectURLResponse) Reset() {
	*x = GetMicrosoftOAuthRedirectURLResponse{}
	mi := &file_tesseral_intermediate_v1_intermediate_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetMicrosoftOAuthRedirectURLResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMicrosoftOAuthRedirectURLResponse) ProtoMessage() {}

func (x *GetMicrosoftOAuthRedirectURLResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tesseral_intermediate_v1_intermediate_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMicrosoftOAuthRedirectURLResponse.ProtoReflect.Descriptor instead.
func (*GetMicrosoftOAuthRedirectURLResponse) Descriptor() ([]byte, []int) {
	return file_tesseral_intermediate_v1_intermediate_proto_rawDescGZIP(), []int{23}
}

func (x *GetMicrosoftOAuthRedirectURLResponse) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

type RedeemMicrosoftOAuthCodeRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Code          string                 `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`
	State         string                 `protobuf:"bytes,2,opt,name=state,proto3" json:"state,omitempty"`
	RedirectUrl   string                 `protobuf:"bytes,3,opt,name=redirect_url,json=redirectUrl,proto3" json:"redirect_url,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RedeemMicrosoftOAuthCodeRequest) Reset() {
	*x = RedeemMicrosoftOAuthCodeRequest{}
	mi := &file_tesseral_intermediate_v1_intermediate_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RedeemMicrosoftOAuthCodeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RedeemMicrosoftOAuthCodeRequest) ProtoMessage() {}

func (x *RedeemMicrosoftOAuthCodeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tesseral_intermediate_v1_intermediate_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RedeemMicrosoftOAuthCodeRequest.ProtoReflect.Descriptor instead.
func (*RedeemMicrosoftOAuthCodeRequest) Descriptor() ([]byte, []int) {
	return file_tesseral_intermediate_v1_intermediate_proto_rawDescGZIP(), []int{24}
}

func (x *RedeemMicrosoftOAuthCodeRequest) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *RedeemMicrosoftOAuthCodeRequest) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *RedeemMicrosoftOAuthCodeRequest) GetRedirectUrl() string {
	if x != nil {
		return x.RedirectUrl
	}
	return ""
}

type RedeemMicrosoftOAuthCodeResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RedeemMicrosoftOAuthCodeResponse) Reset() {
	*x = RedeemMicrosoftOAuthCodeResponse{}
	mi := &file_tesseral_intermediate_v1_intermediate_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RedeemMicrosoftOAuthCodeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RedeemMicrosoftOAuthCodeResponse) ProtoMessage() {}

func (x *RedeemMicrosoftOAuthCodeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tesseral_intermediate_v1_intermediate_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RedeemMicrosoftOAuthCodeResponse.ProtoReflect.Descriptor instead.
func (*RedeemMicrosoftOAuthCodeResponse) Descriptor() ([]byte, []int) {
	return file_tesseral_intermediate_v1_intermediate_proto_rawDescGZIP(), []int{25}
}

type Organization struct {
	state                     protoimpl.MessageState `protogen:"open.v1"`
	Id                        string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	DisplayName               string                 `protobuf:"bytes,2,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	LogInWithEmail            bool                   `protobuf:"varint,3,opt,name=log_in_with_email,json=logInWithEmail,proto3" json:"log_in_with_email,omitempty"`
	LogInWithGoogle           bool                   `protobuf:"varint,4,opt,name=log_in_with_google,json=logInWithGoogle,proto3" json:"log_in_with_google,omitempty"`
	LogInWithMicrosoft        bool                   `protobuf:"varint,5,opt,name=log_in_with_microsoft,json=logInWithMicrosoft,proto3" json:"log_in_with_microsoft,omitempty"`
	LogInWithPassword         bool                   `protobuf:"varint,6,opt,name=log_in_with_password,json=logInWithPassword,proto3" json:"log_in_with_password,omitempty"`
	LogInWithSaml             bool                   `protobuf:"varint,7,opt,name=log_in_with_saml,json=logInWithSaml,proto3" json:"log_in_with_saml,omitempty"`
	LogInWithAuthenticatorApp bool                   `protobuf:"varint,8,opt,name=log_in_with_authenticator_app,json=logInWithAuthenticatorApp,proto3" json:"log_in_with_authenticator_app,omitempty"`
	LogInWithPasskey          bool                   `protobuf:"varint,9,opt,name=log_in_with_passkey,json=logInWithPasskey,proto3" json:"log_in_with_passkey,omitempty"`
	RequireMfa                bool                   `protobuf:"varint,10,opt,name=require_mfa,json=requireMfa,proto3" json:"require_mfa,omitempty"`
	PrimarySamlConnectionId   string                 `protobuf:"bytes,11,opt,name=primary_saml_connection_id,json=primarySamlConnectionId,proto3" json:"primary_saml_connection_id,omitempty"`
	UserExists                bool                   `protobuf:"varint,12,opt,name=user_exists,json=userExists,proto3" json:"user_exists,omitempty"`
	UserHasPassword           bool                   `protobuf:"varint,13,opt,name=user_has_password,json=userHasPassword,proto3" json:"user_has_password,omitempty"`
	UserHasAuthenticatorApp   bool                   `protobuf:"varint,14,opt,name=user_has_authenticator_app,json=userHasAuthenticatorApp,proto3" json:"user_has_authenticator_app,omitempty"`
	UserHasPasskey            bool                   `protobuf:"varint,15,opt,name=user_has_passkey,json=userHasPasskey,proto3" json:"user_has_passkey,omitempty"`
	unknownFields             protoimpl.UnknownFields
	sizeCache                 protoimpl.SizeCache
}

func (x *Organization) Reset() {
	*x = Organization{}
	mi := &file_tesseral_intermediate_v1_intermediate_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Organization) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Organization) ProtoMessage() {}

func (x *Organization) ProtoReflect() protoreflect.Message {
	mi := &file_tesseral_intermediate_v1_intermediate_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Organization.ProtoReflect.Descriptor instead.
func (*Organization) Descriptor() ([]byte, []int) {
	return file_tesseral_intermediate_v1_intermediate_proto_rawDescGZIP(), []int{26}
}

func (x *Organization) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Organization) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *Organization) GetLogInWithEmail() bool {
	if x != nil {
		return x.LogInWithEmail
	}
	return false
}

func (x *Organization) GetLogInWithGoogle() bool {
	if x != nil {
		return x.LogInWithGoogle
	}
	return false
}

func (x *Organization) GetLogInWithMicrosoft() bool {
	if x != nil {
		return x.LogInWithMicrosoft
	}
	return false
}

func (x *Organization) GetLogInWithPassword() bool {
	if x != nil {
		return x.LogInWithPassword
	}
	return false
}

func (x *Organization) GetLogInWithSaml() bool {
	if x != nil {
		return x.LogInWithSaml
	}
	return false
}

func (x *Organization) GetLogInWithAuthenticatorApp() bool {
	if x != nil {
		return x.LogInWithAuthenticatorApp
	}
	return false
}

func (x *Organization) GetLogInWithPasskey() bool {
	if x != nil {
		return x.LogInWithPasskey
	}
	return false
}

func (x *Organization) GetRequireMfa() bool {
	if x != nil {
		return x.RequireMfa
	}
	return false
}

func (x *Organization) GetPrimarySamlConnectionId() string {
	if x != nil {
		return x.PrimarySamlConnectionId
	}
	return ""
}

func (x *Organization) GetUserExists() bool {
	if x != nil {
		return x.UserExists
	}
	return false
}

func (x *Organization) GetUserHasPassword() bool {
	if x != nil {
		return x.UserHasPassword
	}
	return false
}

func (x *Organization) GetUserHasAuthenticatorApp() bool {
	if x != nil {
		return x.UserHasAuthenticatorApp
	}
	return false
}

func (x *Organization) GetUserHasPasskey() bool {
	if x != nil {
		return x.UserHasPasskey
	}
	return false
}

type Project struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Id             string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	OrganizationId string                 `protobuf:"bytes,2,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
	CreateTime     *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	UpdateTime     *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	DisplayName    string                 `protobuf:"bytes,5,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	VaultDomain    string                 `protobuf:"bytes,6,opt,name=vault_domain,json=vaultDomain,proto3" json:"vault_domain,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *Project) Reset() {
	*x = Project{}
	mi := &file_tesseral_intermediate_v1_intermediate_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Project) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Project) ProtoMessage() {}

func (x *Project) ProtoReflect() protoreflect.Message {
	mi := &file_tesseral_intermediate_v1_intermediate_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Project.ProtoReflect.Descriptor instead.
func (*Project) Descriptor() ([]byte, []int) {
	return file_tesseral_intermediate_v1_intermediate_proto_rawDescGZIP(), []int{27}
}

func (x *Project) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Project) GetOrganizationId() string {
	if x != nil {
		return x.OrganizationId
	}
	return ""
}

func (x *Project) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *Project) GetUpdateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdateTime
	}
	return nil
}

func (x *Project) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *Project) GetVaultDomain() string {
	if x != nil {
		return x.VaultDomain
	}
	return ""
}

type IssueEmailVerificationChallengeRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Email         string                 `protobuf:"bytes,1,opt,name=email,proto3" json:"email,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *IssueEmailVerificationChallengeRequest) Reset() {
	*x = IssueEmailVerificationChallengeRequest{}
	mi := &file_tesseral_intermediate_v1_intermediate_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IssueEmailVerificationChallengeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IssueEmailVerificationChallengeRequest) ProtoMessage() {}

func (x *IssueEmailVerificationChallengeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tesseral_intermediate_v1_intermediate_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IssueEmailVerificationChallengeRequest.ProtoReflect.Descriptor instead.
func (*IssueEmailVerificationChallengeRequest) Descriptor() ([]byte, []int) {
	return file_tesseral_intermediate_v1_intermediate_proto_rawDescGZIP(), []int{28}
}

func (x *IssueEmailVerificationChallengeRequest) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

type IssueEmailVerificationChallengeResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *IssueEmailVerificationChallengeResponse) Reset() {
	*x = IssueEmailVerificationChallengeResponse{}
	mi := &file_tesseral_intermediate_v1_intermediate_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IssueEmailVerificationChallengeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IssueEmailVerificationChallengeResponse) ProtoMessage() {}

func (x *IssueEmailVerificationChallengeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tesseral_intermediate_v1_intermediate_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IssueEmailVerificationChallengeResponse.ProtoReflect.Descriptor instead.
func (*IssueEmailVerificationChallengeResponse) Descriptor() ([]byte, []int) {
	return file_tesseral_intermediate_v1_intermediate_proto_rawDescGZIP(), []int{29}
}

type ListOrganizationsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListOrganizationsRequest) Reset() {
	*x = ListOrganizationsRequest{}
	mi := &file_tesseral_intermediate_v1_intermediate_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListOrganizationsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListOrganizationsRequest) ProtoMessage() {}

func (x *ListOrganizationsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tesseral_intermediate_v1_intermediate_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListOrganizationsRequest.ProtoReflect.Descriptor instead.
func (*ListOrganizationsRequest) Descriptor() ([]byte, []int) {
	return file_tesseral_intermediate_v1_intermediate_proto_rawDescGZIP(), []int{30}
}

type ListOrganizationsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Organizations []*Organization        `protobuf:"bytes,1,rep,name=organizations,proto3" json:"organizations,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListOrganizationsResponse) Reset() {
	*x = ListOrganizationsResponse{}
	mi := &file_tesseral_intermediate_v1_intermediate_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListOrganizationsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListOrganizationsResponse) ProtoMessage() {}

func (x *ListOrganizationsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tesseral_intermediate_v1_intermediate_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListOrganizationsResponse.ProtoReflect.Descriptor instead.
func (*ListOrganizationsResponse) Descriptor() ([]byte, []int) {
	return file_tesseral_intermediate_v1_intermediate_proto_rawDescGZIP(), []int{31}
}

func (x *ListOrganizationsResponse) GetOrganizations() []*Organization {
	if x != nil {
		return x.Organizations
	}
	return nil
}

type ListSAMLOrganizationsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Email         string                 `protobuf:"bytes,1,opt,name=email,proto3" json:"email,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListSAMLOrganizationsRequest) Reset() {
	*x = ListSAMLOrganizationsRequest{}
	mi := &file_tesseral_intermediate_v1_intermediate_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListSAMLOrganizationsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSAMLOrganizationsRequest) ProtoMessage() {}

func (x *ListSAMLOrganizationsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tesseral_intermediate_v1_intermediate_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSAMLOrganizationsRequest.ProtoReflect.Descriptor instead.
func (*ListSAMLOrganizationsRequest) Descriptor() ([]byte, []int) {
	return file_tesseral_intermediate_v1_intermediate_proto_rawDescGZIP(), []int{32}
}

func (x *ListSAMLOrganizationsRequest) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

type ListSAMLOrganizationsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Organizations []*Organization        `protobuf:"bytes,1,rep,name=organizations,proto3" json:"organizations,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListSAMLOrganizationsResponse) Reset() {
	*x = ListSAMLOrganizationsResponse{}
	mi := &file_tesseral_intermediate_v1_intermediate_proto_msgTypes[33]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListSAMLOrganizationsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSAMLOrganizationsResponse) ProtoMessage() {}

func (x *ListSAMLOrganizationsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tesseral_intermediate_v1_intermediate_proto_msgTypes[33]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSAMLOrganizationsResponse.ProtoReflect.Descriptor instead.
func (*ListSAMLOrganizationsResponse) Descriptor() ([]byte, []int) {
	return file_tesseral_intermediate_v1_intermediate_proto_rawDescGZIP(), []int{33}
}

func (x *ListSAMLOrganizationsResponse) GetOrganizations() []*Organization {
	if x != nil {
		return x.Organizations
	}
	return nil
}

type VerifyEmailChallengeRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Code          string                 `protobuf:"bytes,2,opt,name=code,proto3" json:"code,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VerifyEmailChallengeRequest) Reset() {
	*x = VerifyEmailChallengeRequest{}
	mi := &file_tesseral_intermediate_v1_intermediate_proto_msgTypes[34]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VerifyEmailChallengeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VerifyEmailChallengeRequest) ProtoMessage() {}

func (x *VerifyEmailChallengeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tesseral_intermediate_v1_intermediate_proto_msgTypes[34]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VerifyEmailChallengeRequest.ProtoReflect.Descriptor instead.
func (*VerifyEmailChallengeRequest) Descriptor() ([]byte, []int) {
	return file_tesseral_intermediate_v1_intermediate_proto_rawDescGZIP(), []int{34}
}

func (x *VerifyEmailChallengeRequest) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

type VerifyEmailChallengeResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VerifyEmailChallengeResponse) Reset() {
	*x = VerifyEmailChallengeResponse{}
	mi := &file_tesseral_intermediate_v1_intermediate_proto_msgTypes[35]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VerifyEmailChallengeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VerifyEmailChallengeResponse) ProtoMessage() {}

func (x *VerifyEmailChallengeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tesseral_intermediate_v1_intermediate_proto_msgTypes[35]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VerifyEmailChallengeResponse.ProtoReflect.Descriptor instead.
func (*VerifyEmailChallengeResponse) Descriptor() ([]byte, []int) {
	return file_tesseral_intermediate_v1_intermediate_proto_rawDescGZIP(), []int{35}
}

type RegisterPasswordRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Password      string                 `protobuf:"bytes,1,opt,name=password,proto3" json:"password,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RegisterPasswordRequest) Reset() {
	*x = RegisterPasswordRequest{}
	mi := &file_tesseral_intermediate_v1_intermediate_proto_msgTypes[36]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RegisterPasswordRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterPasswordRequest) ProtoMessage() {}

func (x *RegisterPasswordRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tesseral_intermediate_v1_intermediate_proto_msgTypes[36]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterPasswordRequest.ProtoReflect.Descriptor instead.
func (*RegisterPasswordRequest) Descriptor() ([]byte, []int) {
	return file_tesseral_intermediate_v1_intermediate_proto_rawDescGZIP(), []int{36}
}

func (x *RegisterPasswordRequest) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

type RegisterPasswordResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RegisterPasswordResponse) Reset() {
	*x = RegisterPasswordResponse{}
	mi := &file_tesseral_intermediate_v1_intermediate_proto_msgTypes[37]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RegisterPasswordResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterPasswordResponse) ProtoMessage() {}

func (x *RegisterPasswordResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tesseral_intermediate_v1_intermediate_proto_msgTypes[37]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterPasswordResponse.ProtoReflect.Descriptor instead.
func (*RegisterPasswordResponse) Descriptor() ([]byte, []int) {
	return file_tesseral_intermediate_v1_intermediate_proto_rawDescGZIP(), []int{37}
}

type VerifyPasswordRequest struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	OrganizationId string                 `protobuf:"bytes,1,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
	Password       string                 `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *VerifyPasswordRequest) Reset() {
	*x = VerifyPasswordRequest{}
	mi := &file_tesseral_intermediate_v1_intermediate_proto_msgTypes[38]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VerifyPasswordRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VerifyPasswordRequest) ProtoMessage() {}

func (x *VerifyPasswordRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tesseral_intermediate_v1_intermediate_proto_msgTypes[38]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VerifyPasswordRequest.ProtoReflect.Descriptor instead.
func (*VerifyPasswordRequest) Descriptor() ([]byte, []int) {
	return file_tesseral_intermediate_v1_intermediate_proto_rawDescGZIP(), []int{38}
}

func (x *VerifyPasswordRequest) GetOrganizationId() string {
	if x != nil {
		return x.OrganizationId
	}
	return ""
}

func (x *VerifyPasswordRequest) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

type VerifyPasswordResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VerifyPasswordResponse) Reset() {
	*x = VerifyPasswordResponse{}
	mi := &file_tesseral_intermediate_v1_intermediate_proto_msgTypes[39]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VerifyPasswordResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VerifyPasswordResponse) ProtoMessage() {}

func (x *VerifyPasswordResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tesseral_intermediate_v1_intermediate_proto_msgTypes[39]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VerifyPasswordResponse.ProtoReflect.Descriptor instead.
func (*VerifyPasswordResponse) Descriptor() ([]byte, []int) {
	return file_tesseral_intermediate_v1_intermediate_proto_rawDescGZIP(), []int{39}
}

type IssuePasswordResetCodeRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *IssuePasswordResetCodeRequest) Reset() {
	*x = IssuePasswordResetCodeRequest{}
	mi := &file_tesseral_intermediate_v1_intermediate_proto_msgTypes[40]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IssuePasswordResetCodeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IssuePasswordResetCodeRequest) ProtoMessage() {}

func (x *IssuePasswordResetCodeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tesseral_intermediate_v1_intermediate_proto_msgTypes[40]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IssuePasswordResetCodeRequest.ProtoReflect.Descriptor instead.
func (*IssuePasswordResetCodeRequest) Descriptor() ([]byte, []int) {
	return file_tesseral_intermediate_v1_intermediate_proto_rawDescGZIP(), []int{40}
}

type IssuePasswordResetCodeResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *IssuePasswordResetCodeResponse) Reset() {
	*x = IssuePasswordResetCodeResponse{}
	mi := &file_tesseral_intermediate_v1_intermediate_proto_msgTypes[41]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IssuePasswordResetCodeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IssuePasswordResetCodeResponse) ProtoMessage() {}

func (x *IssuePasswordResetCodeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tesseral_intermediate_v1_intermediate_proto_msgTypes[41]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IssuePasswordResetCodeResponse.ProtoReflect.Descriptor instead.
func (*IssuePasswordResetCodeResponse) Descriptor() ([]byte, []int) {
	return file_tesseral_intermediate_v1_intermediate_proto_rawDescGZIP(), []int{41}
}

type VerifyPasswordResetCodeRequest struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	PasswordResetCode string                 `protobuf:"bytes,1,opt,name=password_reset_code,json=passwordResetCode,proto3" json:"password_reset_code,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *VerifyPasswordResetCodeRequest) Reset() {
	*x = VerifyPasswordResetCodeRequest{}
	mi := &file_tesseral_intermediate_v1_intermediate_proto_msgTypes[42]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VerifyPasswordResetCodeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VerifyPasswordResetCodeRequest) ProtoMessage() {}

func (x *VerifyPasswordResetCodeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tesseral_intermediate_v1_intermediate_proto_msgTypes[42]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VerifyPasswordResetCodeRequest.ProtoReflect.Descriptor instead.
func (*VerifyPasswordResetCodeRequest) Descriptor() ([]byte, []int) {
	return file_tesseral_intermediate_v1_intermediate_proto_rawDescGZIP(), []int{42}
}

func (x *VerifyPasswordResetCodeRequest) GetPasswordResetCode() string {
	if x != nil {
		return x.PasswordResetCode
	}
	return ""
}

type VerifyPasswordResetCodeResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VerifyPasswordResetCodeResponse) Reset() {
	*x = VerifyPasswordResetCodeResponse{}
	mi := &file_tesseral_intermediate_v1_intermediate_proto_msgTypes[43]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VerifyPasswordResetCodeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VerifyPasswordResetCodeResponse) ProtoMessage() {}

func (x *VerifyPasswordResetCodeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tesseral_intermediate_v1_intermediate_proto_msgTypes[43]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VerifyPasswordResetCodeResponse.ProtoReflect.Descriptor instead.
func (*VerifyPasswordResetCodeResponse) Descriptor() ([]byte, []int) {
	return file_tesseral_intermediate_v1_intermediate_proto_rawDescGZIP(), []int{43}
}

type GetSettingsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetSettingsRequest) Reset() {
	*x = GetSettingsRequest{}
	mi := &file_tesseral_intermediate_v1_intermediate_proto_msgTypes[44]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetSettingsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSettingsRequest) ProtoMessage() {}

func (x *GetSettingsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tesseral_intermediate_v1_intermediate_proto_msgTypes[44]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSettingsRequest.ProtoReflect.Descriptor instead.
func (*GetSettingsRequest) Descriptor() ([]byte, []int) {
	return file_tesseral_intermediate_v1_intermediate_proto_rawDescGZIP(), []int{44}
}

type GetSettingsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Settings      *Settings              `protobuf:"bytes,1,opt,name=settings,proto3" json:"settings,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetSettingsResponse) Reset() {
	*x = GetSettingsResponse{}
	mi := &file_tesseral_intermediate_v1_intermediate_proto_msgTypes[45]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetSettingsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSettingsResponse) ProtoMessage() {}

func (x *GetSettingsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tesseral_intermediate_v1_intermediate_proto_msgTypes[45]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSettingsResponse.ProtoReflect.Descriptor instead.
func (*GetSettingsResponse) Descriptor() ([]byte, []int) {
	return file_tesseral_intermediate_v1_intermediate_proto_rawDescGZIP(), []int{45}
}

func (x *GetSettingsResponse) GetSettings() *Settings {
	if x != nil {
		return x.Settings
	}
	return nil
}

type RedeemUserImpersonationTokenRequest struct {
	state                        protoimpl.MessageState `protogen:"open.v1"`
	SecretUserImpersonationToken string                 `protobuf:"bytes,1,opt,name=secret_user_impersonation_token,json=secretUserImpersonationToken,proto3" json:"secret_user_impersonation_token,omitempty"`
	unknownFields                protoimpl.UnknownFields
	sizeCache                    protoimpl.SizeCache
}

func (x *RedeemUserImpersonationTokenRequest) Reset() {
	*x = RedeemUserImpersonationTokenRequest{}
	mi := &file_tesseral_intermediate_v1_intermediate_proto_msgTypes[46]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RedeemUserImpersonationTokenRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RedeemUserImpersonationTokenRequest) ProtoMessage() {}

func (x *RedeemUserImpersonationTokenRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tesseral_intermediate_v1_intermediate_proto_msgTypes[46]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RedeemUserImpersonationTokenRequest.ProtoReflect.Descriptor instead.
func (*RedeemUserImpersonationTokenRequest) Descriptor() ([]byte, []int) {
	return file_tesseral_intermediate_v1_intermediate_proto_rawDescGZIP(), []int{46}
}

func (x *RedeemUserImpersonationTokenRequest) GetSecretUserImpersonationToken() string {
	if x != nil {
		return x.SecretUserImpersonationToken
	}
	return ""
}

type RedeemUserImpersonationTokenResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	RefreshToken  string                 `protobuf:"bytes,1,opt,name=refresh_token,json=refreshToken,proto3" json:"refresh_token,omitempty"`
	AccessToken   string                 `protobuf:"bytes,2,opt,name=access_token,json=accessToken,proto3" json:"access_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RedeemUserImpersonationTokenResponse) Reset() {
	*x = RedeemUserImpersonationTokenResponse{}
	mi := &file_tesseral_intermediate_v1_intermediate_proto_msgTypes[47]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RedeemUserImpersonationTokenResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RedeemUserImpersonationTokenResponse) ProtoMessage() {}

func (x *RedeemUserImpersonationTokenResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tesseral_intermediate_v1_intermediate_proto_msgTypes[47]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RedeemUserImpersonationTokenResponse.ProtoReflect.Descriptor instead.
func (*RedeemUserImpersonationTokenResponse) Descriptor() ([]byte, []int) {
	return file_tesseral_intermediate_v1_intermediate_proto_rawDescGZIP(), []int{47}
}

func (x *RedeemUserImpersonationTokenResponse) GetRefreshToken() string {
	if x != nil {
		return x.RefreshToken
	}
	return ""
}

func (x *RedeemUserImpersonationTokenResponse) GetAccessToken() string {
	if x != nil {
		return x.AccessToken
	}
	return ""
}

type GetAuthenticatorAppOptionsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetAuthenticatorAppOptionsRequest) Reset() {
	*x = GetAuthenticatorAppOptionsRequest{}
	mi := &file_tesseral_intermediate_v1_intermediate_proto_msgTypes[48]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetAuthenticatorAppOptionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAuthenticatorAppOptionsRequest) ProtoMessage() {}

func (x *GetAuthenticatorAppOptionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tesseral_intermediate_v1_intermediate_proto_msgTypes[48]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAuthenticatorAppOptionsRequest.ProtoReflect.Descriptor instead.
func (*GetAuthenticatorAppOptionsRequest) Descriptor() ([]byte, []int) {
	return file_tesseral_intermediate_v1_intermediate_proto_rawDescGZIP(), []int{48}
}

type GetAuthenticatorAppOptionsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	OtpauthUri    string                 `protobuf:"bytes,1,opt,name=otpauth_uri,json=otpauthUri,proto3" json:"otpauth_uri,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetAuthenticatorAppOptionsResponse) Reset() {
	*x = GetAuthenticatorAppOptionsResponse{}
	mi := &file_tesseral_intermediate_v1_intermediate_proto_msgTypes[49]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetAuthenticatorAppOptionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAuthenticatorAppOptionsResponse) ProtoMessage() {}

func (x *GetAuthenticatorAppOptionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tesseral_intermediate_v1_intermediate_proto_msgTypes[49]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAuthenticatorAppOptionsResponse.ProtoReflect.Descriptor instead.
func (*GetAuthenticatorAppOptionsResponse) Descriptor() ([]byte, []int) {
	return file_tesseral_intermediate_v1_intermediate_proto_rawDescGZIP(), []int{49}
}

func (x *GetAuthenticatorAppOptionsResponse) GetOtpauthUri() string {
	if x != nil {
		return x.OtpauthUri
	}
	return ""
}

type RegisterAuthenticatorAppRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TotpCode      string                 `protobuf:"bytes,1,opt,name=totp_code,json=totpCode,proto3" json:"totp_code,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RegisterAuthenticatorAppRequest) Reset() {
	*x = RegisterAuthenticatorAppRequest{}
	mi := &file_tesseral_intermediate_v1_intermediate_proto_msgTypes[50]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RegisterAuthenticatorAppRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterAuthenticatorAppRequest) ProtoMessage() {}

func (x *RegisterAuthenticatorAppRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tesseral_intermediate_v1_intermediate_proto_msgTypes[50]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterAuthenticatorAppRequest.ProtoReflect.Descriptor instead.
func (*RegisterAuthenticatorAppRequest) Descriptor() ([]byte, []int) {
	return file_tesseral_intermediate_v1_intermediate_proto_rawDescGZIP(), []int{50}
}

func (x *RegisterAuthenticatorAppRequest) GetTotpCode() string {
	if x != nil {
		return x.TotpCode
	}
	return ""
}

type RegisterAuthenticatorAppResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	RecoveryCodes []string               `protobuf:"bytes,1,rep,name=recovery_codes,json=recoveryCodes,proto3" json:"recovery_codes,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RegisterAuthenticatorAppResponse) Reset() {
	*x = RegisterAuthenticatorAppResponse{}
	mi := &file_tesseral_intermediate_v1_intermediate_proto_msgTypes[51]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RegisterAuthenticatorAppResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterAuthenticatorAppResponse) ProtoMessage() {}

func (x *RegisterAuthenticatorAppResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tesseral_intermediate_v1_intermediate_proto_msgTypes[51]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterAuthenticatorAppResponse.ProtoReflect.Descriptor instead.
func (*RegisterAuthenticatorAppResponse) Descriptor() ([]byte, []int) {
	return file_tesseral_intermediate_v1_intermediate_proto_rawDescGZIP(), []int{51}
}

func (x *RegisterAuthenticatorAppResponse) GetRecoveryCodes() []string {
	if x != nil {
		return x.RecoveryCodes
	}
	return nil
}

type VerifyAuthenticatorAppRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TotpCode      string                 `protobuf:"bytes,1,opt,name=totp_code,json=totpCode,proto3" json:"totp_code,omitempty"`
	RecoveryCode  string                 `protobuf:"bytes,2,opt,name=recovery_code,json=recoveryCode,proto3" json:"recovery_code,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VerifyAuthenticatorAppRequest) Reset() {
	*x = VerifyAuthenticatorAppRequest{}
	mi := &file_tesseral_intermediate_v1_intermediate_proto_msgTypes[52]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VerifyAuthenticatorAppRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VerifyAuthenticatorAppRequest) ProtoMessage() {}

func (x *VerifyAuthenticatorAppRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tesseral_intermediate_v1_intermediate_proto_msgTypes[52]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VerifyAuthenticatorAppRequest.ProtoReflect.Descriptor instead.
func (*VerifyAuthenticatorAppRequest) Descriptor() ([]byte, []int) {
	return file_tesseral_intermediate_v1_intermediate_proto_rawDescGZIP(), []int{52}
}

func (x *VerifyAuthenticatorAppRequest) GetTotpCode() string {
	if x != nil {
		return x.TotpCode
	}
	return ""
}

func (x *VerifyAuthenticatorAppRequest) GetRecoveryCode() string {
	if x != nil {
		return x.RecoveryCode
	}
	return ""
}

type VerifyAuthenticatorAppResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VerifyAuthenticatorAppResponse) Reset() {
	*x = VerifyAuthenticatorAppResponse{}
	mi := &file_tesseral_intermediate_v1_intermediate_proto_msgTypes[53]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VerifyAuthenticatorAppResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VerifyAuthenticatorAppResponse) ProtoMessage() {}

func (x *VerifyAuthenticatorAppResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tesseral_intermediate_v1_intermediate_proto_msgTypes[53]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VerifyAuthenticatorAppResponse.ProtoReflect.Descriptor instead.
func (*VerifyAuthenticatorAppResponse) Descriptor() ([]byte, []int) {
	return file_tesseral_intermediate_v1_intermediate_proto_rawDescGZIP(), []int{53}
}

type GetPasskeyOptionsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetPasskeyOptionsRequest) Reset() {
	*x = GetPasskeyOptionsRequest{}
	mi := &file_tesseral_intermediate_v1_intermediate_proto_msgTypes[54]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetPasskeyOptionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPasskeyOptionsRequest) ProtoMessage() {}

func (x *GetPasskeyOptionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tesseral_intermediate_v1_intermediate_proto_msgTypes[54]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPasskeyOptionsRequest.ProtoReflect.Descriptor instead.
func (*GetPasskeyOptionsRequest) Descriptor() ([]byte, []int) {
	return file_tesseral_intermediate_v1_intermediate_proto_rawDescGZIP(), []int{54}
}

type GetPasskeyOptionsResponse struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	RpId            string                 `protobuf:"bytes,1,opt,name=rp_id,json=rpId,proto3" json:"rp_id,omitempty"`
	RpName          string                 `protobuf:"bytes,2,opt,name=rp_name,json=rpName,proto3" json:"rp_name,omitempty"`
	UserId          string                 `protobuf:"bytes,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	UserDisplayName string                 `protobuf:"bytes,4,opt,name=user_display_name,json=userDisplayName,proto3" json:"user_display_name,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *GetPasskeyOptionsResponse) Reset() {
	*x = GetPasskeyOptionsResponse{}
	mi := &file_tesseral_intermediate_v1_intermediate_proto_msgTypes[55]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetPasskeyOptionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPasskeyOptionsResponse) ProtoMessage() {}

func (x *GetPasskeyOptionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tesseral_intermediate_v1_intermediate_proto_msgTypes[55]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPasskeyOptionsResponse.ProtoReflect.Descriptor instead.
func (*GetPasskeyOptionsResponse) Descriptor() ([]byte, []int) {
	return file_tesseral_intermediate_v1_intermediate_proto_rawDescGZIP(), []int{55}
}

func (x *GetPasskeyOptionsResponse) GetRpId() string {
	if x != nil {
		return x.RpId
	}
	return ""
}

func (x *GetPasskeyOptionsResponse) GetRpName() string {
	if x != nil {
		return x.RpName
	}
	return ""
}

func (x *GetPasskeyOptionsResponse) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *GetPasskeyOptionsResponse) GetUserDisplayName() string {
	if x != nil {
		return x.UserDisplayName
	}
	return ""
}

type RegisterPasskeyRequest struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	AttestationObject string                 `protobuf:"bytes,1,opt,name=attestation_object,json=attestationObject,proto3" json:"attestation_object,omitempty"`
	RpId              string                 `protobuf:"bytes,2,opt,name=rp_id,json=rpId,proto3" json:"rp_id,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *RegisterPasskeyRequest) Reset() {
	*x = RegisterPasskeyRequest{}
	mi := &file_tesseral_intermediate_v1_intermediate_proto_msgTypes[56]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RegisterPasskeyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterPasskeyRequest) ProtoMessage() {}

func (x *RegisterPasskeyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tesseral_intermediate_v1_intermediate_proto_msgTypes[56]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterPasskeyRequest.ProtoReflect.Descriptor instead.
func (*RegisterPasskeyRequest) Descriptor() ([]byte, []int) {
	return file_tesseral_intermediate_v1_intermediate_proto_rawDescGZIP(), []int{56}
}

func (x *RegisterPasskeyRequest) GetAttestationObject() string {
	if x != nil {
		return x.AttestationObject
	}
	return ""
}

func (x *RegisterPasskeyRequest) GetRpId() string {
	if x != nil {
		return x.RpId
	}
	return ""
}

type RegisterPasskeyResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RegisterPasskeyResponse) Reset() {
	*x = RegisterPasskeyResponse{}
	mi := &file_tesseral_intermediate_v1_intermediate_proto_msgTypes[57]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RegisterPasskeyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterPasskeyResponse) ProtoMessage() {}

func (x *RegisterPasskeyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tesseral_intermediate_v1_intermediate_proto_msgTypes[57]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterPasskeyResponse.ProtoReflect.Descriptor instead.
func (*RegisterPasskeyResponse) Descriptor() ([]byte, []int) {
	return file_tesseral_intermediate_v1_intermediate_proto_rawDescGZIP(), []int{57}
}

type IssuePasskeyChallengeRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *IssuePasskeyChallengeRequest) Reset() {
	*x = IssuePasskeyChallengeRequest{}
	mi := &file_tesseral_intermediate_v1_intermediate_proto_msgTypes[58]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IssuePasskeyChallengeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IssuePasskeyChallengeRequest) ProtoMessage() {}

func (x *IssuePasskeyChallengeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tesseral_intermediate_v1_intermediate_proto_msgTypes[58]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IssuePasskeyChallengeRequest.ProtoReflect.Descriptor instead.
func (*IssuePasskeyChallengeRequest) Descriptor() ([]byte, []int) {
	return file_tesseral_intermediate_v1_intermediate_proto_rawDescGZIP(), []int{58}
}

type IssuePasskeyChallengeResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	RpId          string                 `protobuf:"bytes,1,opt,name=rp_id,json=rpId,proto3" json:"rp_id,omitempty"`
	CredentialIds [][]byte               `protobuf:"bytes,2,rep,name=credential_ids,json=credentialIds,proto3" json:"credential_ids,omitempty"`
	Challenge     []byte                 `protobuf:"bytes,3,opt,name=challenge,proto3" json:"challenge,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *IssuePasskeyChallengeResponse) Reset() {
	*x = IssuePasskeyChallengeResponse{}
	mi := &file_tesseral_intermediate_v1_intermediate_proto_msgTypes[59]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IssuePasskeyChallengeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IssuePasskeyChallengeResponse) ProtoMessage() {}

func (x *IssuePasskeyChallengeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tesseral_intermediate_v1_intermediate_proto_msgTypes[59]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IssuePasskeyChallengeResponse.ProtoReflect.Descriptor instead.
func (*IssuePasskeyChallengeResponse) Descriptor() ([]byte, []int) {
	return file_tesseral_intermediate_v1_intermediate_proto_rawDescGZIP(), []int{59}
}

func (x *IssuePasskeyChallengeResponse) GetRpId() string {
	if x != nil {
		return x.RpId
	}
	return ""
}

func (x *IssuePasskeyChallengeResponse) GetCredentialIds() [][]byte {
	if x != nil {
		return x.CredentialIds
	}
	return nil
}

func (x *IssuePasskeyChallengeResponse) GetChallenge() []byte {
	if x != nil {
		return x.Challenge
	}
	return nil
}

type VerifyPasskeyRequest struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	CredentialId      []byte                 `protobuf:"bytes,1,opt,name=credential_id,json=credentialId,proto3" json:"credential_id,omitempty"`
	ClientDataJson    string                 `protobuf:"bytes,2,opt,name=client_data_json,json=clientDataJson,proto3" json:"client_data_json,omitempty"`
	AuthenticatorData string                 `protobuf:"bytes,3,opt,name=authenticator_data,json=authenticatorData,proto3" json:"authenticator_data,omitempty"`
	Signature         string                 `protobuf:"bytes,4,opt,name=signature,proto3" json:"signature,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *VerifyPasskeyRequest) Reset() {
	*x = VerifyPasskeyRequest{}
	mi := &file_tesseral_intermediate_v1_intermediate_proto_msgTypes[60]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VerifyPasskeyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VerifyPasskeyRequest) ProtoMessage() {}

func (x *VerifyPasskeyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tesseral_intermediate_v1_intermediate_proto_msgTypes[60]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VerifyPasskeyRequest.ProtoReflect.Descriptor instead.
func (*VerifyPasskeyRequest) Descriptor() ([]byte, []int) {
	return file_tesseral_intermediate_v1_intermediate_proto_rawDescGZIP(), []int{60}
}

func (x *VerifyPasskeyRequest) GetCredentialId() []byte {
	if x != nil {
		return x.CredentialId
	}
	return nil
}

func (x *VerifyPasskeyRequest) GetClientDataJson() string {
	if x != nil {
		return x.ClientDataJson
	}
	return ""
}

func (x *VerifyPasskeyRequest) GetAuthenticatorData() string {
	if x != nil {
		return x.AuthenticatorData
	}
	return ""
}

func (x *VerifyPasskeyRequest) GetSignature() string {
	if x != nil {
		return x.Signature
	}
	return ""
}

type VerifyPasskeyResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VerifyPasskeyResponse) Reset() {
	*x = VerifyPasskeyResponse{}
	mi := &file_tesseral_intermediate_v1_intermediate_proto_msgTypes[61]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VerifyPasskeyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VerifyPasskeyResponse) ProtoMessage() {}

func (x *VerifyPasskeyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tesseral_intermediate_v1_intermediate_proto_msgTypes[61]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VerifyPasskeyResponse.ProtoReflect.Descriptor instead.
func (*VerifyPasskeyResponse) Descriptor() ([]byte, []int) {
	return file_tesseral_intermediate_v1_intermediate_proto_rawDescGZIP(), []int{61}
}

type SetEmailAsPrimaryLoginFactorRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SetEmailAsPrimaryLoginFactorRequest) Reset() {
	*x = SetEmailAsPrimaryLoginFactorRequest{}
	mi := &file_tesseral_intermediate_v1_intermediate_proto_msgTypes[62]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetEmailAsPrimaryLoginFactorRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetEmailAsPrimaryLoginFactorRequest) ProtoMessage() {}

func (x *SetEmailAsPrimaryLoginFactorRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tesseral_intermediate_v1_intermediate_proto_msgTypes[62]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetEmailAsPrimaryLoginFactorRequest.ProtoReflect.Descriptor instead.
func (*SetEmailAsPrimaryLoginFactorRequest) Descriptor() ([]byte, []int) {
	return file_tesseral_intermediate_v1_intermediate_proto_rawDescGZIP(), []int{62}
}

type SetEmailAsPrimaryLoginFactorResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SetEmailAsPrimaryLoginFactorResponse) Reset() {
	*x = SetEmailAsPrimaryLoginFactorResponse{}
	mi := &file_tesseral_intermediate_v1_intermediate_proto_msgTypes[63]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetEmailAsPrimaryLoginFactorResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetEmailAsPrimaryLoginFactorResponse) ProtoMessage() {}

func (x *SetEmailAsPrimaryLoginFactorResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tesseral_intermediate_v1_intermediate_proto_msgTypes[63]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetEmailAsPrimaryLoginFactorResponse.ProtoReflect.Descriptor instead.
func (*SetEmailAsPrimaryLoginFactorResponse) Descriptor() ([]byte, []int) {
	return file_tesseral_intermediate_v1_intermediate_proto_rawDescGZIP(), []int{63}
}

type ExchangeSessionForIntermediateSessionRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	RefreshToken  string                 `protobuf:"bytes,1,opt,name=refresh_token,json=refreshToken,proto3" json:"refresh_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ExchangeSessionForIntermediateSessionRequest) Reset() {
	*x = ExchangeSessionForIntermediateSessionRequest{}
	mi := &file_tesseral_intermediate_v1_intermediate_proto_msgTypes[64]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExchangeSessionForIntermediateSessionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExchangeSessionForIntermediateSessionRequest) ProtoMessage() {}

func (x *ExchangeSessionForIntermediateSessionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tesseral_intermediate_v1_intermediate_proto_msgTypes[64]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExchangeSessionForIntermediateSessionRequest.ProtoReflect.Descriptor instead.
func (*ExchangeSessionForIntermediateSessionRequest) Descriptor() ([]byte, []int) {
	return file_tesseral_intermediate_v1_intermediate_proto_rawDescGZIP(), []int{64}
}

func (x *ExchangeSessionForIntermediateSessionRequest) GetRefreshToken() string {
	if x != nil {
		return x.RefreshToken
	}
	return ""
}

type ExchangeSessionForIntermediateSessionResponse struct {
	state                          protoimpl.MessageState `protogen:"open.v1"`
	IntermediateSessionSecretToken string                 `protobuf:"bytes,1,opt,name=intermediate_session_secret_token,json=intermediateSessionSecretToken,proto3" json:"intermediate_session_secret_token,omitempty"`
	unknownFields                  protoimpl.UnknownFields
	sizeCache                      protoimpl.SizeCache
}

func (x *ExchangeSessionForIntermediateSessionResponse) Reset() {
	*x = ExchangeSessionForIntermediateSessionResponse{}
	mi := &file_tesseral_intermediate_v1_intermediate_proto_msgTypes[65]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExchangeSessionForIntermediateSessionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExchangeSessionForIntermediateSessionResponse) ProtoMessage() {}

func (x *ExchangeSessionForIntermediateSessionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tesseral_intermediate_v1_intermediate_proto_msgTypes[65]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExchangeSessionForIntermediateSessionResponse.ProtoReflect.Descriptor instead.
func (*ExchangeSessionForIntermediateSessionResponse) Descriptor() ([]byte, []int) {
	return file_tesseral_intermediate_v1_intermediate_proto_rawDescGZIP(), []int{65}
}

func (x *ExchangeSessionForIntermediateSessionResponse) GetIntermediateSessionSecretToken() string {
	if x != nil {
		return x.IntermediateSessionSecretToken
	}
	return ""
}

var File_tesseral_intermediate_v1_intermediate_proto protoreflect.FileDescriptor

var file_tesseral_intermediate_v1_intermediate_proto_rawDesc = string([]byte{
	0x0a, 0x2b, 0x74, 0x65, 0x73, 0x73, 0x65, 0x72, 0x61, 0x6c, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x18, 0x74,
	0x65, 0x73, 0x73, 0x65, 0x72, 0x61, 0x6c, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6d, 0x65, 0x64,
	0x69, 0x61, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xe9, 0x05, 0x0a, 0x13, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1d,
	0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x14, 0x0a,
	0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d,
	0x61, 0x69, 0x6c, 0x12, 0x25, 0x0a, 0x0e, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x5f, 0x76, 0x65, 0x72,
	0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x65, 0x6d, 0x61,
	0x69, 0x6c, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x30, 0x0a, 0x14, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x5f, 0x68, 0x6f, 0x73, 0x74, 0x65,
	0x64, 0x5f, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x48, 0x6f, 0x73, 0x74, 0x65, 0x64, 0x44, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x12, 0x2a, 0x0a, 0x11, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x6f, 0x66, 0x74, 0x5f,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6d,
	0x69, 0x63, 0x72, 0x6f, 0x73, 0x6f, 0x66, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x2e,
	0x0a, 0x13, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x6f, 0x66, 0x74, 0x5f, 0x74, 0x65, 0x6e, 0x61,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x6d, 0x69, 0x63,
	0x72, 0x6f, 0x73, 0x6f, 0x66, 0x74, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x27,
	0x0a, 0x0f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x2b, 0x0a, 0x11, 0x70, 0x61, 0x73, 0x73, 0x77,
	0x6f, 0x72, 0x64, 0x5f, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x10, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x56, 0x65, 0x72, 0x69,
	0x66, 0x69, 0x65, 0x64, 0x12, 0x3c, 0x0a, 0x1a, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69,
	0x63, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69,
	0x65, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x18, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e,
	0x74, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x41, 0x70, 0x70, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69,
	0x65, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x70, 0x61, 0x73, 0x73, 0x6b, 0x65, 0x79, 0x5f, 0x76, 0x65,
	0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x70, 0x61,
	0x73, 0x73, 0x6b, 0x65, 0x79, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x12, 0x3f, 0x0a,
	0x1c, 0x6e, 0x65, 0x77, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f,
	0x72, 0x64, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x19, 0x6e, 0x65, 0x77, 0x55, 0x73, 0x65, 0x72, 0x50, 0x61, 0x73, 0x73,
	0x77, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x12, 0x55,
	0x0a, 0x27, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x5f, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x5f, 0x72,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x24, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x65, 0x72, 0x65, 0x64, 0x12, 0x5b, 0x0a, 0x13, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79,
	0x5f, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x74, 0x65, 0x73, 0x73, 0x65, 0x72, 0x61, 0x6c, 0x2e, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72,
	0x69, 0x6d, 0x61, 0x72, 0x79, 0x41, 0x75, 0x74, 0x68, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x52,
	0x11, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x41, 0x75, 0x74, 0x68, 0x46, 0x61, 0x63, 0x74,
	0x6f, 0x72, 0x22, 0xf1, 0x06, 0x0a, 0x08, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x30,
	0x0a, 0x14, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61,
	0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x42, 0x0a, 0x1e, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x65, 0x6d, 0x61, 0x69,
	0x6c, 0x5f, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x64, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x53, 0x65, 0x6e, 0x64, 0x46, 0x72, 0x6f, 0x6d, 0x44, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x6c, 0x6f, 0x67, 0x6f, 0x5f, 0x75, 0x72, 0x6c,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6c, 0x6f, 0x67, 0x6f, 0x55, 0x72, 0x6c, 0x12,
	0x23, 0x0a, 0x0d, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x43,
	0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x37, 0x0a, 0x18, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x5f, 0x64,
	0x61, 0x72, 0x6b, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x44, 0x61,
	0x72, 0x6b, 0x4d, 0x6f, 0x64, 0x65, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x2b, 0x0a,
	0x12, 0x64, 0x61, 0x72, 0x6b, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x5f, 0x6c, 0x6f, 0x67, 0x6f, 0x5f,
	0x75, 0x72, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x64, 0x61, 0x72, 0x6b, 0x4d,
	0x6f, 0x64, 0x65, 0x4c, 0x6f, 0x67, 0x6f, 0x55, 0x72, 0x6c, 0x12, 0x35, 0x0a, 0x17, 0x64, 0x61,
	0x72, 0x6b, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x5f, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x5f,
	0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x64, 0x61, 0x72,
	0x6b, 0x4d, 0x6f, 0x64, 0x65, 0x50, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x43, 0x6f, 0x6c, 0x6f,
	0x72, 0x12, 0x22, 0x0a, 0x0d, 0x6c, 0x6f, 0x67, 0x5f, 0x69, 0x6e, 0x5f, 0x6c, 0x61, 0x79, 0x6f,
	0x75, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6c, 0x6f, 0x67, 0x49, 0x6e, 0x4c,
	0x61, 0x79, 0x6f, 0x75, 0x74, 0x12, 0x29, 0x0a, 0x11, 0x6c, 0x6f, 0x67, 0x5f, 0x69, 0x6e, 0x5f,
	0x77, 0x69, 0x74, 0x68, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0e, 0x6c, 0x6f, 0x67, 0x49, 0x6e, 0x57, 0x69, 0x74, 0x68, 0x45, 0x6d, 0x61, 0x69, 0x6c,
	0x12, 0x2b, 0x0a, 0x12, 0x6c, 0x6f, 0x67, 0x5f, 0x69, 0x6e, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x6c, 0x6f,
	0x67, 0x49, 0x6e, 0x57, 0x69, 0x74, 0x68, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x12, 0x31, 0x0a,
	0x15, 0x6c, 0x6f, 0x67, 0x5f, 0x69, 0x6e, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x6d, 0x69, 0x63,
	0x72, 0x6f, 0x73, 0x6f, 0x66, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x6c, 0x6f,
	0x67, 0x49, 0x6e, 0x57, 0x69, 0x74, 0x68, 0x4d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x6f, 0x66, 0x74,
	0x12, 0x2f, 0x0a, 0x14, 0x6c, 0x6f, 0x67, 0x5f, 0x69, 0x6e, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f,
	0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11,
	0x6c, 0x6f, 0x67, 0x49, 0x6e, 0x57, 0x69, 0x74, 0x68, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72,
	0x64, 0x12, 0x27, 0x0a, 0x10, 0x6c, 0x6f, 0x67, 0x5f, 0x69, 0x6e, 0x5f, 0x77, 0x69, 0x74, 0x68,
	0x5f, 0x73, 0x61, 0x6d, 0x6c, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x6c, 0x6f, 0x67,
	0x49, 0x6e, 0x57, 0x69, 0x74, 0x68, 0x53, 0x61, 0x6d, 0x6c, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65,
	0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x5f, 0x75, 0x72, 0x69, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x72, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x55, 0x72, 0x69, 0x12, 0x3c, 0x0a,
	0x18, 0x61, 0x66, 0x74, 0x65, 0x72, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x5f, 0x72, 0x65, 0x64,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x5f, 0x75, 0x72, 0x69, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x15, 0x61, 0x66, 0x74, 0x65, 0x72, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x64,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x55, 0x72, 0x69, 0x88, 0x01, 0x01, 0x12, 0x3e, 0x0a, 0x19, 0x61,
	0x66, 0x74, 0x65, 0x72, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x75, 0x70, 0x5f, 0x72, 0x65, 0x64, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x5f, 0x75, 0x72, 0x69, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01,
	0x52, 0x16, 0x61, 0x66, 0x74, 0x65, 0x72, 0x53, 0x69, 0x67, 0x6e, 0x75, 0x70, 0x52, 0x65, 0x64,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x55, 0x72, 0x69, 0x88, 0x01, 0x01, 0x42, 0x1b, 0x0a, 0x19, 0x5f,
	0x61, 0x66, 0x74, 0x65, 0x72, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x5f, 0x72, 0x65, 0x64, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x5f, 0x75, 0x72, 0x69, 0x42, 0x1c, 0x0a, 0x1a, 0x5f, 0x61, 0x66, 0x74,
	0x65, 0x72, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x75, 0x70, 0x5f, 0x72, 0x65, 0x64, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x5f, 0x75, 0x72, 0x69, 0x22, 0x5c, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21,
	0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x5f, 0x75, 0x72,
	0x69, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x55, 0x72, 0x69, 0x22, 0x54, 0x0a, 0x15, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3b, 0x0a,
	0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x74, 0x65, 0x73, 0x73, 0x65, 0x72, 0x61, 0x6c, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6d,
	0x65, 0x64, 0x69, 0x61, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x22, 0x78, 0x0a, 0x1f, 0x4f, 0x6e,
	0x62, 0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a,
	0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x19, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x64, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x64, 0x55, 0x72, 0x6c, 0x12, 0x17, 0x0a, 0x07, 0x64,
	0x65, 0x76, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x65,
	0x76, 0x55, 0x72, 0x6c, 0x22, 0x6a, 0x0a, 0x20, 0x4f, 0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x69,
	0x6e, 0x67, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x66, 0x72,
	0x65, 0x73, 0x68, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x21, 0x0a,
	0x0c, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x22, 0x56, 0x0a, 0x20, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6d,
	0x65, 0x64, 0x69, 0x61, 0x74, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x32, 0x0a, 0x15, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x5f,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x13, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x22, 0x6e, 0x0a, 0x21, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x65, 0x53, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x49, 0x0a,
	0x21, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x5f, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6d,
	0x65, 0x64, 0x69, 0x61, 0x74, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x63,
	0x72, 0x65, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x0f, 0x0a, 0x0d, 0x57, 0x68, 0x6f, 0x61,
	0x6d, 0x69, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x72, 0x0a, 0x0e, 0x57, 0x68, 0x6f,
	0x61, 0x6d, 0x69, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x60, 0x0a, 0x14, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x74, 0x65, 0x73, 0x73,
	0x65, 0x72, 0x61, 0x6c, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74,
	0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x13, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6d,
	0x65, 0x64, 0x69, 0x61, 0x74, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x3e, 0x0a,
	0x19, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x69,
	0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x45, 0x0a,
	0x1a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x6f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x22, 0x41, 0x0a, 0x16, 0x53, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x27,
	0x0a, 0x0f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x19, 0x0a, 0x17, 0x53, 0x65, 0x74, 0x4f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x2e, 0x0a, 0x2c, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x46, 0x6f, 0x72, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x22, 0xc6, 0x01, 0x0a, 0x2d, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x46, 0x6f, 0x72, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x5f,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x66,
	0x72, 0x65, 0x73, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x19, 0x0a, 0x08,
	0x6e, 0x65, 0x77, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07,
	0x6e, 0x65, 0x77, 0x55, 0x73, 0x65, 0x72, 0x12, 0x32, 0x0a, 0x15, 0x72, 0x65, 0x6c, 0x61, 0x79,
	0x65, 0x64, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x62, 0x0a, 0x2c, 0x45,
	0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x53, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x46, 0x6f, 0x72, 0x53, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x32, 0x0a, 0x15, 0x72,
	0x65, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x72, 0x65, 0x6c, 0x61,
	0x79, 0x65, 0x64, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22,
	0xab, 0x01, 0x0a, 0x2d, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x6c, 0x61,
	0x79, 0x65, 0x64, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x46,
	0x6f, 0x72, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x5f, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73,
	0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x32, 0x0a, 0x15, 0x72, 0x65, 0x6c,
	0x61, 0x79, 0x65, 0x64, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x65,
	0x64, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x22, 0x45, 0x0a,
	0x20, 0x47, 0x65, 0x74, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x4f, 0x41, 0x75, 0x74, 0x68, 0x52,
	0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x55, 0x52, 0x4c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x5f, 0x75, 0x72,
	0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x55, 0x72, 0x6c, 0x22, 0x35, 0x0a, 0x21, 0x47, 0x65, 0x74, 0x47, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x4f, 0x41, 0x75, 0x74, 0x68, 0x52, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x55, 0x52,
	0x4c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x22, 0x6b, 0x0a, 0x1c, 0x52,
	0x65, 0x64, 0x65, 0x65, 0x6d, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x4f, 0x41, 0x75, 0x74, 0x68,
	0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65, 0x64,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x55, 0x72, 0x6c, 0x22, 0x1f, 0x0a, 0x1d, 0x52, 0x65, 0x64, 0x65,
	0x65, 0x6d, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x4f, 0x41, 0x75, 0x74, 0x68, 0x43, 0x6f, 0x64,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x48, 0x0a, 0x23, 0x47, 0x65, 0x74,
	0x4d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x6f, 0x66, 0x74, 0x4f, 0x41, 0x75, 0x74, 0x68, 0x52, 0x65,
	0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x55, 0x52, 0x4c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x5f, 0x75, 0x72, 0x6c,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x55, 0x72, 0x6c, 0x22, 0x38, 0x0a, 0x24, 0x47, 0x65, 0x74, 0x4d, 0x69, 0x63, 0x72, 0x6f, 0x73,
	0x6f, 0x66, 0x74, 0x4f, 0x41, 0x75, 0x74, 0x68, 0x52, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x55, 0x52, 0x4c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75,
	0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x22, 0x6e, 0x0a,
	0x1f, 0x52, 0x65, 0x64, 0x65, 0x65, 0x6d, 0x4d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x6f, 0x66, 0x74,
	0x4f, 0x41, 0x75, 0x74, 0x68, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65,
	0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x72, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x55, 0x72, 0x6c, 0x22, 0x22, 0x0a,
	0x20, 0x52, 0x65, 0x64, 0x65, 0x65, 0x6d, 0x4d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x6f, 0x66, 0x74,
	0x4f, 0x41, 0x75, 0x74, 0x68, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0xa9, 0x05, 0x0a, 0x0c, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61,
	0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x29, 0x0a, 0x11, 0x6c, 0x6f, 0x67, 0x5f, 0x69, 0x6e, 0x5f,
	0x77, 0x69, 0x74, 0x68, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0e, 0x6c, 0x6f, 0x67, 0x49, 0x6e, 0x57, 0x69, 0x74, 0x68, 0x45, 0x6d, 0x61, 0x69, 0x6c,
	0x12, 0x2b, 0x0a, 0x12, 0x6c, 0x6f, 0x67, 0x5f, 0x69, 0x6e, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x6c, 0x6f,
	0x67, 0x49, 0x6e, 0x57, 0x69, 0x74, 0x68, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x12, 0x31, 0x0a,
	0x15, 0x6c, 0x6f, 0x67, 0x5f, 0x69, 0x6e, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x6d, 0x69, 0x63,
	0x72, 0x6f, 0x73, 0x6f, 0x66, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x6c, 0x6f,
	0x67, 0x49, 0x6e, 0x57, 0x69, 0x74, 0x68, 0x4d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x6f, 0x66, 0x74,
	0x12, 0x2f, 0x0a, 0x14, 0x6c, 0x6f, 0x67, 0x5f, 0x69, 0x6e, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f,
	0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11,
	0x6c, 0x6f, 0x67, 0x49, 0x6e, 0x57, 0x69, 0x74, 0x68, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72,
	0x64, 0x12, 0x27, 0x0a, 0x10, 0x6c, 0x6f, 0x67, 0x5f, 0x69, 0x6e, 0x5f, 0x77, 0x69, 0x74, 0x68,
	0x5f, 0x73, 0x61, 0x6d, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x6c, 0x6f, 0x67,
	0x49, 0x6e, 0x57, 0x69, 0x74, 0x68, 0x53, 0x61, 0x6d, 0x6c, 0x12, 0x40, 0x0a, 0x1d, 0x6c, 0x6f,
	0x67, 0x5f, 0x69, 0x6e, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e,
	0x74, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x19, 0x6c, 0x6f, 0x67, 0x49, 0x6e, 0x57, 0x69, 0x74, 0x68, 0x41, 0x75, 0x74, 0x68,
	0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x41, 0x70, 0x70, 0x12, 0x2d, 0x0a, 0x13,
	0x6c, 0x6f, 0x67, 0x5f, 0x69, 0x6e, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x70, 0x61, 0x73, 0x73,
	0x6b, 0x65, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x6c, 0x6f, 0x67, 0x49, 0x6e,
	0x57, 0x69, 0x74, 0x68, 0x50, 0x61, 0x73, 0x73, 0x6b, 0x65, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x72,
	0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x5f, 0x6d, 0x66, 0x61, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x4d, 0x66, 0x61, 0x12, 0x3b, 0x0a, 0x1a,
	0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x73, 0x61, 0x6d, 0x6c, 0x5f, 0x63, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x17, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x53, 0x61, 0x6d, 0x6c, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a,
	0x75, 0x73, 0x65, 0x72, 0x45, 0x78, 0x69, 0x73, 0x74, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x68, 0x61, 0x73, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x75, 0x73, 0x65, 0x72, 0x48, 0x61, 0x73, 0x50, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x3b, 0x0a, 0x1a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x68,
	0x61, 0x73, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72,
	0x5f, 0x61, 0x70, 0x70, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x17, 0x75, 0x73, 0x65, 0x72,
	0x48, 0x61, 0x73, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72,
	0x41, 0x70, 0x70, 0x12, 0x28, 0x0a, 0x10, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x68, 0x61, 0x73, 0x5f,
	0x70, 0x61, 0x73, 0x73, 0x6b, 0x65, 0x79, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x75,
	0x73, 0x65, 0x72, 0x48, 0x61, 0x73, 0x50, 0x61, 0x73, 0x73, 0x6b, 0x65, 0x79, 0x22, 0x82, 0x02,
	0x0a, 0x07, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x6f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x12, 0x3b, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x3b, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c,
	0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x21, 0x0a, 0x0c, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x44, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x22, 0x3e, 0x0a, 0x26, 0x49, 0x73, 0x73, 0x75, 0x65, 0x45, 0x6d, 0x61, 0x69, 0x6c,
	0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x61, 0x6c,
	0x6c, 0x65, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61,
	0x69, 0x6c, 0x22, 0x29, 0x0a, 0x27, 0x49, 0x73, 0x73, 0x75, 0x65, 0x45, 0x6d, 0x61, 0x69, 0x6c,
	0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x61, 0x6c,
	0x6c, 0x65, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1a, 0x0a,
	0x18, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x69, 0x0a, 0x19, 0x4c, 0x69, 0x73,
	0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4c, 0x0a, 0x0d, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e,
	0x74, 0x65, 0x73, 0x73, 0x65, 0x72, 0x61, 0x6c, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6d, 0x65,
	0x64, 0x69, 0x61, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x22, 0x34, 0x0a, 0x1c, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x41, 0x4d, 0x4c,
	0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x22, 0x6d, 0x0a, 0x1d, 0x4c, 0x69,
	0x73, 0x74, 0x53, 0x41, 0x4d, 0x4c, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4c, 0x0a, 0x0d, 0x6f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x26, 0x2e, 0x74, 0x65, 0x73, 0x73, 0x65, 0x72, 0x61, 0x6c, 0x2e, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x6f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x31, 0x0a, 0x1b, 0x56, 0x65, 0x72,
	0x69, 0x66, 0x79, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x1e, 0x0a, 0x1c,
	0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x43, 0x68, 0x61, 0x6c, 0x6c,
	0x65, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x35, 0x0a, 0x17,
	0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77,
	0x6f, 0x72, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77,
	0x6f, 0x72, 0x64, 0x22, 0x1a, 0x0a, 0x18, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x50,
	0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x5c, 0x0a, 0x15, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72,
	0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x6f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x22, 0x18, 0x0a,
	0x16, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1f, 0x0a, 0x1d, 0x49, 0x73, 0x73, 0x75, 0x65,
	0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x65, 0x74, 0x43, 0x6f, 0x64,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x20, 0x0a, 0x1e, 0x49, 0x73, 0x73, 0x75,
	0x65, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x65, 0x74, 0x43, 0x6f,
	0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x50, 0x0a, 0x1e, 0x56, 0x65,
	0x72, 0x69, 0x66, 0x79, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x65,
	0x74, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x13,
	0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x74, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x70, 0x61, 0x73, 0x73, 0x77,
	0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x65, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x21, 0x0a, 0x1f,
	0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x65,
	0x73, 0x65, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x14, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x55, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3e, 0x0a, 0x08,
	0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x74, 0x65, 0x73, 0x73, 0x65, 0x72, 0x61, 0x6c, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6d,
	0x65, 0x64, 0x69, 0x61, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x52, 0x08, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x22, 0x6c, 0x0a, 0x23,
	0x52, 0x65, 0x64, 0x65, 0x65, 0x6d, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6d, 0x70, 0x65, 0x72, 0x73,
	0x6f, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x45, 0x0a, 0x1f, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x5f, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x69, 0x6d, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1c, 0x73, 0x65,
	0x63, 0x72, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6d, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x6e, 0x0a, 0x24, 0x52, 0x65,
	0x64, 0x65, 0x65, 0x6d, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6d, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x5f, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x66, 0x72, 0x65,
	0x73, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x23, 0x0a, 0x21, 0x47, 0x65,
	0x74, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x41, 0x70,
	0x70, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22,
	0x45, 0x0a, 0x22, 0x47, 0x65, 0x74, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61,
	0x74, 0x6f, 0x72, 0x41, 0x70, 0x70, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6f, 0x74, 0x70, 0x61, 0x75, 0x74, 0x68,
	0x5f, 0x75, 0x72, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6f, 0x74, 0x70, 0x61,
	0x75, 0x74, 0x68, 0x55, 0x72, 0x69, 0x22, 0x3e, 0x0a, 0x1f, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x65, 0x72, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x41,
	0x70, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x6f, 0x74,
	0x70, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x6f,
	0x74, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x49, 0x0a, 0x20, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x65, 0x72, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x41,
	0x70, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x65,
	0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x0d, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x64, 0x65,
	0x73, 0x22, 0x61, 0x0a, 0x1d, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x41, 0x75, 0x74, 0x68, 0x65,
	0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x41, 0x70, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x6f, 0x74, 0x70, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x6f, 0x74, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x23, 0x0a, 0x0d, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79,
	0x43, 0x6f, 0x64, 0x65, 0x22, 0x20, 0x0a, 0x1e, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x41, 0x75,
	0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x41, 0x70, 0x70, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1a, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x50, 0x61, 0x73,
	0x73, 0x6b, 0x65, 0x79, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x22, 0x8e, 0x01, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x50, 0x61, 0x73, 0x73, 0x6b, 0x65,
	0x79, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x13, 0x0a, 0x05, 0x72, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x72, 0x70, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x72, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x17,
	0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0f, 0x75, 0x73, 0x65, 0x72, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e,
	0x61, 0x6d, 0x65, 0x22, 0x5c, 0x0a, 0x16, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x50,
	0x61, 0x73, 0x73, 0x6b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2d, 0x0a,
	0x12, 0x61, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x61, 0x74, 0x74, 0x65, 0x73,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x13, 0x0a, 0x05,
	0x72, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x72, 0x70, 0x49,
	0x64, 0x22, 0x19, 0x0a, 0x17, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x50, 0x61, 0x73,
	0x73, 0x6b, 0x65, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1e, 0x0a, 0x1c,
	0x49, 0x73, 0x73, 0x75, 0x65, 0x50, 0x61, 0x73, 0x73, 0x6b, 0x65, 0x79, 0x43, 0x68, 0x61, 0x6c,
	0x6c, 0x65, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x79, 0x0a, 0x1d,
	0x49, 0x73, 0x73, 0x75, 0x65, 0x50, 0x61, 0x73, 0x73, 0x6b, 0x65, 0x79, 0x43, 0x68, 0x61, 0x6c,
	0x6c, 0x65, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x13, 0x0a,
	0x05, 0x72, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x72, 0x70,
	0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c,
	0x5f, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x0d, 0x63, 0x72, 0x65, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x49, 0x64, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x68, 0x61,
	0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x63, 0x68,
	0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x22, 0xb2, 0x01, 0x0a, 0x14, 0x56, 0x65, 0x72, 0x69,
	0x66, 0x79, 0x50, 0x61, 0x73, 0x73, 0x6b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x23, 0x0a, 0x0d, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x61, 0x6c, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f,
	0x64, 0x61, 0x74, 0x61, 0x5f, 0x6a, 0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x4a, 0x73, 0x6f, 0x6e, 0x12,
	0x2d, 0x0a, 0x12, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72,
	0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x61, 0x75, 0x74,
	0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1c,
	0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x22, 0x17, 0x0a, 0x15,
	0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x50, 0x61, 0x73, 0x73, 0x6b, 0x65, 0x79, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x25, 0x0a, 0x23, 0x53, 0x65, 0x74, 0x45, 0x6d, 0x61, 0x69,
	0x6c, 0x41, 0x73, 0x50, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x46,
	0x61, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x26, 0x0a, 0x24,
	0x53, 0x65, 0x74, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x41, 0x73, 0x50, 0x72, 0x69, 0x6d, 0x61, 0x72,
	0x79, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x53, 0x0a, 0x2c, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x46, 0x6f, 0x72, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6d,
	0x65, 0x64, 0x69, 0x61, 0x74, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x5f,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x66,
	0x72, 0x65, 0x73, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x7a, 0x0a, 0x2d, 0x45, 0x78, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x46, 0x6f, 0x72, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x49, 0x0a, 0x21, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6d, 0x65, 0x64, 0x69,
	0x61, 0x74, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x2a, 0x9a, 0x01, 0x0a, 0x11, 0x50, 0x72, 0x69, 0x6d, 0x61, 0x72,
	0x79, 0x41, 0x75, 0x74, 0x68, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x23, 0x0a, 0x1f, 0x50,
	0x52, 0x49, 0x4d, 0x41, 0x52, 0x59, 0x5f, 0x41, 0x55, 0x54, 0x48, 0x5f, 0x46, 0x41, 0x43, 0x54,
	0x4f, 0x52, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x1d, 0x0a, 0x19, 0x50, 0x52, 0x49, 0x4d, 0x41, 0x52, 0x59, 0x5f, 0x41, 0x55, 0x54, 0x48,
	0x5f, 0x46, 0x41, 0x43, 0x54, 0x4f, 0x52, 0x5f, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x10, 0x01, 0x12,
	0x1e, 0x0a, 0x1a, 0x50, 0x52, 0x49, 0x4d, 0x41, 0x52, 0x59, 0x5f, 0x41, 0x55, 0x54, 0x48, 0x5f,
	0x46, 0x41, 0x43, 0x54, 0x4f, 0x52, 0x5f, 0x47, 0x4f, 0x4f, 0x47, 0x4c, 0x45, 0x10, 0x02, 0x12,
	0x21, 0x0a, 0x1d, 0x50, 0x52, 0x49, 0x4d, 0x41, 0x52, 0x59, 0x5f, 0x41, 0x55, 0x54, 0x48, 0x5f,
	0x46, 0x41, 0x43, 0x54, 0x4f, 0x52, 0x5f, 0x4d, 0x49, 0x43, 0x52, 0x4f, 0x53, 0x4f, 0x46, 0x54,
	0x10, 0x03, 0x32, 0x96, 0x2e, 0x0a, 0x13, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6d, 0x65, 0x64, 0x69,
	0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0xb8, 0x01, 0x0a, 0x15, 0x4c,
	0x69, 0x73, 0x74, 0x53, 0x41, 0x4d, 0x4c, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x36, 0x2e, 0x74, 0x65, 0x73, 0x73, 0x65, 0x72, 0x61, 0x6c, 0x2e,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x53, 0x41, 0x4d, 0x4c, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x37, 0x2e, 0x74,
	0x65, 0x73, 0x73, 0x65, 0x72, 0x61, 0x6c, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6d, 0x65, 0x64,
	0x69, 0x61, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x41, 0x4d, 0x4c,
	0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x28, 0x3a, 0x01, 0x2a,
	0x22, 0x23, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x65, 0x2f,
	0x76, 0x31, 0x2f, 0x73, 0x61, 0x6d, 0x6c, 0x2d, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x6a, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x12, 0x2c, 0x2e, 0x74, 0x65, 0x73, 0x73, 0x65, 0x72, 0x61, 0x6c, 0x2e,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x65, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x74, 0x65, 0x73, 0x73, 0x65, 0x72, 0x61, 0x6c, 0x2e, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65,
	0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0xda, 0x01, 0x0a, 0x1c, 0x52, 0x65, 0x64, 0x65, 0x65, 0x6d, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x6d, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x12, 0x3d, 0x2e, 0x74, 0x65, 0x73, 0x73, 0x65, 0x72, 0x61, 0x6c, 0x2e, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65,
	0x64, 0x65, 0x65, 0x6d, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6d, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x3e, 0x2e, 0x74, 0x65, 0x73, 0x73, 0x65, 0x72, 0x61, 0x6c, 0x2e, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x64,
	0x65, 0x65, 0x6d, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6d, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x3b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x35, 0x3a, 0x01, 0x2a, 0x22, 0x30, 0x2f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x72,
	0x65, 0x64, 0x65, 0x65, 0x6d, 0x2d, 0x75, 0x73, 0x65, 0x72, 0x2d, 0x69, 0x6d, 0x70, 0x65, 0x72,
	0x73, 0x6f, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0xc6,
	0x01, 0x0a, 0x19, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6d, 0x65,
	0x64, 0x69, 0x61, 0x74, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3a, 0x2e, 0x74,
	0x65, 0x73, 0x73, 0x65, 0x72, 0x61, 0x6c, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6d, 0x65, 0x64,
	0x69, 0x61, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3b, 0x2e, 0x74, 0x65, 0x73, 0x73, 0x65,
	0x72, 0x61, 0x6c, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6d,
	0x65, 0x64, 0x69, 0x61, 0x74, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x30, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2a, 0x3a, 0x01, 0x2a,
	0x22, 0x25, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x65, 0x2f,
	0x76, 0x31, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x65, 0x2d,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x7c, 0x0a, 0x06, 0x57, 0x68, 0x6f, 0x61, 0x6d,
	0x69, 0x12, 0x27, 0x2e, 0x74, 0x65, 0x73, 0x73, 0x65, 0x72, 0x61, 0x6c, 0x2e, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x68, 0x6f,
	0x61, 0x6d, 0x69, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x74, 0x65, 0x73,
	0x73, 0x65, 0x72, 0x61, 0x6c, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6d, 0x65, 0x64, 0x69, 0x61,
	0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x68, 0x6f, 0x61, 0x6d, 0x69, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x19, 0x12, 0x17, 0x2f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x77,
	0x68, 0x6f, 0x61, 0x6d, 0x69, 0x12, 0xaa, 0x01, 0x0a, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x33, 0x2e, 0x74,
	0x65, 0x73, 0x73, 0x65, 0x72, 0x61, 0x6c, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6d, 0x65, 0x64,
	0x69, 0x61, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x34, 0x2e, 0x74, 0x65, 0x73, 0x73, 0x65, 0x72, 0x61, 0x6c, 0x2e, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x29, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x23, 0x3a,
	0x01, 0x2a, 0x22, 0x1e, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74,
	0x65, 0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0xa4, 0x01, 0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x32, 0x2e, 0x74, 0x65, 0x73, 0x73, 0x65,
	0x72, 0x61, 0x6c, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x74,
	0x65, 0x73, 0x73, 0x65, 0x72, 0x61, 0x6c, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6d, 0x65, 0x64,
	0x69, 0x61, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x26, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x20, 0x12, 0x1e, 0x2f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0xa1, 0x01, 0x0a, 0x0f, 0x53, 0x65,
	0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x30, 0x2e,
	0x74, 0x65, 0x73, 0x73, 0x65, 0x72, 0x61, 0x6c, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6d, 0x65,
	0x64, 0x69, 0x61, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x31, 0x2e, 0x74, 0x65, 0x73, 0x73, 0x65, 0x72, 0x61, 0x6c, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x4f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x29, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x23, 0x22, 0x21, 0x2f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x65, 0x74,
	0x2d, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0xff, 0x01,
	0x0a, 0x25, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6d,
	0x65, 0x64, 0x69, 0x61, 0x74, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x46, 0x6f, 0x72,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x46, 0x2e, 0x74, 0x65, 0x73, 0x73, 0x65, 0x72,
	0x61, 0x6c, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x46, 0x6f,
	0x72, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x47, 0x2e, 0x74, 0x65, 0x73, 0x73, 0x65, 0x72, 0x61, 0x6c, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x65, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x46, 0x6f, 0x72, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x45, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3f,
	0x3a, 0x01, 0x2a, 0x22, 0x3a, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6d, 0x65, 0x64, 0x69, 0x61,
	0x74, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x2d, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x65, 0x2d, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x2d, 0x66, 0x6f, 0x72, 0x2d, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x80, 0x02, 0x0a, 0x25, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x6c, 0x61,
	0x79, 0x65, 0x64, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x46,
	0x6f, 0x72, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x46, 0x2e, 0x74, 0x65, 0x73, 0x73,
	0x65, 0x72, 0x61, 0x6c, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x6c,
	0x61, 0x79, 0x65, 0x64, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x46, 0x6f, 0x72, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x47, 0x2e, 0x74, 0x65, 0x73, 0x73, 0x65, 0x72, 0x61, 0x6c, 0x2e, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x46, 0x6f, 0x72, 0x53, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x46, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x40, 0x3a, 0x01, 0x2a, 0x22, 0x3b, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6d, 0x65, 0x64,
	0x69, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x2d, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x2d, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x2d, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x2d, 0x66, 0x6f, 0x72, 0x2d, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0xcb, 0x01, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x4f, 0x41, 0x75, 0x74, 0x68, 0x52, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x55, 0x52, 0x4c,
	0x12, 0x3a, 0x2e, 0x74, 0x65, 0x73, 0x73, 0x65, 0x72, 0x61, 0x6c, 0x2e, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x47,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x4f, 0x41, 0x75, 0x74, 0x68, 0x52, 0x65, 0x64, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x55, 0x52, 0x4c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3b, 0x2e, 0x74,
	0x65, 0x73, 0x73, 0x65, 0x72, 0x61, 0x6c, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6d, 0x65, 0x64,
	0x69, 0x61, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x47, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x4f, 0x41, 0x75, 0x74, 0x68, 0x52, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x55, 0x52,
	0x4c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x35, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x2f, 0x3a, 0x01, 0x2a, 0x22, 0x2a, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6d, 0x65, 0x64, 0x69,
	0x61, 0x74, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2d, 0x6f, 0x61,
	0x75, 0x74, 0x68, 0x2d, 0x72, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x2d, 0x75, 0x72, 0x6c,
	0x12, 0xbe, 0x01, 0x0a, 0x15, 0x52, 0x65, 0x64, 0x65, 0x65, 0x6d, 0x47, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x4f, 0x41, 0x75, 0x74, 0x68, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x36, 0x2e, 0x74, 0x65, 0x73,
	0x73, 0x65, 0x72, 0x61, 0x6c, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6d, 0x65, 0x64, 0x69, 0x61,
	0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x64, 0x65, 0x65, 0x6d, 0x47, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x4f, 0x41, 0x75, 0x74, 0x68, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x37, 0x2e, 0x74, 0x65, 0x73, 0x73, 0x65, 0x72, 0x61, 0x6c, 0x2e, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65,
	0x64, 0x65, 0x65, 0x6d, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x4f, 0x41, 0x75, 0x74, 0x68, 0x43,
	0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x34, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x2e, 0x3a, 0x01, 0x2a, 0x22, 0x29, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6d, 0x65,
	0x64, 0x69, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x65, 0x64, 0x65, 0x65, 0x6d, 0x2d,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2d, 0x6f, 0x61, 0x75, 0x74, 0x68, 0x2d, 0x63, 0x6f, 0x64,
	0x65, 0x12, 0xd7, 0x01, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x4d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x6f,
	0x66, 0x74, 0x4f, 0x41, 0x75, 0x74, 0x68, 0x52, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x55,
	0x52, 0x4c, 0x12, 0x3d, 0x2e, 0x74, 0x65, 0x73, 0x73, 0x65, 0x72, 0x61, 0x6c, 0x2e, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65,
	0x74, 0x4d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x6f, 0x66, 0x74, 0x4f, 0x41, 0x75, 0x74, 0x68, 0x52,
	0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x55, 0x52, 0x4c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x3e, 0x2e, 0x74, 0x65, 0x73, 0x73, 0x65, 0x72, 0x61, 0x6c, 0x2e, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74,
	0x4d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x6f, 0x66, 0x74, 0x4f, 0x41, 0x75, 0x74, 0x68, 0x52, 0x65,
	0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x55, 0x52, 0x4c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x38, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x32, 0x3a, 0x01, 0x2a, 0x22, 0x2d, 0x2f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x6d,
	0x69, 0x63, 0x72, 0x6f, 0x73, 0x6f, 0x66, 0x74, 0x2d, 0x6f, 0x61, 0x75, 0x74, 0x68, 0x2d, 0x72,
	0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x2d, 0x75, 0x72, 0x6c, 0x12, 0xca, 0x01, 0x0a, 0x18,
	0x52, 0x65, 0x64, 0x65, 0x65, 0x6d, 0x4d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x6f, 0x66, 0x74, 0x4f,
	0x41, 0x75, 0x74, 0x68, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x39, 0x2e, 0x74, 0x65, 0x73, 0x73, 0x65,
	0x72, 0x61, 0x6c, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x64, 0x65, 0x65, 0x6d, 0x4d, 0x69, 0x63, 0x72, 0x6f, 0x73,
	0x6f, 0x66, 0x74, 0x4f, 0x41, 0x75, 0x74, 0x68, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x3a, 0x2e, 0x74, 0x65, 0x73, 0x73, 0x65, 0x72, 0x61, 0x6c, 0x2e, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52,
	0x65, 0x64, 0x65, 0x65, 0x6d, 0x4d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x6f, 0x66, 0x74, 0x4f, 0x41,
	0x75, 0x74, 0x68, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x37, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x31, 0x3a, 0x01, 0x2a, 0x22, 0x2c, 0x2f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x65, 0x64,
	0x65, 0x65, 0x6d, 0x2d, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x6f, 0x66, 0x74, 0x2d, 0x6f, 0x61,
	0x75, 0x74, 0x68, 0x2d, 0x63, 0x6f, 0x64, 0x65, 0x12, 0xe6, 0x01, 0x0a, 0x1f, 0x49, 0x73, 0x73,
	0x75, 0x65, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x12, 0x40, 0x2e, 0x74,
	0x65, 0x73, 0x73, 0x65, 0x72, 0x61, 0x6c, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6d, 0x65, 0x64,
	0x69, 0x61, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x73, 0x73, 0x75, 0x65, 0x45, 0x6d, 0x61,
	0x69, 0x6c, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68,
	0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x41,
	0x2e, 0x74, 0x65, 0x73, 0x73, 0x65, 0x72, 0x61, 0x6c, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6d,
	0x65, 0x64, 0x69, 0x61, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x73, 0x73, 0x75, 0x65, 0x45,
	0x6d, 0x61, 0x69, 0x6c, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x3e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x38, 0x3a, 0x01, 0x2a, 0x22, 0x33, 0x2f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x69,
	0x73, 0x73, 0x75, 0x65, 0x2d, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x2d, 0x76, 0x65, 0x72, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67,
	0x65, 0x12, 0xb9, 0x01, 0x0a, 0x14, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x45, 0x6d, 0x61, 0x69,
	0x6c, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x12, 0x35, 0x2e, 0x74, 0x65, 0x73,
	0x73, 0x65, 0x72, 0x61, 0x6c, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6d, 0x65, 0x64, 0x69, 0x61,
	0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x45, 0x6d, 0x61, 0x69,
	0x6c, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x36, 0x2e, 0x74, 0x65, 0x73, 0x73, 0x65, 0x72, 0x61, 0x6c, 0x2e, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x65, 0x72,
	0x69, 0x66, 0x79, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x32, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x2c, 0x3a, 0x01, 0x2a, 0x22, 0x27, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6d, 0x65, 0x64, 0x69,
	0x61, 0x74, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x2d, 0x65, 0x6d,
	0x61, 0x69, 0x6c, 0x2d, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x12, 0xa8, 0x01,
	0x0a, 0x10, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f,
	0x72, 0x64, 0x12, 0x31, 0x2e, 0x74, 0x65, 0x73, 0x73, 0x65, 0x72, 0x61, 0x6c, 0x2e, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x74, 0x65, 0x73, 0x73, 0x65, 0x72, 0x61, 0x6c,
	0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72,
	0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2d, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x27, 0x3a, 0x01, 0x2a, 0x22, 0x22, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6d, 0x65, 0x64, 0x69,
	0x61, 0x74, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x2d,
	0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0xa0, 0x01, 0x0a, 0x0e, 0x56, 0x65, 0x72,
	0x69, 0x66, 0x79, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x2f, 0x2e, 0x74, 0x65,
	0x73, 0x73, 0x65, 0x72, 0x61, 0x6c, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6d, 0x65, 0x64, 0x69,
	0x61, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x50, 0x61, 0x73,
	0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x74,
	0x65, 0x73, 0x73, 0x65, 0x72, 0x61, 0x6c, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6d, 0x65, 0x64,
	0x69, 0x61, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x50, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2b,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x25, 0x3a, 0x01, 0x2a, 0x22, 0x20, 0x2f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x76, 0x65, 0x72, 0x69,
	0x66, 0x79, 0x2d, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0xc2, 0x01, 0x0a, 0x16,
	0x49, 0x73, 0x73, 0x75, 0x65, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73,
	0x65, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x37, 0x2e, 0x74, 0x65, 0x73, 0x73, 0x65, 0x72, 0x61,
	0x6c, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x49, 0x73, 0x73, 0x75, 0x65, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52,
	0x65, 0x73, 0x65, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x38, 0x2e, 0x74, 0x65, 0x73, 0x73, 0x65, 0x72, 0x61, 0x6c, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x73, 0x73, 0x75, 0x65,
	0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x65, 0x74, 0x43, 0x6f, 0x64,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x35, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x2f, 0x3a, 0x01, 0x2a, 0x22, 0x2a, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6d, 0x65, 0x64, 0x69,
	0x61, 0x74, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x69, 0x73, 0x73, 0x75, 0x65, 0x2d, 0x70, 0x61, 0x73,
	0x73, 0x77, 0x6f, 0x72, 0x64, 0x2d, 0x72, 0x65, 0x73, 0x65, 0x74, 0x2d, 0x63, 0x6f, 0x64, 0x65,
	0x12, 0xc6, 0x01, 0x0a, 0x17, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x50, 0x61, 0x73, 0x73, 0x77,
	0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x65, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x38, 0x2e, 0x74,
	0x65, 0x73, 0x73, 0x65, 0x72, 0x61, 0x6c, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6d, 0x65, 0x64,
	0x69, 0x61, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x50, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x65, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x39, 0x2e, 0x74, 0x65, 0x73, 0x73, 0x65, 0x72, 0x61,
	0x6c, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64,
	0x52, 0x65, 0x73, 0x65, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x36, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x30, 0x3a, 0x01, 0x2a, 0x22, 0x2b, 0x2f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x76,
	0x65, 0x72, 0x69, 0x66, 0x79, 0x2d, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x2d, 0x72,
	0x65, 0x73, 0x65, 0x74, 0x2d, 0x63, 0x6f, 0x64, 0x65, 0x12, 0xad, 0x01, 0x0a, 0x11, 0x47, 0x65,
	0x74, 0x50, 0x61, 0x73, 0x73, 0x6b, 0x65, 0x79, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x32, 0x2e, 0x74, 0x65, 0x73, 0x73, 0x65, 0x72, 0x61, 0x6c, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x61,
	0x73, 0x73, 0x6b, 0x65, 0x79, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x74, 0x65, 0x73, 0x73, 0x65, 0x72, 0x61, 0x6c, 0x2e, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x65, 0x74, 0x50, 0x61, 0x73, 0x73, 0x6b, 0x65, 0x79, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x29,
	0x3a, 0x01, 0x2a, 0x22, 0x24, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6d, 0x65, 0x64, 0x69, 0x61,
	0x74, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x67, 0x65, 0x74, 0x2d, 0x70, 0x61, 0x73, 0x73, 0x6b, 0x65,
	0x79, 0x2d, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0xa4, 0x01, 0x0a, 0x0f, 0x52, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x50, 0x61, 0x73, 0x73, 0x6b, 0x65, 0x79, 0x12, 0x30, 0x2e,
	0x74, 0x65, 0x73, 0x73, 0x65, 0x72, 0x61, 0x6c, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6d, 0x65,
	0x64, 0x69, 0x61, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65,
	0x72, 0x50, 0x61, 0x73, 0x73, 0x6b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x31, 0x2e, 0x74, 0x65, 0x73, 0x73, 0x65, 0x72, 0x61, 0x6c, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x65, 0x72, 0x50, 0x61, 0x73, 0x73, 0x6b, 0x65, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x2c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x26, 0x3a, 0x01, 0x2a, 0x22, 0x21, 0x2f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x31, 0x2f,
	0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x2d, 0x70, 0x61, 0x73, 0x73, 0x6b, 0x65, 0x79,
	0x12, 0xbd, 0x01, 0x0a, 0x15, 0x49, 0x73, 0x73, 0x75, 0x65, 0x50, 0x61, 0x73, 0x73, 0x6b, 0x65,
	0x79, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x12, 0x36, 0x2e, 0x74, 0x65, 0x73,
	0x73, 0x65, 0x72, 0x61, 0x6c, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6d, 0x65, 0x64, 0x69, 0x61,
	0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x73, 0x73, 0x75, 0x65, 0x50, 0x61, 0x73, 0x73, 0x6b,
	0x65, 0x79, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x37, 0x2e, 0x74, 0x65, 0x73, 0x73, 0x65, 0x72, 0x61, 0x6c, 0x2e, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x73,
	0x73, 0x75, 0x65, 0x50, 0x61, 0x73, 0x73, 0x6b, 0x65, 0x79, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65,
	0x6e, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x33, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x2d, 0x3a, 0x01, 0x2a, 0x22, 0x28, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6d, 0x65,
	0x64, 0x69, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x69, 0x73, 0x73, 0x75, 0x65, 0x2d, 0x70,
	0x61, 0x73, 0x73, 0x6b, 0x65, 0x79, 0x2d, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65,
	0x12, 0x9c, 0x01, 0x0a, 0x0d, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x50, 0x61, 0x73, 0x73, 0x6b,
	0x65, 0x79, 0x12, 0x2e, 0x2e, 0x74, 0x65, 0x73, 0x73, 0x65, 0x72, 0x61, 0x6c, 0x2e, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x65,
	0x72, 0x69, 0x66, 0x79, 0x50, 0x61, 0x73, 0x73, 0x6b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x74, 0x65, 0x73, 0x73, 0x65, 0x72, 0x61, 0x6c, 0x2e, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x65,
	0x72, 0x69, 0x66, 0x79, 0x50, 0x61, 0x73, 0x73, 0x6b, 0x65, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x2a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x24, 0x3a, 0x01, 0x2a, 0x22, 0x1f,
	0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x31,
	0x2f, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x2d, 0x70, 0x61, 0x73, 0x73, 0x6b, 0x65, 0x79, 0x12,
	0xd2, 0x01, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63,
	0x61, 0x74, 0x6f, 0x72, 0x41, 0x70, 0x70, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x3b,
	0x2e, 0x74, 0x65, 0x73, 0x73, 0x65, 0x72, 0x61, 0x6c, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6d,
	0x65, 0x64, 0x69, 0x61, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x75, 0x74,
	0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x41, 0x70, 0x70, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3c, 0x2e, 0x74, 0x65,
	0x73, 0x73, 0x65, 0x72, 0x61, 0x6c, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6d, 0x65, 0x64, 0x69,
	0x61, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e,
	0x74, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x41, 0x70, 0x70, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x39, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x33, 0x3a, 0x01, 0x2a, 0x22, 0x2e, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6d, 0x65, 0x64, 0x69,
	0x61, 0x74, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x67, 0x65, 0x74, 0x2d, 0x61, 0x75, 0x74, 0x68, 0x65,
	0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x2d, 0x61, 0x70, 0x70, 0x2d, 0x6f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0xc9, 0x01, 0x0a, 0x18, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65,
	0x72, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x41, 0x70,
	0x70, 0x12, 0x39, 0x2e, 0x74, 0x65, 0x73, 0x73, 0x65, 0x72, 0x61, 0x6c, 0x2e, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x65, 0x72, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74,
	0x6f, 0x72, 0x41, 0x70, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3a, 0x2e, 0x74,
	0x65, 0x73, 0x73, 0x65, 0x72, 0x61, 0x6c, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6d, 0x65, 0x64,
	0x69, 0x61, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72,
	0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x41, 0x70, 0x70,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x36, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x30,
	0x3a, 0x01, 0x2a, 0x22, 0x2b, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6d, 0x65, 0x64, 0x69, 0x61,
	0x74, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x2d, 0x61,
	0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x2d, 0x61, 0x70, 0x70,
	0x12, 0xc1, 0x01, 0x0a, 0x16, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x41, 0x75, 0x74, 0x68, 0x65,
	0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x41, 0x70, 0x70, 0x12, 0x37, 0x2e, 0x74, 0x65,
	0x73, 0x73, 0x65, 0x72, 0x61, 0x6c, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6d, 0x65, 0x64, 0x69,
	0x61, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x41, 0x75, 0x74,
	0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x41, 0x70, 0x70, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x38, 0x2e, 0x74, 0x65, 0x73, 0x73, 0x65, 0x72, 0x61, 0x6c, 0x2e,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61,
	0x74, 0x6f, 0x72, 0x41, 0x70, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x34,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2e, 0x3a, 0x01, 0x2a, 0x22, 0x29, 0x2f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x76, 0x65, 0x72, 0x69,
	0x66, 0x79, 0x2d, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72,
	0x2d, 0x61, 0x70, 0x70, 0x12, 0xdc, 0x01, 0x0a, 0x1c, 0x53, 0x65, 0x74, 0x45, 0x6d, 0x61, 0x69,
	0x6c, 0x41, 0x73, 0x50, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x46,
	0x61, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x3d, 0x2e, 0x74, 0x65, 0x73, 0x73, 0x65, 0x72, 0x61, 0x6c,
	0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x65, 0x74, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x41, 0x73, 0x50, 0x72, 0x69, 0x6d, 0x61,
	0x72, 0x79, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x3e, 0x2e, 0x74, 0x65, 0x73, 0x73, 0x65, 0x72, 0x61, 0x6c, 0x2e,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x65, 0x74, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x41, 0x73, 0x50, 0x72, 0x69, 0x6d, 0x61, 0x72,
	0x79, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x37, 0x3a, 0x01, 0x2a, 0x22,
	0x32, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x65, 0x2f, 0x76,
	0x31, 0x2f, 0x73, 0x65, 0x74, 0x2d, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x2d, 0x61, 0x73, 0x2d, 0x70,
	0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x2d, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x2d, 0x66, 0x61, 0x63,
	0x74, 0x6f, 0x72, 0x12, 0xff, 0x01, 0x0a, 0x25, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x46, 0x6f, 0x72, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6d,
	0x65, 0x64, 0x69, 0x61, 0x74, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x46, 0x2e,
	0x74, 0x65, 0x73, 0x73, 0x65, 0x72, 0x61, 0x6c, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6d, 0x65,
	0x64, 0x69, 0x61, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x46, 0x6f, 0x72, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x47, 0x2e, 0x74, 0x65, 0x73, 0x73, 0x65, 0x72, 0x61, 0x6c,
	0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x46, 0x6f, 0x72, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x65, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x45,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3f, 0x3a, 0x01, 0x2a, 0x22, 0x3a, 0x2f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x78, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x2d, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2d, 0x66, 0x6f, 0x72,
	0x2d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x65, 0x2d, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x70, 0x0a, 0x0d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x2e, 0x2e, 0x74, 0x65, 0x73, 0x73, 0x65, 0x72, 0x61,
	0x6c, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x74, 0x65, 0x73, 0x73, 0x65, 0x72, 0x61,
	0x6c, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x91, 0x01, 0x0a, 0x18, 0x4f, 0x6e, 0x62, 0x6f,
	0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x73, 0x12, 0x39, 0x2e, 0x74, 0x65, 0x73, 0x73, 0x65, 0x72, 0x61, 0x6c, 0x2e,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x4f, 0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x3a, 0x2e, 0x74, 0x65, 0x73, 0x73, 0x65, 0x72, 0x61, 0x6c, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x6e, 0x62, 0x6f, 0x61,
	0x72, 0x64, 0x69, 0x6e, 0x67, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x98, 0x02, 0x0a, 0x1c,
	0x63, 0x6f, 0x6d, 0x2e, 0x74, 0x65, 0x73, 0x73, 0x65, 0x72, 0x61, 0x6c, 0x2e, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x42, 0x11, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50,
	0x01, 0x5a, 0x63, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x74, 0x65,
	0x73, 0x73, 0x65, 0x72, 0x61, 0x6c, 0x2d, 0x6c, 0x61, 0x62, 0x73, 0x2f, 0x74, 0x65, 0x73, 0x73,
	0x65, 0x72, 0x61, 0x6c, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x65, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x74,
	0x65, 0x73, 0x73, 0x65, 0x72, 0x61, 0x6c, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6d, 0x65, 0x64,
	0x69, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x31, 0x3b, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6d, 0x65, 0x64,
	0x69, 0x61, 0x74, 0x65, 0x76, 0x31, 0xa2, 0x02, 0x03, 0x54, 0x49, 0x58, 0xaa, 0x02, 0x18, 0x54,
	0x65, 0x73, 0x73, 0x65, 0x72, 0x61, 0x6c, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6d, 0x65, 0x64,
	0x69, 0x61, 0x74, 0x65, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x18, 0x54, 0x65, 0x73, 0x73, 0x65, 0x72,
	0x61, 0x6c, 0x5c, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x65, 0x5c,
	0x56, 0x31, 0xe2, 0x02, 0x24, 0x54, 0x65, 0x73, 0x73, 0x65, 0x72, 0x61, 0x6c, 0x5c, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x65, 0x5c, 0x56, 0x31, 0x5c, 0x47, 0x50,
	0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x1a, 0x54, 0x65, 0x73, 0x73,
	0x65, 0x72, 0x61, 0x6c, 0x3a, 0x3a, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6d, 0x65, 0x64, 0x69, 0x61,
	0x74, 0x65, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_tesseral_intermediate_v1_intermediate_proto_rawDescOnce sync.Once
	file_tesseral_intermediate_v1_intermediate_proto_rawDescData []byte
)

func file_tesseral_intermediate_v1_intermediate_proto_rawDescGZIP() []byte {
	file_tesseral_intermediate_v1_intermediate_proto_rawDescOnce.Do(func() {
		file_tesseral_intermediate_v1_intermediate_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_tesseral_intermediate_v1_intermediate_proto_rawDesc), len(file_tesseral_intermediate_v1_intermediate_proto_rawDesc)))
	})
	return file_tesseral_intermediate_v1_intermediate_proto_rawDescData
}

var file_tesseral_intermediate_v1_intermediate_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_tesseral_intermediate_v1_intermediate_proto_msgTypes = make([]protoimpl.MessageInfo, 66)
var file_tesseral_intermediate_v1_intermediate_proto_goTypes = []any{
	(PrimaryAuthFactor)(0),                                // 0: tesseral.intermediate.v1.PrimaryAuthFactor
	(*IntermediateSession)(nil),                           // 1: tesseral.intermediate.v1.IntermediateSession
	(*Settings)(nil),                                      // 2: tesseral.intermediate.v1.Settings
	(*CreateProjectRequest)(nil),                          // 3: tesseral.intermediate.v1.CreateProjectRequest
	(*CreateProjectResponse)(nil),                         // 4: tesseral.intermediate.v1.CreateProjectResponse
	(*OnboardingCreateProjectsRequest)(nil),               // 5: tesseral.intermediate.v1.OnboardingCreateProjectsRequest
	(*OnboardingCreateProjectsResponse)(nil),              // 6: tesseral.intermediate.v1.OnboardingCreateProjectsResponse
	(*CreateIntermediateSessionRequest)(nil),              // 7: tesseral.intermediate.v1.CreateIntermediateSessionRequest
	(*CreateIntermediateSessionResponse)(nil),             // 8: tesseral.intermediate.v1.CreateIntermediateSessionResponse
	(*WhoamiRequest)(nil),                                 // 9: tesseral.intermediate.v1.WhoamiRequest
	(*WhoamiResponse)(nil),                                // 10: tesseral.intermediate.v1.WhoamiResponse
	(*CreateOrganizationRequest)(nil),                     // 11: tesseral.intermediate.v1.CreateOrganizationRequest
	(*CreateOrganizationResponse)(nil),                    // 12: tesseral.intermediate.v1.CreateOrganizationResponse
	(*SetOrganizationRequest)(nil),                        // 13: tesseral.intermediate.v1.SetOrganizationRequest
	(*SetOrganizationResponse)(nil),                       // 14: tesseral.intermediate.v1.SetOrganizationResponse
	(*ExchangeIntermediateSessionForSessionRequest)(nil),  // 15: tesseral.intermediate.v1.ExchangeIntermediateSessionForSessionRequest
	(*ExchangeIntermediateSessionForSessionResponse)(nil), // 16: tesseral.intermediate.v1.ExchangeIntermediateSessionForSessionResponse
	(*ExchangeRelayedSessionTokenForSessionRequest)(nil),  // 17: tesseral.intermediate.v1.ExchangeRelayedSessionTokenForSessionRequest
	(*ExchangeRelayedSessionTokenForSessionResponse)(nil), // 18: tesseral.intermediate.v1.ExchangeRelayedSessionTokenForSessionResponse
	(*GetGoogleOAuthRedirectURLRequest)(nil),              // 19: tesseral.intermediate.v1.GetGoogleOAuthRedirectURLRequest
	(*GetGoogleOAuthRedirectURLResponse)(nil),             // 20: tesseral.intermediate.v1.GetGoogleOAuthRedirectURLResponse
	(*RedeemGoogleOAuthCodeRequest)(nil),                  // 21: tesseral.intermediate.v1.RedeemGoogleOAuthCodeRequest
	(*RedeemGoogleOAuthCodeResponse)(nil),                 // 22: tesseral.intermediate.v1.RedeemGoogleOAuthCodeResponse
	(*GetMicrosoftOAuthRedirectURLRequest)(nil),           // 23: tesseral.intermediate.v1.GetMicrosoftOAuthRedirectURLRequest
	(*GetMicrosoftOAuthRedirectURLResponse)(nil),          // 24: tesseral.intermediate.v1.GetMicrosoftOAuthRedirectURLResponse
	(*RedeemMicrosoftOAuthCodeRequest)(nil),               // 25: tesseral.intermediate.v1.RedeemMicrosoftOAuthCodeRequest
	(*RedeemMicrosoftOAuthCodeResponse)(nil),              // 26: tesseral.intermediate.v1.RedeemMicrosoftOAuthCodeResponse
	(*Organization)(nil),                                  // 27: tesseral.intermediate.v1.Organization
	(*Project)(nil),                                       // 28: tesseral.intermediate.v1.Project
	(*IssueEmailVerificationChallengeRequest)(nil),        // 29: tesseral.intermediate.v1.IssueEmailVerificationChallengeRequest
	(*IssueEmailVerificationChallengeResponse)(nil),       // 30: tesseral.intermediate.v1.IssueEmailVerificationChallengeResponse
	(*ListOrganizationsRequest)(nil),                      // 31: tesseral.intermediate.v1.ListOrganizationsRequest
	(*ListOrganizationsResponse)(nil),                     // 32: tesseral.intermediate.v1.ListOrganizationsResponse
	(*ListSAMLOrganizationsRequest)(nil),                  // 33: tesseral.intermediate.v1.ListSAMLOrganizationsRequest
	(*ListSAMLOrganizationsResponse)(nil),                 // 34: tesseral.intermediate.v1.ListSAMLOrganizationsResponse
	(*VerifyEmailChallengeRequest)(nil),                   // 35: tesseral.intermediate.v1.VerifyEmailChallengeRequest
	(*VerifyEmailChallengeResponse)(nil),                  // 36: tesseral.intermediate.v1.VerifyEmailChallengeResponse
	(*RegisterPasswordRequest)(nil),                       // 37: tesseral.intermediate.v1.RegisterPasswordRequest
	(*RegisterPasswordResponse)(nil),                      // 38: tesseral.intermediate.v1.RegisterPasswordResponse
	(*VerifyPasswordRequest)(nil),                         // 39: tesseral.intermediate.v1.VerifyPasswordRequest
	(*VerifyPasswordResponse)(nil),                        // 40: tesseral.intermediate.v1.VerifyPasswordResponse
	(*IssuePasswordResetCodeRequest)(nil),                 // 41: tesseral.intermediate.v1.IssuePasswordResetCodeRequest
	(*IssuePasswordResetCodeResponse)(nil),                // 42: tesseral.intermediate.v1.IssuePasswordResetCodeResponse
	(*VerifyPasswordResetCodeRequest)(nil),                // 43: tesseral.intermediate.v1.VerifyPasswordResetCodeRequest
	(*VerifyPasswordResetCodeResponse)(nil),               // 44: tesseral.intermediate.v1.VerifyPasswordResetCodeResponse
	(*GetSettingsRequest)(nil),                            // 45: tesseral.intermediate.v1.GetSettingsRequest
	(*GetSettingsResponse)(nil),                           // 46: tesseral.intermediate.v1.GetSettingsResponse
	(*RedeemUserImpersonationTokenRequest)(nil),           // 47: tesseral.intermediate.v1.RedeemUserImpersonationTokenRequest
	(*RedeemUserImpersonationTokenResponse)(nil),          // 48: tesseral.intermediate.v1.RedeemUserImpersonationTokenResponse
	(*GetAuthenticatorAppOptionsRequest)(nil),             // 49: tesseral.intermediate.v1.GetAuthenticatorAppOptionsRequest
	(*GetAuthenticatorAppOptionsResponse)(nil),            // 50: tesseral.intermediate.v1.GetAuthenticatorAppOptionsResponse
	(*RegisterAuthenticatorAppRequest)(nil),               // 51: tesseral.intermediate.v1.RegisterAuthenticatorAppRequest
	(*RegisterAuthenticatorAppResponse)(nil),              // 52: tesseral.intermediate.v1.RegisterAuthenticatorAppResponse
	(*VerifyAuthenticatorAppRequest)(nil),                 // 53: tesseral.intermediate.v1.VerifyAuthenticatorAppRequest
	(*VerifyAuthenticatorAppResponse)(nil),                // 54: tesseral.intermediate.v1.VerifyAuthenticatorAppResponse
	(*GetPasskeyOptionsRequest)(nil),                      // 55: tesseral.intermediate.v1.GetPasskeyOptionsRequest
	(*GetPasskeyOptionsResponse)(nil),                     // 56: tesseral.intermediate.v1.GetPasskeyOptionsResponse
	(*RegisterPasskeyRequest)(nil),                        // 57: tesseral.intermediate.v1.RegisterPasskeyRequest
	(*RegisterPasskeyResponse)(nil),                       // 58: tesseral.intermediate.v1.RegisterPasskeyResponse
	(*IssuePasskeyChallengeRequest)(nil),                  // 59: tesseral.intermediate.v1.IssuePasskeyChallengeRequest
	(*IssuePasskeyChallengeResponse)(nil),                 // 60: tesseral.intermediate.v1.IssuePasskeyChallengeResponse
	(*VerifyPasskeyRequest)(nil),                          // 61: tesseral.intermediate.v1.VerifyPasskeyRequest
	(*VerifyPasskeyResponse)(nil),                         // 62: tesseral.intermediate.v1.VerifyPasskeyResponse
	(*SetEmailAsPrimaryLoginFactorRequest)(nil),           // 63: tesseral.intermediate.v1.SetEmailAsPrimaryLoginFactorRequest
	(*SetEmailAsPrimaryLoginFactorResponse)(nil),          // 64: tesseral.intermediate.v1.SetEmailAsPrimaryLoginFactorResponse
	(*ExchangeSessionForIntermediateSessionRequest)(nil),  // 65: tesseral.intermediate.v1.ExchangeSessionForIntermediateSessionRequest
	(*ExchangeSessionForIntermediateSessionResponse)(nil), // 66: tesseral.intermediate.v1.ExchangeSessionForIntermediateSessionResponse
	(*timestamppb.Timestamp)(nil),                         // 67: google.protobuf.Timestamp
}
var file_tesseral_intermediate_v1_intermediate_proto_depIdxs = []int32{
	0,  // 0: tesseral.intermediate.v1.IntermediateSession.primary_auth_factor:type_name -> tesseral.intermediate.v1.PrimaryAuthFactor
	28, // 1: tesseral.intermediate.v1.CreateProjectResponse.project:type_name -> tesseral.intermediate.v1.Project
	1,  // 2: tesseral.intermediate.v1.WhoamiResponse.intermediate_session:type_name -> tesseral.intermediate.v1.IntermediateSession
	67, // 3: tesseral.intermediate.v1.Project.create_time:type_name -> google.protobuf.Timestamp
	67, // 4: tesseral.intermediate.v1.Project.update_time:type_name -> google.protobuf.Timestamp
	27, // 5: tesseral.intermediate.v1.ListOrganizationsResponse.organizations:type_name -> tesseral.intermediate.v1.Organization
	27, // 6: tesseral.intermediate.v1.ListSAMLOrganizationsResponse.organizations:type_name -> tesseral.intermediate.v1.Organization
	2,  // 7: tesseral.intermediate.v1.GetSettingsResponse.settings:type_name -> tesseral.intermediate.v1.Settings
	33, // 8: tesseral.intermediate.v1.IntermediateService.ListSAMLOrganizations:input_type -> tesseral.intermediate.v1.ListSAMLOrganizationsRequest
	45, // 9: tesseral.intermediate.v1.IntermediateService.GetSettings:input_type -> tesseral.intermediate.v1.GetSettingsRequest
	47, // 10: tesseral.intermediate.v1.IntermediateService.RedeemUserImpersonationToken:input_type -> tesseral.intermediate.v1.RedeemUserImpersonationTokenRequest
	7,  // 11: tesseral.intermediate.v1.IntermediateService.CreateIntermediateSession:input_type -> tesseral.intermediate.v1.CreateIntermediateSessionRequest
	9,  // 12: tesseral.intermediate.v1.IntermediateService.Whoami:input_type -> tesseral.intermediate.v1.WhoamiRequest
	11, // 13: tesseral.intermediate.v1.IntermediateService.CreateOrganization:input_type -> tesseral.intermediate.v1.CreateOrganizationRequest
	31, // 14: tesseral.intermediate.v1.IntermediateService.ListOrganizations:input_type -> tesseral.intermediate.v1.ListOrganizationsRequest
	13, // 15: tesseral.intermediate.v1.IntermediateService.SetOrganization:input_type -> tesseral.intermediate.v1.SetOrganizationRequest
	15, // 16: tesseral.intermediate.v1.IntermediateService.ExchangeIntermediateSessionForSession:input_type -> tesseral.intermediate.v1.ExchangeIntermediateSessionForSessionRequest
	17, // 17: tesseral.intermediate.v1.IntermediateService.ExchangeRelayedSessionTokenForSession:input_type -> tesseral.intermediate.v1.ExchangeRelayedSessionTokenForSessionRequest
	19, // 18: tesseral.intermediate.v1.IntermediateService.GetGoogleOAuthRedirectURL:input_type -> tesseral.intermediate.v1.GetGoogleOAuthRedirectURLRequest
	21, // 19: tesseral.intermediate.v1.IntermediateService.RedeemGoogleOAuthCode:input_type -> tesseral.intermediate.v1.RedeemGoogleOAuthCodeRequest
	23, // 20: tesseral.intermediate.v1.IntermediateService.GetMicrosoftOAuthRedirectURL:input_type -> tesseral.intermediate.v1.GetMicrosoftOAuthRedirectURLRequest
	25, // 21: tesseral.intermediate.v1.IntermediateService.RedeemMicrosoftOAuthCode:input_type -> tesseral.intermediate.v1.RedeemMicrosoftOAuthCodeRequest
	29, // 22: tesseral.intermediate.v1.IntermediateService.IssueEmailVerificationChallenge:input_type -> tesseral.intermediate.v1.IssueEmailVerificationChallengeRequest
	35, // 23: tesseral.intermediate.v1.IntermediateService.VerifyEmailChallenge:input_type -> tesseral.intermediate.v1.VerifyEmailChallengeRequest
	37, // 24: tesseral.intermediate.v1.IntermediateService.RegisterPassword:input_type -> tesseral.intermediate.v1.RegisterPasswordRequest
	39, // 25: tesseral.intermediate.v1.IntermediateService.VerifyPassword:input_type -> tesseral.intermediate.v1.VerifyPasswordRequest
	41, // 26: tesseral.intermediate.v1.IntermediateService.IssuePasswordResetCode:input_type -> tesseral.intermediate.v1.IssuePasswordResetCodeRequest
	43, // 27: tesseral.intermediate.v1.IntermediateService.VerifyPasswordResetCode:input_type -> tesseral.intermediate.v1.VerifyPasswordResetCodeRequest
	55, // 28: tesseral.intermediate.v1.IntermediateService.GetPasskeyOptions:input_type -> tesseral.intermediate.v1.GetPasskeyOptionsRequest
	57, // 29: tesseral.intermediate.v1.IntermediateService.RegisterPasskey:input_type -> tesseral.intermediate.v1.RegisterPasskeyRequest
	59, // 30: tesseral.intermediate.v1.IntermediateService.IssuePasskeyChallenge:input_type -> tesseral.intermediate.v1.IssuePasskeyChallengeRequest
	61, // 31: tesseral.intermediate.v1.IntermediateService.VerifyPasskey:input_type -> tesseral.intermediate.v1.VerifyPasskeyRequest
	49, // 32: tesseral.intermediate.v1.IntermediateService.GetAuthenticatorAppOptions:input_type -> tesseral.intermediate.v1.GetAuthenticatorAppOptionsRequest
	51, // 33: tesseral.intermediate.v1.IntermediateService.RegisterAuthenticatorApp:input_type -> tesseral.intermediate.v1.RegisterAuthenticatorAppRequest
	53, // 34: tesseral.intermediate.v1.IntermediateService.VerifyAuthenticatorApp:input_type -> tesseral.intermediate.v1.VerifyAuthenticatorAppRequest
	63, // 35: tesseral.intermediate.v1.IntermediateService.SetEmailAsPrimaryLoginFactor:input_type -> tesseral.intermediate.v1.SetEmailAsPrimaryLoginFactorRequest
	65, // 36: tesseral.intermediate.v1.IntermediateService.ExchangeSessionForIntermediateSession:input_type -> tesseral.intermediate.v1.ExchangeSessionForIntermediateSessionRequest
	3,  // 37: tesseral.intermediate.v1.IntermediateService.CreateProject:input_type -> tesseral.intermediate.v1.CreateProjectRequest
	5,  // 38: tesseral.intermediate.v1.IntermediateService.OnboardingCreateProjects:input_type -> tesseral.intermediate.v1.OnboardingCreateProjectsRequest
	34, // 39: tesseral.intermediate.v1.IntermediateService.ListSAMLOrganizations:output_type -> tesseral.intermediate.v1.ListSAMLOrganizationsResponse
	46, // 40: tesseral.intermediate.v1.IntermediateService.GetSettings:output_type -> tesseral.intermediate.v1.GetSettingsResponse
	48, // 41: tesseral.intermediate.v1.IntermediateService.RedeemUserImpersonationToken:output_type -> tesseral.intermediate.v1.RedeemUserImpersonationTokenResponse
	8,  // 42: tesseral.intermediate.v1.IntermediateService.CreateIntermediateSession:output_type -> tesseral.intermediate.v1.CreateIntermediateSessionResponse
	10, // 43: tesseral.intermediate.v1.IntermediateService.Whoami:output_type -> tesseral.intermediate.v1.WhoamiResponse
	12, // 44: tesseral.intermediate.v1.IntermediateService.CreateOrganization:output_type -> tesseral.intermediate.v1.CreateOrganizationResponse
	32, // 45: tesseral.intermediate.v1.IntermediateService.ListOrganizations:output_type -> tesseral.intermediate.v1.ListOrganizationsResponse
	14, // 46: tesseral.intermediate.v1.IntermediateService.SetOrganization:output_type -> tesseral.intermediate.v1.SetOrganizationResponse
	16, // 47: tesseral.intermediate.v1.IntermediateService.ExchangeIntermediateSessionForSession:output_type -> tesseral.intermediate.v1.ExchangeIntermediateSessionForSessionResponse
	18, // 48: tesseral.intermediate.v1.IntermediateService.ExchangeRelayedSessionTokenForSession:output_type -> tesseral.intermediate.v1.ExchangeRelayedSessionTokenForSessionResponse
	20, // 49: tesseral.intermediate.v1.IntermediateService.GetGoogleOAuthRedirectURL:output_type -> tesseral.intermediate.v1.GetGoogleOAuthRedirectURLResponse
	22, // 50: tesseral.intermediate.v1.IntermediateService.RedeemGoogleOAuthCode:output_type -> tesseral.intermediate.v1.RedeemGoogleOAuthCodeResponse
	24, // 51: tesseral.intermediate.v1.IntermediateService.GetMicrosoftOAuthRedirectURL:output_type -> tesseral.intermediate.v1.GetMicrosoftOAuthRedirectURLResponse
	26, // 52: tesseral.intermediate.v1.IntermediateService.RedeemMicrosoftOAuthCode:output_type -> tesseral.intermediate.v1.RedeemMicrosoftOAuthCodeResponse
	30, // 53: tesseral.intermediate.v1.IntermediateService.IssueEmailVerificationChallenge:output_type -> tesseral.intermediate.v1.IssueEmailVerificationChallengeResponse
	36, // 54: tesseral.intermediate.v1.IntermediateService.VerifyEmailChallenge:output_type -> tesseral.intermediate.v1.VerifyEmailChallengeResponse
	38, // 55: tesseral.intermediate.v1.IntermediateService.RegisterPassword:output_type -> tesseral.intermediate.v1.RegisterPasswordResponse
	40, // 56: tesseral.intermediate.v1.IntermediateService.VerifyPassword:output_type -> tesseral.intermediate.v1.VerifyPasswordResponse
	42, // 57: tesseral.intermediate.v1.IntermediateService.IssuePasswordResetCode:output_type -> tesseral.intermediate.v1.IssuePasswordResetCodeResponse
	44, // 58: tesseral.intermediate.v1.IntermediateService.VerifyPasswordResetCode:output_type -> tesseral.intermediate.v1.VerifyPasswordResetCodeResponse
	56, // 59: tesseral.intermediate.v1.IntermediateService.GetPasskeyOptions:output_type -> tesseral.intermediate.v1.GetPasskeyOptionsResponse
	58, // 60: tesseral.intermediate.v1.IntermediateService.RegisterPasskey:output_type -> tesseral.intermediate.v1.RegisterPasskeyResponse
	60, // 61: tesseral.intermediate.v1.IntermediateService.IssuePasskeyChallenge:output_type -> tesseral.intermediate.v1.IssuePasskeyChallengeResponse
	62, // 62: tesseral.intermediate.v1.IntermediateService.VerifyPasskey:output_type -> tesseral.intermediate.v1.VerifyPasskeyResponse
	50, // 63: tesseral.intermediate.v1.IntermediateService.GetAuthenticatorAppOptions:output_type -> tesseral.intermediate.v1.GetAuthenticatorAppOptionsResponse
	52, // 64: tesseral.intermediate.v1.IntermediateService.RegisterAuthenticatorApp:output_type -> tesseral.intermediate.v1.RegisterAuthenticatorAppResponse
	54, // 65: tesseral.intermediate.v1.IntermediateService.VerifyAuthenticatorApp:output_type -> tesseral.intermediate.v1.VerifyAuthenticatorAppResponse
	64, // 66: tesseral.intermediate.v1.IntermediateService.SetEmailAsPrimaryLoginFactor:output_type -> tesseral.intermediate.v1.SetEmailAsPrimaryLoginFactorResponse
	66, // 67: tesseral.intermediate.v1.IntermediateService.ExchangeSessionForIntermediateSession:output_type -> tesseral.intermediate.v1.ExchangeSessionForIntermediateSessionResponse
	4,  // 68: tesseral.intermediate.v1.IntermediateService.CreateProject:output_type -> tesseral.intermediate.v1.CreateProjectResponse
	6,  // 69: tesseral.intermediate.v1.IntermediateService.OnboardingCreateProjects:output_type -> tesseral.intermediate.v1.OnboardingCreateProjectsResponse
	39, // [39:70] is the sub-list for method output_type
	8,  // [8:39] is the sub-list for method input_type
	8,  // [8:8] is the sub-list for extension type_name
	8,  // [8:8] is the sub-list for extension extendee
	0,  // [0:8] is the sub-list for field type_name
}

func init() { file_tesseral_intermediate_v1_intermediate_proto_init() }
func file_tesseral_intermediate_v1_intermediate_proto_init() {
	if File_tesseral_intermediate_v1_intermediate_proto != nil {
		return
	}
	file_tesseral_intermediate_v1_intermediate_proto_msgTypes[1].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_tesseral_intermediate_v1_intermediate_proto_rawDesc), len(file_tesseral_intermediate_v1_intermediate_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   66,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_tesseral_intermediate_v1_intermediate_proto_goTypes,
		DependencyIndexes: file_tesseral_intermediate_v1_intermediate_proto_depIdxs,
		EnumInfos:         file_tesseral_intermediate_v1_intermediate_proto_enumTypes,
		MessageInfos:      file_tesseral_intermediate_v1_intermediate_proto_msgTypes,
	}.Build()
	File_tesseral_intermediate_v1_intermediate_proto = out.File
	file_tesseral_intermediate_v1_intermediate_proto_goTypes = nil
	file_tesseral_intermediate_v1_intermediate_proto_depIdxs = nil
}
