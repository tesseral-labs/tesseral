syntax = "proto3";

package openauth.intermediate.v1;

import "google/api/annotations.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/field_mask.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/struct.proto";

service IntermediateService {
  rpc ListSAMLOrganizations(ListSAMLOrganizationsRequest) returns (ListSAMLOrganizationsResponse) {
    option (google.api.http) = {
      post: "/intermediate/v1/saml-organizations",
      body: "*"
    };
  }

  rpc GetSettings(GetSettingsRequest) returns (GetSettingsResponse);

  rpc RedeemUserImpersonationToken(RedeemUserImpersonationTokenRequest) returns (RedeemUserImpersonationTokenResponse) {
    option (google.api.http) = {
      post: "/intermediate/v1/redeem-user-impersonation-token",
      body: "*"
    };
  }

  rpc CreateIntermediateSession(CreateIntermediateSessionRequest) returns (CreateIntermediateSessionResponse) {
    option (google.api.http) = {
      post: "/intermediate/v1/intermediate-session",
      body: "*"
    };
  }

  rpc Whoami(WhoamiRequest) returns (WhoamiResponse) {
    option (google.api.http) = {
      get: "/intermediate/v1/whoami"
    };
  }

  rpc CreateOrganization(CreateOrganizationRequest) returns (CreateOrganizationResponse) {
    option (google.api.http) = {
      post: "/intermediate/v1/organizations",
      body: "*"
    };
  }

  rpc ListOrganizations(ListOrganizationsRequest) returns (ListOrganizationsResponse) {
    option (google.api.http) = {
      get: "/intermediate/v1/organizations"
    };
  }

  rpc SetOrganization(SetOrganizationRequest) returns (SetOrganizationResponse) {
    option (google.api.http) = {
      post: "/intermediate/v1/set-organization",
    };
  }

  rpc ExchangeIntermediateSessionForSession(ExchangeIntermediateSessionForSessionRequest) returns (ExchangeIntermediateSessionForSessionResponse) {
    option (google.api.http) = {
      post: "/intermediate/v1/exchange-intermediate-session-for-session",
      body: "*"
    };
  }

  rpc GetGoogleOAuthRedirectURL(GetGoogleOAuthRedirectURLRequest) returns (GetGoogleOAuthRedirectURLResponse) {
    option (google.api.http) = {
      post: "/intermediate/v1/google-oauth-redirect-url",
      body: "*"
    };
  }

  rpc RedeemGoogleOAuthCode(RedeemGoogleOAuthCodeRequest) returns (RedeemGoogleOAuthCodeResponse) {
    option (google.api.http) = {
      post: "/intermediate/v1/redeem-google-oauth-code",
      body: "*"
    };
  }

  rpc GetMicrosoftOAuthRedirectURL(GetMicrosoftOAuthRedirectURLRequest) returns (GetMicrosoftOAuthRedirectURLResponse) {
    option (google.api.http) = {
      post: "/intermediate/v1/microsoft-oauth-redirect-url",
      body: "*"
    };
  }

  rpc RedeemMicrosoftOAuthCode(RedeemMicrosoftOAuthCodeRequest) returns (RedeemMicrosoftOAuthCodeResponse) {
    option (google.api.http) = {
      post: "/intermediate/v1/redeem-microsoft-oauth-code",
      body: "*"
    };
  }

  rpc IssueEmailVerificationChallenge(IssueEmailVerificationChallengeRequest) returns (IssueEmailVerificationChallengeResponse) {
    option (google.api.http) = {
      post: "/intermediate/v1/issue-email-verification-challenge",
      body: "*"
    };
  }

  rpc VerifyEmailChallenge(VerifyEmailChallengeRequest) returns (VerifyEmailChallengeResponse) {
    option (google.api.http) = {
      post: "/intermediate/v1/verify-email-challenge",
      body: "*"
    };
  }

  rpc RegisterPassword(RegisterPasswordRequest) returns (RegisterPasswordResponse) {
    option (google.api.http) = {
      post: "/intermediate/v1/register-password",
      body: "*"
    };
  }

  rpc VerifyPassword(VerifyPasswordRequest) returns (VerifyPasswordResponse) {
    option (google.api.http) = {
      post: "/intermediate/v1/verify-password",
      body: "*"
    };
  }
}

message IntermediateSession {
  string id = 1;
  string project_id = 2;
  string email = 3;
  bool email_verified = 4;
  string google_user_id = 5;
  string google_hosted_domain = 6;
  string microsoft_user_id = 7;
  string microsoft_tenant_id = 8;
  string organization_id = 9;
  bool password_verified = 10;
  bool new_user_password_registered = 11;
  bool email_verification_challenge_registered = 12;
}

message Settings {
  string id = 1;
  string project_id = 2;
  google.protobuf.Timestamp create_time = 3;
  google.protobuf.Timestamp update_time = 4;
  string logo_url = 5;
  string favicon_url = 6;
  string primary_color = 7;
  bool detect_dark_mode_enabled = 8;
  string dark_mode_logo_url = 9;
  string dark_mode_primary_color = 10;
  bool log_in_with_google_enabled = 11;
  bool log_in_with_microsoft_enabled = 12;
  bool log_in_with_password_enabled = 13;
}

message CreateIntermediateSessionRequest {
}

message CreateIntermediateSessionResponse {
  string intermediate_session_secret_token = 1;
}

message WhoamiRequest {
}

message WhoamiResponse {
  IntermediateSession intermediate_session = 1;
}

message CreateOrganizationRequest {
  string display_name = 1;
}

message CreateOrganizationResponse {
}

message SetOrganizationRequest {
  string organization_id = 1;
}

message SetOrganizationResponse {
}

message ExchangeIntermediateSessionForSessionRequest {
  string organization_id = 1;
}

message ExchangeIntermediateSessionForSessionResponse {
  string refresh_token = 1;
  string access_token = 2;
}

message GetGoogleOAuthRedirectURLRequest {
  string redirect_url = 1;
}

message GetGoogleOAuthRedirectURLResponse {
  string url = 1;
}

message RedeemGoogleOAuthCodeRequest {
  string code = 1;
  string state = 2;
  string redirect_url = 3;
}

message RedeemGoogleOAuthCodeResponse {
}

message GetMicrosoftOAuthRedirectURLRequest {
  string redirect_url = 1;
}

message GetMicrosoftOAuthRedirectURLResponse {
  string url = 1;
}

message RedeemMicrosoftOAuthCodeRequest {
  string code = 1;
  string state = 2;
  string redirect_url = 3;
}

message RedeemMicrosoftOAuthCodeResponse {
}

message Organization {
  string id = 1;
  string project_id = 2;
  string display_name = 3;
  bool log_in_with_google_enabled = 4;
  bool log_in_with_microsoft_enabled = 5;
  bool log_in_with_password_enabled = 6;
  string primary_saml_connection_id = 7;
  bool user_exists = 8;
}

message IssueEmailVerificationChallengeRequest {
  string email = 1;
}

message IssueEmailVerificationChallengeResponse {}

message ListOrganizationsRequest {
}

message ListOrganizationsResponse {
  repeated Organization organizations = 1;
}

message ListSAMLOrganizationsRequest {
  string email = 1;
}

message ListSAMLOrganizationsResponse {
  repeated Organization organizations = 1;
}

message VerifyEmailChallengeRequest {
  string code = 2;
}

message VerifyEmailChallengeResponse {}

message RegisterPasswordRequest {
  string password = 1;
}

message RegisterPasswordResponse {
}

message VerifyPasswordRequest {
  string organization_id = 1;
  string password = 2;
}

message VerifyPasswordResponse {
}

message GetSettingsRequest {
}

message GetSettingsResponse {
  Settings settings = 1;
}

message RedeemUserImpersonationTokenRequest {
  string secret_user_impersonation_token = 1;
}

message RedeemUserImpersonationTokenResponse {
  string refresh_token = 1;
  string access_token = 2;
}
