syntax = "proto3";

package openauth.intermediate.v1;

import "google/api/annotations.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/field_mask.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/struct.proto";

service IntermediateService {
  rpc Whoami(WhoamiRequest) returns (WhoamiResponse) {
    option (google.api.http) = {
      get: "/intermediate/v1/whoami"
    };
  }

  rpc ExchangeIntermediateSessionForSession(ExchangeIntermediateSessionForSessionRequest) returns (ExchangeIntermediateSessionForSessionResponse) {
    option (google.api.http) = {
      post: "/intermediate/v1/exchange-intermediate-session-for-session",
      body: "*"
    };
  }

  rpc ExchangeIntermediateSessionForNewOrganizationSession(ExchangeIntermediateSessionForNewOrganizationSessionRequest) returns (ExchangeIntermediateSessionForNewOrganizationSessionResponse) {
    option (google.api.http) = {
      post: "/intermediate/v1/exchange-intermediate-session-for-new-organization-session",
      body: "*"
    };
  }

  rpc GetGoogleOAuthRedirectURL(GetGoogleOAuthRedirectURLRequest) returns (GetGoogleOAuthRedirectURLResponse) {
    option (google.api.http) = {
      post: "/intermediate/v1/google-oauth-redirect-url",
      body: "*"
    };
  }

  rpc RedeemGoogleOAuthCode(RedeemGoogleOAuthCodeRequest) returns (RedeemGoogleOAuthCodeResponse) {
    option (google.api.http) = {
      post: "/intermediate/v1/redeem-google-oauth-code",
      body: "*"
    };
  }

  rpc GetMicrosoftOAuthRedirectURL(GetMicrosoftOAuthRedirectURLRequest) returns (GetMicrosoftOAuthRedirectURLResponse) {
    option (google.api.http) = {
      post: "/intermediate/v1/microsoft-oauth-redirect-url",
      body: "*"
    };
  }

  rpc RedeemMicrosoftOAuthCode(RedeemMicrosoftOAuthCodeRequest) returns (RedeemMicrosoftOAuthCodeResponse) {
    option (google.api.http) = {
      post: "/intermediate/v1/redeem-microsoft-oauth-code",
      body: "*"
    };
  }

  // Issues a new email verification challenge.
  rpc IssueEmailVerificationChallenge(IssueEmailVerificationChallengeRequest) returns (IssueEmailVerificationChallengeResponse) {
    option (google.api.http) = {
      post: "/intermediate/v1/issue-email-verification-challenge",
      body: "*"
    };
  }

  // Gets a list of organizations.
  rpc ListOrganizations(ListOrganizationsRequest) returns (ListOrganizationsResponse) {
    option (google.api.http) = {
      get: "/intermediate/v1/organizations"
    };
  }

  // Creates a new intermediate session or session and cookies the requester.
  rpc SignInWithEmail(SignInWithEmailRequest) returns (SignInWithEmailResponse) {
    option (google.api.http) = {
      post: "/intermediate/v1/email-signin",
      body: "*"
    };
  }

  // Submits a challenge for verification of email address.
  rpc VerifyEmailChallenge(VerifyEmailChallengeRequest) returns (VerifyEmailChallengeResponse) {
    option (google.api.http) = {
      post: "/intermediate/v1/verify-email-challenge",
      body: "*"
    };
  }
}

message IntermediateSession {
  string id = 1;
  string project_id = 2;
  string email = 3;
  string google_user_id = 4;
  string google_hosted_domain = 5;
  string microsoft_tenant_id = 6;
  string microsoft_user_id = 7;
  // TODO more things here
}

message WhoamiRequest {
}

message WhoamiResponse {
  // The email associated with the intermediate session.
  string email = 1;
  // The Google User ID associated with the intermediate session.
  string google_user_id = 2;
  // A boolean representing whether the user has verified their email address.
  bool is_email_verified = 3;
  // The Microsoft User ID associated with the intermediate session.
  string microsoft_user_id = 4;
  // The organization ID associated with the intermediate session.
  string organization_id = 5;
}

message ExchangeIntermediateSessionForSessionRequest {
  // The organization ID for the full session.
  string organization_id = 1;
}

message ExchangeIntermediateSessionForSessionResponse {
  // The session access token.
  string access_token = 1;
  // The refresh token for the new session.
  string refresh_token = 2;
}

message ExchangeIntermediateSessionForNewOrganizationSessionRequest {
  // The display name of the organization to create.
  string display_name = 1;
}

message ExchangeIntermediateSessionForNewOrganizationSessionResponse {
  // The session access token.
  string access_token = 1;
  // The refresh token for the new session.
  string refresh_token = 2;
}

message GetGoogleOAuthRedirectURLRequest {
  string redirect_url = 1;
}

message GetGoogleOAuthRedirectURLResponse {
  string url = 1;
  string intermediate_session_token = 2;
}

message RedeemGoogleOAuthCodeRequest {
  string code = 1;
  string state = 2;
  string redirect_url = 3;
}

message RedeemGoogleOAuthCodeResponse {
}

message GetMicrosoftOAuthRedirectURLRequest {
  string redirect_url = 1;
}

message GetMicrosoftOAuthRedirectURLResponse {
  string url = 1;
  string intermediate_session_token = 2;
}

message RedeemMicrosoftOAuthCodeRequest {
  string code = 1;
  string state = 2;
  string redirect_url = 3;
}

message RedeemMicrosoftOAuthCodeResponse {
}


message IntermediateSessionClaims {
  // The project ID the intermediate session is scoped to.
  string project_id = 1;
  // The email associated with the intermediate session.
  string email = 2;
  // The time the intermediate session expires.
  int64 expires_at = 3;
  // The time the intermediate session was issued.
  int64 issued_at = 4;
  // The subject of the intermediate session.
  string subject = 5;
}

message Organization {
  string id = 1;
  string project_id = 2;
  string display_name = 3;
  bool log_in_with_google_enabled = 4;
  bool log_in_with_microsoft_enabled = 5;
  bool log_in_with_password_enabled = 6;
}

message IssueEmailVerificationChallengeRequest {
}

message IssueEmailVerificationChallengeResponse {
  // The ID of the email verification challenge.
  string email_verification_challenge_id = 1;
}

message ListOrganizationsRequest {
  string page_token = 1;
}

message ListOrganizationsResponse {
  repeated Organization organizations = 1;
  string next_page_token = 2;
}

message SignInWithEmailRequest {
  // The email address to sign in with.
  string email = 1;
}

message SignInWithEmailResponse {
  // The access token for the new intermediate session.
  string intermediate_session_token = 1;
  // The ID of the email verification challenge, if required.
  string challenge_id = 2;
}

message Project {
  // Unique identifier for this project.
  string id = 1;
  // The organization this project belongs to.
  string organization_id = 2;
  // Top-level setting for whether login with password is enabled (inherited by organizations by default).
  bool log_in_with_password_enabled = 3;
  // Top-level setting for whether login with Google is enabled (inherited by organizations by default).
  bool log_in_with_google_enabled = 4;
  // Top-level setting for whether login with Microsoft is enabled (inherited by organizations by default).
  bool log_in_with_microsoft_enabled = 5;
  // The oAuth Client ID to be used for Google Auth.
  string google_oauth_client_id = 6;
  // The oAuth Client secret to be used for Google Auth.
  string google_oauth_client_secret = 7;
  // The oAuth Client ID to be used for Microsoft Auth.
  string microsoft_oauth_client_id = 8;
  // The oAuth Client secret to be used for Microsoft Auth.
  string microsoft_oauth_client_secret = 9;
}

message SessionSigningKey {
  string id = 1;
  string project_id = 2;
  google.protobuf.Struct public_key_jwk = 3;
}

message User {
  // Unique identifier for this user.
  string id = 1;
  // The organization this user belongs to.
  string organization_id = 2;
  // The user's email (pending verification).
  string unverified_email = 3;
  // The user's email (after verification).
  string verified_email = 4;
  // The hash of the user's password.
  string password_bcrypt = 5;
  // The user's Google User ID.
  string google_user_id = 6;
  // The user's Microsoft User ID.
  string microsoft_user_id = 7;
}

message Session {
  string id = 1;
  string user_id = 2;
  google.protobuf.Timestamp create_time = 3;
  google.protobuf.Timestamp expire_time = 4;
  bool revoked = 5;

  // TODO(ucarion): add session metadata like auth factors, etc here
}

message VerifyEmailChallengeRequest {
  // The challenge to verify.
  string code = 1;
  // The ID of the email verification challenge.
  string email_verification_challenge_id = 2;
}

message VerifyEmailChallengeResponse {}
