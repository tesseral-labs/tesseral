// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: intermediate/v1/intermediate.proto

package intermediatev1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/openauth-dev/openauth/internal/gen/intermediate/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// IntermediateServiceName is the fully-qualified name of the IntermediateService service.
	IntermediateServiceName = "intermediate.v1.IntermediateService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// IntermediateServiceSignInWithEmailProcedure is the fully-qualified name of the
	// IntermediateService's SignInWithEmail RPC.
	IntermediateServiceSignInWithEmailProcedure = "/intermediate.v1.IntermediateService/SignInWithEmail"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	intermediateServiceServiceDescriptor               = v1.File_intermediate_v1_intermediate_proto.Services().ByName("IntermediateService")
	intermediateServiceSignInWithEmailMethodDescriptor = intermediateServiceServiceDescriptor.Methods().ByName("SignInWithEmail")
)

// IntermediateServiceClient is a client for the intermediate.v1.IntermediateService service.
type IntermediateServiceClient interface {
	// Creates a new intermediate session or session and cookies the requester.
	SignInWithEmail(context.Context, *connect.Request[v1.SignInWithEmailRequest]) (*connect.Response[v1.SignInWithEmailResponse], error)
}

// NewIntermediateServiceClient constructs a client for the intermediate.v1.IntermediateService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewIntermediateServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) IntermediateServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &intermediateServiceClient{
		signInWithEmail: connect.NewClient[v1.SignInWithEmailRequest, v1.SignInWithEmailResponse](
			httpClient,
			baseURL+IntermediateServiceSignInWithEmailProcedure,
			connect.WithSchema(intermediateServiceSignInWithEmailMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// intermediateServiceClient implements IntermediateServiceClient.
type intermediateServiceClient struct {
	signInWithEmail *connect.Client[v1.SignInWithEmailRequest, v1.SignInWithEmailResponse]
}

// SignInWithEmail calls intermediate.v1.IntermediateService.SignInWithEmail.
func (c *intermediateServiceClient) SignInWithEmail(ctx context.Context, req *connect.Request[v1.SignInWithEmailRequest]) (*connect.Response[v1.SignInWithEmailResponse], error) {
	return c.signInWithEmail.CallUnary(ctx, req)
}

// IntermediateServiceHandler is an implementation of the intermediate.v1.IntermediateService
// service.
type IntermediateServiceHandler interface {
	// Creates a new intermediate session or session and cookies the requester.
	SignInWithEmail(context.Context, *connect.Request[v1.SignInWithEmailRequest]) (*connect.Response[v1.SignInWithEmailResponse], error)
}

// NewIntermediateServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewIntermediateServiceHandler(svc IntermediateServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	intermediateServiceSignInWithEmailHandler := connect.NewUnaryHandler(
		IntermediateServiceSignInWithEmailProcedure,
		svc.SignInWithEmail,
		connect.WithSchema(intermediateServiceSignInWithEmailMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/intermediate.v1.IntermediateService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case IntermediateServiceSignInWithEmailProcedure:
			intermediateServiceSignInWithEmailHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedIntermediateServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedIntermediateServiceHandler struct{}

func (UnimplementedIntermediateServiceHandler) SignInWithEmail(context.Context, *connect.Request[v1.SignInWithEmailRequest]) (*connect.Response[v1.SignInWithEmailResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("intermediate.v1.IntermediateService.SignInWithEmail is not implemented"))
}
