// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: backend/v1/backend.proto

package backendv1

import (
	context "context"
	v1 "github.com/openauth-dev/openauth/internal/gen/openauth/v1"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	BackendService_CreateOrganization_FullMethodName   = "/backend.v1.BackendService/CreateOrganization"
	BackendService_GetOrganization_FullMethodName      = "/backend.v1.BackendService/GetOrganization"
	BackendService_ListOrganizations_FullMethodName    = "/backend.v1.BackendService/ListOrganizations"
	BackendService_UpdateOrganization_FullMethodName   = "/backend.v1.BackendService/UpdateOrganization"
	BackendService_CreateProject_FullMethodName        = "/backend.v1.BackendService/CreateProject"
	BackendService_GetProject_FullMethodName           = "/backend.v1.BackendService/GetProject"
	BackendService_ListProjects_FullMethodName         = "/backend.v1.BackendService/ListProjects"
	BackendService_UpdateProject_FullMethodName        = "/backend.v1.BackendService/UpdateProject"
	BackendService_CreateUser_FullMethodName           = "/backend.v1.BackendService/CreateUser"
	BackendService_CreateGoogleUser_FullMethodName     = "/backend.v1.BackendService/CreateGoogleUser"
	BackendService_CreateMicrosoftUser_FullMethodName  = "/backend.v1.BackendService/CreateMicrosoftUser"
	BackendService_CreateUnverifiedUser_FullMethodName = "/backend.v1.BackendService/CreateUnverifiedUser"
	BackendService_GetUser_FullMethodName              = "/backend.v1.BackendService/GetUser"
	BackendService_ListUsers_FullMethodName            = "/backend.v1.BackendService/ListUsers"
	BackendService_UpdateUser_FullMethodName           = "/backend.v1.BackendService/UpdateUser"
	BackendService_UpdateUserPassword_FullMethodName   = "/backend.v1.BackendService/UpdateUserPassword"
)

// BackendServiceClient is the client API for BackendService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BackendServiceClient interface {
	// Creates an organization.
	CreateOrganization(ctx context.Context, in *v1.Organization, opts ...grpc.CallOption) (*v1.Organization, error)
	// Gets an organization.
	GetOrganization(ctx context.Context, in *v1.ResourceIdRequest, opts ...grpc.CallOption) (*v1.Organization, error)
	// Gets a list of organizations.
	ListOrganizations(ctx context.Context, in *v1.ListOrganizationsRequest, opts ...grpc.CallOption) (*v1.ListOrganizationsResponse, error)
	// Updates an organization.
	UpdateOrganization(ctx context.Context, in *v1.Organization, opts ...grpc.CallOption) (*v1.Organization, error)
	// Creates a project.
	CreateProject(ctx context.Context, in *v1.CreateProjectRequest, opts ...grpc.CallOption) (*v1.Project, error)
	// Gets a project.
	GetProject(ctx context.Context, in *v1.ResourceIdRequest, opts ...grpc.CallOption) (*v1.Project, error)
	// Gets a list of projects.
	ListProjects(ctx context.Context, in *ListProjectsRequest, opts ...grpc.CallOption) (*ListProjectsResponse, error)
	// Updates a project.
	UpdateProject(ctx context.Context, in *v1.Project, opts ...grpc.CallOption) (*v1.Project, error)
	// Creates a user.
	CreateUser(ctx context.Context, in *v1.User, opts ...grpc.CallOption) (*v1.User, error)
	// Creates a Google user.
	CreateGoogleUser(ctx context.Context, in *v1.CreateGoogleUserRequest, opts ...grpc.CallOption) (*v1.User, error)
	// Creates a Microsoft user.
	CreateMicrosoftUser(ctx context.Context, in *v1.CreateMicrosoftUserRequest, opts ...grpc.CallOption) (*v1.User, error)
	// Creates an unverified user.
	CreateUnverifiedUser(ctx context.Context, in *v1.CreateUnverifiedUserRequest, opts ...grpc.CallOption) (*v1.User, error)
	// Gets a user.
	GetUser(ctx context.Context, in *v1.ResourceIdRequest, opts ...grpc.CallOption) (*v1.User, error)
	// Gets a list of users.
	ListUsers(ctx context.Context, in *ListUsersRequest, opts ...grpc.CallOption) (*ListUsersResponse, error)
	// Updates a user.
	UpdateUser(ctx context.Context, in *v1.User, opts ...grpc.CallOption) (*v1.User, error)
	// Updates a user's password.
	UpdateUserPassword(ctx context.Context, in *UpdateUserPasswordRequest, opts ...grpc.CallOption) (*v1.User, error)
}

type backendServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBackendServiceClient(cc grpc.ClientConnInterface) BackendServiceClient {
	return &backendServiceClient{cc}
}

func (c *backendServiceClient) CreateOrganization(ctx context.Context, in *v1.Organization, opts ...grpc.CallOption) (*v1.Organization, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v1.Organization)
	err := c.cc.Invoke(ctx, BackendService_CreateOrganization_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backendServiceClient) GetOrganization(ctx context.Context, in *v1.ResourceIdRequest, opts ...grpc.CallOption) (*v1.Organization, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v1.Organization)
	err := c.cc.Invoke(ctx, BackendService_GetOrganization_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backendServiceClient) ListOrganizations(ctx context.Context, in *v1.ListOrganizationsRequest, opts ...grpc.CallOption) (*v1.ListOrganizationsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v1.ListOrganizationsResponse)
	err := c.cc.Invoke(ctx, BackendService_ListOrganizations_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backendServiceClient) UpdateOrganization(ctx context.Context, in *v1.Organization, opts ...grpc.CallOption) (*v1.Organization, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v1.Organization)
	err := c.cc.Invoke(ctx, BackendService_UpdateOrganization_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backendServiceClient) CreateProject(ctx context.Context, in *v1.CreateProjectRequest, opts ...grpc.CallOption) (*v1.Project, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v1.Project)
	err := c.cc.Invoke(ctx, BackendService_CreateProject_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backendServiceClient) GetProject(ctx context.Context, in *v1.ResourceIdRequest, opts ...grpc.CallOption) (*v1.Project, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v1.Project)
	err := c.cc.Invoke(ctx, BackendService_GetProject_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backendServiceClient) ListProjects(ctx context.Context, in *ListProjectsRequest, opts ...grpc.CallOption) (*ListProjectsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListProjectsResponse)
	err := c.cc.Invoke(ctx, BackendService_ListProjects_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backendServiceClient) UpdateProject(ctx context.Context, in *v1.Project, opts ...grpc.CallOption) (*v1.Project, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v1.Project)
	err := c.cc.Invoke(ctx, BackendService_UpdateProject_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backendServiceClient) CreateUser(ctx context.Context, in *v1.User, opts ...grpc.CallOption) (*v1.User, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v1.User)
	err := c.cc.Invoke(ctx, BackendService_CreateUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backendServiceClient) CreateGoogleUser(ctx context.Context, in *v1.CreateGoogleUserRequest, opts ...grpc.CallOption) (*v1.User, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v1.User)
	err := c.cc.Invoke(ctx, BackendService_CreateGoogleUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backendServiceClient) CreateMicrosoftUser(ctx context.Context, in *v1.CreateMicrosoftUserRequest, opts ...grpc.CallOption) (*v1.User, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v1.User)
	err := c.cc.Invoke(ctx, BackendService_CreateMicrosoftUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backendServiceClient) CreateUnverifiedUser(ctx context.Context, in *v1.CreateUnverifiedUserRequest, opts ...grpc.CallOption) (*v1.User, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v1.User)
	err := c.cc.Invoke(ctx, BackendService_CreateUnverifiedUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backendServiceClient) GetUser(ctx context.Context, in *v1.ResourceIdRequest, opts ...grpc.CallOption) (*v1.User, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v1.User)
	err := c.cc.Invoke(ctx, BackendService_GetUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backendServiceClient) ListUsers(ctx context.Context, in *ListUsersRequest, opts ...grpc.CallOption) (*ListUsersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListUsersResponse)
	err := c.cc.Invoke(ctx, BackendService_ListUsers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backendServiceClient) UpdateUser(ctx context.Context, in *v1.User, opts ...grpc.CallOption) (*v1.User, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v1.User)
	err := c.cc.Invoke(ctx, BackendService_UpdateUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backendServiceClient) UpdateUserPassword(ctx context.Context, in *UpdateUserPasswordRequest, opts ...grpc.CallOption) (*v1.User, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v1.User)
	err := c.cc.Invoke(ctx, BackendService_UpdateUserPassword_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BackendServiceServer is the server API for BackendService service.
// All implementations must embed UnimplementedBackendServiceServer
// for forward compatibility.
type BackendServiceServer interface {
	// Creates an organization.
	CreateOrganization(context.Context, *v1.Organization) (*v1.Organization, error)
	// Gets an organization.
	GetOrganization(context.Context, *v1.ResourceIdRequest) (*v1.Organization, error)
	// Gets a list of organizations.
	ListOrganizations(context.Context, *v1.ListOrganizationsRequest) (*v1.ListOrganizationsResponse, error)
	// Updates an organization.
	UpdateOrganization(context.Context, *v1.Organization) (*v1.Organization, error)
	// Creates a project.
	CreateProject(context.Context, *v1.CreateProjectRequest) (*v1.Project, error)
	// Gets a project.
	GetProject(context.Context, *v1.ResourceIdRequest) (*v1.Project, error)
	// Gets a list of projects.
	ListProjects(context.Context, *ListProjectsRequest) (*ListProjectsResponse, error)
	// Updates a project.
	UpdateProject(context.Context, *v1.Project) (*v1.Project, error)
	// Creates a user.
	CreateUser(context.Context, *v1.User) (*v1.User, error)
	// Creates a Google user.
	CreateGoogleUser(context.Context, *v1.CreateGoogleUserRequest) (*v1.User, error)
	// Creates a Microsoft user.
	CreateMicrosoftUser(context.Context, *v1.CreateMicrosoftUserRequest) (*v1.User, error)
	// Creates an unverified user.
	CreateUnverifiedUser(context.Context, *v1.CreateUnverifiedUserRequest) (*v1.User, error)
	// Gets a user.
	GetUser(context.Context, *v1.ResourceIdRequest) (*v1.User, error)
	// Gets a list of users.
	ListUsers(context.Context, *ListUsersRequest) (*ListUsersResponse, error)
	// Updates a user.
	UpdateUser(context.Context, *v1.User) (*v1.User, error)
	// Updates a user's password.
	UpdateUserPassword(context.Context, *UpdateUserPasswordRequest) (*v1.User, error)
	mustEmbedUnimplementedBackendServiceServer()
}

// UnimplementedBackendServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedBackendServiceServer struct{}

func (UnimplementedBackendServiceServer) CreateOrganization(context.Context, *v1.Organization) (*v1.Organization, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrganization not implemented")
}
func (UnimplementedBackendServiceServer) GetOrganization(context.Context, *v1.ResourceIdRequest) (*v1.Organization, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrganization not implemented")
}
func (UnimplementedBackendServiceServer) ListOrganizations(context.Context, *v1.ListOrganizationsRequest) (*v1.ListOrganizationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOrganizations not implemented")
}
func (UnimplementedBackendServiceServer) UpdateOrganization(context.Context, *v1.Organization) (*v1.Organization, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOrganization not implemented")
}
func (UnimplementedBackendServiceServer) CreateProject(context.Context, *v1.CreateProjectRequest) (*v1.Project, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateProject not implemented")
}
func (UnimplementedBackendServiceServer) GetProject(context.Context, *v1.ResourceIdRequest) (*v1.Project, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProject not implemented")
}
func (UnimplementedBackendServiceServer) ListProjects(context.Context, *ListProjectsRequest) (*ListProjectsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListProjects not implemented")
}
func (UnimplementedBackendServiceServer) UpdateProject(context.Context, *v1.Project) (*v1.Project, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProject not implemented")
}
func (UnimplementedBackendServiceServer) CreateUser(context.Context, *v1.User) (*v1.User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUser not implemented")
}
func (UnimplementedBackendServiceServer) CreateGoogleUser(context.Context, *v1.CreateGoogleUserRequest) (*v1.User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateGoogleUser not implemented")
}
func (UnimplementedBackendServiceServer) CreateMicrosoftUser(context.Context, *v1.CreateMicrosoftUserRequest) (*v1.User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMicrosoftUser not implemented")
}
func (UnimplementedBackendServiceServer) CreateUnverifiedUser(context.Context, *v1.CreateUnverifiedUserRequest) (*v1.User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUnverifiedUser not implemented")
}
func (UnimplementedBackendServiceServer) GetUser(context.Context, *v1.ResourceIdRequest) (*v1.User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUser not implemented")
}
func (UnimplementedBackendServiceServer) ListUsers(context.Context, *ListUsersRequest) (*ListUsersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUsers not implemented")
}
func (UnimplementedBackendServiceServer) UpdateUser(context.Context, *v1.User) (*v1.User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUser not implemented")
}
func (UnimplementedBackendServiceServer) UpdateUserPassword(context.Context, *UpdateUserPasswordRequest) (*v1.User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserPassword not implemented")
}
func (UnimplementedBackendServiceServer) mustEmbedUnimplementedBackendServiceServer() {}
func (UnimplementedBackendServiceServer) testEmbeddedByValue()                        {}

// UnsafeBackendServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BackendServiceServer will
// result in compilation errors.
type UnsafeBackendServiceServer interface {
	mustEmbedUnimplementedBackendServiceServer()
}

func RegisterBackendServiceServer(s grpc.ServiceRegistrar, srv BackendServiceServer) {
	// If the following call pancis, it indicates UnimplementedBackendServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&BackendService_ServiceDesc, srv)
}

func _BackendService_CreateOrganization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.Organization)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackendServiceServer).CreateOrganization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackendService_CreateOrganization_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackendServiceServer).CreateOrganization(ctx, req.(*v1.Organization))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackendService_GetOrganization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.ResourceIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackendServiceServer).GetOrganization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackendService_GetOrganization_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackendServiceServer).GetOrganization(ctx, req.(*v1.ResourceIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackendService_ListOrganizations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.ListOrganizationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackendServiceServer).ListOrganizations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackendService_ListOrganizations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackendServiceServer).ListOrganizations(ctx, req.(*v1.ListOrganizationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackendService_UpdateOrganization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.Organization)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackendServiceServer).UpdateOrganization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackendService_UpdateOrganization_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackendServiceServer).UpdateOrganization(ctx, req.(*v1.Organization))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackendService_CreateProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.CreateProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackendServiceServer).CreateProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackendService_CreateProject_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackendServiceServer).CreateProject(ctx, req.(*v1.CreateProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackendService_GetProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.ResourceIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackendServiceServer).GetProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackendService_GetProject_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackendServiceServer).GetProject(ctx, req.(*v1.ResourceIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackendService_ListProjects_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListProjectsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackendServiceServer).ListProjects(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackendService_ListProjects_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackendServiceServer).ListProjects(ctx, req.(*ListProjectsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackendService_UpdateProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.Project)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackendServiceServer).UpdateProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackendService_UpdateProject_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackendServiceServer).UpdateProject(ctx, req.(*v1.Project))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackendService_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackendServiceServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackendService_CreateUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackendServiceServer).CreateUser(ctx, req.(*v1.User))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackendService_CreateGoogleUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.CreateGoogleUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackendServiceServer).CreateGoogleUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackendService_CreateGoogleUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackendServiceServer).CreateGoogleUser(ctx, req.(*v1.CreateGoogleUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackendService_CreateMicrosoftUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.CreateMicrosoftUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackendServiceServer).CreateMicrosoftUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackendService_CreateMicrosoftUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackendServiceServer).CreateMicrosoftUser(ctx, req.(*v1.CreateMicrosoftUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackendService_CreateUnverifiedUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.CreateUnverifiedUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackendServiceServer).CreateUnverifiedUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackendService_CreateUnverifiedUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackendServiceServer).CreateUnverifiedUser(ctx, req.(*v1.CreateUnverifiedUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackendService_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.ResourceIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackendServiceServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackendService_GetUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackendServiceServer).GetUser(ctx, req.(*v1.ResourceIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackendService_ListUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackendServiceServer).ListUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackendService_ListUsers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackendServiceServer).ListUsers(ctx, req.(*ListUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackendService_UpdateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackendServiceServer).UpdateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackendService_UpdateUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackendServiceServer).UpdateUser(ctx, req.(*v1.User))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackendService_UpdateUserPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserPasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackendServiceServer).UpdateUserPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackendService_UpdateUserPassword_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackendServiceServer).UpdateUserPassword(ctx, req.(*UpdateUserPasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BackendService_ServiceDesc is the grpc.ServiceDesc for BackendService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BackendService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "backend.v1.BackendService",
	HandlerType: (*BackendServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateOrganization",
			Handler:    _BackendService_CreateOrganization_Handler,
		},
		{
			MethodName: "GetOrganization",
			Handler:    _BackendService_GetOrganization_Handler,
		},
		{
			MethodName: "ListOrganizations",
			Handler:    _BackendService_ListOrganizations_Handler,
		},
		{
			MethodName: "UpdateOrganization",
			Handler:    _BackendService_UpdateOrganization_Handler,
		},
		{
			MethodName: "CreateProject",
			Handler:    _BackendService_CreateProject_Handler,
		},
		{
			MethodName: "GetProject",
			Handler:    _BackendService_GetProject_Handler,
		},
		{
			MethodName: "ListProjects",
			Handler:    _BackendService_ListProjects_Handler,
		},
		{
			MethodName: "UpdateProject",
			Handler:    _BackendService_UpdateProject_Handler,
		},
		{
			MethodName: "CreateUser",
			Handler:    _BackendService_CreateUser_Handler,
		},
		{
			MethodName: "CreateGoogleUser",
			Handler:    _BackendService_CreateGoogleUser_Handler,
		},
		{
			MethodName: "CreateMicrosoftUser",
			Handler:    _BackendService_CreateMicrosoftUser_Handler,
		},
		{
			MethodName: "CreateUnverifiedUser",
			Handler:    _BackendService_CreateUnverifiedUser_Handler,
		},
		{
			MethodName: "GetUser",
			Handler:    _BackendService_GetUser_Handler,
		},
		{
			MethodName: "ListUsers",
			Handler:    _BackendService_ListUsers_Handler,
		},
		{
			MethodName: "UpdateUser",
			Handler:    _BackendService_UpdateUser_Handler,
		},
		{
			MethodName: "UpdateUserPassword",
			Handler:    _BackendService_UpdateUserPassword_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "backend/v1/backend.proto",
}
