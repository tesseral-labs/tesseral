// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: backend/v1/backend.proto

package backendv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/openauth-dev/openauth/internal/gen/backend/v1"
	v11 "github.com/openauth-dev/openauth/internal/gen/openauth/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// BackendServiceName is the fully-qualified name of the BackendService service.
	BackendServiceName = "backend.v1.BackendService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// BackendServiceCreateOrganizationProcedure is the fully-qualified name of the BackendService's
	// CreateOrganization RPC.
	BackendServiceCreateOrganizationProcedure = "/backend.v1.BackendService/CreateOrganization"
	// BackendServiceGetOrganizationProcedure is the fully-qualified name of the BackendService's
	// GetOrganization RPC.
	BackendServiceGetOrganizationProcedure = "/backend.v1.BackendService/GetOrganization"
	// BackendServiceListOrganizationsProcedure is the fully-qualified name of the BackendService's
	// ListOrganizations RPC.
	BackendServiceListOrganizationsProcedure = "/backend.v1.BackendService/ListOrganizations"
	// BackendServiceUpdateOrganizationProcedure is the fully-qualified name of the BackendService's
	// UpdateOrganization RPC.
	BackendServiceUpdateOrganizationProcedure = "/backend.v1.BackendService/UpdateOrganization"
	// BackendServiceCreateProjectProcedure is the fully-qualified name of the BackendService's
	// CreateProject RPC.
	BackendServiceCreateProjectProcedure = "/backend.v1.BackendService/CreateProject"
	// BackendServiceGetProjectProcedure is the fully-qualified name of the BackendService's GetProject
	// RPC.
	BackendServiceGetProjectProcedure = "/backend.v1.BackendService/GetProject"
	// BackendServiceListProjectsProcedure is the fully-qualified name of the BackendService's
	// ListProjects RPC.
	BackendServiceListProjectsProcedure = "/backend.v1.BackendService/ListProjects"
	// BackendServiceUpdateProjectProcedure is the fully-qualified name of the BackendService's
	// UpdateProject RPC.
	BackendServiceUpdateProjectProcedure = "/backend.v1.BackendService/UpdateProject"
	// BackendServiceCreateUserProcedure is the fully-qualified name of the BackendService's CreateUser
	// RPC.
	BackendServiceCreateUserProcedure = "/backend.v1.BackendService/CreateUser"
	// BackendServiceCreateGoogleUserProcedure is the fully-qualified name of the BackendService's
	// CreateGoogleUser RPC.
	BackendServiceCreateGoogleUserProcedure = "/backend.v1.BackendService/CreateGoogleUser"
	// BackendServiceCreateMicrosoftUserProcedure is the fully-qualified name of the BackendService's
	// CreateMicrosoftUser RPC.
	BackendServiceCreateMicrosoftUserProcedure = "/backend.v1.BackendService/CreateMicrosoftUser"
	// BackendServiceCreateUnverifiedUserProcedure is the fully-qualified name of the BackendService's
	// CreateUnverifiedUser RPC.
	BackendServiceCreateUnverifiedUserProcedure = "/backend.v1.BackendService/CreateUnverifiedUser"
	// BackendServiceGetUserProcedure is the fully-qualified name of the BackendService's GetUser RPC.
	BackendServiceGetUserProcedure = "/backend.v1.BackendService/GetUser"
	// BackendServiceListUsersProcedure is the fully-qualified name of the BackendService's ListUsers
	// RPC.
	BackendServiceListUsersProcedure = "/backend.v1.BackendService/ListUsers"
	// BackendServiceUpdateUserProcedure is the fully-qualified name of the BackendService's UpdateUser
	// RPC.
	BackendServiceUpdateUserProcedure = "/backend.v1.BackendService/UpdateUser"
	// BackendServiceUpdateUserPasswordProcedure is the fully-qualified name of the BackendService's
	// UpdateUserPassword RPC.
	BackendServiceUpdateUserPasswordProcedure = "/backend.v1.BackendService/UpdateUserPassword"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	backendServiceServiceDescriptor                    = v1.File_backend_v1_backend_proto.Services().ByName("BackendService")
	backendServiceCreateOrganizationMethodDescriptor   = backendServiceServiceDescriptor.Methods().ByName("CreateOrganization")
	backendServiceGetOrganizationMethodDescriptor      = backendServiceServiceDescriptor.Methods().ByName("GetOrganization")
	backendServiceListOrganizationsMethodDescriptor    = backendServiceServiceDescriptor.Methods().ByName("ListOrganizations")
	backendServiceUpdateOrganizationMethodDescriptor   = backendServiceServiceDescriptor.Methods().ByName("UpdateOrganization")
	backendServiceCreateProjectMethodDescriptor        = backendServiceServiceDescriptor.Methods().ByName("CreateProject")
	backendServiceGetProjectMethodDescriptor           = backendServiceServiceDescriptor.Methods().ByName("GetProject")
	backendServiceListProjectsMethodDescriptor         = backendServiceServiceDescriptor.Methods().ByName("ListProjects")
	backendServiceUpdateProjectMethodDescriptor        = backendServiceServiceDescriptor.Methods().ByName("UpdateProject")
	backendServiceCreateUserMethodDescriptor           = backendServiceServiceDescriptor.Methods().ByName("CreateUser")
	backendServiceCreateGoogleUserMethodDescriptor     = backendServiceServiceDescriptor.Methods().ByName("CreateGoogleUser")
	backendServiceCreateMicrosoftUserMethodDescriptor  = backendServiceServiceDescriptor.Methods().ByName("CreateMicrosoftUser")
	backendServiceCreateUnverifiedUserMethodDescriptor = backendServiceServiceDescriptor.Methods().ByName("CreateUnverifiedUser")
	backendServiceGetUserMethodDescriptor              = backendServiceServiceDescriptor.Methods().ByName("GetUser")
	backendServiceListUsersMethodDescriptor            = backendServiceServiceDescriptor.Methods().ByName("ListUsers")
	backendServiceUpdateUserMethodDescriptor           = backendServiceServiceDescriptor.Methods().ByName("UpdateUser")
	backendServiceUpdateUserPasswordMethodDescriptor   = backendServiceServiceDescriptor.Methods().ByName("UpdateUserPassword")
)

// BackendServiceClient is a client for the backend.v1.BackendService service.
type BackendServiceClient interface {
	// Creates an organization.
	CreateOrganization(context.Context, *connect.Request[v11.Organization]) (*connect.Response[v11.Organization], error)
	// Gets an organization.
	GetOrganization(context.Context, *connect.Request[v11.ResourceIdRequest]) (*connect.Response[v11.Organization], error)
	// Gets a list of organizations.
	ListOrganizations(context.Context, *connect.Request[v11.ListOrganizationsRequest]) (*connect.Response[v11.ListOrganizationsResponse], error)
	// Updates an organization.
	UpdateOrganization(context.Context, *connect.Request[v11.Organization]) (*connect.Response[v11.Organization], error)
	// Creates a project.
	CreateProject(context.Context, *connect.Request[v11.CreateProjectRequest]) (*connect.Response[v11.Project], error)
	// Gets a project.
	GetProject(context.Context, *connect.Request[v11.ResourceIdRequest]) (*connect.Response[v11.Project], error)
	// Gets a list of projects.
	ListProjects(context.Context, *connect.Request[v1.ListProjectsRequest]) (*connect.Response[v1.ListProjectsResponse], error)
	// Updates a project.
	UpdateProject(context.Context, *connect.Request[v11.Project]) (*connect.Response[v11.Project], error)
	// Creates a user.
	CreateUser(context.Context, *connect.Request[v11.User]) (*connect.Response[v11.User], error)
	// Creates a Google user.
	CreateGoogleUser(context.Context, *connect.Request[v11.CreateGoogleUserRequest]) (*connect.Response[v11.User], error)
	// Creates a Microsoft user.
	CreateMicrosoftUser(context.Context, *connect.Request[v11.CreateMicrosoftUserRequest]) (*connect.Response[v11.User], error)
	// Creates an unverified user.
	CreateUnverifiedUser(context.Context, *connect.Request[v11.CreateUnverifiedUserRequest]) (*connect.Response[v11.User], error)
	// Gets a user.
	GetUser(context.Context, *connect.Request[v11.ResourceIdRequest]) (*connect.Response[v11.User], error)
	// Gets a list of users.
	ListUsers(context.Context, *connect.Request[v1.ListUsersRequest]) (*connect.Response[v1.ListUsersResponse], error)
	// Updates a user.
	UpdateUser(context.Context, *connect.Request[v11.User]) (*connect.Response[v11.User], error)
	// Updates a user's password.
	UpdateUserPassword(context.Context, *connect.Request[v1.UpdateUserPasswordRequest]) (*connect.Response[v11.User], error)
}

// NewBackendServiceClient constructs a client for the backend.v1.BackendService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewBackendServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) BackendServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &backendServiceClient{
		createOrganization: connect.NewClient[v11.Organization, v11.Organization](
			httpClient,
			baseURL+BackendServiceCreateOrganizationProcedure,
			connect.WithSchema(backendServiceCreateOrganizationMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getOrganization: connect.NewClient[v11.ResourceIdRequest, v11.Organization](
			httpClient,
			baseURL+BackendServiceGetOrganizationProcedure,
			connect.WithSchema(backendServiceGetOrganizationMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		listOrganizations: connect.NewClient[v11.ListOrganizationsRequest, v11.ListOrganizationsResponse](
			httpClient,
			baseURL+BackendServiceListOrganizationsProcedure,
			connect.WithSchema(backendServiceListOrganizationsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		updateOrganization: connect.NewClient[v11.Organization, v11.Organization](
			httpClient,
			baseURL+BackendServiceUpdateOrganizationProcedure,
			connect.WithSchema(backendServiceUpdateOrganizationMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		createProject: connect.NewClient[v11.CreateProjectRequest, v11.Project](
			httpClient,
			baseURL+BackendServiceCreateProjectProcedure,
			connect.WithSchema(backendServiceCreateProjectMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getProject: connect.NewClient[v11.ResourceIdRequest, v11.Project](
			httpClient,
			baseURL+BackendServiceGetProjectProcedure,
			connect.WithSchema(backendServiceGetProjectMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		listProjects: connect.NewClient[v1.ListProjectsRequest, v1.ListProjectsResponse](
			httpClient,
			baseURL+BackendServiceListProjectsProcedure,
			connect.WithSchema(backendServiceListProjectsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		updateProject: connect.NewClient[v11.Project, v11.Project](
			httpClient,
			baseURL+BackendServiceUpdateProjectProcedure,
			connect.WithSchema(backendServiceUpdateProjectMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		createUser: connect.NewClient[v11.User, v11.User](
			httpClient,
			baseURL+BackendServiceCreateUserProcedure,
			connect.WithSchema(backendServiceCreateUserMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		createGoogleUser: connect.NewClient[v11.CreateGoogleUserRequest, v11.User](
			httpClient,
			baseURL+BackendServiceCreateGoogleUserProcedure,
			connect.WithSchema(backendServiceCreateGoogleUserMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		createMicrosoftUser: connect.NewClient[v11.CreateMicrosoftUserRequest, v11.User](
			httpClient,
			baseURL+BackendServiceCreateMicrosoftUserProcedure,
			connect.WithSchema(backendServiceCreateMicrosoftUserMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		createUnverifiedUser: connect.NewClient[v11.CreateUnverifiedUserRequest, v11.User](
			httpClient,
			baseURL+BackendServiceCreateUnverifiedUserProcedure,
			connect.WithSchema(backendServiceCreateUnverifiedUserMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getUser: connect.NewClient[v11.ResourceIdRequest, v11.User](
			httpClient,
			baseURL+BackendServiceGetUserProcedure,
			connect.WithSchema(backendServiceGetUserMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		listUsers: connect.NewClient[v1.ListUsersRequest, v1.ListUsersResponse](
			httpClient,
			baseURL+BackendServiceListUsersProcedure,
			connect.WithSchema(backendServiceListUsersMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		updateUser: connect.NewClient[v11.User, v11.User](
			httpClient,
			baseURL+BackendServiceUpdateUserProcedure,
			connect.WithSchema(backendServiceUpdateUserMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		updateUserPassword: connect.NewClient[v1.UpdateUserPasswordRequest, v11.User](
			httpClient,
			baseURL+BackendServiceUpdateUserPasswordProcedure,
			connect.WithSchema(backendServiceUpdateUserPasswordMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// backendServiceClient implements BackendServiceClient.
type backendServiceClient struct {
	createOrganization   *connect.Client[v11.Organization, v11.Organization]
	getOrganization      *connect.Client[v11.ResourceIdRequest, v11.Organization]
	listOrganizations    *connect.Client[v11.ListOrganizationsRequest, v11.ListOrganizationsResponse]
	updateOrganization   *connect.Client[v11.Organization, v11.Organization]
	createProject        *connect.Client[v11.CreateProjectRequest, v11.Project]
	getProject           *connect.Client[v11.ResourceIdRequest, v11.Project]
	listProjects         *connect.Client[v1.ListProjectsRequest, v1.ListProjectsResponse]
	updateProject        *connect.Client[v11.Project, v11.Project]
	createUser           *connect.Client[v11.User, v11.User]
	createGoogleUser     *connect.Client[v11.CreateGoogleUserRequest, v11.User]
	createMicrosoftUser  *connect.Client[v11.CreateMicrosoftUserRequest, v11.User]
	createUnverifiedUser *connect.Client[v11.CreateUnverifiedUserRequest, v11.User]
	getUser              *connect.Client[v11.ResourceIdRequest, v11.User]
	listUsers            *connect.Client[v1.ListUsersRequest, v1.ListUsersResponse]
	updateUser           *connect.Client[v11.User, v11.User]
	updateUserPassword   *connect.Client[v1.UpdateUserPasswordRequest, v11.User]
}

// CreateOrganization calls backend.v1.BackendService.CreateOrganization.
func (c *backendServiceClient) CreateOrganization(ctx context.Context, req *connect.Request[v11.Organization]) (*connect.Response[v11.Organization], error) {
	return c.createOrganization.CallUnary(ctx, req)
}

// GetOrganization calls backend.v1.BackendService.GetOrganization.
func (c *backendServiceClient) GetOrganization(ctx context.Context, req *connect.Request[v11.ResourceIdRequest]) (*connect.Response[v11.Organization], error) {
	return c.getOrganization.CallUnary(ctx, req)
}

// ListOrganizations calls backend.v1.BackendService.ListOrganizations.
func (c *backendServiceClient) ListOrganizations(ctx context.Context, req *connect.Request[v11.ListOrganizationsRequest]) (*connect.Response[v11.ListOrganizationsResponse], error) {
	return c.listOrganizations.CallUnary(ctx, req)
}

// UpdateOrganization calls backend.v1.BackendService.UpdateOrganization.
func (c *backendServiceClient) UpdateOrganization(ctx context.Context, req *connect.Request[v11.Organization]) (*connect.Response[v11.Organization], error) {
	return c.updateOrganization.CallUnary(ctx, req)
}

// CreateProject calls backend.v1.BackendService.CreateProject.
func (c *backendServiceClient) CreateProject(ctx context.Context, req *connect.Request[v11.CreateProjectRequest]) (*connect.Response[v11.Project], error) {
	return c.createProject.CallUnary(ctx, req)
}

// GetProject calls backend.v1.BackendService.GetProject.
func (c *backendServiceClient) GetProject(ctx context.Context, req *connect.Request[v11.ResourceIdRequest]) (*connect.Response[v11.Project], error) {
	return c.getProject.CallUnary(ctx, req)
}

// ListProjects calls backend.v1.BackendService.ListProjects.
func (c *backendServiceClient) ListProjects(ctx context.Context, req *connect.Request[v1.ListProjectsRequest]) (*connect.Response[v1.ListProjectsResponse], error) {
	return c.listProjects.CallUnary(ctx, req)
}

// UpdateProject calls backend.v1.BackendService.UpdateProject.
func (c *backendServiceClient) UpdateProject(ctx context.Context, req *connect.Request[v11.Project]) (*connect.Response[v11.Project], error) {
	return c.updateProject.CallUnary(ctx, req)
}

// CreateUser calls backend.v1.BackendService.CreateUser.
func (c *backendServiceClient) CreateUser(ctx context.Context, req *connect.Request[v11.User]) (*connect.Response[v11.User], error) {
	return c.createUser.CallUnary(ctx, req)
}

// CreateGoogleUser calls backend.v1.BackendService.CreateGoogleUser.
func (c *backendServiceClient) CreateGoogleUser(ctx context.Context, req *connect.Request[v11.CreateGoogleUserRequest]) (*connect.Response[v11.User], error) {
	return c.createGoogleUser.CallUnary(ctx, req)
}

// CreateMicrosoftUser calls backend.v1.BackendService.CreateMicrosoftUser.
func (c *backendServiceClient) CreateMicrosoftUser(ctx context.Context, req *connect.Request[v11.CreateMicrosoftUserRequest]) (*connect.Response[v11.User], error) {
	return c.createMicrosoftUser.CallUnary(ctx, req)
}

// CreateUnverifiedUser calls backend.v1.BackendService.CreateUnverifiedUser.
func (c *backendServiceClient) CreateUnverifiedUser(ctx context.Context, req *connect.Request[v11.CreateUnverifiedUserRequest]) (*connect.Response[v11.User], error) {
	return c.createUnverifiedUser.CallUnary(ctx, req)
}

// GetUser calls backend.v1.BackendService.GetUser.
func (c *backendServiceClient) GetUser(ctx context.Context, req *connect.Request[v11.ResourceIdRequest]) (*connect.Response[v11.User], error) {
	return c.getUser.CallUnary(ctx, req)
}

// ListUsers calls backend.v1.BackendService.ListUsers.
func (c *backendServiceClient) ListUsers(ctx context.Context, req *connect.Request[v1.ListUsersRequest]) (*connect.Response[v1.ListUsersResponse], error) {
	return c.listUsers.CallUnary(ctx, req)
}

// UpdateUser calls backend.v1.BackendService.UpdateUser.
func (c *backendServiceClient) UpdateUser(ctx context.Context, req *connect.Request[v11.User]) (*connect.Response[v11.User], error) {
	return c.updateUser.CallUnary(ctx, req)
}

// UpdateUserPassword calls backend.v1.BackendService.UpdateUserPassword.
func (c *backendServiceClient) UpdateUserPassword(ctx context.Context, req *connect.Request[v1.UpdateUserPasswordRequest]) (*connect.Response[v11.User], error) {
	return c.updateUserPassword.CallUnary(ctx, req)
}

// BackendServiceHandler is an implementation of the backend.v1.BackendService service.
type BackendServiceHandler interface {
	// Creates an organization.
	CreateOrganization(context.Context, *connect.Request[v11.Organization]) (*connect.Response[v11.Organization], error)
	// Gets an organization.
	GetOrganization(context.Context, *connect.Request[v11.ResourceIdRequest]) (*connect.Response[v11.Organization], error)
	// Gets a list of organizations.
	ListOrganizations(context.Context, *connect.Request[v11.ListOrganizationsRequest]) (*connect.Response[v11.ListOrganizationsResponse], error)
	// Updates an organization.
	UpdateOrganization(context.Context, *connect.Request[v11.Organization]) (*connect.Response[v11.Organization], error)
	// Creates a project.
	CreateProject(context.Context, *connect.Request[v11.CreateProjectRequest]) (*connect.Response[v11.Project], error)
	// Gets a project.
	GetProject(context.Context, *connect.Request[v11.ResourceIdRequest]) (*connect.Response[v11.Project], error)
	// Gets a list of projects.
	ListProjects(context.Context, *connect.Request[v1.ListProjectsRequest]) (*connect.Response[v1.ListProjectsResponse], error)
	// Updates a project.
	UpdateProject(context.Context, *connect.Request[v11.Project]) (*connect.Response[v11.Project], error)
	// Creates a user.
	CreateUser(context.Context, *connect.Request[v11.User]) (*connect.Response[v11.User], error)
	// Creates a Google user.
	CreateGoogleUser(context.Context, *connect.Request[v11.CreateGoogleUserRequest]) (*connect.Response[v11.User], error)
	// Creates a Microsoft user.
	CreateMicrosoftUser(context.Context, *connect.Request[v11.CreateMicrosoftUserRequest]) (*connect.Response[v11.User], error)
	// Creates an unverified user.
	CreateUnverifiedUser(context.Context, *connect.Request[v11.CreateUnverifiedUserRequest]) (*connect.Response[v11.User], error)
	// Gets a user.
	GetUser(context.Context, *connect.Request[v11.ResourceIdRequest]) (*connect.Response[v11.User], error)
	// Gets a list of users.
	ListUsers(context.Context, *connect.Request[v1.ListUsersRequest]) (*connect.Response[v1.ListUsersResponse], error)
	// Updates a user.
	UpdateUser(context.Context, *connect.Request[v11.User]) (*connect.Response[v11.User], error)
	// Updates a user's password.
	UpdateUserPassword(context.Context, *connect.Request[v1.UpdateUserPasswordRequest]) (*connect.Response[v11.User], error)
}

// NewBackendServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewBackendServiceHandler(svc BackendServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	backendServiceCreateOrganizationHandler := connect.NewUnaryHandler(
		BackendServiceCreateOrganizationProcedure,
		svc.CreateOrganization,
		connect.WithSchema(backendServiceCreateOrganizationMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	backendServiceGetOrganizationHandler := connect.NewUnaryHandler(
		BackendServiceGetOrganizationProcedure,
		svc.GetOrganization,
		connect.WithSchema(backendServiceGetOrganizationMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	backendServiceListOrganizationsHandler := connect.NewUnaryHandler(
		BackendServiceListOrganizationsProcedure,
		svc.ListOrganizations,
		connect.WithSchema(backendServiceListOrganizationsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	backendServiceUpdateOrganizationHandler := connect.NewUnaryHandler(
		BackendServiceUpdateOrganizationProcedure,
		svc.UpdateOrganization,
		connect.WithSchema(backendServiceUpdateOrganizationMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	backendServiceCreateProjectHandler := connect.NewUnaryHandler(
		BackendServiceCreateProjectProcedure,
		svc.CreateProject,
		connect.WithSchema(backendServiceCreateProjectMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	backendServiceGetProjectHandler := connect.NewUnaryHandler(
		BackendServiceGetProjectProcedure,
		svc.GetProject,
		connect.WithSchema(backendServiceGetProjectMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	backendServiceListProjectsHandler := connect.NewUnaryHandler(
		BackendServiceListProjectsProcedure,
		svc.ListProjects,
		connect.WithSchema(backendServiceListProjectsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	backendServiceUpdateProjectHandler := connect.NewUnaryHandler(
		BackendServiceUpdateProjectProcedure,
		svc.UpdateProject,
		connect.WithSchema(backendServiceUpdateProjectMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	backendServiceCreateUserHandler := connect.NewUnaryHandler(
		BackendServiceCreateUserProcedure,
		svc.CreateUser,
		connect.WithSchema(backendServiceCreateUserMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	backendServiceCreateGoogleUserHandler := connect.NewUnaryHandler(
		BackendServiceCreateGoogleUserProcedure,
		svc.CreateGoogleUser,
		connect.WithSchema(backendServiceCreateGoogleUserMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	backendServiceCreateMicrosoftUserHandler := connect.NewUnaryHandler(
		BackendServiceCreateMicrosoftUserProcedure,
		svc.CreateMicrosoftUser,
		connect.WithSchema(backendServiceCreateMicrosoftUserMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	backendServiceCreateUnverifiedUserHandler := connect.NewUnaryHandler(
		BackendServiceCreateUnverifiedUserProcedure,
		svc.CreateUnverifiedUser,
		connect.WithSchema(backendServiceCreateUnverifiedUserMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	backendServiceGetUserHandler := connect.NewUnaryHandler(
		BackendServiceGetUserProcedure,
		svc.GetUser,
		connect.WithSchema(backendServiceGetUserMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	backendServiceListUsersHandler := connect.NewUnaryHandler(
		BackendServiceListUsersProcedure,
		svc.ListUsers,
		connect.WithSchema(backendServiceListUsersMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	backendServiceUpdateUserHandler := connect.NewUnaryHandler(
		BackendServiceUpdateUserProcedure,
		svc.UpdateUser,
		connect.WithSchema(backendServiceUpdateUserMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	backendServiceUpdateUserPasswordHandler := connect.NewUnaryHandler(
		BackendServiceUpdateUserPasswordProcedure,
		svc.UpdateUserPassword,
		connect.WithSchema(backendServiceUpdateUserPasswordMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/backend.v1.BackendService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case BackendServiceCreateOrganizationProcedure:
			backendServiceCreateOrganizationHandler.ServeHTTP(w, r)
		case BackendServiceGetOrganizationProcedure:
			backendServiceGetOrganizationHandler.ServeHTTP(w, r)
		case BackendServiceListOrganizationsProcedure:
			backendServiceListOrganizationsHandler.ServeHTTP(w, r)
		case BackendServiceUpdateOrganizationProcedure:
			backendServiceUpdateOrganizationHandler.ServeHTTP(w, r)
		case BackendServiceCreateProjectProcedure:
			backendServiceCreateProjectHandler.ServeHTTP(w, r)
		case BackendServiceGetProjectProcedure:
			backendServiceGetProjectHandler.ServeHTTP(w, r)
		case BackendServiceListProjectsProcedure:
			backendServiceListProjectsHandler.ServeHTTP(w, r)
		case BackendServiceUpdateProjectProcedure:
			backendServiceUpdateProjectHandler.ServeHTTP(w, r)
		case BackendServiceCreateUserProcedure:
			backendServiceCreateUserHandler.ServeHTTP(w, r)
		case BackendServiceCreateGoogleUserProcedure:
			backendServiceCreateGoogleUserHandler.ServeHTTP(w, r)
		case BackendServiceCreateMicrosoftUserProcedure:
			backendServiceCreateMicrosoftUserHandler.ServeHTTP(w, r)
		case BackendServiceCreateUnverifiedUserProcedure:
			backendServiceCreateUnverifiedUserHandler.ServeHTTP(w, r)
		case BackendServiceGetUserProcedure:
			backendServiceGetUserHandler.ServeHTTP(w, r)
		case BackendServiceListUsersProcedure:
			backendServiceListUsersHandler.ServeHTTP(w, r)
		case BackendServiceUpdateUserProcedure:
			backendServiceUpdateUserHandler.ServeHTTP(w, r)
		case BackendServiceUpdateUserPasswordProcedure:
			backendServiceUpdateUserPasswordHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedBackendServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedBackendServiceHandler struct{}

func (UnimplementedBackendServiceHandler) CreateOrganization(context.Context, *connect.Request[v11.Organization]) (*connect.Response[v11.Organization], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("backend.v1.BackendService.CreateOrganization is not implemented"))
}

func (UnimplementedBackendServiceHandler) GetOrganization(context.Context, *connect.Request[v11.ResourceIdRequest]) (*connect.Response[v11.Organization], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("backend.v1.BackendService.GetOrganization is not implemented"))
}

func (UnimplementedBackendServiceHandler) ListOrganizations(context.Context, *connect.Request[v11.ListOrganizationsRequest]) (*connect.Response[v11.ListOrganizationsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("backend.v1.BackendService.ListOrganizations is not implemented"))
}

func (UnimplementedBackendServiceHandler) UpdateOrganization(context.Context, *connect.Request[v11.Organization]) (*connect.Response[v11.Organization], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("backend.v1.BackendService.UpdateOrganization is not implemented"))
}

func (UnimplementedBackendServiceHandler) CreateProject(context.Context, *connect.Request[v11.CreateProjectRequest]) (*connect.Response[v11.Project], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("backend.v1.BackendService.CreateProject is not implemented"))
}

func (UnimplementedBackendServiceHandler) GetProject(context.Context, *connect.Request[v11.ResourceIdRequest]) (*connect.Response[v11.Project], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("backend.v1.BackendService.GetProject is not implemented"))
}

func (UnimplementedBackendServiceHandler) ListProjects(context.Context, *connect.Request[v1.ListProjectsRequest]) (*connect.Response[v1.ListProjectsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("backend.v1.BackendService.ListProjects is not implemented"))
}

func (UnimplementedBackendServiceHandler) UpdateProject(context.Context, *connect.Request[v11.Project]) (*connect.Response[v11.Project], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("backend.v1.BackendService.UpdateProject is not implemented"))
}

func (UnimplementedBackendServiceHandler) CreateUser(context.Context, *connect.Request[v11.User]) (*connect.Response[v11.User], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("backend.v1.BackendService.CreateUser is not implemented"))
}

func (UnimplementedBackendServiceHandler) CreateGoogleUser(context.Context, *connect.Request[v11.CreateGoogleUserRequest]) (*connect.Response[v11.User], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("backend.v1.BackendService.CreateGoogleUser is not implemented"))
}

func (UnimplementedBackendServiceHandler) CreateMicrosoftUser(context.Context, *connect.Request[v11.CreateMicrosoftUserRequest]) (*connect.Response[v11.User], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("backend.v1.BackendService.CreateMicrosoftUser is not implemented"))
}

func (UnimplementedBackendServiceHandler) CreateUnverifiedUser(context.Context, *connect.Request[v11.CreateUnverifiedUserRequest]) (*connect.Response[v11.User], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("backend.v1.BackendService.CreateUnverifiedUser is not implemented"))
}

func (UnimplementedBackendServiceHandler) GetUser(context.Context, *connect.Request[v11.ResourceIdRequest]) (*connect.Response[v11.User], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("backend.v1.BackendService.GetUser is not implemented"))
}

func (UnimplementedBackendServiceHandler) ListUsers(context.Context, *connect.Request[v1.ListUsersRequest]) (*connect.Response[v1.ListUsersResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("backend.v1.BackendService.ListUsers is not implemented"))
}

func (UnimplementedBackendServiceHandler) UpdateUser(context.Context, *connect.Request[v11.User]) (*connect.Response[v11.User], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("backend.v1.BackendService.UpdateUser is not implemented"))
}

func (UnimplementedBackendServiceHandler) UpdateUserPassword(context.Context, *connect.Request[v1.UpdateUserPasswordRequest]) (*connect.Response[v11.User], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("backend.v1.BackendService.UpdateUserPassword is not implemented"))
}
