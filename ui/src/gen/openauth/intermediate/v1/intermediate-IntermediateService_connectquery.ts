// @generated by protoc-gen-connect-query v2.0.0 with parameter "target=ts"
// @generated from file openauth/intermediate/v1/intermediate.proto (package openauth.intermediate.v1, syntax proto3)
/* eslint-disable */

import { IntermediateService } from "./intermediate_pb";

/**
 * @generated from rpc openauth.intermediate.v1.IntermediateService.Whoami
 */
export const whoami = IntermediateService.method.whoami;

/**
 * @generated from rpc openauth.intermediate.v1.IntermediateService.ExchangeIntermediateSessionForSession
 */
export const exchangeIntermediateSessionForSession = IntermediateService.method.exchangeIntermediateSessionForSession;

/**
 * @generated from rpc openauth.intermediate.v1.IntermediateService.ExchangeIntermediateSessionForNewOrganizationSession
 */
export const exchangeIntermediateSessionForNewOrganizationSession = IntermediateService.method.exchangeIntermediateSessionForNewOrganizationSession;

/**
 * @generated from rpc openauth.intermediate.v1.IntermediateService.GetGoogleOAuthRedirectURL
 */
export const getGoogleOAuthRedirectURL = IntermediateService.method.getGoogleOAuthRedirectURL;

/**
 * @generated from rpc openauth.intermediate.v1.IntermediateService.RedeemGoogleOAuthCode
 */
export const redeemGoogleOAuthCode = IntermediateService.method.redeemGoogleOAuthCode;

/**
 * @generated from rpc openauth.intermediate.v1.IntermediateService.GetMicrosoftOAuthRedirectURL
 */
export const getMicrosoftOAuthRedirectURL = IntermediateService.method.getMicrosoftOAuthRedirectURL;

/**
 * @generated from rpc openauth.intermediate.v1.IntermediateService.RedeemMicrosoftOAuthCode
 */
export const redeemMicrosoftOAuthCode = IntermediateService.method.redeemMicrosoftOAuthCode;

/**
 * Creates a new organization.
 *
 * @generated from rpc openauth.intermediate.v1.IntermediateService.CreateOrganization
 */
export const createOrganization = IntermediateService.method.createOrganization;

/**
 * Issues a new email verification challenge.
 *
 * @generated from rpc openauth.intermediate.v1.IntermediateService.IssueEmailVerificationChallenge
 */
export const issueEmailVerificationChallenge = IntermediateService.method.issueEmailVerificationChallenge;

/**
 * Gets a list of organizations.
 *
 * @generated from rpc openauth.intermediate.v1.IntermediateService.ListOrganizations
 */
export const listOrganizations = IntermediateService.method.listOrganizations;

/**
 * Creates a new intermediate session or session and cookies the requester.
 *
 * @generated from rpc openauth.intermediate.v1.IntermediateService.SignInWithEmail
 */
export const signInWithEmail = IntermediateService.method.signInWithEmail;

/**
 * Submits a challenge for verification of email address.
 *
 * @generated from rpc openauth.intermediate.v1.IntermediateService.VerifyEmailChallenge
 */
export const verifyEmailChallenge = IntermediateService.method.verifyEmailChallenge;
